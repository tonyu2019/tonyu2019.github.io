<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Access-Control-Allow-Origin跨域问题</title>
    <url>/807b7587.html</url>
    <content><![CDATA[<p>日常开发中，特别是如今，前后端分离甚至是前后端不同域，这种情况下进行数据交换就会出现跨域问题。</p>
<p><code>Cross-Origin Resource Sharing</code>是允许客户端与托管在不同域上的<code>API</code>交互的机制。<code>CORS</code>的工作原理是要求服务器包含一组特定的标头信息，允许浏览器确定是否和何时允许跨域请求。</p>
<a id="more"></a>

<h2 id="ajax无法访问django接口"><a href="#ajax无法访问django接口" class="headerlink" title="ajax无法访问django接口"></a><code>ajax</code>无法访问<code>django</code>接口</h2><p>一般出现这种情况的很大可能是出现在本地开发环境，甚至有可能使用<code>pycharm</code>运行<code>django</code>导致的。本人刚遇到这种问题也是一脸懵逼，麻蛋，浏览器正常访问，怎么一用<code>ajax</code>就直接走<code>error</code>方法出现<code>network error</code>，百度了很久仍然没有遇到跟我一样情况的，感觉是跨域问题，愣是没找到解决办法，想来想去，终于毛瑟顿开。</p>
<p>分析下，正常<code>pycharm</code>运行我们的<code>django</code>项目是默认走得80端口，使用<code>127.0.0.1</code>。问题就是出现在这个<code>ip</code>上。</p>
<p><code>127.0.0.1</code>是回送地址，<code>localhost</code>是本地<code>DNS</code>解析的<code>127.0.0.1</code>的域名，在<code>hosts</code>文件里可以看到。</p>
<p>一般我们通过<code>ping 127.0.0.1</code>来测试本地网络是否正常。其实从<code>127.0.0.1~127.255.255.255</code>，这整个都是回环地址。这边还要</p>
<p>注意的一点就是<code>localhost</code>在了<code>IPV4</code>的是指<code>127.0.0.1</code>而<code>IPV6</code>是指<code>::1</code>。当我们在服务器搭建了一个web<code>服务</code>器的时候如果我们</p>
<p>监听的端口时<code>127.0.0.1：端口号</code> 的 时候，那么这个<code>web</code>服务器只可以在服务器本地访问了，在别的地方进行访问是不行的。</p>
<p>（<code>127.0.0.1</code>只可以在本地<code>ping</code>自己的，那么你监听这个就只可以在本地访问了）</p>
<p>  然后我们来讲讲<code>0.0.0.0</code>，如果我们直接<code>ping 0.0.0.0</code>是不行的，他在<code>IPV4</code>中表示的是无效的目标地址，但是在服务器端它表示</p>
<p>本机上的所有<code>IPV4</code>地址，如果一个服务有多个<code>IP</code>地址（<code>192.168.1.2</code>和<code>10.1.1.12</code>），那么我们如果设置的监听地址是<code>0.0.0.0</code>那</p>
<p>么我们无论是通过<code>IP192.168.1.2</code>还是<code>10.1.1.12</code>都是可以访问该服务的。在路由中，<code>0.0.0.0</code>表示的是默认路由，即当路由表中没有找到完全匹配的路由的时候所对应的路由。</p>
<p>如果以上内容把你说晕了，那么你就直接记住相让别人可以访问你那就绑定在<code>0.0.0.0</code>上，反之绑定在<code>127.0.0.1</code>上</p>
<p>所以修改下你的项目运行属性</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190823142133.png"></p>
<p>再次测试已经可以正常取到接口数据了，但是也许你会遇到下面这个新的问题。</p>
<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><div class="note danger"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#39;http:&#x2F;&#x2F;aaa.com&#x2F;api&#x2F;&#39; from origin &#39;http:&#x2F;&#x2F;bbb.com&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</span><br></pre></td></tr></table></figure></div>

<p>如果你的网站控制台出现了以下提示，很荣幸告诉你，你遇到跨域问题了。</p>
<p><code>Django REST framework</code>官方文档中是这样描述关于跨域问题的，同时官方也给出了两种解决方案：</p>
<h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><p>在<code>REST</code>框架中处理<code>CORS</code>的最佳方法是在中间件中添加所需的响应头信息。这样可以确保<code>CORS</code>得到透明支持，而无需更改视图中的任何行为。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cors_middleware.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareMixin</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, get_response=None</span>):</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        super(MiddlewareMixin, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">&#x27;process_request&#x27;</span>):</span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">            response = self.get_response(request)</span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">&#x27;process_response&#x27;</span>):</span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CORSMiddleware</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self,request,response</span>):</span></span><br><span class="line">        <span class="comment"># 添加响应头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 允许你的域名来获取我的数据</span></span><br><span class="line">        response[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 允许你携带Content-Type请求头</span></span><br><span class="line">        <span class="comment"># response[&#x27;Access-Control-Allow-Headers&#x27;] = &quot;Content-Type&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 允许你发送DELETE,PUT</span></span><br><span class="line">        <span class="comment"># response[&#x27;Access-Control-Allow-Methods&#x27;] = &quot;DELETE,PUT&quot;</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting.py</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;app1.cors_middleware.CORSMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="使用第三方包"><a href="#使用第三方包" class="headerlink" title="使用第三方包"></a>使用第三方包</h3><p><a href="https://github.com/ottoyiu/"><code>Otto Yiu</code></a>维护着能在<code>REST</code>框架搭建的<code>API</code>下正常使用的<code>django-cors-headers</code>包。</p>
<h4 id="安装第三方包"><a href="#安装第三方包" class="headerlink" title="安装第三方包"></a>安装第三方包</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<h4 id="配置安装包"><a href="#配置安装包" class="headerlink" title="配置安装包"></a>配置安装包</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">	...</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="配置中间件"><a href="#配置中间件" class="headerlink" title="配置中间件"></a>配置中间件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [  <span class="comment"># Or MIDDLEWARE_CLASSES on Django &lt; 1.10</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,<span class="comment">#放到中间件顶部</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="配置settings"><a href="#配置settings" class="headerlink" title="配置settings"></a>配置settings</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span> <span class="comment"># 允许任何域访问</span></span><br><span class="line"><span class="comment"># 或指定域/ip访问</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = [</span><br><span class="line">    <span class="string">&quot;https://example.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://sub.example.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">    <span class="string">&quot;127.0.0.1:9000&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 甚至可以使用正则限制域</span></span><br><span class="line">CORS_ORIGIN_REGEX_WHITELIST = [</span><br><span class="line">    <span class="string">r&quot;^https://\w+\.example\.com$&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 以上设置一个即可</span></span><br></pre></td></tr></table></figure>

<h4 id="其他常用参数"><a href="#其他常用参数" class="headerlink" title="其他常用参数"></a>其他常用参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在某些url上使用这个跨域中间件</span></span><br><span class="line">CORS_URLS_REGEX = <span class="string">r&#x27;^/api/.*$&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许的http请求</span></span><br><span class="line">CORS_ALLOW_METHODS = [</span><br><span class="line">    <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;OPTIONS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PATCH&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许的请求头</span></span><br><span class="line">CORS_ALLOW_HEADERS = [</span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-encoding&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;authorization&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dnt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-csrftoken&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Access-Control-Allow-Origin</tag>
        <tag>跨域</tag>
        <tag>django-cors-headers</tag>
        <tag>cors</tag>
        <tag>0.0.0.0</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF分页器组件</title>
    <url>/86ee5ba8.html</url>
    <content><![CDATA[<p>为了服务器性能考虑，也为了用户体验，我们不应该一次将所有的数据从数据库中查询出来，返回给客户端浏览器，如果数据量非常大，这对于服务器来讲，可以说是性能灾难，而对于用户来讲，加载速度将会非常慢。</p>
<p>所以，我们需要控制每次返回给客户端多少数据，这就需要用到分页器，接下来，我们一起来看看<code>DRF</code>的分页器组件。</p>
<a id="more"></a>

<h3 id="使用分页器的大概流程"><a href="#使用分页器的大概流程" class="headerlink" title="使用分页器的大概流程"></a>使用分页器的大概流程</h3><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><p><code>from rest_framework.pagination impot PageNumberPagination</code></p>
<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p><code>books = Book.objects.all()</code></p>
<h4 id="创建分页器对象"><a href="#创建分页器对象" class="headerlink" title="创建分页器对象"></a>创建分页器对象</h4><p><code>paginater = PageNumberPagination()</code></p>
<h4 id="开始分页"><a href="#开始分页" class="headerlink" title="开始分页"></a>开始分页</h4><p><code>paged_books = paginater.paginate_queryset(books, request)</code></p>
<h4 id="开始序列化"><a href="#开始序列化" class="headerlink" title="开始序列化"></a>开始序列化</h4><p><code>serialized_books = BooSerializer(paged_books, many = True)</code></p>
<h4 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h4><p><code>return Response(serialized_books.data)</code></p>
<h3 id="自定义分页器类"><a href="#自定义分页器类" class="headerlink" title="自定义分页器类"></a>自定义分页器类</h3><h4 id="新建分自定义分页器类文件"><a href="#新建分自定义分页器类文件" class="headerlink" title="新建分自定义分页器类文件"></a>新建分自定义分页器类文件</h4><p><code>app.untils.app_paginate.DrfPaginate</code>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrfPaginate</span>(<span class="params">PageNumberPagination</span>):</span></span><br><span class="line">    <span class="comment"># 用来控制每页显示多少条数据（全局参数名为PAGE_SIZE）；</span></span><br><span class="line">    page_size = <span class="number">3</span></span><br><span class="line">    <span class="comment"># 用来提供直接访问某页的数据；</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;p&#x27;</span></span><br><span class="line">    <span class="comment"># 控制page_size_query_param参数能调整的最大条数</span></span><br><span class="line">    max_page_size = <span class="number">5</span></span><br><span class="line">    <span class="comment"># 临时调整当前显示多少条数据</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="view视图引入自定义分页类"><a href="#view视图引入自定义分页类" class="headerlink" title="view视图引入自定义分页类"></a>view视图引入自定义分页类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入自定义分页类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.app_paginate <span class="keyword">import</span> DrfPaginate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在需要使用自定义分页类的接口中选择该分页类</span></span><br><span class="line">pagination_class = DrfPaginate</span><br></pre></td></tr></table></figure>

<h4 id="使用postman测试接口："><a href="#使用postman测试接口：" class="headerlink" title="使用postman测试接口："></a>使用postman测试接口：</h4><p><code>127.0.0.1:8000/books/?token=15bc0b77b5b942df9ff3b1f773fa2e21&amp;p=4&amp;size=1</code>结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;count&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;next&quot;</span>: <span class="string">&quot;127.0.0.1:8000/books/?p=5&amp;size=1&amp;token=15bc0b77b5b942df9ff3b1f773fa2e21&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;previous&quot;</span>: <span class="string">&quot;127.0.0.1:8000/books/?p=3&amp;size=1&amp;token=15bc0b77b5b942df9ff3b1f773fa2e21&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;results&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;坏蛋是怎样炼成的IVVVssV&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;price&quot;</span>: <span class="string">&quot;43.20&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;publish_name&quot;</span>: <span class="string">&quot;广州出版社&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;authors_list&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;张雪欧&quot;</span>,</span><br><span class="line">                <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">                <span class="string">&quot;梁朝伟&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>view整体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF token认证组件</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="comment"># from rest_framework.exceptions import APIException</span></span><br><span class="line"><span class="comment"># 引入响应解释器</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer, BrowsableAPIRenderer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入用户模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User <span class="keyword">as</span> UserModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> UserToken <span class="keyword">as</span> UserTokenModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Book <span class="keyword">as</span> BookModel</span><br><span class="line"><span class="keyword">from</span> app.untils <span class="keyword">import</span> get_token</span><br><span class="line"><span class="comment"># 引入自定义序列化类</span></span><br><span class="line"><span class="keyword">from</span> app.api_serialize <span class="keyword">import</span> BookSerialize</span><br><span class="line"><span class="comment"># 引入自定义认证类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.authentication <span class="keyword">import</span> UserAuth</span><br><span class="line"><span class="comment"># 引入自定义权限类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.permission <span class="keyword">import</span> UserPermission</span><br><span class="line"><span class="comment"># 引入自定义访问速率类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.app_throttle <span class="keyword">import</span> VisitThottle</span><br><span class="line"><span class="comment"># 引入自定义分页类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.app_paginate <span class="keyword">import</span> DrfPaginate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户登录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 定义一个返回字典</span></span><br><span class="line">        response = dict()</span><br><span class="line">        <span class="comment"># 定义一个接收数据字典</span></span><br><span class="line">        recev_data = &#123;<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 判断用户发送的post数据是否是要接受数据的子集，即用户发送的字段是否符合包含要接受的字段</span></span><br><span class="line">        <span class="keyword">if</span> recev_data.issubset(set(request.data)):</span><br><span class="line">            <span class="comment"># 接收用户发送符合要求的数据</span></span><br><span class="line">            userInfo = dict()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> recev_data:</span><br><span class="line">                userInfo[item] = request.data.get(item)</span><br><span class="line">            <span class="comment"># 查询是否有该用户</span></span><br><span class="line">            user_obj = UserModel.objects.filter(**userInfo).first()</span><br><span class="line">            <span class="comment"># 判断用户名密码是否正确</span></span><br><span class="line">            <span class="keyword">if</span> user_obj:</span><br><span class="line">                <span class="comment"># 生成access_token</span></span><br><span class="line">                access_token = get_token.generater_token()</span><br><span class="line">                <span class="comment"># 将生成的access_token写入数据表</span></span><br><span class="line">                UserTokenModel.objects.update_or_create(user=user_obj, defaults=&#123;</span><br><span class="line">                    <span class="string">&#x27;token&#x27;</span>:access_token</span><br><span class="line">                &#125;)</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;恭喜你，登录成功&#x27;</span></span><br><span class="line">                response[<span class="string">&#x27;access_token&#x27;</span>] = access_token</span><br><span class="line">                response[<span class="string">&#x27;user_role&#x27;</span>] = user_obj.get_level_display()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">201</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书籍列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset和自定义序列化类</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="comment"># 需要认证的类</span></span><br><span class="line">    <span class="comment"># authentication_classes = [UserAuth]</span></span><br><span class="line">    <span class="comment"># # 需要判断权限的类测试</span></span><br><span class="line">    <span class="comment"># permission_classes = [UserPermission]</span></span><br><span class="line">    <span class="comment"># 需要限制频率的组件类</span></span><br><span class="line">    <span class="comment"># throttle_classes = [VisitThottle]</span></span><br><span class="line">    <span class="comment"># 选择要使用的解释器</span></span><br><span class="line">    renderer_classes = [JSONRenderer]</span><br><span class="line">    <span class="comment"># 选择分页类</span></span><br><span class="line">    pagination_class = DrfPaginate</span><br></pre></td></tr></table></figure>

<p>如需全局使用，需要在setting文件中定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF全局认证</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 全局认证类</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27; : [&#x27;app.untils.authentication.UserAuth&#x27;],</span></span><br><span class="line">    <span class="comment"># 全局访问频率限制类</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span> : [<span class="string">&#x27;app.untils.app_throttle.VisitThottle&#x27;</span>],</span><br><span class="line">    <span class="comment"># 频率限制速率，每分钟3次</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span> : &#123;</span><br><span class="line">        <span class="string">&#x27;visit_rate&#x27;</span> : <span class="string">&#x27;3/m&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 定义全局分页参数</span></span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span> : <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>分页器</tag>
        <tag>Django</tag>
        <tag>DRF</tag>
        <tag>PageNumberPagination</tag>
        <tag>pagination</tag>
        <tag>paginate_queryset</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF响应器组件</title>
    <url>/60ef856a.html</url>
    <content><![CDATA[<p>我们使用<code>DRF</code>的<code>Response</code>类来将数据响应给客户端，不管是<code>POSTMAN</code>还是浏览器，都能浏览到经过格式化后的漂亮的数据，<code>DRF</code>是怎么做的呢？其实就是通过响应器组件</p>
<a id="more"></a>

<p>默认使用<code>postman</code>测试接口，返回的是<code>json</code>格式的数据，使用浏览器测试接口则相应的视图样式如下：</p>
<p><img data-src="/images/1563516998983.png" alt="1563516998983"></p>
<p>rest_framework其实默认使用了两个解释器<code>JSONRenderer</code>， <code>BrowsableAPIRenderer</code>对应着json数据和浏览器解释，如果你希望都返回json按以下操作即可:</p>
<h4 id="引入解释器"><a href="#引入解释器" class="headerlink" title="引入解释器"></a>引入解释器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入响应解释器from rest_framework.renderers import JSONRenderer, BrowsableAPIRenderer</span></span><br></pre></td></tr></table></figure>

<h4 id="接口中声明要使用的解释器"><a href="#接口中声明要使用的解释器" class="headerlink" title="接口中声明要使用的解释器"></a>接口中声明要使用的解释器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书籍列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset和自定义序列化类</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="comment"># 选择要使用的解释器</span></span><br><span class="line">    renderer_classes = [JSONRenderer]</span><br></pre></td></tr></table></figure>

<h4 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h4><p>无论使用浏览器还是<code>postman</code>，发现返回的都只是<code>json</code>数据了</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>DRF</tag>
        <tag>Django RestFrameWork</tag>
        <tag>响应器组件</tag>
        <tag>BrowsableAPIRenderer</tag>
        <tag>JSONRenderer</tag>
        <tag>renderer_classes</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF权限组件代码实现</title>
    <url>/e855bafb.html</url>
    <content><![CDATA[<p>权限类和认证类同样的逻辑，同样的方式，只是执行权限的方法名与执行认证的方法名不一样而已，名为<code>has_permission</code>，并且需要将当前的视图类传递给该方法。</p>
<a id="more"></a>

<p>创建自定义权限类</p>
<p>自定义类位置：<code>app.untils.permission.UserPermission</code></p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入restframework权限基类，可不引入</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPermission</span>(<span class="params">BaseException</span>):</span></span><br><span class="line">    <span class="comment"># 定义无权限访问提示语</span></span><br><span class="line">    message = <span class="string">&#x27;你没有该权限访问&#x27;</span></span><br><span class="line">    <span class="comment"># 判断用户权限</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="comment"># 获取用户等级，并判是否等级大2，则代表有权限，否则无权限</span></span><br><span class="line">        <span class="keyword">if</span> request.user.level&gt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>视图类中指定接口判断权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入自定义权限类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.permission <span class="keyword">import</span> UserPermission</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书籍列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset和自定义序列化类</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="comment"># 需要认证的类</span></span><br><span class="line">    authentication_classes = [UserAuth]</span><br><span class="line">    <span class="comment"># 需要判断权限的类测试</span></span><br><span class="line">    permission_classes = [UserPermission]</span><br></pre></td></tr></table></figure>

<p>使用<code>postman</code>测试改接口</p>
<p>测试接口地址：<code>127.0.0.1:8000/books?token=008b3809097c42d4a0ba9bf94a5532e6</code></p>
<p>如果该token不正确，则认证类就直接先拦截下来了，根本走不到权限类。如果token值正确，且对应的用户level小于3，接口响应内容为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;你没有该权限访问&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反之显示书籍列表</p>
<p>views.py所有代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF token认证组件</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="comment"># from rest_framework.exceptions import APIException</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入用户模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User <span class="keyword">as</span> UserModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> UserToken <span class="keyword">as</span> UserTokenModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Book <span class="keyword">as</span> BookModel</span><br><span class="line"><span class="keyword">from</span> app.untils <span class="keyword">import</span> get_token</span><br><span class="line"><span class="comment"># 引入自定义序列化类</span></span><br><span class="line"><span class="keyword">from</span> app.api_serialize <span class="keyword">import</span> BookSerialize</span><br><span class="line"><span class="comment"># 引入自定义认证类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.authentication <span class="keyword">import</span> UserAuth</span><br><span class="line"><span class="comment"># 引入自定义权限类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.permission <span class="keyword">import</span> UserPermission</span><br><span class="line"><span class="comment"># 用户登录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 定义一个返回字典</span></span><br><span class="line">        response = dict()</span><br><span class="line">        <span class="comment"># 定义一个接收数据字典</span></span><br><span class="line">        recev_data = &#123;<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 判断用户发送的post数据是否是要接受数据的子集，即用户发送的字段是否符合包含要接受的字段</span></span><br><span class="line">        <span class="keyword">if</span> recev_data.issubset(set(request.data)):</span><br><span class="line">            <span class="comment"># 接收用户发送符合要求的数据</span></span><br><span class="line">            userInfo = dict()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> recev_data:</span><br><span class="line">                userInfo[item] = request.data.get(item)</span><br><span class="line">            <span class="comment"># 查询是否有该用户</span></span><br><span class="line">            user_obj = UserModel.objects.filter(**userInfo).first()</span><br><span class="line">            <span class="comment"># 判断用户名密码是否正确</span></span><br><span class="line">            <span class="keyword">if</span> user_obj:</span><br><span class="line">                <span class="comment"># 生成access_token</span></span><br><span class="line">                access_token = get_token.generater_token()</span><br><span class="line">                <span class="comment"># 将生成的access_token写入数据表</span></span><br><span class="line">                UserTokenModel.objects.update_or_create(user=user_obj, defaults=&#123;</span><br><span class="line">                    <span class="string">&#x27;token&#x27;</span>:access_token</span><br><span class="line">                &#125;)</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;恭喜你，登录成功&#x27;</span></span><br><span class="line">                response[<span class="string">&#x27;access_token&#x27;</span>] = access_token</span><br><span class="line">                response[<span class="string">&#x27;user_role&#x27;</span>] = user_obj.get_level_display()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">201</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书籍列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset和自定义序列化类</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="comment"># 需要认证的类</span></span><br><span class="line">    authentication_classes = [UserAuth]</span><br><span class="line">    <span class="comment"># 需要判断权限的类测试</span></span><br><span class="line">    permission_classes = [UserPermission]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>DRF</tag>
        <tag>Django RestFrameWork</tag>
        <tag>token</tag>
        <tag>权限</tag>
        <tag>auth</tag>
        <tag>Permission</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF自定义用户token</title>
    <url>/d983e370.html</url>
    <content><![CDATA[<p>token认证的大致步骤是这样的：</p>
<ul>
<li><p>用户登录，服务器端获取用户名密码，查询用户表，如果存在该用户且第一次登录（或者token过期），生成token，否则返回错误信息</p>
</li>
<li><p>如果不是第一次登录，且token未过期，更新token值</p>
</li>
</ul>
<a id="more"></a>

<h2 id="创建model类"><a href="#创建model类" class="headerlink" title="创建model类"></a>创建model类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户等级</span></span><br><span class="line">level_entry=(</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;visitor&#x27;</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;member&#x27;</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;vip&#x27;</span>),</span><br><span class="line">    (<span class="number">4</span>, <span class="string">&#x27;svip&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 用户模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">25</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    password = models.CharField(<span class="string">&#x27;密码&#x27;</span>, max_length=<span class="number">32</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&#x27;姓名&#x27;</span>, max_length=<span class="number">25</span>)</span><br><span class="line">    age = models.IntegerField(<span class="string">&#x27;年龄&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    level = models.IntegerField(choices=level_entry)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 用户token模型，一对一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserToken</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    user = models.OneToOneField(User, on_delete=models.CASCADE)</span><br><span class="line">    token = models.CharField(<span class="string">&#x27;用户token&#x27;</span>, max_length=<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

<h2 id="接下来简单创建一个路由"><a href="#接下来简单创建一个路由" class="headerlink" title="接下来简单创建一个路由"></a>接下来简单创建一个路由</h2><p><code>path(&#39;login&#39;, UserView.as_view())</code><br>在until下创建get_token.py文件，写入生成token的辅助函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成token</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generater_token</span>():</span></span><br><span class="line">    token = str(uuid.uuid4()).replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> token</span><br></pre></td></tr></table></figure>

<h2 id="最后书写视图文件"><a href="#最后书写视图文件" class="headerlink" title="最后书写视图文件"></a>最后书写视图文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义token</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.untils <span class="keyword">import</span> get_token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入用户模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User <span class="keyword">as</span> UserModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> UserToken <span class="keyword">as</span> UserTokenModel</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 定义一个返回字典</span></span><br><span class="line">        response = dict()</span><br><span class="line">        <span class="comment"># 定义一个接收数据字典</span></span><br><span class="line">        recev_data = &#123;<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断用户发送的post数据是否是要接受数据的子集，即用户发送的字段是否符合包含要接受的字段</span></span><br><span class="line">        <span class="keyword">if</span> recev_data.issubset(set(request.data)):</span><br><span class="line">            <span class="comment"># 接收用户发送符合要求的数据</span></span><br><span class="line">            userInfo = dict()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> recev_data:</span><br><span class="line">                userInfo[item] = request.data.get(item)</span><br><span class="line">            <span class="comment"># 查询是否有该用户</span></span><br><span class="line">            user_obj = UserModel.objects.filter(**userInfo).first()</span><br><span class="line">            <span class="comment"># 判断用户名密码是否正确</span></span><br><span class="line">            <span class="keyword">if</span> user_obj:</span><br><span class="line">                <span class="comment"># 生成access_token</span></span><br><span class="line">                access_token = get_token.generater_token()</span><br><span class="line">                <span class="comment"># 将生成的access_token写入数据表</span></span><br><span class="line">                UserTokenModel.objects.update_or_create(user=user_obj, defaults=&#123;</span><br><span class="line">                    <span class="string">&#x27;token&#x27;</span>:access_token</span><br><span class="line">                &#125;)</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;恭喜你，登录成功&#x27;</span></span><br><span class="line">                response[<span class="string">&#x27;access_token&#x27;</span>] = access_token</span><br><span class="line">                response[<span class="string">&#x27;user_role&#x27;</span>] = user_obj.get_level_display()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">201</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(response)</span><br></pre></td></tr></table></figure>

<p>以上就是token的简单生成方式，当然，在生产环境中不会如此简单，关于token也有相关的库，好了，构造几条数据之后，可以通过POSTMAN工具来创建几个用户的token信息。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>DRF</tag>
        <tag>Django RestFrameWork</tag>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF视图组件使用</title>
    <url>/49e03a2.html</url>
    <content><![CDATA[<blockquote>
<p>每个接口都写到独立的类中，然后使用多继承，或者成为mixin的这种方式，就可以对我们的程序进行优化，mixin的方式非常常见，在学网络编程的时候，如果你看过socketserver源码，就会发现，socketserver中就有对mixin的实现，即，假设我们需要进程的时候，我们继承进程类，如果我们需要线程的时候，我们继承线程类即可</p>
</blockquote>
<p>所有使用视图组件代码如下，代码中已经很详细标了注释，故不再一一解释</p>
<a id="more"></a>

<h2 id="未使用视图组件的接口代码"><a href="#未使用视图组件的接口代码" class="headerlink" title="未使用视图组件的接口代码"></a>未使用视图组件的接口代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="comment"># rest_framework响应模块</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入书籍模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Book <span class="keyword">as</span> BookModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Authors <span class="keyword">as</span> AuthorsModel</span><br><span class="line"><span class="keyword">from</span> app.api_serialize <span class="keyword">import</span> BookSerialize</span><br><span class="line"></span><br><span class="line"><span class="comment"># Books视图类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 读取所有书籍</span></span><br><span class="line">        data = BookModel.objects.all()</span><br><span class="line">        <span class="comment"># 使用序列化类序列化书籍相关字段，many代表获取的是多条信息</span></span><br><span class="line">        serialize_data = BookSerialize(data, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 返回json数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(serialize_data.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 使用序列化模型接收用户提交的数据</span></span><br><span class="line">        verified_data = BookSerialize(data=request.data)</span><br><span class="line">        <span class="comment"># 验证是否填写</span></span><br><span class="line">        <span class="keyword">if</span> verified_data.is_valid():</span><br><span class="line">            <span class="comment"># 保存书籍及对应的作者</span></span><br><span class="line">            book = verified_data.save()</span><br><span class="line">            authors = AuthorsModel.objects.filter(pk__in = request.data[<span class="string">&#x27;authors&#x27;</span>])</span><br><span class="line">            book.authors.add(*authors)</span><br><span class="line">            <span class="comment"># 返回添加成功的书籍信息</span></span><br><span class="line">            <span class="keyword">return</span> Response(verified_data.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(verified_data.errors)</span><br><span class="line"></span><br><span class="line"><span class="comment"># BooksView视图类用来查询单条、修改单条、删除单条书籍</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, id</span>):</span></span><br><span class="line">        <span class="comment"># 查询该条数据</span></span><br><span class="line">        book = BookModel.objects.filter(pk=id).first()</span><br><span class="line">        verified_data = BookSerialize(book, many=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(verified_data.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, id</span>):</span></span><br><span class="line">        <span class="comment"># 查询单条书籍</span></span><br><span class="line">        book_obj = BookModel.objects.get(pk = id)</span><br><span class="line">        <span class="comment"># 实例化模型类接收书籍对象和修改数据</span></span><br><span class="line">        verified_data = BookSerialize(data=request.data, instance=book_obj, many=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 验证数据有效性</span></span><br><span class="line">        <span class="keyword">if</span> verified_data.is_valid():</span><br><span class="line">            <span class="comment"># 保存修改包括关联标的修改</span></span><br><span class="line">            verified_data.save()</span><br><span class="line">            <span class="keyword">return</span> Response(verified_data.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(verified_data.errors)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, id</span>):</span></span><br><span class="line">        book_obj = BookModel.objects.filter(pk = id).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="视图组件：主要用来优化接口逻辑"><a href="#视图组件：主要用来优化接口逻辑" class="headerlink" title="视图组件：主要用来优化接口逻辑"></a>视图组件：主要用来优化接口逻辑</h2><ol>
<li><h3 id="使用视图组件的mixin进行接口优化"><a href="#使用视图组件的mixin进行接口优化" class="headerlink" title="使用视图组件的mixin进行接口优化"></a>使用视图组件的mixin进行接口优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span>(</span><br><span class="line"></span><br><span class="line">ListModelMixin,</span><br><span class="line"></span><br><span class="line">CreateModelMixin,</span><br><span class="line"></span><br><span class="line">DestoryModelMixin,</span><br><span class="line"></span><br><span class="line">UpdateModelMixin,</span><br><span class="line"></span><br><span class="line">RetrieveModelMixin</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="comment"># 引入自定义序列化类</span></span><br><span class="line"><span class="keyword">from</span> app_serializer <span class="keyword">import</span> BookSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">ListModelMixin, CreateModelMixin, GenericAPIView</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    <span class="comment"># 设置自定义序列化类</span></span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># BooksView视图类用来查询单条、修改单条、删除单条书籍</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin, GenericAPIView</span>):</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<p>注意：如果使用默认的mixin，BooksView视图类对应的路由配置参数名必须为pk，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;books/&lt;int:pk&gt;&#x27;</span>, BooksView.as_view())</span><br></pre></td></tr></table></figure>

<p>另外：使用post和put时，header请求头中Content-type必须是：application/json，使用postman测试时也要配置content-type</p>
</li>
<li><h3 id="使用视图组件的view进行接口逻辑优化"><a href="#使用视图组件的view进行接口逻辑优化" class="headerlink" title="使用视图组件的view进行接口逻辑优化"></a>使用视图组件的view进行接口逻辑优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用视图组件view继续优化接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入书籍模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Book <span class="keyword">as</span> BookModel</span><br><span class="line"><span class="comment"># 引入自定义序列化类</span></span><br><span class="line"><span class="keyword">from</span> app.api_serialize <span class="keyword">import</span> BookSerialize</span><br><span class="line"></span><br><span class="line"><span class="comment"># Books视图类，查询列表、创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">generics.ListCreateAPIView</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    <span class="comment"># 设置自定义序列化类</span></span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line"><span class="comment"># BooksView视图类用来查询单条、修改单条、删除单条书籍</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">generics.RetrieveUpdateDestroyAPIView</span>):</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="使用视图组件的viewset进行接口逻辑优化"><a href="#使用视图组件的viewset进行接口逻辑优化" class="headerlink" title="使用视图组件的viewset进行接口逻辑优化"></a>使用视图组件的viewset进行接口逻辑优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py视图文件</span></span><br><span class="line"><span class="comment"># 使用视图组件viewset继续优化接口</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入书籍模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Book <span class="keyword">as</span> BookModel</span><br><span class="line"><span class="comment"># 引入自定义序列化类</span></span><br><span class="line"><span class="keyword">from</span> app.api_serialize <span class="keyword">import</span> BookSerialize</span><br><span class="line"></span><br><span class="line"><span class="comment"># Books视图类，查询列表、创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    <span class="comment"># 设置自定义序列化类</span></span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py路由文件</span></span><br><span class="line"><span class="comment"># 使用viewset组件定义url路由</span></span><br><span class="line">    path(<span class="string">&#x27;books&#x27;</span>, Books.as_view(&#123;</span><br><span class="line">        <span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;post&#x27;</span>:<span class="string">&#x27;create&#x27;</span></span><br><span class="line">    &#125;)),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:pk&gt;&#x27;</span>, Books.as_view(&#123;</span><br><span class="line">        <span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;retrieve&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;put&#x27;</span>:<span class="string">&#x27;update&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;delete&#x27;</span>:<span class="string">&#x27;destroy&#x27;</span></span><br><span class="line">    &#125;))</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>DRF</tag>
        <tag>Django RestFrameWork</tag>
        <tag>视图组件</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF认证组件使用流程</title>
    <url>/52bce651.html</url>
    <content><![CDATA[<p>如何对已经登录成功的用户实现访问授权，也就是说，只有登录过的用户（有token值）才能访问特定的数据，该DRF的认证组件出场了。</p>
<a id="more"></a>

<h3 id="DRF认证组件的使用方式"><a href="#DRF认证组件的使用方式" class="headerlink" title="DRF认证组件的使用方式"></a>DRF认证组件的使用方式</h3><h4 id="首先创建认证类"><a href="#首先创建认证类" class="headerlink" title="首先创建认证类"></a>首先创建认证类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义auth认证</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取用户请求携带的token</span></span><br><span class="line">            token = request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">            <span class="comment"># 查询数据表中是否存在该token</span></span><br><span class="line">            token_obj = UserTokenModel.objects.filter(token=token).first()</span><br><span class="line">            <span class="keyword">if</span> token_obj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 如果查询到数据表中查询到该token则返回此token和与此token对应的用户姓名</span></span><br><span class="line">                <span class="keyword">return</span> token_obj.user.name, token</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> APIException(<span class="string">&#x27;Token无效&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="keyword">raise</span> APIException(err)</span><br></pre></td></tr></table></figure>

<h4 id="其次在需认证接口中指定认证类"><a href="#其次在需认证接口中指定认证类" class="headerlink" title="其次在需认证接口中指定认证类"></a>其次在需认证接口中指定认证类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书籍列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset和自定义序列化类,及认证类</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    authentication_classes = [UserAuth]</span><br></pre></td></tr></table></figure>

<h3 id="DRF全局认证组件的使用方式"><a href="#DRF全局认证组件的使用方式" class="headerlink" title="DRF全局认证组件的使用方式"></a>DRF全局认证组件的使用方式</h3><h4 id="创建自定义认证类"><a href="#创建自定义认证类" class="headerlink" title="创建自定义认证类"></a>创建自定义认证类</h4><p>该类位置为：<code>app.untils.authentication.UserAuth</code>，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF认证组件之自定义认证类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DRF认证类基类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="comment"># DRF异常接口</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> APIException</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入token表模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> UserToken <span class="keyword">as</span> UserTokenModel</span><br><span class="line"></span><br><span class="line"><span class="comment"># token认证类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span>(<span class="params">BaseAuthentication</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取用户携带的token</span></span><br><span class="line">            token = request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">            <span class="comment"># 获取token对象</span></span><br><span class="line">            token_obj = UserTokenModel.objects.filter(token=token).first()</span><br><span class="line">            <span class="comment"># 判断是否能获取到token对象，存在返回对应用户对象及token，否则直接抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> token_obj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> token_obj.user, token</span><br><span class="line">            <span class="keyword">raise</span> APIException(<span class="string">&#x27;token无效&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">raise</span> APIException(<span class="string">&#x27;认证失败&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="修改setting文件"><a href="#修改setting文件" class="headerlink" title="修改setting文件"></a>修改setting文件</h4><p>setting中添加以下代码，多个认证类在<code>DEFAULT_AUTHENTICATION_CLASSES</code>列表中依次添加，且多个认证类如需返回数据只能在最后一个认证类中返回，否则后面的认证类将不再执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span> : [<span class="string">&#x27;app.untils.authentication.UserAuth&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最后整个views代码："><a href="#最后整个views代码：" class="headerlink" title="最后整个views代码："></a>最后整个views代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF token认证组件</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="comment"># from rest_framework.exceptions import APIException</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入用户模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User <span class="keyword">as</span> UserModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> UserToken <span class="keyword">as</span> UserTokenModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Book <span class="keyword">as</span> BookModel</span><br><span class="line"><span class="keyword">from</span> app.untils <span class="keyword">import</span> get_token</span><br><span class="line"><span class="comment"># 引入自定义序列化类</span></span><br><span class="line"><span class="keyword">from</span> app.api_serialize <span class="keyword">import</span> BookSerialize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义auth认证，该类提出到app.untils.authentication.UserAuth，故此处注释</span></span><br><span class="line"><span class="comment"># class UserAuth:</span></span><br><span class="line"><span class="comment">#     def authenticate_header(self, request):</span></span><br><span class="line"><span class="comment">#         pass</span></span><br><span class="line"><span class="comment">#     def authenticate(self, request):</span></span><br><span class="line"><span class="comment">#         try:</span></span><br><span class="line"><span class="comment">#             # 获取用户请求携带的token</span></span><br><span class="line"><span class="comment">#             token = request.GET.get(&#x27;token&#x27;)</span></span><br><span class="line"><span class="comment">#             # 查询数据表中是否存在该token</span></span><br><span class="line"><span class="comment">#             token_obj = UserTokenModel.objects.filter(token=token).first()</span></span><br><span class="line"><span class="comment">#             if token_obj is not None:</span></span><br><span class="line"><span class="comment">#                 # 如果查询到数据表中查询到该token则返回此token和与此token对应的用户姓名</span></span><br><span class="line"><span class="comment">#                 return token_obj.user.name, token</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 raise APIException(&#x27;Token无效&#x27;)</span></span><br><span class="line"><span class="comment">#         except Exception as err:</span></span><br><span class="line"><span class="comment">#             raise APIException(err)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户登录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 定义一个返回字典</span></span><br><span class="line">        response = dict()</span><br><span class="line">        <span class="comment"># 定义一个接收数据字典</span></span><br><span class="line">        recev_data = &#123;<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 判断用户发送的post数据是否是要接受数据的子集，即用户发送的字段是否符合包含要接受的字段</span></span><br><span class="line">        <span class="keyword">if</span> recev_data.issubset(set(request.data)):</span><br><span class="line">            <span class="comment"># 接收用户发送符合要求的数据</span></span><br><span class="line">            userInfo = dict()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> recev_data:</span><br><span class="line">                userInfo[item] = request.data.get(item)</span><br><span class="line">            <span class="comment"># 查询是否有该用户</span></span><br><span class="line">            user_obj = UserModel.objects.filter(**userInfo).first()</span><br><span class="line">            <span class="comment"># 判断用户名密码是否正确</span></span><br><span class="line">            <span class="keyword">if</span> user_obj:</span><br><span class="line">                <span class="comment"># 生成access_token</span></span><br><span class="line">                access_token = get_token.generater_token()</span><br><span class="line">                <span class="comment"># 将生成的access_token写入数据表</span></span><br><span class="line">                UserTokenModel.objects.update_or_create(user=user_obj, defaults=&#123;</span><br><span class="line">                    <span class="string">&#x27;token&#x27;</span>:access_token</span><br><span class="line">                &#125;)</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;恭喜你，登录成功&#x27;</span></span><br><span class="line">                response[<span class="string">&#x27;access_token&#x27;</span>] = access_token</span><br><span class="line">                response[<span class="string">&#x27;user_role&#x27;</span>] = user_obj.get_level_display()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">201</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书籍列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset和自定义序列化类</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="comment"># setting中已注册全局认证，此处注释</span></span><br><span class="line">    <span class="comment"># authentication_classes = [UserAuth]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>DRF</tag>
        <tag>Django RestFrameWork</tag>
        <tag>token</tag>
        <tag>auth</tag>
        <tag>认证</tag>
        <tag>authentication</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF路由注册器组件</title>
    <url>/2e5c607.html</url>
    <content><![CDATA[<p>通过DRF的视图组件，数据接口逻辑被我们优化到最剩下一个类，接下来，我们使用DRF的url控制器来帮助我们自动生成url，使用步骤如下</p>
<a id="more"></a>

<p>本人习惯单独功能的代码写到一个文件中，看个人喜好</p>
<h3 id="创建自定义路由组件器文件"><a href="#创建自定义路由组件器文件" class="headerlink" title="创建自定义路由组件器文件"></a>创建自定义路由组件器文件</h3><p><code>app.untils.drf_route_url.router</code>，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入rest_framework的路由模块</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 实例化router对象</span></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将需要生成url的接口注册到router中</span></span><br><span class="line"><span class="comment"># router.register(&#x27;books&#x27;, views.BooksView)</span></span><br><span class="line"><span class="comment"># 前缀是否带r都可以正常使用</span></span><br><span class="line">router.register(<span class="string">r&#x27;books&#x27;</span>, views.BooksView)</span><br></pre></td></tr></table></figure>

<h3 id="url中引入自定有路由足见器"><a href="#url中引入自定有路由足见器" class="headerlink" title="url中引入自定有路由足见器"></a>url中引入自定有路由足见器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from app.untils.drf_route_url import router</span><br><span class="line"></span><br><span class="line"># path(&#39;&#39;, include(router.urls))</span><br><span class="line"># 官方定义的写法，用上面的path也是可以的</span><br><span class="line">re_path(r&#39;^&#39;, include(router.urls))</span><br></pre></td></tr></table></figure>

<h3 id="使用postman测试"><a href="#使用postman测试" class="headerlink" title="使用postman测试"></a>使用postman测试</h3><p>本人使用了viewset组件，经测试增删改查均可</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>DRF</tag>
        <tag>Django RestFrameWork</tag>
        <tag>路由</tag>
        <tag>url</tag>
        <tag>路由注册器</tag>
        <tag>url注册器</tag>
        <tag>DRF注册器</tag>
        <tag>注册器组件</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF频率组件的使用方式</title>
    <url>/8c6a0357.html</url>
    <content><![CDATA[<p>DRF频率组件与上面两个组件也是几乎一样，只是用来做判断的逻辑不一样而已，下面使用自定义方式实现对ip地址进行访问频率控制</p>
<a id="more"></a>

<h2 id="局部频率组件"><a href="#局部频率组件" class="headerlink" title="局部频率组件"></a>局部频率组件</h2><h3 id="自定义频率组件类"><a href="#自定义频率组件类" class="headerlink" title="自定义频率组件类"></a>自定义频率组件类</h3><p>组件类位置：<code>app.untils.app_throttle.VisitThottle</code></p>
<p>组件类代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入Throttle类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitThottle</span>(<span class="params">SimpleRateThrottle</span>):</span></span><br><span class="line">    <span class="comment"># 设定访问速度每分钟5次</span></span><br><span class="line">    rate = <span class="string">&#x27;5/m&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.get_ident(request)</span><br></pre></td></tr></table></figure>

<p>rate代表访问评率，上面表示每分钟五次，get_cache_key是必须存在的，它的返回值告诉当前频率控制组件要使用什么方式区分访问者（比如ip地址）。</p>
<h3 id="引入自定义频率组件类"><a href="#引入自定义频率组件类" class="headerlink" title="引入自定义频率组件类"></a>引入自定义频率组件类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入自定义访问速率类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.app_throttle <span class="keyword">import</span> VisitThottle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书籍列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset和自定义序列化类</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="comment"># 需要认证的类</span></span><br><span class="line">    authentication_classes = [UserAuth]</span><br><span class="line">    <span class="comment"># 需要判断权限的类测试</span></span><br><span class="line">    permission_classes = [UserPermission]</span><br><span class="line">    <span class="comment"># 需要限制频率的组件类</span></span><br><span class="line">    throttle_classes = [VisitThottle]</span><br></pre></td></tr></table></figure>

<h3 id="使用postman接口测试"><a href="#使用postman接口测试" class="headerlink" title="使用postman接口测试"></a>使用postman接口测试</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 如果一分钟访问超过5次，响应内容如下：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;Request was throttled. Expected available in 59 seconds.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="view-py所有代码"><a href="#view-py所有代码" class="headerlink" title="view.py所有代码"></a>view.py所有代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF组件</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="comment"># from rest_framework.exceptions import APIException</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入用户模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User <span class="keyword">as</span> UserModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> UserToken <span class="keyword">as</span> UserTokenModel</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Book <span class="keyword">as</span> BookModel</span><br><span class="line"><span class="keyword">from</span> app.untils <span class="keyword">import</span> get_token</span><br><span class="line"><span class="comment"># 引入自定义序列化类</span></span><br><span class="line"><span class="keyword">from</span> app.api_serialize <span class="keyword">import</span> BookSerialize</span><br><span class="line"><span class="comment"># 引入自定义认证类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.authentication <span class="keyword">import</span> UserAuth</span><br><span class="line"><span class="comment"># 引入自定义权限类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.permission <span class="keyword">import</span> UserPermission</span><br><span class="line"><span class="comment"># 引入自定义访问速率类</span></span><br><span class="line"><span class="keyword">from</span> app.untils.app_throttle <span class="keyword">import</span> VisitThottle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户登录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 定义一个返回字典</span></span><br><span class="line">        response = dict()</span><br><span class="line">        <span class="comment"># 定义一个接收数据字典</span></span><br><span class="line">        recev_data = &#123;<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 判断用户发送的post数据是否是要接受数据的子集，即用户发送的字段是否符合包含要接受的字段</span></span><br><span class="line">        <span class="keyword">if</span> recev_data.issubset(set(request.data)):</span><br><span class="line">            <span class="comment"># 接收用户发送符合要求的数据</span></span><br><span class="line">            userInfo = dict()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> recev_data:</span><br><span class="line">                userInfo[item] = request.data.get(item)</span><br><span class="line">            <span class="comment"># 查询是否有该用户</span></span><br><span class="line">            user_obj = UserModel.objects.filter(**userInfo).first()</span><br><span class="line">            <span class="comment"># 判断用户名密码是否正确</span></span><br><span class="line">            <span class="keyword">if</span> user_obj:</span><br><span class="line">                <span class="comment"># 生成access_token</span></span><br><span class="line">                access_token = get_token.generater_token()</span><br><span class="line">                <span class="comment"># 将生成的access_token写入数据表</span></span><br><span class="line">                UserTokenModel.objects.update_or_create(user=user_obj, defaults=&#123;</span><br><span class="line">                    <span class="string">&#x27;token&#x27;</span>:access_token</span><br><span class="line">                &#125;)</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;恭喜你，登录成功&#x27;</span></span><br><span class="line">                response[<span class="string">&#x27;access_token&#x27;</span>] = access_token</span><br><span class="line">                response[<span class="string">&#x27;user_role&#x27;</span>] = user_obj.get_level_display()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                response[<span class="string">&#x27;status_code&#x27;</span>] = <span class="number">201</span></span><br><span class="line">                response[<span class="string">&#x27;status_message&#x27;</span>] = <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书籍列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="comment"># 设置queryset和自定义序列化类</span></span><br><span class="line">    queryset = BookModel.objects.all()</span><br><span class="line">    serializer_class = BookSerialize</span><br><span class="line">    <span class="comment"># 需要认证的类</span></span><br><span class="line">    authentication_classes = [UserAuth]</span><br><span class="line">    <span class="comment"># 需要判断权限的类测试</span></span><br><span class="line">    permission_classes = [UserPermission]</span><br><span class="line">    <span class="comment"># 需要限制频率的组件类</span></span><br><span class="line">    throttle_classes = [VisitThottle]</span><br></pre></td></tr></table></figure>

<h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><h3 id="创建自定义频率类"><a href="#创建自定义频率类" class="headerlink" title="创建自定义频率类"></a>创建自定义频率类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入Throttle类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitThottle</span>(<span class="params">SimpleRateThrottle</span>):</span></span><br><span class="line">    <span class="comment"># 设定访问速度每分钟5次</span></span><br><span class="line">    <span class="comment"># rate = &#x27;5/m&#x27;</span></span><br><span class="line">    <span class="comment"># 访问速率名称，setting中定义</span></span><br><span class="line">    scope = <span class="string">&#x27;visit_rate&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.get_ident(request)</span><br></pre></td></tr></table></figure>

<h3 id="setting配置全局限制频率"><a href="#setting配置全局限制频率" class="headerlink" title="setting配置全局限制频率"></a>setting配置全局限制频率</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF全局认证</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 全局认证类</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27; : [&#x27;app.untils.authentication.UserAuth&#x27;],</span></span><br><span class="line">    <span class="comment"># 全局访问频率限制类</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span> : [<span class="string">&#x27;app.untils.app_throttle.VisitThottle&#x27;</span>],</span><br><span class="line">    <span class="comment"># 频率限制速率，每分钟3次</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span> : &#123;</span><br><span class="line">        <span class="string">&#x27;visit_rate&#x27;</span> : <span class="string">&#x27;3/m&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用postman接口测试-1"><a href="#使用postman接口测试-1" class="headerlink" title="使用postman接口测试"></a>使用postman接口测试</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 如果一分钟访问超过5次，响应内容如下：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;Request was throttled. Expected available in 59 seconds.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="超过速率修改响应消息："><a href="#超过速率修改响应消息：" class="headerlink" title="超过速率修改响应消息："></a>超过速率修改响应消息：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span>(<span class="params">exceptions.Throttled</span>):</span></span><br><span class="line">    default_detail = <span class="string">&#x27;连接次数过多&#x27;</span></span><br><span class="line">    extra_detail_plural = extra_detail_singular = <span class="string">&#x27;请在&#123;wait&#125;秒内访问&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, wait=None, detail=None, code=None</span>):</span></span><br><span class="line">        super().__init__(wait=wait, detail=detail, code=code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitThrottle</span>():</span></span><br><span class="line">    user_visit_information = dict()</span><br><span class="line">    visited_times = <span class="number">1</span></span><br><span class="line">    period = <span class="number">60</span></span><br><span class="line">    allow_times_per_minute = <span class="number">5</span></span><br><span class="line">    first_time_visit = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        self.request_host = request_host = request.META.get(<span class="string">&quot;REMOTE_ADDR&quot;</span>)</span><br><span class="line">        current_user_info = self.user_visit_information.get(request_host, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__class__.first_time_visit:</span><br><span class="line">            self.user_visit_information[request_host][<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">            current_visit_times = self.user_visit_information[request_host][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current_visit_times &gt; self.allow_times_per_minute:</span><br><span class="line">                <span class="keyword">if</span> self._current_time - current_user_info[<span class="number">1</span>] &lt;= self.period:</span><br><span class="line">                    <span class="keyword">if</span> len(current_user_info) &gt; <span class="number">2</span>:</span><br><span class="line">                        current_user_info[<span class="number">2</span>] = self._time_left</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        current_user_info.append(self._time_left)</span><br><span class="line"></span><br><span class="line">                    view.throttled = self.throttled</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.__class__.first_time_visit = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.first_time_visit:</span><br><span class="line">            self.__class__.first_time_visit = <span class="literal">False</span></span><br><span class="line">            self._initial_infomation()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.period - self.user_visit_information[self.request_host][<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttled</span>(<span class="params">self, request, wait</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> MyException(wait=wait)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_current_time</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> time.time()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_time_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> math.floor(self._current_time - self.user_visit_information.get(self.request_host)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initial_infomation</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.user_visit_information[self.request_host] = [self.visited_times, self._current_time]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>DRF</tag>
        <tag>Django RestFrameWork</tag>
        <tag>token</tag>
        <tag>authentication</tag>
        <tag>频率</tag>
        <tag>throttles</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin下安装Docker</title>
    <url>/bce2e291.html</url>
    <content><![CDATA[<p><code>Deepin</code> 官方的应用仓库已经集成了 <code>docker</code>，但不是类似于 <code>docker-ce</code> 这样的最新版本。由于 <code>Deepin</code> 是基于 <code>debian</code> 的 <code>unstable</code> 版本开发的，通过 <code>$(lsb_release -cs)</code> 获取到的版本信息为 <strong><code>unstable</code>**，而 <code>docker</code> 官方源并没支持 <code>debian</code> 的 **<code>unstable</code></strong> 版本，因此使用 <code>docker</code> 官方教程是安装不成功的。如果你需要安装 <code>docker-ce</code>，请遵循下面的步骤进行安装：</p>
<a id="more"></a>

<h2 id="如果以前安装过老版本，要确保先卸载以前版本"><a href="#如果以前安装过老版本，要确保先卸载以前版本" class="headerlink" title="如果以前安装过老版本，要确保先卸载以前版本"></a><u>如果以前安装过老版本</u>，要确保先卸载以前版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker.io docker-engine</span><br></pre></td></tr></table></figure>

<p>安装密钥管理与下载相关的工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;&#x2F; 密钥管理（add-apt-repository ca-certificates 等）与下载（curl 等）相关的工具</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common</span><br></pre></td></tr></table></figure>

<h2 id="下载并安装密钥"><a href="#下载并安装密钥" class="headerlink" title="下载并安装密钥"></a>下载并安装密钥</h2><blockquote>
<p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。</p>
</blockquote>
<p>国内源可选用<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvZG9ja2VyLWNlLw==">清华大学开源软件镜像站<i class="fa fa-external-link-alt"></i></span>或<span class="exturl" data-url="aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24v">中科大开源镜像站<i class="fa fa-external-link-alt"></i></span>，示例选用了中科大的。</p>
<p>为了确认所下载软件包的合法性，需要添加软件源的 <code>GPG</code> 密钥。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br><span class="line">&#x2F;&#x2F; 官方源，能否成功可能需要看运气。</span><br><span class="line">&#x2F;&#x2F; curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<h2 id="查看密钥是否安装成功"><a href="#查看密钥是否安装成功" class="headerlink" title="查看密钥是否安装成功"></a>查看密钥是否安装成功</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>

<p>如果安装成功，会出现如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pub   4096R&#x2F;0EBFCD88 2017-02-22              Key fingerprint &#x3D; 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88  </span><br><span class="line">uid     Docker Release (CE deb) &lt;docker@docker.com&gt;  </span><br><span class="line">sub   4096R&#x2F;F273FCD8 2017-02-22</span><br></pre></td></tr></table></figure>

<p>在 <code>source.list</code> 中添加 <code>docker-ce</code> 软件源（请先查看后面的 **<code>Note</code>**）： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;debian stretch stable“</span><br><span class="line">&#x2F;&#x2F; 官方源</span><br><span class="line">&#x2F;&#x2F; sudo add-apt-repository  &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian stretch stable&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 15.10 会提示  aptsources.distro.NoDistroTemplateException: Error: could not find a distribution template for Deepin&#x2F;stable</span><br><span class="line">&#x2F;&#x2F; 这里我们通过编辑 sudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list 添加一行即可，原因未知</span><br><span class="line">deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;debian stretch stable</span><br></pre></td></tr></table></figure>

<p><strong>Note：</strong> <code>deepin</code>官方提供的流程，也许是官方没有说清楚，也许是本人小白看不明白，官方说的是将以下代码添加至<code>source.list</code>中，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;debian stretch stable&quot;</span><br></pre></td></tr></table></figure>

<p>实际执行中发现不是报<code>sudo</code>错就是<code>add-apt-repository</code>的错，结合<code>source.list</code>原有代码揣测我们其实只需要引号中的部分即可，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;debian stretch stable</span><br></pre></td></tr></table></figure>

<h2 id="更新仓库"><a href="#更新仓库" class="headerlink" title="更新仓库"></a>更新仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="安装-docker-ce"><a href="#安装-docker-ce" class="headerlink" title="安装 docker-ce"></a>安装 <code>docker-ce</code></h2><p>由于网络不稳定，可能会下载失败。如果下载失败了，可以多试几次或者找个合适的时间继续。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<h2 id="启动-docker："><a href="#启动-docker：" class="headerlink" title="启动 docker："></a>启动 <code>docker</code>：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="查看安装的版本信息"><a href="#查看安装的版本信息" class="headerlink" title="查看安装的版本信息"></a>查看安装的版本信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h2 id="验证-docker-是否被正确安装并且能够正常使用"><a href="#验证-docker-是否被正确安装并且能够正常使用" class="headerlink" title="验证 docker 是否被正确安装并且能够正常使用"></a>验证 <code>docker</code> 是否被正确安装并且能够正常使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>如果能够正常下载，并能够正常执行，则说明 <code>docker</code> 正常安装。</p>
<h2 id="让普通用户也能运行-docker"><a href="#让普通用户也能运行-docker" class="headerlink" title="让普通用户也能运行 docker"></a>让普通用户也能运行 docker</h2><p>默认情况下，普通用户运行 <code>docker</code> 会有权限问题，每次运行都得加 <code>sudo</code>，很麻烦。把你的账号加到 docker 用户组后就不用加 <code>sudo</code> 了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>

<p>然后注销用户重新登录即可。</p>
<p>内容参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmRlZXBpbi5vcmcvd2lraS9Eb2NrZXI=">https://wiki.deepin.org/wiki/Docker<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmRlZXBpbi5vcmcvaW5kZXgucGhwP3RpdGxlPURvY2tlciZhbXA7b2xkaWQ9MTEzMQ==">https://wiki.deepin.org/index.php?title=Docker&amp;oldid=1131<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Deepin下安装Docker</tag>
        <tag>apt-get Docker</tag>
        <tag>deepin docker</tag>
        <tag>docker</tag>
        <tag>docker安装</tag>
        <tag>Deepin/stable</tag>
        <tag>not find</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin开启SSH服务</title>
    <url>/1bc458a9.html</url>
    <content><![CDATA[<p>深度出的<code>Deepin</code>界面优美，作为一个没钱买mac的程序猿来说，这个系统可以替代本地<code>linux</code> 开发环境测试编程用了，安装好系统测试局域网<code>ssh</code>链接，直接提示连接失败，因为系统还没有安装<code>ssh</code>服务。</p>
<a id="more"></a>

<h3 id="1、安装SSH服务"><a href="#1、安装SSH服务" class="headerlink" title="1、安装SSH服务"></a>1、安装SSH服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">apt<span class="literal">-get</span> install openssh<span class="literal">-server</span></span><br></pre></td></tr></table></figure>

<h3 id="2、配置端口"><a href="#2、配置端口" class="headerlink" title="2、配置端口"></a>2、配置端口</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">gedit /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>port 22 处即为修改端口的地方，默认不修改也可。</p>
<h3 id="3、重启SSH服务端"><a href="#3、重启SSH服务端" class="headerlink" title="3、重启SSH服务端"></a>3、重启SSH服务端</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh <span class="built_in">start</span> 或者 service ssh <span class="built_in">start</span></span><br></pre></td></tr></table></figure>

<h3 id="4、使用xshell工具连接"><a href="#4、使用xshell工具连接" class="headerlink" title="4、使用xshell工具连接"></a>4、使用<code>xshell</code>工具连接</h3><p>配置好住账号（<code>Linux</code>用户名）、密码、端口，点击连接就可以连上了！</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Deepin ssh</tag>
        <tag>linux ssh</tag>
        <tag>sudo</tag>
        <tag>openssh</tag>
        <tag>gedit</tag>
      </tags>
  </entry>
  <entry>
    <title>Django ContentType组件</title>
    <url>/3d38b118.html</url>
    <content><![CDATA[<p>什么是<code>content type：django</code>内置的一个组件，这个组件帮忙做连表的操作。（混搭连表）</p>
<p>适用场景：适用于一张表与多张表同时做关联的时候。直接导入就可以使用了。</p>
<a id="more"></a>

<h2 id="什么是Django-ContentTypes？"><a href="#什么是Django-ContentTypes？" class="headerlink" title="什么是Django ContentTypes？"></a>什么是<code>Django ContentTypes</code>？</h2><p><code>Django ContentTypes</code>是由<code>Django</code>框架提供的一个核心功能，它对当前项目中所有基于<code>Django</code>驱动的model提供了更高层次的抽象接口。 当然我们不是说的是<code>http</code>中的<code>content-type</code>！完全没有任何关系！</p>
<p>下面将一步一步解释<code>Django ContentTypes</code>在<code>Django</code>框架中做了什么，以及如何使用<code>Django ContentTypes</code>。 </p>
<h2 id="Django-ContentTypes做了什么？"><a href="#Django-ContentTypes做了什么？" class="headerlink" title="Django ContentTypes做了什么？"></a><code>Django ContentTypes</code>做了什么？</h2><p>当使用<code>django-admin</code>初始化一个<code>django</code>项目的时候，可以看到在默认的<code>INSTALL_APPS</code>已经包含了<code>django.contrib.contenttypes</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">  <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>而且注意<code>django.contrib.contenttypes</code>是在<code>django.contrib.auth</code>之后，这是因为<code>auth</code>中的<code>permission</code>系统是根据<code>contenttypes</code>来实现的。</p>
<p>我们来查询查阅了一下<code>django.contrib.contenttypes.models</code>文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentType</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">  app_label = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">  model = models.CharField(_(<span class="string">&#x27;python model class name&#x27;</span>), max_length=<span class="number">100</span>)</span><br><span class="line">  objects = ContentTypeManager()</span><br><span class="line"> </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    verbose_name = _(<span class="string">&#x27;content type&#x27;</span>)</span><br><span class="line">    verbose_name_plural = _(<span class="string">&#x27;content types&#x27;</span>)</span><br><span class="line">    db_table = <span class="string">&#x27;django_content_type&#x27;</span></span><br><span class="line">    unique_together = ((<span class="string">&#x27;app_label&#x27;</span>, <span class="string">&#x27;model&#x27;</span>),)</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>大家可以看到<code>ContentType</code>就是一个简单的<code>django model</code>，而且它在数据库中的表的名字为<code>django_content_type</code>。</p>
<p>这个表的名字一般都不会陌生，在第一次对<code>Django</code>的<code>model</code>进行<code>migrate</code>之后，就可以发现在数据库中出现了一张默认生成的名为<code>django_content_type</code>的表。</p>
<p>如果没有建立任何的<code>model</code>，默认<code>django_content_type</code>是这样的：</p>
<p><img data-src="/images/1564566517195.png" alt="1564566517195"></p>
<p>因此，<code>django_content_type</code>记录了当前的<code>Django</code>项目中所有<code>model</code>所属的<code>app</code>（即<code>app_label</code>属性）以及<code>model</code>的名字（即<code>model</code>属性）。</p>
<p>当然，<code>django_content_type</code>并不只是记录属性这么简单，<code>contenttypes</code>是对<code>model</code>的一次封装，</p>
<p>因此可以通过<code>contenttypes</code>动态的访问<code>model</code>类型，而不需要每次<code>import</code>具体的<code>model</code>类型。</p>
<h2 id="Django-ContentTypes的使用场景"><a href="#Django-ContentTypes的使用场景" class="headerlink" title="Django ContentTypes的使用场景"></a><strong><code>Django ContentTypes</code>的使用场景</strong></h2><h4 id="ContentType组件应用："><a href="#ContentType组件应用：" class="headerlink" title="ContentType组件应用："></a><code>ContentType</code>组件应用：</h4><ul>
<li>在<code>model</code>中定义<code>ForeignKey</code>字段，并关联到<code>ContentType</code>表，通常这个字段命名为<code>content-type</code></li>
<li>在<code>model</code>中定义<code>PositiveIntergerField</code>字段, 用来存储关联表中的主键，通常我们用<code>object_id</code></li>
<li>在<code>model</code>中定义<code>GenericForeignKey</code>字段，传入上面两个字段的名字</li>
<li>方便反向查询可以定义<code>GenericRelation</code>字段<h4 id="DEMO需求"><a href="#DEMO需求" class="headerlink" title="DEMO需求"></a>DEMO需求</h4>现在我们有这样一个需求~我们的商城里有很多的商品，节日要来了，我们要搞活动。那么我们就要设计优惠券，优惠券都有什么类型呢，满减的、折扣的、立减的。<br>我们对应着我们活动类型，对我们的某类商品设计优惠券，比如：家电是一类商品、食物是一类商品。那么我们可以设计家电折扣优惠券，以及食物满减优惠券等……<br>那么我们看表结构怎么设计???</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coupon</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        优惠券表</span></span><br><span class="line"><span class="string">        id  name    appliance_id    food_id     fruit_id</span></span><br><span class="line"><span class="string">        1   通用优惠券   null            null        null</span></span><br><span class="line"><span class="string">        2   冰箱折扣券   1               null        null</span></span><br><span class="line"><span class="string">        3   电视折扣券   2               null        null</span></span><br><span class="line"><span class="string">        4   苹果满减卷   null            null        1</span></span><br><span class="line"><span class="string">        我每增加一张表就要多增加一个字段</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;优惠券名&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Appliance</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    家用电器表</span></span><br><span class="line"><span class="string">    id  name</span></span><br><span class="line"><span class="string">    1   电视</span></span><br><span class="line"><span class="string">    2   冰箱</span></span><br><span class="line"><span class="string">    3   空调</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;电器名称&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    食物表</span></span><br><span class="line"><span class="string">    id  name</span></span><br><span class="line"><span class="string">    1   面包</span></span><br><span class="line"><span class="string">    2   牛奶</span></span><br><span class="line"><span class="string">    3   零食</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;食物名称&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    水果表</span></span><br><span class="line"><span class="string">    id  name</span></span><br><span class="line"><span class="string">    1   苹果</span></span><br><span class="line"><span class="string">    2   香蕉</span></span><br><span class="line"><span class="string">    3   西瓜</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;水果名&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>实际上我们商品的种类会特别的多，导致我们这张表外键越来越多<br><strong>遇到像<code>Coupon</code>这种一张表要跟多张表进行外键关联的时候~我们<code>Django</code>提供了<code>ContentType</code>组件</strong></p>
<h4 id="使用ContentType重置数据表"><a href="#使用ContentType重置数据表" class="headerlink" title="使用ContentType重置数据表"></a>使用<code>ContentType</code>重置数据表</h4><h5 id="model数据表"><a href="#model数据表" class="headerlink" title="model数据表"></a>model数据表</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey, GenericRelation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coupon</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    优惠券表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;优惠券名&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 关联到ContentType表</span></span><br><span class="line">    content_type = models.ForeignKey(to=ContentType, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># 用来存储关联表中的主键</span></span><br><span class="line">    object_id = models.PositiveIntegerField()</span><br><span class="line">    <span class="comment"># 定义GenericForeignKey字段，传入上面两个字段的名字</span></span><br><span class="line">    content_object = GenericForeignKey(<span class="string">&#x27;content_type&#x27;</span>, <span class="string">&#x27;object_id&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Appliance</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    家用电器表</span></span><br><span class="line"><span class="string">    id  name</span></span><br><span class="line"><span class="string">    1   电视</span></span><br><span class="line"><span class="string">    2   冰箱</span></span><br><span class="line"><span class="string">    3   空调</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;电器名称&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 用于商品查对应的优惠券的反向查询，数据表不会创建此字段</span></span><br><span class="line">    coupons = GenericRelation(to=Coupon)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    食物表</span></span><br><span class="line"><span class="string">    id  name</span></span><br><span class="line"><span class="string">    1   面包</span></span><br><span class="line"><span class="string">    2   牛奶</span></span><br><span class="line"><span class="string">    3   零食</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;食物名称&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    水果表</span></span><br><span class="line"><span class="string">    id  name</span></span><br><span class="line"><span class="string">    1   苹果</span></span><br><span class="line"><span class="string">    2   香蕉</span></span><br><span class="line"><span class="string">    3   西瓜</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;水果名&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="view视图文件"><a href="#view视图文件" class="headerlink" title="view视图文件"></a>view视图文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> models</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 通过ContentType获得表名</span></span><br><span class="line">    content = models.ContentType.objects.filter(app_label=<span class="string">&#x27;app&#x27;</span>, model=<span class="string">&#x27;appliance&#x27;</span>).first()</span><br><span class="line">    <span class="comment"># 获得表model对象 相当于models.Applicance</span></span><br><span class="line">    model_class = content.model_class()</span><br><span class="line">    <span class="comment"># 使用上面获取的家电对象模型查询表中所有家电</span></span><br><span class="line">    obj_list = model_class.objects.all()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查询主键为3的家电对象：洗衣机</span></span><br><span class="line">    obj = models.Appliance.objects.filter(pk=<span class="number">3</span>).first()</span><br><span class="line">    <span class="comment"># 为洗衣机添加优惠券</span></span><br><span class="line">    models.Coupon.objects.create(name=<span class="string">&#x27;618洗衣机优惠券&#x27;</span>, content_object=obj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正向查询，查询指定优惠券对应的商品</span></span><br><span class="line">    <span class="comment"># 查询主键为1的优惠券对象</span></span><br><span class="line">    coupon_obj = models.Coupon.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line">    <span class="comment"># 查询该优惠券对应的商品对象</span></span><br><span class="line">    good = coupon_obj.content_object</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向查询，查询家电对应的优惠券</span></span><br><span class="line">    <span class="comment"># 查询主键为3的家电对象：洗衣机</span></span><br><span class="line">    good_obj = models.Appliance.objects.filter(pk=<span class="number">3</span>).first()</span><br><span class="line">    <span class="comment"># 根据商品对象，使用模型中定义的GenericRelation进行反向查询对应的优惠券</span></span><br><span class="line">    coupon_objs = good_obj.coupons.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果模型中未定义GenericRelation，如何查询指定商品对应的优惠券</span></span><br><span class="line">    <span class="comment"># content_type对应上方我们获取的表名，object_id对应商品id</span></span><br><span class="line">    coupon_objs = models.Coupon.objects.filter(content_type=content, object_id=<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>ContentType</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework完整开发api示例</title>
    <url>/db7fdc29.html</url>
    <content><![CDATA[<p>最近很多H5或者小程序的广告表单提交需求需要做，索性使用Drf完整各个终端服务器数据汇总吧，完整记录下来供后续参考。</p>
<a id="more"></a>

<h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><p>服务端使用<code>uwsgi+nginx</code>发布我们的<code>Django</code>应用，服务端已经部署完成，详细的操作见：**<a href="https://www.diandian100.cn/7c752308.html">uwsgi配置发布web服务器</a>**</p>
<h4 id="应用程序服务端"><a href="#应用程序服务端" class="headerlink" title="应用程序服务端"></a>应用程序服务端</h4><p>我们这里使用的<code>Django</code>版本为最新的<code>3.0.6</code>，<code>Django REST Framework</code>版本为：<code>3.11.0</code>。数据库我们采用<code>mysql</code>。</p>
<h3 id="创建项目及应用"><a href="#创建项目及应用" class="headerlink" title="创建项目及应用"></a>创建项目及应用</h3><p>我们本地使用<code>windows</code>进行开发，<code>pycharm</code>工具与服务器做了同步处理。</p>
<h4 id="pycharm同步设置"><a href="#pycharm同步设置" class="headerlink" title="pycharm同步设置"></a><code>pycharm</code>同步设置</h4><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200512114808.png" alt="img"></p>
<h5 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h5><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200512115112.png" alt="img"></p>
<h5 id="映射配置"><a href="#映射配置" class="headerlink" title="映射配置"></a>映射配置</h5><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200512115242.png" alt="img"></p>
<h5 id="自动上传"><a href="#自动上传" class="headerlink" title="自动上传"></a>自动上传</h5><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200512115328.png" alt="img"></p>
<h4 id="使用命令行创建项目"><a href="#使用命令行创建项目" class="headerlink" title="使用命令行创建项目"></a>使用命令行创建项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject django_test_project</span><br><span class="line">django-admin startapp app</span><br></pre></td></tr></table></figure>

<h4 id="settings-py设置"><a href="#settings-py设置" class="headerlink" title="settings.py设置"></a><code>settings.py</code>设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 所有主机访问</span><br><span class="line">ALLOWED_HOSTS &#x3D; [&#39;*&#39;]</span><br><span class="line"># 将新创建的app应用添加至已安装应用列表</span><br><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;app.apps.AppConfig&#39;,</span><br><span class="line">]</span><br><span class="line"># 使用mysql数据库</span><br><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;dbname #你的数据库名称</span><br><span class="line">        &#39;USER&#39;: &#39;dbuser你的数据库用户名</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;dbpassword密码</span><br><span class="line">        &#39;HOST&#39;: &#39;&#39;, #你的数据库主机，留空默认为localhost</span><br><span class="line">        &#39;PORT&#39;: &#39;3306&#39;, #你的数据库端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 语言和时区</span><br><span class="line">LANGUAGE_CODE &#x3D; &#39;zh-hans&#39;</span><br><span class="line">TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39;</span><br></pre></td></tr></table></figure>

<h3 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h3><p>我们使用<code>django</code>内置的<code>user</code>模型进行扩展，使用我们的<code>api</code>发起某些请求需要传递<code>token</code>。</p>
<p>后续如果牵涉到第三方登陆我们可以保存至第三方用户表，与内置用户表进行一对一关联。</p>
<p>用户提交的表单我们也要单独存放一个表(用户表单我们不确定都有什么字段，所以我们将用户表单提交过来的数据打包为<code>json</code>字符串进行保存)，暂时创建以上三张表，后续根据需要我们慢慢添加。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"># 用户token</span><br><span class="line">class UserToken(models.Model):</span><br><span class="line">    user &#x3D; models.OneToOneField(to&#x3D;User, verbose_name&#x3D;&#39;用户&#39;, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    token &#x3D; models.UUIDField(verbose_name&#x3D;&#39;token&#39;)</span><br><span class="line">    uptime &#x3D; models.DateTimeField(auto_now&#x3D;True, verbose_name&#x3D;&#39;更新时间&#39;)</span><br><span class="line"></span><br><span class="line"># 第三方用户登录信息</span><br><span class="line">class ThirdParty(models.Model):</span><br><span class="line">    user &#x3D; models.OneToOneField(to&#x3D;User, verbose_name&#x3D;&#39;用户&#39;, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    wechat &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;&#39;微信唯一id&#39;, null&#x3D;True)</span><br><span class="line">    alipay &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;&#39;支付宝唯一id&#39;, null&#x3D;True)</span><br><span class="line">    thumbnail &#x3D; models.ImageField(upload_to&#x3D;&#39;thumbnail&#39;, verbose_name&#x3D;&#39;图片&#39;, null&#x3D;True)</span><br><span class="line"></span><br><span class="line"># 表单数据</span><br><span class="line">class FormData(models.Model):</span><br><span class="line">    id &#x3D; models.AutoField(primary_key&#x3D;True)</span><br><span class="line">    user &#x3D; models.ForeignKey(to&#x3D;User, verbose_name&#x3D;&#39;用户&#39;, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    # 用来标识数据来源于该用户的哪个表单</span><br><span class="line">    slug &#x3D; models.SlugField(max_length&#x3D;100, verbose_name&#x3D;&#39;来源&#39;)</span><br><span class="line">    body &#x3D; models.CharField(max_length&#x3D;255, verbose_name&#x3D;&#39;表单json数据&#39;)</span><br><span class="line">    uptime &#x3D; models.DateTimeField(auto_now&#x3D;True, verbose_name&#x3D;&#39;更新时间&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="迁移数据"><a href="#迁移数据" class="headerlink" title="迁移数据"></a>迁移数据</h3><p>迁移之前尝试运行了下该程序，直接报错了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required, you have 0.9.2</span><br></pre></td></tr></table></figure>

<p>嫌弃我们版本低？</p>
<p>项目的<code>__init__.py</code>文件中修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.version_info &#x3D; (1, 3, 13, &quot;final&quot;, 0)</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<p>开始迁移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrati</span><br></pre></td></tr></table></figure>

<p>顺手创建个管理员吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<h3 id="创建序列化"><a href="#创建序列化" class="headerlink" title="创建序列化"></a>创建序列化</h3><p><code>app</code>应用中我们创建<code>untils</code>文件夹，用来存放后续认证、频率、权限、序列化等文件。我们现在该文件夹中创建<code>serializers.py</code>用来存放自定义序列化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;5&#x2F;12 13:33</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line"># @Author URI: https:&#x2F;&#x2F;www.diandian100.cn</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">from app.models import FormData</span><br><span class="line"></span><br><span class="line">class FormDataSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; FormData</span><br><span class="line">        fields &#x3D; &#39;__all__&#39;</span><br></pre></td></tr></table></figure>

<p>我们先做一个表单数据表序列化，且并没有对任何字段做验证，因为使用的<code>ModelSerializer</code>，所以默认会验证模型类中没有定义<code>null=True</code>的字段。</p>
<h3 id="使用token后续路由验证"><a href="#使用token后续路由验证" class="headerlink" title="使用token后续路由验证"></a>使用<code>token</code>后续路由验证</h3><p>牵涉到表单提交数据，我们要做<code>token</code>验证，此处我们直接使用<code>jwt</code>生成<code>token</code>进行后续验证使用。关于<code>jwt</code>的详细使用请参见：<code>xxxxxx</code></p>
<h4 id="token生成和验证"><a href="#token生成和验证" class="headerlink" title="token生成和验证"></a><code>token</code>生成和验证</h4><p>此处我们直接使用<code>app/untils/jwt_tokens.py</code>来存放上述代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;5&#x2F;13 11:43</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line"># @Author URI: https:&#x2F;&#x2F;www.diandian100.cn</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">import jwt</span><br><span class="line">from jwt import exceptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">salt &#x3D; &#39;iv%x1fo9l7_u9bf_u!9#g#m*)*&#x3D;ej@bek5)(@u3kh*72+unjv&#x3D;&#39;</span><br><span class="line"></span><br><span class="line">def generate_token(playload, timeout &#x3D; 120):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    生成token</span><br><span class="line">    :param playload: 一般为用户id、用户名的字典</span><br><span class="line">    :param timeout: 多久过期，单位：分钟</span><br><span class="line">    :return:</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    # 构造header</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;typ&#39;: &#39;jwt&#39;,</span><br><span class="line">        &#39;alg&#39;: &#39;HS256&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    # 构造payload</span><br><span class="line">    playload &#x3D; playload</span><br><span class="line">    # token有效期，我这边设置为了分钟，即x分钟后过期</span><br><span class="line">    playload[&#39;exp&#39;] &#x3D; datetime.datetime.utcnow() + datetime.timedelta(minutes&#x3D;timeout)</span><br><span class="line">    # 构造signature即token</span><br><span class="line">    token &#x3D; jwt.encode(payload&#x3D;playload, key&#x3D;salt, algorithm&#x3D;&quot;HS256&quot;, headers&#x3D;headers).decode(&#39;utf-8&#39;)</span><br><span class="line">    return token</span><br><span class="line"></span><br><span class="line">def validate_token(token):</span><br><span class="line">    &#39;&#39;&#39;校验token有效性&#39;&#39;&#39;</span><br><span class="line">    # 定义返回相应字典</span><br><span class="line">    result &#x3D; &#123;&#39;status&#39;: False, &#39;data&#39;: None, &#39;error&#39;: None&#125;</span><br><span class="line">    try:</span><br><span class="line">        # 从token中获取payload【不校验合法性】</span><br><span class="line">        # unverified_payload &#x3D; jwt.decode(token, None, False)</span><br><span class="line">        # print(unverified_payload)</span><br><span class="line">        # 从token中获取payload【校验合法性】；如果token正确，返回生成token时的playload字典</span><br><span class="line">        verified_payload &#x3D; jwt.decode(token, salt, True)</span><br><span class="line"></span><br><span class="line">        result[&#39;status&#39;] &#x3D; True</span><br><span class="line">        result[&#39;data&#39;] &#x3D; verified_payload</span><br><span class="line">    except exceptions.ExpiredSignatureError:</span><br><span class="line">        result[&#39;error&#39;] &#x3D; &#39;token已失效&#39;</span><br><span class="line">    except jwt.DecodeError as err:</span><br><span class="line">        result[&#39;error&#39;] &#x3D; &#39;token认证失败&#39;</span><br><span class="line">    except jwt.InvalidTokenError:</span><br><span class="line">        result[&#39;error&#39;] &#x3D; &#39;非法的token&#39;</span><br><span class="line">    return result</span><br></pre></td></tr></table></figure>

<h4 id="登录视图"><a href="#登录视图" class="headerlink" title="登录视图"></a>登录视图</h4><p>要想提交数据，要携带有效<code>token</code>，初次<code>token</code>需要使用用户名和密码进行交换，获取<code>token</code>我们就放在这个登录视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">from django.contrib import auth</span><br><span class="line"></span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from app.untils.response import ResponseDict</span><br><span class="line">from app.untils import jwt_tokens</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登录</span><br><span class="line">class Login(APIView):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 实例化自定义响应器，响应给前端的字典</span><br><span class="line">        res &#x3D; ResponseDict()</span><br><span class="line">        # 数据接收字典</span><br><span class="line">        recev_data &#x3D; &#123;&#39;username&#39;, &#39;password&#39;&#125;</span><br><span class="line">        # 判断定义的待接收字典是否是用户提交的post数据的子集，即用户提交的数据是否包含了用户名和密码</span><br><span class="line">        if recev_data.issubset(set(request.data)):</span><br><span class="line">            # 接收用户提交的用户名密码</span><br><span class="line">            user_info &#x3D; dict()</span><br><span class="line">            for item in recev_data:</span><br><span class="line">                user_info[item] &#x3D; request.data.get(item)</span><br><span class="line">            # 验证该用户</span><br><span class="line">            user_obj &#x3D; auth.authenticate(**user_info)</span><br><span class="line">            # 判断用户是否存在</span><br><span class="line">            if user_obj:</span><br><span class="line">                # 生成token,并将token有效期设为了10分钟</span><br><span class="line">                token &#x3D; jwt_tokens.generate_token(&#123;&quot;id&quot;:user_obj.id, &quot;name&quot;:user_obj.username&#125;, 10)</span><br><span class="line">                # 封装返回数据</span><br><span class="line">                res.data &#x3D; &#123;</span><br><span class="line">                    &quot;access_token&quot;: token</span><br><span class="line">                &#125;</span><br><span class="line">                res.msg &#x3D; &quot;登录成功&quot;</span><br><span class="line">                res.expires &#x3D; 600</span><br><span class="line">            else:</span><br><span class="line">                res.code &#x3D; 1001</span><br><span class="line">                res.msg &#x3D; &quot;用户名或密码错误&quot;</span><br><span class="line">        else:</span><br><span class="line">            res.code &#x3D; 1001</span><br><span class="line">            res.msg &#x3D; &quot;参数有误，请重新提交&quot;</span><br><span class="line">        return Response(res.dict)</span><br></pre></td></tr></table></figure>

<p>我们测试一下：</p>
<p>尝试字段携带错误，请求一下：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200513163031.png" alt="img"></p>
<p>尝试账户密码错误，请求一下：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200513163146.png" alt="img"></p>
<p>最后使用正确的账户信息请求一下：</p>
<p>可以看到系统成功给我们返回了<code>token</code></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200513163232.png" alt="img"></p>
<h3 id="自定义认证组件"><a href="#自定义认证组件" class="headerlink" title="自定义认证组件"></a>自定义认证组件</h3><p>上面我们定义了token生成和验证token的方法，现在我们要自定义一个认证类。</p>
<p>在此之前我们在上面使用了一个自定义响应体类，没有放出来直接使用了，这里我们放出一下<code>app\untils\response.py</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;5&#x2F;12 16:26</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line"># @Author URI: https:&#x2F;&#x2F;www.diandian100.cn</span><br><span class="line">class ResponseDict:</span><br><span class="line">    &#39;&#39;&#39;定义一个自定义响应字典&#39;&#39;&#39;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.code &#x3D; 1000</span><br><span class="line">        self.data &#x3D; None</span><br><span class="line">        self.msg &#x3D; &#39;&#39;</span><br><span class="line">        # self.expires &#x3D; 7200</span><br><span class="line">    def dict(self):</span><br><span class="line">        return self.__dict__</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    res &#x3D; ResponseDict()</span><br><span class="line">    res.msg &#x3D; &#39;测试上 &#39;</span><br><span class="line">    print(res.dict)</span><br></pre></td></tr></table></figure>

<p>接下来是我们的自定义认证类<code>app\untils\authentications.py</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;5&#x2F;13 14:09</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line"># @Author URI: https:&#x2F;&#x2F;www.diandian100.cn</span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from app.untils import jwt_tokens</span><br><span class="line">from app.untils.response import ResponseDict</span><br><span class="line"></span><br><span class="line">class JwtTokenAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        pass</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        # 实例化我们的自定义响应体类</span><br><span class="line">        res &#x3D; ResponseDict()</span><br><span class="line">        # 获取用户请求头中携带的token</span><br><span class="line">        authorization &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, &#39;&#39;)</span><br><span class="line">        # 判断是否携带token</span><br><span class="line">        if not authorization:</span><br><span class="line">            res.msg &#x3D; &#39;未获取到Authorization请求头&#39;</span><br><span class="line">            res.code &#x3D; 1001</span><br><span class="line">            raise AuthenticationFailed(res.dict)</span><br><span class="line">        # 验证用户携带的token</span><br><span class="line">        result &#x3D; jwt_tokens.validate_token(authorization)</span><br><span class="line">        # 判断token是否有效，无效输出错误提示</span><br><span class="line">        if not result[&#39;status&#39;]:</span><br><span class="line">            res.msg &#x3D; result[&#39;error&#39;]</span><br><span class="line">            res.code &#x3D; 1001</span><br><span class="line">            raise AuthenticationFailed(res.dict)</span><br><span class="line">        # token有效，返回用户字典和token</span><br><span class="line">        return (result, authorization)</span><br></pre></td></tr></table></figure>

<h3 id="定义表单视图类"><a href="#定义表单视图类" class="headerlink" title="定义表单视图类"></a>定义表单视图类</h3><p>我们的表单暂时只定义列表页和post提交页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from app.models import FormData as FormDataModel</span><br><span class="line">from app.untils.serializers import FormDataSerializer</span><br><span class="line">from app.untils.response import ResponseDict</span><br><span class="line">from app.untils.authentications import JwtTokenAuthentication</span><br><span class="line"></span><br><span class="line">class FormDatas(APIView):</span><br><span class="line">    # token验证类列表</span><br><span class="line">    authentication_classes &#x3D; [JwtTokenAuthentication, ]</span><br><span class="line">    def get(self, request):</span><br><span class="line">        res &#x3D; ResponseDict()</span><br><span class="line">        # 获取所有formdatas对象</span><br><span class="line">        form_datas &#x3D; FormDataModel.objects.all()</span><br><span class="line">        # 使用序列化类序列化formsdatas字段，many代表获取的是多条信息</span><br><span class="line">        serialize_data &#x3D; FormDataSerializer(form_datas, many&#x3D;True)</span><br><span class="line">        res.msg &#x3D; &quot;成功&quot;</span><br><span class="line">        res.data &#x3D; serialize_data.data</span><br><span class="line">        return Responseres.dict)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        res &#x3D; ResponseDict()</span><br><span class="line">        #使用序列化模型接收用户提交的数据</span><br><span class="line">        serialize_data &#x3D; FormDataSerializer(data&#x3D;request.data)</span><br><span class="line">        if serialize_data.is_valid():</span><br><span class="line">            # 保存表单数据</span><br><span class="line">            serialize_data.save()</span><br><span class="line">            res.msg &#x3D; &quot;提交成功&quot;</span><br><span class="line">            res.data &#x3D; serialize_data.data</span><br><span class="line">        else:</span><br><span class="line">            res.msg &#x3D; &quot;提交失败&quot;</span><br><span class="line">            res.data &#x3D; serialize_data.errors</span><br><span class="line">        return Response(res.dict)</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200513165643.png" alt="img"></p>
<p><code>token</code>已经过期了，我们需要重新获取<code>token</code>，我们输入重新获取的<code>token</code>再次尝试：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200513165900.png" alt="img"></p>
<p>数据正确返回，接下来我们测试下<code>post</code>数据</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200513170019.png" alt="img"></p>
<p>我们故意不填写body字段进行数据提交，出现以上提示，再次尝试一个正确的</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200513170154.png" alt="img"></p>
<p>这次数据成功提交了。</p>
<h3 id="自定义节流"><a href="#自定义节流" class="headerlink" title="自定义节流"></a>自定义节流</h3><p>自定义限制频率类路径：<code>app\untils\visit_thottle.py</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;5&#x2F;13 17:07</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line"># @Author URI: https:&#x2F;&#x2F;www.diandian100.cn</span><br><span class="line">from rest_framework.throttling import SimpleRateThrottle</span><br><span class="line"></span><br><span class="line">class VisitThottle(SimpleRateThrottle):</span><br><span class="line">    # 设定访问速度</span><br><span class="line">    rate &#x3D; &#39;5&#x2F;m&#39;</span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        return self.get_ident(request)</span><br></pre></td></tr></table></figure>

<p>尝试刷新5次再次访问如下：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200513171933.png" alt="img"></p>
<p>最后说下，我们<code>api</code>应用肯定会有跨域问题，我这里安装了第三方跨域插件<code>corsheaders</code>，使用pip安装好该插件在<code>settings</code>里做以下设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;rest_framework&#39;,</span><br><span class="line">    &#39;app.apps.AppConfig&#39;,</span><br><span class="line">    # 解决跨域</span><br><span class="line">    &#39;corsheaders&#39;</span><br><span class="line">]</span><br><span class="line">MIDDLEWARE &#x3D; [</span><br><span class="line">    # 解决跨域</span><br><span class="line">    &#39;corsheaders.middleware.CorsMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.security.SecurityMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">]</span><br><span class="line">CORS_ORIGIN_ALLOW_ALL &#x3D; True</span><br></pre></td></tr></table></figure>

<p>至此，我们的<code>api</code>已经基本完成了，其他视图无非重复以上的动作，这里我们没有做字段验证，使用了数据库模型默认验证，另外我们没有添加权限验证、分页等，因为我们的业务还是很简单的，需要用到的可以参考我之前的文章<a href="https://www.diandian100.cn/categories/rd/python/django/page/3/">drf各个组件使用流程</a></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
        <category>drf</category>
      </categories>
      <tags>
        <tag>Django REST Framework完整开发api示例</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework系列</title>
    <url>/717404f2.html</url>
    <content><![CDATA[<p>DRF(Django RestFramework)是一套基于Django开发的、帮助我们更好的设计符合REST规范的Web应用的一个Django App，所以，本质上，它是一个Django App。</p>
<a id="more"></a>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
        <category>drf</category>
      </categories>
      <tags>
        <tag>Django REST Framework系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Rest Framework读取用户IP写入数据表</title>
    <url>/8bc97d56.html</url>
    <content><![CDATA[<p>日常用户提交表单我们可能会收集下用户的<code>ip</code>，它跟<code>php</code>类似，读取<code>Meta</code>，<code>HTTP_X_FORWARDED_FOR</code>和<code>REMOTE_ADDR</code>，一个代表真实<code>ip</code>，一个代表代理<code>IP</code>。如果没有使用<code>DRF</code>开发接口或者是使用<code>DRF</code>的<code>mixin</code>开发，都很容易办到，所以不要为了简便去使用<code>viewset</code>了</p>
<a id="more"></a>

<p>用户请求数据都存放在<code>request.data</code>中，也就是说你要记录用户<code>ip</code>，将<code>ip</code>写入到<code>request.data</code>中即可，前提做好<code>ip</code>判断哟</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用python三元运算符，有真实ip获取真实ip，没有则获取代理ip</span></span><br><span class="line">request.data[<span class="string">&#x27;ip&#x27;</span>] = request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) <span class="keyword">if</span> request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) <span class="keyword">else</span> request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>本人用的<code>drf</code>的<code>mixin</code>，<code>post</code>请求所有代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment"># 写入访问者IP</span></span><br><span class="line">    request.data[<span class="string">&#x27;ip&#x27;</span>] = request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) <span class="keyword">if</span> request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) <span class="keyword">else</span> request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<p>记得数据表提前准备了存放<code>ip</code>的字段哟，仅此而已！！！</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django Rest Framework</tag>
        <tag>Django读取ip</tag>
        <tag>django写入ip</tag>
        <tag>drf读取ip</tag>
        <tag>drf写入ip</tag>
        <tag>HTTP_X_FORWARDED_FOR</tag>
        <tag>REMOTE_ADDR</tag>
        <tag>request.data</tag>
      </tags>
  </entry>
  <entry>
    <title>DjangoRestFramework view.py文件书写流程</title>
    <url>/4088986f.html</url>
    <content><![CDATA[<p>首先初始化模型，modules.py定义如下：</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 出版社</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;出版社名称&#x27;</span>, max_length=<span class="number">25</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;地址&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Authors</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;姓名&#x27;</span>, max_length=<span class="number">25</span>)</span><br><span class="line">    age = models.IntegerField(<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="comment"># 书籍</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;书籍名&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    price = models.DecimalField(<span class="string">&#x27;价格&#x27;</span>, max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>,)</span><br><span class="line">    publish = models.ForeignKey(Publish, related_name=<span class="string">&#x27;book&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    authors = models.ManyToManyField(Authors, related_name=<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>其次，定义一个获取所有书籍的json输出接口，定义views.py文件如下：</p>
<ol>
<li><p>引入所需要的模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="comment"># rest_framework序列化模块</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="comment"># rest_framework响应模块</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入书籍模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Book <span class="keyword">as</span> BookModel</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义书籍序列化类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书籍模型序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerialize</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    name = serializers.CharField(max_length=<span class="number">25</span>)</span><br><span class="line">    price = serializers.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 外键字段，显示模型中定义的__str__方法返回的内容</span></span><br><span class="line">    publish = serializers.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 获取作者姓名，多对多字段需要自己手动获取数据(必须定义一个get_该字段的方法来获取数据)</span></span><br><span class="line">    authors = serializers.SerializerMethodField()</span><br><span class="line">    <span class="comment"># 获取author相关数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span>(<span class="params">self, book_obj</span>):</span></span><br><span class="line">        authors_data = []</span><br><span class="line">        <span class="comment"># 循环读取该书籍的所有作者，将其作者姓名写入数组</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> book_obj.authors.all():</span><br><span class="line">            authors_data.append(item.name)</span><br><span class="line">        <span class="keyword">return</span> authors_data</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义Books视图类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Books视图类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 读取所有书籍</span></span><br><span class="line">        data = BookModel.objects.all()</span><br><span class="line">        <span class="comment"># 使用序列化类序列化书籍相关字段，many代表获取的是多条信息</span></span><br><span class="line">        serialize_data = BookSerialize(data, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 返回json数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(serialize_data.data)</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义url路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;books&#x27;</span>, Books.as_view())</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>依照以上操作，我们运行我们的Django，访问该页面127.0.0.1:8000/books，返回结果如下</p>
<p><img data-src="/images/1562919409003.png" alt="1562919409003"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django, RestFrameWork, Restful, api</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之CBV</title>
    <url>/6f5ecc9e.html</url>
    <content><![CDATA[<p>Django 视图本质是一个函数：接受 HttpRequest 对象作为参数，返回一个 HttpResponse 对象作为返回。FBV 直接就是这样一个函数，而 CBV 类的方法 as_view()，它的返回也是这样一个函数。</p>
<a id="more"></a>

<h3 id="CBV（class-base-views）"><a href="#CBV（class-base-views）" class="headerlink" title="CBV（class base views）"></a>CBV（class base views）</h3><p>就是在视图里使用类处理请求。</p>
<p>Python是一个面向对象的编程语言，如果只用函数来开发，有很多面向对象的优点就错失了（继承、封装、多态）。所以Django在后来加入了Class-Based-View。可以让我们用类写View。这样做的优点主要下面两种：</p>
<ol>
<li>提高了代码的复用性，可以使用面向对象的技术，比如Mixin（多继承）</li>
<li>可以用不同的函数针对不同的HTTP方法处理，而不是通过很多if判断，提高代码可读性</li>
</ol>
<p>如果我们要写一个处理GET方法的view，用函数写的话是下面这样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">  </span><br><span class="line">def my_view(request):</span><br><span class="line">     if request.method &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class="line">            return HttpResponse(&#39;OK&#39;)</span><br></pre></td></tr></table></figure>

<p>如果用class-based view写的话，就是下面这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.views import View</span><br><span class="line">  </span><br><span class="line">class MyView(View):</span><br><span class="line">      def get(self, request):</span><br><span class="line">            return HttpResponse(&#39;OK&#39;)</span><br></pre></td></tr></table></figure>

<p>Django的url是将一个请求分配给可调用的函数的，而不是一个class。针对这个问题，class-based view提供了一个<code>as_view()</code>静态方法（也就是类方法），调用这个方法，会创建一个类的实例，然后通过实例调用<code>dispatch()</code>方法，<code>dispatch()</code>方法会根据request的method的不同调用相应的方法来处理request（如<code>get()</code>,<code>post()</code>等）。到这里，这些方法和function-based view差不多了，要接收request，得到一个response返回。如果方法没有定义，会抛出HttpResponseNotAllowed异常。</p>
<p>在url中，就这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># urls.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from myapp.views import MyView</span><br><span class="line">  </span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">     url(r&#39;^index&#x2F;$&#39;, MyView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>类的属性可以通过两种方法设置，第一种是常见的Python的方法，可以被子类覆盖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.views import View</span><br><span class="line">  </span><br><span class="line">class GreetingView(View):</span><br><span class="line">    name &#x3D; &quot;yuan&quot;</span><br><span class="line">    def get(self, request):</span><br><span class="line">         return HttpResponse(self.name)</span><br><span class="line">  </span><br><span class="line"># You can override that in a subclass</span><br><span class="line">  </span><br><span class="line">class MorningGreetingView(GreetingView):</span><br><span class="line">    name&#x3D; &quot;alex&quot;</span><br></pre></td></tr></table></figure>

<p>第二种方法，你也可以在url中指定类的属性：</p>
<p>在url中设置类的属性Python</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urlpatterns &#x3D; [</span><br><span class="line">   url(r&#39;^index&#x2F;$&#39;, GreetingView.as_view(name&#x3D;&quot;egon&quot;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="CBV流程分析"><a href="#CBV流程分析" class="headerlink" title="CBV流程分析"></a>CBV流程分析</h3><h4 id="应用视图"><a href="#应用视图" class="headerlink" title="应用视图"></a>应用视图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line">from django.views import View</span><br><span class="line"></span><br><span class="line">class TestView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return HttpResponse(&#39;我是get&#39;)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        return HttpResponse(&#39;我是post&#39;)</span><br></pre></td></tr></table></figure>

<h4 id="URL路由"><a href="#URL路由" class="headerlink" title="URL路由"></a>URL路由</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from myapp import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, views.TestView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h4><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200428101027.png" alt="img"></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们想下我们访问下路由，路由怎么知道将请求分配给哪个方法去处理呢？</p>
<p>我们肯定要从源头路由开始找寻答案，路由中我们使用了<code>views.TestView.as_view()</code>，调用了视图方法，我们去视图类中并没有发现<code>as_view()</code>方法，但是该类继承了<code>Django</code>内置类<code>View</code>，我们应该去<code>View</code>中继续找答案</p>
<p>在View类中，我们确实找了类方法<code>as_view()</code>，我们来看下该方法源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">def as_view(cls, **initkwargs):</span><br><span class="line">    &quot;&quot;&quot;Main entry point for a request-response process.&quot;&quot;&quot;</span><br><span class="line">    for key in initkwargs:</span><br><span class="line">        if key in cls.http_method_names:</span><br><span class="line">            raise TypeError(&quot;You tried to pass in the %s method name as a &quot;</span><br><span class="line">                            &quot;keyword argument to %s(). Don&#39;t do that.&quot;</span><br><span class="line">                            % (key, cls.__name__))</span><br><span class="line">        if not hasattr(cls, key):</span><br><span class="line">            raise TypeError(&quot;%s() received an invalid keyword %r. as_view &quot;</span><br><span class="line">                            &quot;only accepts arguments that are already &quot;</span><br><span class="line">                            &quot;attributes of the class.&quot; % (cls.__name__, key))</span><br><span class="line"></span><br><span class="line">    def view(request, *args, **kwargs):</span><br><span class="line">        self &#x3D; cls(**initkwargs)</span><br><span class="line">        if hasattr(self, &#39;get&#39;) and not hasattr(self, &#39;head&#39;):</span><br><span class="line">            self.head &#x3D; self.get</span><br><span class="line">        self.setup(request, *args, **kwargs)</span><br><span class="line">        if not hasattr(self, &#39;request&#39;):</span><br><span class="line">            raise AttributeError(</span><br><span class="line">                &quot;%s instance has no &#39;request&#39; attribute. Did you override &quot;</span><br><span class="line">                &quot;setup() and forget to call super()?&quot; % cls.__name__</span><br><span class="line">            )</span><br><span class="line">        return self.dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    view.view_class &#x3D; cls</span><br><span class="line">    view.view_initkwargs &#x3D; initkwargs</span><br><span class="line"></span><br><span class="line">    # take name and docstring from class</span><br><span class="line">    update_wrapper(view, cls, updated&#x3D;())</span><br><span class="line"></span><br><span class="line">    # and possible attributes set by decorators</span><br><span class="line">    # like csrf_exempt from dispatch</span><br><span class="line">    update_wrapper(view, cls.dispatch, assigned&#x3D;())</span><br><span class="line">    return view</span><br></pre></td></tr></table></figure>

<p>我们在最后可以看到该方法返回了一个<code>view</code>，在<code>as_view</code>方法中刚好定义了一个<code>view</code>方法，我们需要把矛头指向<code>view</code>方法了。我们在该犯法最后又看到它返回了一个<code>self.dispatch(request, *args, **kwargs)</code>，又转手了？</p>
<p>我们继续找<code>dispatch</code>方法，我们在<code>View</code>类下又找到了<code>dispatch</code>方法，源码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def dispatch(self, request, *args, **kwargs):</span><br><span class="line">    # Try to dispatch to the right method; if a method doesn&#39;t exist,</span><br><span class="line">    # defer to the error handler. Also defer to the error handler if the</span><br><span class="line">    # request method isn&#39;t on the approved list.</span><br><span class="line">    if request.method.lower() in self.http_method_names:</span><br><span class="line">        handler &#x3D; getattr(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">    else:</span><br><span class="line">        handler &#x3D; self.http_method_not_allowed</span><br><span class="line">    return handler(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<p>View最上面定义的类属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">http_method_names &#x3D; [&#39;get&#39;, &#39;post&#39;, &#39;put&#39;, &#39;patch&#39;, &#39;delete&#39;, &#39;head&#39;, &#39;options&#39;, &#39;trace&#39;]</span><br></pre></td></tr></table></figure>

<p>结合上下大概意思很明了了，用户发起请求，dispatch根据其请求类型，通过反射获取到该类以请求类型命名的方法。即用户发起get请求，就分发到get方法，依次类推，这就是CBV分发请求的整个流程。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django之CBV</tag>
        <tag>cbv</tag>
        <tag>fbv</tag>
        <tag>视图类</tag>
        <tag>视图函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之cookie与session组件</title>
    <url>/41d3eaa2.html</url>
    <content><![CDATA[<p>会话（Session）跟踪是Web程序中常用的技术，用来<strong>跟踪用户的整个会话</strong>。常用的会话跟踪技术是Cookie与Session。<strong>Cookie通过在客户端记录信息确定用户身份</strong>，<strong>Session通过在服务器端记录信息确定用户身份</strong>。</p>
<a id="more"></a>

<h2 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h2><h3 id="1-什么是会话跟踪技术"><a href="#1-什么是会话跟踪技术" class="headerlink" title="1 什么是会话跟踪技术"></a>1 什么是会话跟踪技术</h3><p>我们需要先了解一下什么是会话！可以把会话理解为客户端与服务器之间的一次会晤，在一次会晤中可能会包含多次请求和响应。例如你给10086打个电话，你就是客户端，而10086服务人员就是服务器了。从双方接通电话那一刻起，会话就开始了，到某一方挂断电话表示会话结束。在通话过程中，你会向10086发出多个请求，那么这多个请求都在一个会话中。<br>在JavaWeb中，客户向某一服务器发出第一个请求开始，会话就开始了，直到客户关闭了浏览器会话结束。</p>
<p>在一个会话的多个请求中共享数据，这就是会话跟踪技术。例如在一个会话中的请求如下：  请求银行主页；</p>
<ul>
<li>请求登录（请求参数是用户名和密码）；</li>
<li>请求转账（请求参数与转账相关的数据）；</li>
<li>请求信誉卡还款（请求参数与还款相关的数据）。</li>
</ul>
<p>在这上会话中当前用户信息必须在这个会话中共享的，因为登录的是张三，那么在转账和还款时一定是相对张三的转账和还款！这就说明我们必须在一个会话过程中有共享数据的能力。</p>
<h3 id="2-会话路径技术使用Cookie或session完成"><a href="#2-会话路径技术使用Cookie或session完成" class="headerlink" title="2 会话路径技术使用Cookie或session完成"></a>2 会话路径技术使用Cookie或session完成</h3><p>我们知道HTTP协议是无状态协议，也就是说每个请求都是独立的！无法记录前一次请求的状态。但HTTP协议中可以使用Cookie来完成会话跟踪！在Web开发中，使用session来完成会话跟踪，session底层依赖Cookie技术。</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="什么叫Cookie"><a href="#什么叫Cookie" class="headerlink" title="什么叫Cookie"></a>什么叫Cookie</h3><p>Cookie翻译成中文是小甜点，小饼干的意思。在HTTP中它表示服务器送给客户端浏览器的小甜点。其实Cookie是key-value结构，类似于一个python中的字典。随着服务器端的响应发送给客户端浏览器。然后客户端浏览器会把Cookie保存起来，当下一次再访问服务器时把Cookie再发送给服务器。  Cookie是由服务器创建，然后通过响应发送给客户端的一个键值对。客户端会保存Cookie，并会标注出Cookie的来源（哪个服务器的Cookie）。当客户端向服务器发出请求时会把所有这个服务器Cookie包含在请求中发送给服务器，这样服务器就可以识别客户端了！</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200426145505.png" alt="img"></p>
<h3 id="Cookie规范"><a href="#Cookie规范" class="headerlink" title="Cookie规范"></a>Cookie规范</h3><ul>
<li>Cookie大小上限为4KB；</li>
<li>一个服务器最多在客户端浏览器上保存20个Cookie；</li>
<li>一个浏览器最多保存300个Cookie；</li>
</ul>
<p>上面的数据只是HTTP的Cookie规范，但在浏览器大战的今天，一些浏览器为了打败对手，为了展现自己的能力起见，可能对Cookie规范“扩展”了一些，例如每个Cookie的大小为8KB，最多可保存500个Cookie等！但也不会出现把你硬盘占满的可能！<br>注意，不同浏览器之间是不共享Cookie的。也就是说在你使用IE访问服务器时，服务器会把Cookie发给IE，然后由IE保存起来，当你在使用FireFox访问服务器时，不可能把IE保存的Cookie发送给服务器。</p>
<h3 id="Cookie与HTTP头"><a href="#Cookie与HTTP头" class="headerlink" title="Cookie与HTTP头"></a>Cookie与HTTP头</h3><p>Cookie是通过HTTP请求和响应头在客户端和服务器端传递的：</p>
<ul>
<li>Cookie：请求头，客户端发送给服务器端；</li>
<li>格式：Cookie: a=A; b=B; c=C。即多个Cookie用分号离开；  Set-Cookie：响应头，服务器端发送给客户端；</li>
<li>一个Cookie对象一个Set-Cookie： Set-Cookie: a=A Set-Cookie: b=B Set-Cookie: c=C</li>
</ul>
<h3 id="Cookie的覆盖"><a href="#Cookie的覆盖" class="headerlink" title="Cookie的覆盖"></a>Cookie的覆盖</h3><p>如果服务器端发送重复的Cookie那么会覆盖原有的Cookie，例如客户端的第一个请求服务器端发送的Cookie是：Set-Cookie: a=A；第二请求服务器端发送的是：Set-Cookie: a=AA，那么客户端只留下一个Cookie，即：a=AA。</p>
<h3 id="django中的cookie语法"><a href="#django中的cookie语法" class="headerlink" title="django中的cookie语法"></a>django中的cookie语法</h3><h4 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rep &#x3D; HttpResponse(...) 或 rep ＝ render(request, ...) 或 rep ＝ redirect()</span><br><span class="line">  </span><br><span class="line">rep.set_cookie(key,value,...)</span><br><span class="line">rep.set_signed_cookie(key,value,salt&#x3D;&#39;加密盐&#39;,...)</span><br></pre></td></tr></table></figure>

<p>完整视图设置cookie：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def hello(request):</span><br><span class="line">    print(&#39;当前连接&#39;, reverse(&quot;wechat:hello&quot;))</span><br><span class="line">    res &#x3D; HttpResponse(&#39;我是wechat应用中的hello视图&#39;)</span><br><span class="line">    res.set_cookie(&#39;visas&#39;, &#39;fff&#39;)</span><br><span class="line">    res.set_signed_cookie(&#39;haa&#39;, &#39;heihei&#39;,salt&#x3D;&#39;abc&#39;)</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure>

<p>set_cookie参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key,                 键</span><br><span class="line">value&#x3D;&#39;&#39;,            值</span><br><span class="line">max_age&#x3D;None,        超长时间；cookie需要延续的时间（以秒为单位）；如果参数是\ None&#96;&#96; ，这个cookie会延续到浏览器关闭为止。</span><br><span class="line">expires&#x3D;None,        超长时间       　　　　　　　　　　　　　　　　　　　　　　　　　　expires默认None ,cookie失效的实际日期&#x2F;时间。     　　　　　　　　　　　　　　　　　　　　　　　　　　　　</span><br><span class="line">path&#x3D;&#39;&#x2F;&#39;,           Cookie生效的路径，浏览器只会把cookie回传给带有该路径的页面，这样可以避免将；cookie传给站点中的其他的应用。；&#x2F; 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问</span><br><span class="line">domain&#x3D;None,         Cookie生效的域名；你可用这个参数来构造一个跨站cookie。</span><br><span class="line">                     如， domain&#x3D;&quot;.example.com&quot;</span><br><span class="line">                     所构造的cookie对下面这些站点都是可读的：</span><br><span class="line">                     www.example.com 、 www2.example.com </span><br><span class="line">        　　　　　　　　和an.other.sub.domain.example.com 。</span><br><span class="line">                     如果该参数设置为 None ，cookie只能由设置它的站点读取。</span><br><span class="line">secure&#x3D;False,        如果设置为 True ，浏览器将通过HTTPS来回传cookie。</span><br><span class="line">httponly&#x3D;False       只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span><br></pre></td></tr></table></figure>

<h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.COOKIES</span><br></pre></td></tr></table></figure>

<h4 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.delete_cookie(&quot;cookie_key&quot;,path&#x3D;&quot;&#x2F;&quot;,domain&#x3D;name)</span><br></pre></td></tr></table></figure>

<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>Session是服务器端技术，利用这个技术，服务器在运行时可以 为每一个用户的浏览器创建一个其独享的session对象，由于 session为用户浏览器独享，所以用户在访问服务器的web资源时  ，可以把各自的数据放在各自的session中，当用户再去访问该服务器中的其它web资源时，其它web资源再从用户各自的session中  取出数据为用户服务。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200426150056.png" alt="img"></p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、设置Sessions值</span><br><span class="line">          request.session[&#39;session_name&#39;] &#x3D;&quot;admin&quot;</span><br><span class="line">2、获取Sessions值</span><br><span class="line">          session_name &#x3D; request.session[&quot;session_name&quot;]</span><br><span class="line">3、删除Sessions值</span><br><span class="line">          del request.session[&quot;session_name&quot;]</span><br><span class="line">4、flush()</span><br><span class="line">     删除当前的会话数据并删除会话的Cookie。</span><br><span class="line">     这用于确保前面的会话数据不可以再次被用户的浏览器访问</span><br><span class="line">5、get(key, default&#x3D;None)</span><br><span class="line">  </span><br><span class="line">fav_color &#x3D; request.session.get(&#39;fav_color&#39;, &#39;red&#39;)</span><br><span class="line">  </span><br><span class="line">6、pop(key)</span><br><span class="line">  </span><br><span class="line">fav_color &#x3D; request.session.pop(&#39;fav_color&#39;)</span><br><span class="line">  </span><br><span class="line">7、keys()</span><br><span class="line">  </span><br><span class="line">8、items()</span><br><span class="line">  </span><br><span class="line">9、setdefault()</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">10 用户session的随机字符串</span><br><span class="line">        request.session.session_key</span><br><span class="line">   </span><br><span class="line">        # 将所有Session失效日期小于当前日期的数据删除</span><br><span class="line">        request.session.clear_expired()</span><br><span class="line">   </span><br><span class="line">        # 检查 用户session的随机字符串 在数据库中是否</span><br><span class="line">        request.session.exists(&quot;session_key&quot;)</span><br><span class="line">   </span><br><span class="line">        # 删除当前用户的所有Session数据</span><br><span class="line">        request.session.delete(&quot;session_key&quot;)</span><br><span class="line">   </span><br><span class="line">        request.session.set_expiry(value)</span><br><span class="line">            * 如果value是个整数，session会在些秒数后失效。</span><br><span class="line">            * 如果value是个datatime或timedelta，session就会在这个时间后失效。</span><br><span class="line">            * 如果value是0,用户关闭浏览器session就会失效。</span><br><span class="line">            * 如果value是None,session会依赖全局session失效策略。</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Django默认支持Session，并且默认是将Session数据存储在数据库中，即：django_session 表中。</span><br><span class="line">   </span><br><span class="line">a. 配置 settings.py</span><br><span class="line">   </span><br><span class="line">    SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.db&#39;   # 引擎（默认）</span><br><span class="line">       </span><br><span class="line">    SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;                       # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span><br><span class="line">    SESSION_COOKIE_PATH ＝ &quot;&#x2F;&quot;                               # Session的cookie保存的路径（默认）</span><br><span class="line">    SESSION_COOKIE_DOMAIN &#x3D; None                             # Session的cookie保存的域名（默认）</span><br><span class="line">    SESSION_COOKIE_SECURE &#x3D; False                            # 是否Https传输cookie（默认）</span><br><span class="line">    SESSION_COOKIE_HTTPONLY &#x3D; True                           # 是否Session的cookie只支持http传输（默认）</span><br><span class="line">    SESSION_COOKIE_AGE &#x3D; 1209600                             # Session的cookie失效日期（2周）（默认）</span><br><span class="line">    SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; False                  # 是否关闭浏览器使得Session过期（默认）</span><br><span class="line">    SESSION_SAVE_EVERY_REQUEST &#x3D; False                       # 是否每次请求都保存Session，默认修改之后才保存（默认）</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django之cookie与session组件</tag>
        <tag>Django cookie</tag>
        <tag>Django session</tag>
        <tag>会话</tag>
        <tag>会话跟踪</tag>
        <tag>会话基数</tag>
        <tag>cookie</tag>
        <tag>session</tag>
        <tag>set_cookie</tag>
        <tag>delete_cookie</tag>
        <tag>设置cookie</tag>
        <tag>删除cookie</tag>
        <tag>设置session</tag>
        <tag>删除session</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之中间件组件</title>
    <url>/e2ebcce3.html</url>
    <content><![CDATA[<p>中间件顾名思义，是介于<code>request</code>与<code>response</code>处理之间的一道处理过程，相对比较轻量级，并且在全局上改变<code>django</code>的输入与输出。因为改变的是全局，所以需要谨慎实用，用不好会影响到性能。</p>
<a id="more"></a>

<p>如果你想修改请求，例如被传送到view中的<code>**HttpRequest**</code>对象。 或者你想修改view返回的<code>**HttpResponse**</code>对象，这些都可以通过中间件来实现。</p>
<p>可能你还想在view执行之前做一些操作，这种情况就可以用 <code>middleware</code>来实现。</p>
<p><code>Django</code>默认的<code>Middleware</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE &#x3D; [</span><br><span class="line">    &#39;django.middleware.security.SecurityMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><p>中间件一共有4个方法：<code>process_request</code>，<code>process_view</code>，<code>process_exception</code>，<code>process_response</code>。</p>
<h4 id="process-request，process-response"><a href="#process-request，process-response" class="headerlink" title="process_request，process_response"></a>process_request，process_response</h4><p>当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求从<code>process_request</code>,最后到达<code>views</code>的函数中，<code>views</code>函数处理后，在依次穿过中间件，这个时候是<code>process_response</code>,最后返回给请求者。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200426162837.png" alt="img"></p>
<p>上述截图中的中间件都是django中的，我们也可以自己定义一个中间件，我们可以自己写一个类，但是必须继承MiddlewareMixin</p>
<p>需要导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200426164144.png" alt="img"></p>
<h5 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    print(&#39;我是index视图&#39;)</span><br><span class="line">    return HttpResponse(&#39;ddd&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="定义中间件"><a href="#定义中间件" class="headerlink" title="定义中间件"></a>定义中间件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;4&#x2F;26 16:32</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line"></span><br><span class="line">class Test1Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试1中间件请求&#39;, request.method, request.path)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试1中间件响应&#39;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">class Test2Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试2中间件请求&#39;, request.method, request.path)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试2中间件响应&#39;)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure>

<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>访问<code>index</code>视图路由，打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是测试1中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试2中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是index视图</span><br><span class="line">我是测试2中间件响应</span><br><span class="line">我是测试1中间件响应</span><br></pre></td></tr></table></figure>

<h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200427090755.png" alt="img"></p>
<h5 id="提前中断"><a href="#提前中断" class="headerlink" title="提前中断"></a>提前中断</h5><p>如果当请求到达请求2的时候直接不符合条件返回，即<code>return HttpResponse(&quot;Md2中断&quot;)</code>，程序将把请求直接发给中间件2返回，然后依次返回到请求者，中间件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;4&#x2F;26 16:32</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line"></span><br><span class="line">class Test1Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试1中间件请求&#39;, request.method, request.path)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试1中间件响应&#39;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">class Test2Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试2中间件请求&#39;, request.method, request.path)</span><br><span class="line">        return HttpResponse(&#39;我是测试2中间件中断&#39;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试2中间件响应&#39;)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是测试1中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试2中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试2中间件响应</span><br><span class="line">我是测试1中间件响应</span><br></pre></td></tr></table></figure>

<p>可以看到直接跳过了我们原来的视图函数，流程编程了如下：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200427091245.png" alt="img"></p>
<h4 id="process-view"><a href="#process-view" class="headerlink" title="process_view"></a>process_view</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">process_view(&#96;&#96;self&#96;&#96;, request, callback, callback_args, callback_kwargs)</span><br></pre></td></tr></table></figure>

<p>该方法有四个参数</p>
<p><code>request</code>是<code>HttpRequest</code>对象。</p>
<p><code>callback</code>是<code>Django</code>即将使用的视图函数。 （它是实际的函数对象，而不是函数的名称作为字符串。）</p>
<p><code>callback_args</code>是将传递给视图的位置参数的列表（无名分组分过来的值）.</p>
<p><code>callback_kwargs</code>是将传递给视图的关键字参数的字典（有名分组分过来的值）。 <code>callback_args</code>和<code>callback_kwargs</code>都不包含第一个视图参数（<code>request</code>）。</p>
<p><code>Django</code>会在调用视图函数之前调用<code>process_view</code>方法。</p>
<p>它应该返回<code>None</code>或一个<code>HttpResponse</code>对象。 如果返回<code>None</code>，<code>Django</code>将继续处理这个请求，执行任何其他中间件的<code>process_view</code>方法，然后在执行相应的视图。 如果它返回一个<code>HttpResponse</code>对象，<code>Django</code>不会调用适当的视图函数。 它将执行中间件的<code>process_response</code>方法并将应用到该<code>HttpResponse</code>并返回结果。</p>
<h5 id="定义中间件-1"><a href="#定义中间件-1" class="headerlink" title="定义中间件"></a>定义中间件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;4&#x2F;26 16:32</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line"></span><br><span class="line">class Test1Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试1中间件请求&#39;, request.method, request.path)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试1中间件响应&#39;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">    def process_view(self, request, callback, callback_args, callback_kwargs):</span><br><span class="line">        print(&#39;我是测试1中间件的process_view&#39;)</span><br><span class="line"></span><br><span class="line">class Test2Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试2中间件请求&#39;, request.method, request.path)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试2中间件响应&#39;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">    def process_view(self, request, callback, callback_args, callback_kwargs):</span><br><span class="line">        print(&#39;我是测试2中间件的process_view&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是测试1中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试2中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试1中间件的process_view</span><br><span class="line">我是测试2中间件的process_view</span><br><span class="line">我是index视图</span><br><span class="line">我是测试2中间件响应</span><br><span class="line">我是测试1中间件响应</span><br></pre></td></tr></table></figure>

<h5 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h5><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200427095711.png" alt="img"></p>
<h5 id="提前中断-1"><a href="#提前中断-1" class="headerlink" title="提前中断"></a>提前中断</h5><p>如果当请求到达<code>process_view2</code>的时候直接不符合条件返回，即<code>return HttpResponse(&quot;Md2中断&quot;)</code>，程序将把请求直接发给中间件2返回，然后依次返回到请求者，中间件如下：</p>
<p>即：中间件代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;4&#x2F;26 16:32</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line"></span><br><span class="line">class Test1Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试1中间件请求&#39;, request.method, request.path)</span><br><span class="line">        </span><br><span class="line">    def process_view(self, request, callback, callback_args, callback_kwargs):</span><br><span class="line">        print(&#39;我是测试1中间件的process_view&#39;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试1中间件响应&#39;)</span><br><span class="line">        return response    </span><br><span class="line"></span><br><span class="line">class Test2Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试2中间件请求&#39;, request.method, request.path)</span><br><span class="line">        </span><br><span class="line">    def process_view(self, request, callback, callback_args, callback_kwargs):</span><br><span class="line">        print(&#39;我是测试2中间件的process_view&#39;)</span><br><span class="line">        return HttpResponse(&#39;测试2中间件的process_view中断你&#39;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试2中间件响应&#39;)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是测试1中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试2中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试1中间件的process_view</span><br><span class="line">我是测试2中间件的process_view</span><br><span class="line">我是测试2中间件响应</span><br><span class="line">我是测试1中间件响应</span><br></pre></td></tr></table></figure>

<p>此时流程变为：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200427103811.png" alt="img"></p>
<p>直接跳过视图函数了</p>
<p>注意：<code>process_view</code>如果有返回值，会越过其他的<code>process_view</code>以及视图函数，但是所有的<code>process_response</code>都还会执行。</p>
<h4 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a>process_exception</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">process_exception(self, request, exception)</span><br></pre></td></tr></table></figure>

<p>该方法两个参数:</p>
<p>一个<code>HttpRequest</code>对象</p>
<p>一个<code>exception</code>是视图函数异常产生的<code>Exception</code>对象。</p>
<p>这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个<code>HttpResponse</code>对象。如果是<code>HttpResponse</code>对象，<code>Django</code>将调用模板和中间件中的<code>process_response</code>方法，并返回给浏览器，否则将默认处理异常。如果返回一个<code>None</code>，则交给下一个中间件的<code>process_exception</code>方法来处理异常。它的执行顺序也是按照中间件注册顺序的倒序执行。</p>
<h5 id="定义中间件-2"><a href="#定义中间件-2" class="headerlink" title="定义中间件"></a>定义中间件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;4&#x2F;26 16:32</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line"></span><br><span class="line">class Test1Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试1中间件请求&#39;, request.method, request.path)</span><br><span class="line"></span><br><span class="line">    def process_view(self, request, callback, callback_args, callback_kwargs):</span><br><span class="line">        print(&#39;我是测试1中间件的process_view&#39;)</span><br><span class="line"></span><br><span class="line">    def process_exception(self, request, exception):</span><br><span class="line">        print(&#39;我是测试1中间件的process_exception&#39;, exception)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试1中间件响应&#39;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">class Test2Middleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&#39;我是测试2中间件请求&#39;, request.method, request.path)</span><br><span class="line"></span><br><span class="line">    def process_view(self, request, callback, callback_args, callback_kwargs):</span><br><span class="line">        print(&#39;我是测试2中间件的process_view&#39;)</span><br><span class="line"></span><br><span class="line">    def process_exception(self, request, exception):</span><br><span class="line">        print(&#39;我是测试2中间件的process_exception&#39;, exception)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&#39;我是测试2中间件响应&#39;)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure>

<h5 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是测试1中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试2中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试1中间件的process_view</span><br><span class="line">我是测试2中间件的process_view</span><br><span class="line">我是index视图</span><br><span class="line">我是测试2中间件响应</span><br><span class="line">我是测试1中间件响应</span><br></pre></td></tr></table></figure>

<p>我们发现<code>process_exception</code>并没有执行，上面说过，只有视图函数出错他才会运行，此时流程为：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200427111007.png" alt="img"></p>
<h5 id="视图出错"><a href="#视图出错" class="headerlink" title="视图出错"></a>视图出错</h5><h6 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    print(&#39;我是index视图&#39;)</span><br><span class="line">    raise ValueError(&#39;报错吧&#39;)</span><br><span class="line">    return HttpResponse(&#39;ddd&#39;)</span><br></pre></td></tr></table></figure>

<h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是测试1中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试2中间件请求 GET &#x2F;wechat&#x2F;index&#x2F;</span><br><span class="line">我是测试1中间件的process_view</span><br><span class="line">我是测试2中间件的process_view</span><br><span class="line">我是index视图</span><br><span class="line">我是测试2中间件的process_exception 我是index视图，我出错了</span><br><span class="line">我是测试1中间件的process_exception 我是index视图，我出错了</span><br><span class="line">我是测试2中间件响应</span><br><span class="line">我是测试1中间件响应</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200427110730.png" alt="img"></p>
<h6 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h6><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200427110922.png" alt="img"></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li><p><strong>做<code>IP</code>访问频率限制</strong></p>
</li>
<li><p><strong>URL访问过滤（没登陆就要登陆才能访问）</strong><br>如果用户访问<code>login</code>则放过，其他也没检测是不是有<code>session</code>，已经有了放过，没有放回<code>login</code></p>
</li>
<li><p><code>Django</code>项目中默认启用了<code>csrf</code>保护,每次请求时通过<code>CSRF</code>中间件检查请求中是否有正确<code>token</code>值</p>
<p><code>Django</code>默认的<code>CSRF</code>中间件将拦截写到了<code>process_view</code>中，这样做是可以过滤请求方法带的有装饰器。</p>
<p>默认的csrf中间件拦截全部，如果某个请求中我们不需要，可以使用自带的装饰器</p>
<p><strong><code>fbv</code>下取消拦截</strong></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.views.decorators.csrf import csrf_exempt</span><br><span class="line">def test(request):</span><br><span class="line">	return ...</span><br></pre></td></tr></table></figure>

<p><code>cbv</code><strong>下取消拦截</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.views.decorators.csrf import csrf_exempt</span><br><span class="line">class TestView(View):</span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super().dispatch(request, *args, **kwargs)</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return HttpResponse(&#39;我是get&#39;)    </span><br><span class="line">    def post(self, request):</span><br><span class="line">        return HttpResponse(&#39;我是post&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>路由取消拦截</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.views.decorators.csrf import csrf_exempt</span><br><span class="line">import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^myview&#x2F;$&#39;, csrf_exempt(views.MyView.as_view()), name&#x3D;&#39;myview&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>单独拦截的装饰器</p>
<p>用法和取消拦截的一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.views.decorators.csrf import csrf_protect</span><br></pre></td></tr></table></figure>

<p>当有用户请求过来时，判断用户是否在白名单或者在黑名单里</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django之中间件组件</tag>
        <tag>django中间件</tag>
        <tag>Django登录验证</tag>
        <tag>django ip验证</tag>
        <tag>django过滤ip</tag>
        <tag>django访问频率</tag>
        <tag>process_request</tag>
        <tag>process_response</tag>
        <tag>process_view</tag>
        <tag>process_exception</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之分页器组件</title>
    <url>/10a5db73.html</url>
    <content><![CDATA[<p><code>Django</code>提供了一个新的类来帮助你管理分页数据，这个模块存放在<code>django.core.paginator.py</code>。其中有两个核心类，一个是<code>Paginator</code>类，另一个是<code>Page</code>类。</p>
<a id="more"></a>

<h3 id="Paginator类"><a href="#Paginator类" class="headerlink" title="Paginator类"></a><code>Paginator</code>类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paginator</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, object_list, per_page, orphans=<span class="number">0</span>,allow_empty_first_page=True</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        初始化操作</span></span><br><span class="line"><span class="string">        :param object_list:可以是列表，元组，查询集或其他含有 count() 或 len()方法的可切片对象。对于连续的分页，查询集应该有序，例如有order_by()项或默认ordering参数。</span></span><br><span class="line"><span class="string">        :param per_page:每一页中包含条目数目的最大值，不包括独立成页的那页。（见下面 orphans参数解释）。</span></span><br><span class="line"><span class="string">        :param orphans:当你使用此参数时说明你不希望最后一页只有很少的条目。如果最后一页的条目数少于等于orphans的值，则这些条目会被归并到上一页中（此时的上一页变为最后一页）。</span></span><br><span class="line"><span class="string">        :param allow_empty_first_page:默认允许第一页为空。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.object_list = object_list</span><br><span class="line">        self._check_object_list_is_ordered()</span><br><span class="line">        self.per_page = int(per_page)</span><br><span class="line">        self.orphans = int(orphans)</span><br><span class="line">        self.allow_empty_first_page = allow_empty_first_page</span><br></pre></td></tr></table></figure>

<h4 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h4><ul>
<li><code>Paginator.count</code>：所有页面对象总数，即统计<code>object_list</code>中<code>item</code>数目。<br>当计算<code>object_list</code>所含对象的数量时， <code>Paginator</code>会首先尝试调用<code>object_list.count()</code>。<br>如果<code>object_list</code>没有 <code>count() 方法</code>，<code>Paginator</code> 接着会回退使用<code>len(object_list)</code>。</li>
<li><code>Pagnator.num_pages</code>:页面总数。</li>
<li><code>pagiator.page_range</code>：页面范围，从1开始，例如[1,2,3,4]。</li>
</ul>
<h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><ul>
<li><code>Paginator.page(number)</code>：根据参数<code>number</code>返回一个<code>Page</code>对象。（<code>number</code>为1的倍数）即：<strong>下面的<code>Page</code>类对象</strong></li>
</ul>
<h3 id="Page类"><a href="#Page类" class="headerlink" title="Page类"></a><code>Page</code>类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>(<span class="params">collections.abc.Sequence</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, object_list, number, paginator</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param object_list:当前页上所有对象的列表。</span></span><br><span class="line"><span class="string">        :param number:当前页的序号，从1开始。</span></span><br><span class="line"><span class="string">        :param paginator:相关的Paginator对象。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.object_list = object_list</span><br><span class="line">        self.number = number</span><br><span class="line">        self.paginator = paginator</span><br></pre></td></tr></table></figure>

<h4 id="类方法-1"><a href="#类方法-1" class="headerlink" title="类方法"></a>类方法</h4><ul>
<li><code>Page.has_next()</code> 如果有下一页，则返回<code>True</code>。</li>
<li><code>Page.has_previous()</code> 如果有上一页，返回 <code>True</code>。</li>
<li><code>Page.has_other_pages()</code> 如果有上一页或下一页，返回<code>True</code>。</li>
<li><code>Page.next_page_number()</code> 返回下一页的页码。如果下一页不存在，抛出<code>InvlidPage</code>异常。</li>
<li><code>Page.previous_page_number()</code> 返回上一页的页码。如果上一页不存在，抛出<code>InvalidPage</code>异常。</li>
<li><code>Page.start_index()</code> 返回当前页上的第一个对象，相对于分页列表的所有对象的序号，从1开始。<br>比如，将五个对象的列表分为每页两个对象，第二页的<code>start_index()</code>会返回3。</li>
<li><code>Page.end_index()</code> 返回当前页上的最后一个对象，相对于分页列表的所有对象的序号，从1开始。<br>比如，将五个对象的列表分为每页两个对象，第二页的<code>end_index()</code> 会返回 4。</li>
</ul>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul>
<li><code>InvalidPage(Exception)</code>: 异常的基类，当<code>paginator</code>传入一个无效的页码时抛出。<br><code>Paginator.page()</code>放回在所请求的页面无效（比如不是一个整数）时，或者不包含任何对象时抛出异常。通常，捕获<code>InvalidPage</code>异常就够了，但是如果你想更加精细一些，可以捕获以下两个异常之一：</li>
<li><code>exception PageNotAnInteger</code>，当向<code>page()</code>提供一个不是整数的值时抛出。<br><code>exception EmptyPage</code>，当向<code>page()</code>提供一个有效值，但是那个页面上没有任何对象时抛出。<br>这两个异常都是<code>InalidPage</code>的子类，所以可以通过简单的<code>except InvalidPage</code>来处理它们。</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 获取所有文章queryset</span></span><br><span class="line">    articles = Article.objects.all()</span><br><span class="line">    <span class="comment"># pageinator = Paginator(object_list=articles, per_page=4, orphans=2, allow_empty_first_page=True)</span></span><br><span class="line">    <span class="comment"># 位置参数，等同于上方关键字参数，每页显示4条</span></span><br><span class="line">    pageinator = Paginator(articles, <span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 获取用户访问的页数</span></span><br><span class="line">    page = request.GET.get(<span class="string">&#x27;page&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取当前访问页的Page对象</span></span><br><span class="line">        article_datas = pageinator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        <span class="comment"># 页码不是整数时传送到第1页</span></span><br><span class="line">        article_datas = pageinator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        <span class="comment"># 页码不存在时，跳转到最后一页</span></span><br><span class="line">        article_datas = pageinator.page(pageinator.num_pages)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;articles&#x27;</span>:article_datas&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for arc in articles %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; arc.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% if articles.has_previous %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; articles.previous_page_number &#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>页码：&#123;&#123; articles.number &#125;&#125; of &#123;&#123; articles.paginator.num_pages &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">&#123;% if articles.has_next %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; articles.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/QQ%E5%BD%95%E5%B1%8F20200423142329.gif" alt="img"></p>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>我们稍加改动，让其显示所有页码</p>
<h4 id="视图-1"><a href="#视图-1" class="headerlink" title="视图"></a>视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 获取所有文章queryset</span></span><br><span class="line">    articles = Article.objects.all()</span><br><span class="line">    <span class="comment"># pageinator = Paginator(object_list=articles, per_page=4, orphans=2, allow_empty_first_page=True)</span></span><br><span class="line">    <span class="comment"># 位置参数，等同于上方关键字参数，每页显示4条</span></span><br><span class="line">    pageinator = Paginator(articles, <span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 获取用户访问的页数</span></span><br><span class="line">    page = request.GET.get(<span class="string">&#x27;page&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取当前访问页的Page对象</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        article_datas = pageinator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        <span class="comment"># 页码不是整数时传送到第1页</span></span><br><span class="line">        article_datas = pageinator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        <span class="comment"># 页码不存在时，跳转到最后一页</span></span><br><span class="line">        article_datas = pageinator.page(pageinator.num_pages)</span><br><span class="line">    <span class="comment"># 传递页面Page对象和页码列表</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;articles&#x27;</span>:article_datas, <span class="string">&#x27;page_code&#x27;</span>:pageinator.page_range&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for arc in articles %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; arc.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% if articles.has_previous %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; articles.previous_page_number &#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% for num in page_code %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; num &#125;&#125;&quot;</span>&#123;% <span class="attr">if</span> <span class="attr">num</span> == <span class="string">articles.number</span> %&#125; <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>页码：&#123;&#123; articles.number &#125;&#125; of &#123;&#123; articles.paginator.num_pages &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">&#123;% if articles.has_next %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; articles.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p>我们加上了页码，并高亮了当前页码。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/QQ%E5%BD%95%E5%B1%8F20200423143821.gif" alt="img"></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>我们当前文章较少，如果数量较多，如果页码达到100页，我们不可能将100个页码都显示在页面上，我们想要像百度一样，只显示10个页码，当前页码左右各5个要怎么做呢？我们数据量较少，我们这里只显示5个页码。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200423144342.png" alt="img"></p>
<h4 id="视图-2"><a href="#视图-2" class="headerlink" title="视图"></a>视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 获取所有文章queryset</span></span><br><span class="line">    articles = Article.objects.all()</span><br><span class="line">    <span class="comment"># pageinator = Paginator(object_list=articles, per_page=4, orphans=2, allow_empty_first_page=True)</span></span><br><span class="line">    <span class="comment"># 位置参数，等同于上方关键字参数，每页显示4条</span></span><br><span class="line">    pageinator = Paginator(articles, <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 获取用户访问的页数</span></span><br><span class="line">    page = request.GET.get(<span class="string">&#x27;page&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取当前访问页的Page对象</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        article_datas = pageinator.page(page)</span><br><span class="line">        page = int(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        <span class="comment"># 页码不是整数时传送到第1页</span></span><br><span class="line">        article_datas = pageinator.page(<span class="number">1</span>)</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        <span class="comment"># 页码不存在时，跳转到最后一页</span></span><br><span class="line">        article_datas = pageinator.page(pageinator.num_pages)</span><br><span class="line">        page = pageinator.num_pages</span><br><span class="line">    <span class="comment"># 处理页码</span></span><br><span class="line">    <span class="comment"># 如果页码大于10则进行在处理，否则输出全部页码</span></span><br><span class="line">    <span class="keyword">if</span> pageinator.num_pages&gt;<span class="number">10</span>:</span><br><span class="line">        <span class="comment"># 如果当前页往前两个页码已经到页首，则显示1-5页码</span></span><br><span class="line">        <span class="keyword">if</span> page<span class="number">-2</span> &lt;<span class="number">1</span>:</span><br><span class="line">            page_codes = range(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">        <span class="comment"># 如果当前页向后两个页码已经到页尾，则显示最后5个页码</span></span><br><span class="line">        <span class="keyword">elif</span> page+<span class="number">2</span> &gt; pageinator.num_pages:</span><br><span class="line">            page_codes = range(pageinator.num_pages<span class="number">-4</span>, pageinator.num_pages+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 否则显示当前页加前后两个页码</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_codes = range(page<span class="number">-2</span>, page+<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page_codes = pageinator.page_range</span><br><span class="line">    <span class="comment"># 传递页面Page对象和页码列表</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;articles&#x27;</span>:article_datas, <span class="string">&#x27;page_code&#x27;</span>:page_codes&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h4><p>模板跟上面没有任何变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for arc in articles %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; arc.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% if articles.has_previous %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; articles.previous_page_number &#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% for num in page_code %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; num &#125;&#125;&quot;</span>&#123;% <span class="attr">if</span> <span class="attr">num</span> == <span class="string">articles.number</span> %&#125; <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>页码：&#123;&#123; articles.number &#125;&#125; of &#123;&#123; articles.paginator.num_pages &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">&#123;% if articles.has_next %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; articles.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/QQ%E5%BD%95%E5%B1%8F20200423152037.gif" alt="img"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django之分页器组件</tag>
        <tag>Django分页</tag>
        <tag>Paginator</tag>
        <tag>Page</tag>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之模板层</title>
    <url>/3233f7d7.html</url>
    <content><![CDATA[<p>作为一个Web框架，<code>Django</code>需要一种动态生成HTML的便捷方法。最常用的方法依赖于模板。模板包含所需HTML输出的静态部分以及描述动态内容将被插入的一些特殊语法。</p>
<a id="more"></a>

<p><a href="https://www.diandian100.cn/148b93b.html">Django之视图层</a>中我们可以通过<code>render</code>方法，将数据渲染到指定的<code>html</code>模板中，本文介绍如何在模板中处理数据。</p>
<h3 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h3><p>在模板中输出变量的语法与<code>vue</code>一样使用双大括号：</p>
<p><code>{{var_name}}</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    s = <span class="string">&#x27;hello 中国&#x27;</span></span><br><span class="line">    l = [<span class="string">&#x27;中华&#x27;</span>, <span class="number">666</span>]</span><br><span class="line">    dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;刘德华&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line">    date = datetime.date(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">17</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Stu</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">            self.name = name</span><br><span class="line">    objs = [Stu(<span class="string">&#x27;孙悟空&#x27;</span>), Stu(<span class="string">&#x27;猪八戒&#x27;</span>), Stu(<span class="string">&#x27;沙和尚&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;s&#x27;</span>:s, <span class="string">&#x27;l&#x27;</span>:l, <span class="string">&#x27;dic&#x27;</span>:dic, <span class="string">&#x27;date&#x27;</span>:date, <span class="string">&#x27;objs&#x27;</span>:objs&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># index.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;字符串：&#123;% raw %&#125;&#123;&#123; s &#125;&#125;&#123;% endraw %&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;列表：&#123;% raw %&#125;&#123;&#123; l.0 &#125;&#125;&#123;% endraw %&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;字典：&#123;% raw %&#125;&#123;&#123; dic.name &#125;&#125;&#123;% raw %&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;日期：&#123;% raw %&#125;&#123;&#123; date.year &#125;&#125;&#123;% endraw %&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;对象：&#123;% raw %&#125;&#123;&#123; objs.0.name &#125;&#125;&#123;% endraw %&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200417161612.png" alt="img"></p>
<p>注意：句点符也可以用来引用对象的方法(无参数方法):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123;dic.name.upper&#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板过滤器"><a href="#模板过滤器" class="headerlink" title="模板过滤器"></a>模板过滤器</h3><p>即在模板中使用函数，语法为：<code>{{obj|filter__name:param}}</code></p>
<p>过滤器可以用来修改变量的显示样式。<br>过滤器的使用方式：<code>{{变量|过滤器方法}}</code> 。过滤器可以连续使用，形式如：<code>{{变量|过滤器方法1|过滤器方法2}}</code> 。<br>注意变量、管道符：（|）和过滤器方法之间不能有空格。<br>某些过滤器还可以接收参数，例如：<code>{{titleltruncatewords:30}}</code>，这句代码的意思是显示<code>title</code>的前30 个单词。<br>如果过滤器参数包含空格的话，参数就要用引号包括，例如：<code>{{list|join:","}}</code> 。</p>
<p>下面介绍几个常用的过滤器：</p>
<h4 id="default"><a href="#default" class="headerlink" title="default"></a><code>default</code></h4><p>如果一个变量是false或者为空，使用给定的默认值。否则，使用变量的值。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123; value|default:&quot;nothing&quot;&#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="capfirst"><a href="#capfirst" class="headerlink" title="capfirst"></a><code>capfirst</code></h4><p>首字母大写：<code>{{valuelcapfirst}}</code>。</p>
<h4 id="length"><a href="#length" class="headerlink" title="length"></a><code>length</code></h4><p>返回值的长度。它对字符串和列表都起作用。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123; value|length &#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>value</code> 是 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</code>，那么输出是 4。</p>
<h4 id="filesizeformat"><a href="#filesizeformat" class="headerlink" title="filesizeformat"></a><code>filesizeformat</code></h4><p>将值格式化为一个 “人类可读的” 文件尺寸 （例如 <code>13 KB</code>, <code>4.1 MB</code>, <code>102 bytes</code>, 等等）。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123; value|filesizeformat &#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>value</code> 是 123456789，输出将会是 <code>117.7 MB</code>。　　</p>
<h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a><code>cut</code></h4><p>删除指定值，例如去掉字符串中的空格：<code>{{value|cut:""}}</code> 。<br>如果value 是“ String with spaces ”，那么输出<code>Stringwithspaces</code> 。</p>
<h4 id="date"><a href="#date" class="headerlink" title="date"></a><code>date</code></h4><p>如果 <code>value=datetime.datetime.now()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123; value|date:&quot;Y-m-d&quot;&#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="escape"><a href="#escape" class="headerlink" title="escape"></a><code>escape</code></h4><p>将字符串进行HTML 转意，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">｛% autoescape off %｝</span><br><span class="line">&#123;&#123; titlelescape &#125;&#125;</span><br><span class="line">｛% endautoescape %｝</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>value</code> 是“<code>&lt;Django&gt;</code>”，则输出<code>＜Django＞</code> 。</p>
<h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a><code>slice</code></h4><p>如果 <code>value=&quot;hello world&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123; value|slice:&quot;2:-1&quot; &#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="filesizeformat-1"><a href="#filesizeformat-1" class="headerlink" title="filesizeformat"></a><code>filesizeformat</code></h4><p>将文件大小按照人类可读的形式显示，例如一个文件有<code>123456789</code> 个字节，那么使用<code>filesizeformat</code> 将会显示成<code>117 .7 MB</code> ，语法形式：<code>{{valuejfilesizeformat}}</code>。</p>
<h4 id="truncatechars"><a href="#truncatechars" class="headerlink" title="truncatechars"></a><code>truncatechars</code></h4><p>如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列（“…”）结尾。</p>
<p><strong>参数：</strong>要截断的字符数</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123; value|truncatechars:9 &#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="safe"><a href="#safe" class="headerlink" title="safe"></a><code>safe</code></h4><p><code>Django</code>的模板中会对<code>HTML</code>标签和<code>JS</code>等语法标签进行自动转义，原因显而易见，这样是为了安全。但是有的时候我们可能不希望这些<code>HTML</code>元素被转义，比如我们做一个内容管理系统，后台添加的文章中是经过修饰的，这些修饰可能是通过一个类似于<code>FCKeditor</code>编辑加注了HTML修饰符的文本，如果自动转义的话显示的就是保护HTML标签的源文件。为了在<code>Django</code>中关闭HTML的自动转义有两种方式，如果是一个单独的变量我们可以通过过滤器“|<code>safe</code>”的方式告诉<code>Django</code>这段代码是安全的不必转义。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">value&#x3D;&quot;&lt;a href&#x3D;&#39;&#39;&gt;点击&lt;&#x2F;a&gt;&quot;</span><br><span class="line">&#123;% raw %&#125;&#123;&#123; value|safe&#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>更多内置过滤器可参考官方文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL3poLWhhbnMvMi4wL3JlZi90ZW1wbGF0ZXMvYnVpbHRpbnMvI2J1aWx0LWluLWZpbHRlci1yZWZlcmVuY2U=">https://docs.djangoproject.com/zh-hans/2.0/ref/templates/builtins/#built-in-filter-reference<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h3><p>标签看起来像是这样的： <code>{% tag %}</code>。标签比变量更加复杂：一些在输出中创建文本，一些通过循环或逻辑来控制流程，一些加载其后的变量将使用到的额外信息到模版中。一些标签需要开始和结束标签 （例如<code>{% tag %} ...</code>标签 内容 … <code>{% endtag %}</code>）。</p>
<h4 id="for标签"><a href="#for标签" class="headerlink" title="for标签"></a><strong><code>for</code>标签</strong></h4><p>遍历每一个元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% for person in person_list %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; person.name &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>可以利用<code>{% for obj in list reversed %}</code>反向完成循环。</p>
<p>遍历一个字典：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% for key,val in dic.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; key &#125;&#125;:&#123;&#123; val &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>注：循环序号可以通过<code>{{forloop}}{% endaw %}`显示　　

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forloop.counter            当前循环位置（以数字1位起始）</span><br><span class="line">forloop.counter0           当前循环位置（以数字0位起始）</span><br><span class="line">forloop.revcounter         反向循环位置（列表的最后一位是l ，列表第一位是n )</span><br><span class="line">forloop.revcounter0        反向循环位置（列表的最后一位是0 ， 列表第一位是n- 1 )</span><br><span class="line">forloop.first              如果是当前循环的第一位，返回True</span><br><span class="line">forloop.last               如果是当前循环的最后一位，返回True</span><br></pre></td></tr></table></figure>

#### `for ... empty`

`for` 标签带有一个可选的`{% raw %}{% empty %}{% endraw %}</code> 从句，以便在给出的组是空的或者没有被找到时，可以有所操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% for person in person_list %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; person.name &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">    &lt;p&gt;sorry,no person here&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if-标签"><a href="#if-标签" class="headerlink" title="if 标签"></a><code>if</code> 标签</h4><p><code>{% raw %}{% if %}{% endraw %}</code>会对一个变量求值，如果它的值是“True”（存在、不为空、且不是boolean类型的false值），对应的内容块会输出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% if num &gt; 100 or num &lt; 0 %&#125;</span><br><span class="line">    &lt;p&gt;无效&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% elif num &gt; 80 and num &lt; 100 %&#125;</span><br><span class="line">    &lt;p&gt;优秀&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &lt;p&gt;凑活吧&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="with"><a href="#with" class="headerlink" title="with"></a><code>with</code></h4><p>使用一个简单地名字缓存一个复杂的变量，当你需要使用一个“昂贵的”方法（比如访问数据库）很多次的时候是非常有用的</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% with total&#x3D;business.employees.count %&#125;</span><br><span class="line">    &#123;&#123; total &#125;&#125; employee&#123;&#123; total|pluralize &#125;&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="csrf-token"><a href="#csrf-token" class="headerlink" title="csrf_token"></a><code>csrf_token</code></h4><p>这个标签用于跨站请求伪造保护</p>
<p>更多内置标签参见官方文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL3poLWhhbnMvMi4wL3JlZi90ZW1wbGF0ZXMvYnVpbHRpbnMvI2J1aWx0LWluLXRhZy1yZWZlcmVuY2U=">https://docs.djangoproject.com/zh-hans/2.0/ref/templates/builtins/#built-in-tag-reference<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="人性化语义标签"><a href="#人性化语义标签" class="headerlink" title="人性化语义标签"></a>人性化语义标签</h3><p>除了上述功能性标签外， <code>Django</code> 还提供了很多辅助性标签，这些标签只是为了使变量输<br>出变得更加可读，下面对这些标签进行简单介绍。<br>首先为了使用这些标签，需要在<code>INSTALLED_APPS</code> 中注册<code>django .contrib.humanize</code>，<br>然后在模板中引用<code>humanize</code>:<code>{% raw %}{% load humanize % }{% endraw %}</code></p>
<h4 id="apnumber"><a href="#apnumber" class="headerlink" title="apnumber"></a><code>apnumber</code></h4><p>将数字1 ～ 9 转换为英文单词，但是其他数字不转换，如数字10 将被原样输出。<br>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数字1 被转换为one ;</span><br><span class="line">数字2 被转换为two ;</span><br><span class="line">数字10 仍显示10 ;</span><br></pre></td></tr></table></figure>

<p>如果当前工程语言是中文的话，数字将会被转换为对应的汉字，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; 1|apnumber &#125;&#125;</span><br><span class="line">&#123;&#123; 2|apnumber &#125;&#125;</span><br><span class="line">&#123;&#123; 5|apnurnber &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>如果当前工程语言是中文的话，数字将会被转换为对应的汉字，例如：</p>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一</span><br><span class="line">二</span><br><span class="line">五</span><br></pre></td></tr></table></figure>

<h4 id="intcomma"><a href="#intcomma" class="headerlink" title="intcomma"></a><code>intcomma</code></h4><p>输出以逗号分隔的数字，如4500 输出4,500， 4500.2 输出4,500.2 。</p>
<h4 id="intword"><a href="#intword" class="headerlink" title="intword"></a><code>intword</code></h4><p>以文字形式输出数字，如1000000 输出“ 1.0 million ”， 1200000 输出“ 1,2 Million ” 。<br>对于中文系统，将会输出对应的中文，如1200000 输出＂ 1.2 百万” 。</p>
<h4 id="naturalday"><a href="#naturalday" class="headerlink" title="naturalday"></a><code>naturalday</code></h4><p>将当前日期以及前后一天输出为today 、yesterday 和tomorrow ，而中文系统分别输出<br>“今天”“昨天”和“明天” 。</p>
<h4 id="naturaltime"><a href="#naturaltime" class="headerlink" title="naturaltime"></a><code>naturaltime</code></h4><p>对于日期时间格式，时间值与系统当前时间比较，然后输出结果。如当前时间输出<br>“ now ”， 29 秒前输出“ 29 sec onds ago ” 。如果使用naturaltime 输出今天、昨天、明天的话，<br>就会变成“现在”“ 23 小时·以后”“ 1 日之前” 。</p>
<h4 id="ordinal"><a href="#ordinal" class="headerlink" title="ordinal"></a><code>ordinal</code></h4><p>将数字转换为序数，如l 输出“ 1 st ”； 2 输出“ 2nd ”； 3 输出“ 3rd ” 。注意此时中文与<br>英文的输出一样。</p>
<h3 id="自定义标签或过滤器"><a href="#自定义标签或过滤器" class="headerlink" title="自定义标签或过滤器"></a>自定义标签或过滤器</h3><ol>
<li>确认settings已配置当前应用(命令行创建应用时系统默认会将该应用添加至<code>settings</code>之<code>INSTALLED_APPS</code>中)</li>
<li>当前应用中创建<code>templatetags</code>目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myproject</span><br><span class="line">    |——myproject</span><br><span class="line">    	|——__init__.py</span><br><span class="line">    	|——asgi.py</span><br><span class="line">    	|——settings.py</span><br><span class="line">    	|——urls.py</span><br><span class="line">    	|——wsgi.py</span><br><span class="line">    |——templates</span><br><span class="line">    |——myapp</span><br><span class="line">    	|——migrations</span><br><span class="line">    	|——templatetags</span><br><span class="line">    		|——__init__.py</span><br><span class="line">    		|——diy_tags.py</span><br><span class="line">    |——manage.py</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建自己过滤器和标签文件，如<code>myapp/templatetags/diy_tags.py</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"></span><br><span class="line"><span class="comment"># register的名字是固定的,不可改变</span></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_multi</span>(<span class="params">v1, v2</span>):</span></span><br><span class="line">    <span class="keyword">return</span>  v1*v2</span><br><span class="line">  </span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag_multi</span>(<span class="params">v1, v2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> v1 * v2</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_input</span>(<span class="params">id, cls</span>):</span></span><br><span class="line">    result = <span class="string">&quot;&lt;input type=&#x27;text&#x27; id=&#x27;%s&#x27; class=&#x27;%s&#x27;&gt;&quot;</span> % (id, cls)</span><br><span class="line">    <span class="keyword">return</span> mark_safe(result)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在要使用自定义标签和过滤器的<code>html</code>模板中导入自定义标签文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% load diy_tags %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在模板中使用自定义标签和过滤器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;h2&gt;原始：&#123;&#123; num &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2&gt;乘以2：&#123;&#123; num|filter_multi:2 &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2&gt;乘以字符串，重复输出num个字符串：&#123;&#123; num|filter_multi:&quot;中国&quot; &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2&gt;计算2*5 ： &#123;% tag_multi 2 5 %&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2&gt;计算num*5 ： &#123;% tag_multi num 5 %&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2&gt;判断num*2是否大于30：</span><br><span class="line"># 注意：filter可以用在if等语句后，simple_tag不可以</span><br><span class="line">&#123;% if num|filter_multi:2 &gt; 30 %&#125;</span><br><span class="line">大于30</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">小于30</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2&gt;输出表单：&lt;&#x2F;h2&gt;</span><br><span class="line">&#123;% format_input &#39;name_field&#39; &#39;input_class&#39; %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>   <code>num</code>为22的情况下渲染出的效果如下：</p>
<p>   <img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200420091651.png" alt="img"></p>
<h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p><code>Django</code>模版引擎中最强大也是最复杂的部分就是模版继承了。模版继承可以让您创建一个基本的“骨架”模版，它包含您站点中的全部元素，并且可以定义能够被子模版覆盖的 blocks 。</p>
<p>通过从下面这个例子开始，可以容易的理解模版继承：</p>
<p>我们创建一个基模板<code>layout.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;我的应用&#123;% endblock %&#125;-托小尼<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block sidebar %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/rd/&quot;</span>&gt;</span>开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;我是内容&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>当我们整体需要这样，只要改变某一块内容的时候，就可以继承它，我们假设为<code>index.html</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% extends &#39;layout.html&#39; %&#125;</span><br><span class="line">&#123;% block title %&#125;个人开发技巧&#123;% endblock %&#125;</span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line">    继承父级导航，后面我添加更多内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    我是文本正式内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>就这么简单，我们看下渲染后页面内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人开发技巧-托小尼<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/rd/&quot;</span>&gt;</span>开发<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    继承父级导航，后面我添加更多内容</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    我是文本正式内容</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用继承的一些提示：</p>
<ul>
<li><p>如果你在模版中使用 <code>{% raw %}{% extends %}{% endraw %}</code> 标签，它必须是模版中的第一个标签。其他的任何情况下，模版继承都将无法工作。</p>
</li>
<li><p>在base模版中设置越多的 <code>{% raw %}{% block %}{% endraw %}</code> 标签越好。请记住，子模版不必定义全部父模版中的blocks，所以，你可以在大多数blocks中填充合理的默认内容，然后，只定义你需要的那一个。多一点钩子总比少一点好。</p>
</li>
<li><p>如果你发现你自己在大量的模版中复制内容，那可能意味着你应该把内容移动到父模版中的一个 <code>{% raw %}{% block %}{% endraw %}</code> 中。</p>
</li>
<li><p>如果需要从父模板获取块的内容，则<code>&#123;&#123;block.super&#125;&#125;</code>变量将起作用。如果要添加到父块的内容，而不是完全重写父块，则这非常有用，应用场景如：基模板包含基本的css或者js静态资源，其他页面除了要使用这些基础的静态资源以外还要使用自己页面固定的静态资源，这个时候使用该变量可以很好地解决</p>
</li>
<li><p>为了更好的可读性，你也可以给你的 <code>{% raw %}{% endblock %}{% endraw %}</code> 标签一个 <em>名字</em> 。例如：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endblock content %&#125;</span><br><span class="line">&#123;% enbraw %&#125;</span><br></pre></td></tr></table></figure>

<p>在大型模版中，这个方法帮你清楚的看到哪一个　 <code>{% raw %}{% block %}{% endraw %}</code> 标签被关闭了。</p>
<p>不能在一个模版中定义多个相同名字的 <code>block</code> 标签。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django之模板层</tag>
        <tag>django模板过滤器</tag>
        <tag>Django模板标签</tag>
        <tag>Django人性化语义标签</tag>
        <tag>Django自定义标签</tag>
        <tag>Django自定义过滤器</tag>
        <tag>Django模板继承</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之用户认证组件</title>
    <url>/2d9c99e5.html</url>
    <content><![CDATA[<p>在进行用户登陆验证的时候，如果是自己写代码，就必须要先查询数据库，看用户输入的用户名是否存在于数据库中；如果用户存在于数据库中，然后再验证用户输入的密码，这样一来就要自己编写大量的代码。事实上，Django已经提供了内置的用户认证功能。</p>
<a id="more"></a>

<h3 id="auth模块"><a href="#auth模块" class="headerlink" title="auth模块"></a><code>auth</code>模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br></pre></td></tr></table></figure>

<p>这里介绍该模块的几个方法：</p>
<h4 id="authenticate"><a href="#authenticate" class="headerlink" title="authenticate"></a><code>authenticate</code></h4><p>提供了用户认证，即验证用户名以及密码是否正确,一般需要<code>username</code> <code>password</code>两个关键字参数。</p>
<p>如果认证信息有效，会返回一个 <code>User</code> 对象。<code>authenticate()</code>会在<code>User</code> 对象上设置一个属性标识那种认证后端认证了该用户，且该信息在后面的登录过程中是需要的。当我们试图登陆一个从数据库中直接取出来不经过<code>authenticate()</code>的<code>User</code>对象会报错的！！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_obj = auth.authenticate(username=<span class="string">&#x27;user&#x27;</span>, password=<span class="string">&#x27;user12345&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_obj:</span><br><span class="line">        print(user_obj, user_obj.last_name + user_obj.first_name, type(user_obj))</span><br></pre></td></tr></table></figure>

<p>如果账户密码不正确，会返回<code>None</code>。</p>
<h4 id="login-HttpRequest-user"><a href="#login-HttpRequest-user" class="headerlink" title="login(HttpRequest, user)　"></a><strong><code>login(HttpRequest, user)</code></strong>　</h4><p>该函数接受一个<code>HttpRequest</code>对象，以及一个认证了的<code>User</code>对象</p>
<p>此函数使用<code>django</code>的<code>session</code>框架给某个已认证的用户附加上<code>session id</code>等信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_obj = auth.authenticate(username=<span class="string">&#x27;user&#x27;</span>, password=<span class="string">&#x27;user12345&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_obj:</span><br><span class="line">        print(user_obj, user_obj.last_name + user_obj.first_name, type(user_obj))</span><br><span class="line">        auth.login(request, user_obj)</span><br><span class="line">        <span class="comment"># 打印所有session</span></span><br><span class="line">        print(request.session.items())</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user 张三子 &lt;class &#39;django.contrib.auth.models.User&#39;&gt;</span><br><span class="line">dict_items([(&#39;_auth_user_id&#39;, &#39;2&#39;), (&#39;_auth_user_backend&#39;, &#39;django.contrib.auth.backends.ModelBackend&#39;), (&#39;_auth_user_hash&#39;, &#39;b6e76123c8ddfd0bbd74224325f45129246db2ac&#39;)])</span><br></pre></td></tr></table></figure>

<p>本地<code>cookie</code>保存了<code>sessionid</code></p>
<h4 id="logout-request"><a href="#logout-request" class="headerlink" title="logout(request)"></a><code>logout(request)</code></h4><p>注销用户，该方法清除本地cookie和服务器session；该函数接受一个<code>HttpRequest</code>对象，无返回值。当调用该函数时，当前请求的session信息会全部清除。该用户即使没有登录，使用该函数也不会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_obj = auth.authenticate(username=<span class="string">&#x27;user&#x27;</span>, password=<span class="string">&#x27;user12345&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_obj:</span><br><span class="line">        print(user_obj, user_obj.last_name + user_obj.first_name, type(user_obj))</span><br><span class="line">        <span class="comment"># 登录</span></span><br><span class="line">        auth.login(request, user_obj)</span><br><span class="line">        <span class="comment"># 注销</span></span><br><span class="line">        auth.logout(request)</span><br><span class="line">        <span class="comment"># 打印session</span></span><br><span class="line">        print(request.session.items())</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user 张三子 &lt;class &#39;django.contrib.auth.models.User&#39;&gt;</span><br><span class="line">dict_items([])</span><br></pre></td></tr></table></figure>

<h3 id="User对象"><a href="#User对象" class="headerlink" title="User对象"></a><code>User</code>对象</h3><p><code>User</code> 对象属性：<code>username</code>， <code>password</code>（必填项）<code>password</code>用哈希算法保存到数据库</p>
<h4 id="is-authenticated"><a href="#is-authenticated" class="headerlink" title="is_authenticated()"></a><code>is_authenticated()</code></h4><p>如果是真正的 User 对象，返回值恒为 True 。 用于检查用户是否已经通过了认证。<br>通过认证并不意味着用户拥有任何权限，甚至也不检查该用户是否处于激活状态，这只是表明用户成功的通过了认证。 这个方法很重要, 在后台用<code>request.user.is_authenticated()</code>判断用户是否已经登录，如果<code>true</code>则可以向前台展示<code>request.user.name</code></p>
<p>要求：</p>
<p>1 用户登陆后才能访问某些页面，</p>
<p>2 如果用户没有登录就访问该页面的话直接跳到登录页面</p>
<p>3 用户在跳转的登陆界面中完成登陆后，自动访问跳转到之前访问的地址</p>
<p>方法1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_obj = auth.authenticate(username=<span class="string">&#x27;user&#x27;</span>, password=<span class="string">&#x27;user12345&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_obj:</span><br><span class="line">        print(user_obj, user_obj.last_name + user_obj.first_name, type(user_obj))</span><br><span class="line">        <span class="comment"># 登录</span></span><br><span class="line">        <span class="comment"># auth.login(request, user_obj)</span></span><br><span class="line">        <span class="comment"># 注销</span></span><br><span class="line">        auth.logout(request)</span><br><span class="line">        print(request.user.is_authenticated)</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<p><code>django</code>已经为我们设计好了一个用于此种情况的装饰器：<code>login_requierd()</code>，未登录自动302跳转到登录页面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_obj = auth.authenticate(username=<span class="string">&#x27;user&#x27;</span>, password=<span class="string">&#x27;user12345&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_obj:</span><br><span class="line">        print(user_obj, user_obj.last_name + user_obj.first_name, type(user_obj))</span><br><span class="line">        <span class="comment"># 登录</span></span><br><span class="line">        auth.login(request, user_obj)</span><br><span class="line">        <span class="comment"># 注销</span></span><br><span class="line">        <span class="comment"># auth.logout(request)</span></span><br><span class="line">        print(request.user.is_authenticated)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印session</span></span><br><span class="line">        print(request.session.items())</span><br></pre></td></tr></table></figure>

<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_obj = User.objects.create_user(username=<span class="string">&#x27;bbb&#x27;</span>, password=<span class="string">&#x27;bbb&#x27;</span>, email=<span class="string">&#x27;ss&#x27;</span>)</span><br><span class="line">    print(user_obj, type(user_obj))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;哦哦哦&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bbb &lt;class &#39;django.contrib.auth.models.User&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>重复创建会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django.db.utils.IntegrityError: (1062, &quot;Duplicate entry &#39;bbb&#39; for key &#39;username&#39;&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="check-password"><a href="#check-password" class="headerlink" title="check_password"></a><code>check_password</code></h4><p>用户需要修改密码的时候 首先要让他输入原来的密码 ，如果给定的字符串通过了密码检查，返回 <code>True</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_obj = auth.authenticate(username=<span class="string">&#x27;user&#x27;</span>, password=<span class="string">&#x27;user12345&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_obj:</span><br><span class="line">        print(user_obj, user_obj.last_name + user_obj.first_name, type(user_obj))</span><br><span class="line">        <span class="comment"># 登录</span></span><br><span class="line">        auth.login(request, user_obj)</span><br><span class="line"></span><br><span class="line">    pass_check = User.check_password(user_obj, raw_password=<span class="string">&#x27;user12345&#x27;</span>)</span><br><span class="line">    print(pass_check, type(pass_check))</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user 张三子 &lt;class &#39;django.contrib.auth.models.User&#39;&gt;</span><br><span class="line">True &lt;class &#39;bool&#39;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p>使用 set_password() 来修改密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_obj = User.objects.get(username=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    user_obj.set_password(<span class="string">&#x27;999&#x27;</span>)</span><br><span class="line">    user_obj.save()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>认证</tag>
        <tag>Django之用户认证组件</tag>
        <tag>Django登录</tag>
        <tag>Django修改密码</tag>
        <tag>django</tag>
        <tag>logout</tag>
        <tag>login</tag>
        <tag>djang创建用户</tag>
        <tag>django修改密码</tag>
      </tags>
  </entry>
  <entry>
    <title>Django入门系列</title>
    <url>/95282615.html</url>
    <content><![CDATA[<p><code>Django</code>是一个由<code>Python</code>写成的<code>Web</code>应用框架。本文主要介绍<code>Django</code>基础入门的一下知识，后续有基础点也会更新在其中，仅供参考查阅。</p>
<a id="more"></a>

<h3 id="初始Django"><a href="#初始Django" class="headerlink" title="初始Django"></a><a href="https://www.diandian100.cn/3af8bc7c.html">初始Django</a></h3><p>介绍<code>MVC</code>和<code>MTV</code>模型区别以及<code>Django</code>项目目录结构和入门示例</p>
<h3 id="Django之路由层"><a href="#Django之路由层" class="headerlink" title="Django之路由层"></a><a href="https://www.diandian100.cn/29c6b278.html">Django之路由层</a></h3><p>主要介绍<code>Django</code>的路由设置方式。</p>
<h3 id="Django的视图层"><a href="#Django的视图层" class="headerlink" title="Django的视图层"></a><a href="https://www.diandian100.cn/148b93b.html">Django的视图层</a></h3><p><code>Django</code>的请求和响应，<code>MTV</code>中的<code>V</code>，<code>Django</code>的核心功能区，这里只讲下<code>request</code>和<code>response</code>一些常用的方法。</p>
<h3 id="Django之模板层"><a href="#Django之模板层" class="headerlink" title="Django之模板层"></a><a href="https://www.diandian100.cn/3233f7d7.html">Django之模板层</a></h3><p><code>MTV</code>中的<code>T</code>，介绍其常用变量、过滤器标签的使用方法，以及自定义标签、过滤器的用法。</p>
<h3 id="Django之模型层"><a href="#Django之模型层" class="headerlink" title="Django之模型层"></a><a href="https://www.diandian100.cn/8c4e905f.html">Django之模型层</a></h3><p><code>MTV</code>中的<code>M</code>，介绍模型中常用的增删改查，及字段类型，字段参数的说明及使用。</p>
<h3 id="Django之模型关联"><a href="#Django之模型关联" class="headerlink" title="Django之模型关联"></a><a href="https://www.diandian100.cn/16b9a853.html">Django之模型关联</a></h3><p>这个太强大了，导致篇幅较长，但是内容很实在也很基础；包含一对一，一对多，多对多的之间的增删改查，以及多表之间的聚合分组查询，双下划线查询、F与Q查询，甚至包含关联管理器的用法，一定要看。</p>
<h3 id="Django之ContentType组件"><a href="#Django之ContentType组件" class="headerlink" title="Django之ContentType组件"></a><a href="https://www.diandian100.cn/3d38b118.html">Django之ContentType组件</a></h3><p>还是那句话这个组件很强大，正常的企业网站可能用不到，但是当你用到商品平台用到优惠券的时候就知道它是有多适合了。</p>
<h3 id="Django之分页器组件"><a href="#Django之分页器组件" class="headerlink" title="Django之分页器组件"></a><a href="https://www.diandian100.cn/10a5db73.html">Django之分页器组件</a></h3><p>自带的分页器，简单好理解。</p>
<h3 id="Django之forms组件"><a href="#Django之forms组件" class="headerlink" title="Django之forms组件"></a><a href="https://www.diandian100.cn/f8dd282d.html">Django之forms组件</a></h3><p>使用表单的福音，好用好强大。</p>
<h3 id="Django之cookie与session组件"><a href="#Django之cookie与session组件" class="headerlink" title="Django之cookie与session组件"></a><a href="https://www.diandian100.cn/41d3eaa2.html">Django之cookie与session组件</a></h3><p>这个是很基础的了，主要是会话操作。<code>Django</code>帮你我们封装好的很简单，使用很方便。</p>
<h3 id="Django之用户认证组件"><a href="#Django之用户认证组件" class="headerlink" title="Django之用户认证组件"></a><a href="https://www.diandian100.cn/2d9c99e5.html">Django之用户认证组件</a></h3><p>自带的用户认证组件，分分钟融入你的项目中。</p>
<h3 id="Django之中间件组件"><a href="#Django之中间件组件" class="headerlink" title="Django之中间件组件"></a><a href="https://www.diandian100.cn/e2ebcce3.html">Django之中间件组件</a></h3><p>中间件要好好学哈，几乎每个框架的的必备。</p>
<h3 id="Django之CBV"><a href="#Django之CBV" class="headerlink" title="Django之CBV"></a><a href="https://www.diandian100.cn/6f5ecc9e.html">Django之CBV</a></h3><p><strong>CBV（class base views）</strong> 就是在视图里使用类处理请求。我们学的面向对象，不能总是用方法吧，该是他出厂的时刻了。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django入门系列</tag>
        <tag>django教程</tag>
        <tag>django系列</tag>
        <tag>django组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Django整合Ueditor最新版</title>
    <url>/83e9f663.html</url>
    <content><![CDATA[<p>之前记录了两篇关于整合<code>Ueditor</code>的文章：<a href="https://www.diandian100.cn/3f02c688.html">Flask之封装<strong>ueditor</strong></a>、<a href="https://www.diandian100.cn/574181d3.html">vue使用<strong>ueditor</strong>前端配置</a>、<a href="https://www.diandian100.cn/9923e2ee.html">django使用<strong>ueditor</strong>服务器端配置</a>。其中在<a href="https://www.diandian100.cn/9923e2ee.html">django使用<strong>ueditor</strong>服务器端配置</a>我们采用的第三方包解决这个问题，然已经停更了，暂时急用也没有去费心封装一个类似的应用，网上有另一个包也可以帮我们解决这个问题，那就是<strong>DUEditor</strong>。</p>
<a id="more"></a>

<p>该文档写的也很详细，但是使用起来有些许坑需要我们来填下。另外文档中有一些笔误，我这边直接将该文档说明拿过来，就直接修改其中的笔误了。</p>
<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>因为配置个性化问题，本项目暂不支持<code>pip install</code>，如想使用，下载以后，把<code>DUEditor</code>扔到<code>django</code>项目目录即可，记得使用该仓库的<code>DUEditor</code>应用即可，没必要把整个项目down下来</p>
<h2 id="INSTALL-APPS"><a href="#INSTALL-APPS" class="headerlink" title="INSTALL_APPS"></a><code>INSTALL_APPS</code></h2><p>在<code>INSTALL_APPS</code>里面增加<code>DUEditor app</code>，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">	#........</span><br><span class="line">	&#39;DUEditor&#39;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="路由添加"><a href="#路由添加" class="headerlink" title="路由添加"></a>路由添加</h2><p>在<code>urls.py</code>中增加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path(&#39;ueditor&#x2F;&#39;,include(&#39;DUEditor.urls&#39; )),</span><br></pre></td></tr></table></figure>

<h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><p>在<code>models</code>中这样定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from DUEditor.models import UEditorField</span><br><span class="line">class Blog(models.Model):</span><br><span class="line">	Name&#x3D;models.CharField(,max_length&#x3D;100,blank&#x3D;True)</span><br><span class="line">	Content&#x3D;UEditorField(&#39;内容	&#39;,height&#x3D;100,width&#x3D;500,default&#x3D;&#39;test&#39;,toolbars&#x3D;&#39;mini&#39;,options&#x3D;&#123;&quot;elementPathEnabled&quot;:True&#125;,blank&#x3D;True)</span><br><span class="line"></span><br><span class="line"># 说明：</span><br><span class="line"># UEditorField继承自models.TextField,因此你可以直接将model里面定义的models.TextField直接改成UEditorField即可。</span><br><span class="line"># UEditorField提供了额外的参数：</span><br><span class="line">#     toolbars:配置你想显示的工具栏，取值为mini,normal,full,besttome, 代表小，一般，全部,涂伟忠贡献的一种样式。如果默认的工具栏不符合您的要求，您可以在settings里面配置自己的显示按钮。参见后面介绍。</span><br><span class="line">#     options：其他UEditor参数，字典类型。参见Ueditor的文档ueditor_config.js里面的说明。</span><br><span class="line">#     css:编辑器textarea的CSS样式</span><br><span class="line">#     width，height:编辑器的宽度和高度，以像素为单位。</span><br></pre></td></tr></table></figure>

<h2 id="表单使用"><a href="#表单使用" class="headerlink" title="表单使用"></a>表单使用</h2><p>在表单中使用非常简单，与常规的<code>form</code>字段没什么差别，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class TestUeditorModelForm(forms.ModelForm):</span><br><span class="line">	class Meta:</span><br><span class="line">    	model&#x3D;Blog</span><br><span class="line"># 如果不是用ModelForm，可以有两种方法使用：</span><br><span class="line"></span><br><span class="line"># 1: 使用forms.UEditorField</span><br><span class="line"></span><br><span class="line">from  DUEditor.forms import UEditorField</span><br><span class="line">class TestUEditorForm(forms.Form):</span><br><span class="line">    Description&#x3D;UEditorField(&quot;描述&quot;,initial&#x3D;&quot;abc&quot;,width&#x3D;600,height&#x3D;800)</span><br><span class="line"></span><br><span class="line"># 2: widgets.UEditorWidget</span><br><span class="line"></span><br><span class="line">from  UEditor.widgets import UEditorWidget</span><br><span class="line">class TestUEditorForm(forms.Form):</span><br><span class="line">	Content&#x3D;forms.CharField(label&#x3D;&quot;内容&quot;,widget&#x3D;UEditorWidget(width&#x3D;800,height&#x3D;500,toolbars&#x3D;&#123;&#125;))</span><br><span class="line"></span><br><span class="line"># widgets.UEditorWidget和forms.UEditorField的输入参数与上述models.UEditorField一样。</span><br></pre></td></tr></table></figure>

<h2 id="Settings配置"><a href="#Settings配置" class="headerlink" title="Settings配置"></a>Settings配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Django的Settings可以配置以下参数：</span><br><span class="line">      UEDITOR_SETTINGS&#x3D;&#123;</span><br><span class="line">          &quot;toolbars&quot;:&#123;           #定义多个工具栏显示的按钮，允行定义多个</span><br><span class="line">              &quot;name1&quot;:[[ &#39;source&#39;, &#39;|&#39;,&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;]],</span><br><span class="line">              &quot;name2&quot;:[]</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;images_upload&quot;:&#123;</span><br><span class="line">              &quot;allow_type&quot;:&quot;jpg,png&quot;,    #定义允许的上传的图片类型</span><br><span class="line">              &quot;max_size&quot;:&quot;2222kb&quot;        #定义允许上传的图片大小，0代表不限制</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;files_upload&quot;:&#123;</span><br><span class="line">               &quot;allow_type&quot;:&quot;zip,rar&quot;,   #定义允许的上传的文件类型</span><br><span class="line">               &quot;max_size&quot;:&quot;2222kb&quot;       #定义允许上传的文件大小，0代表不限制</span><br><span class="line">           &#125;,,</span><br><span class="line">          &quot;image_manager&quot;:&#123;</span><br><span class="line">               &quot;location&quot;:&quot;&quot;         #图片管理器的位置,如果没有指定，默认跟图片路径上传一样</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="在模板里面："><a href="#在模板里面：" class="headerlink" title="在模板里面："></a>在模板里面：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    ......</span><br><span class="line">    &#123;&#123; form.media &#125;&#125;        #这一句会将所需要的CSS和JS加进来。</span><br><span class="line">    ......</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">注：运行collectstatic命令，将所依赖的css,js之类的文件复制到&#123;&#123;STATIC_ROOT&#125;&#125;文件夹里面。</span><br></pre></td></tr></table></figure>

<h2 id="inclusion-tag的使用"><a href="#inclusion-tag的使用" class="headerlink" title="inclusion tag的使用"></a>inclusion tag的使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%load ueditor_tags %&#125;</span><br><span class="line">&lt;script id&#x3D;&quot;container&quot; name&#x3D;&quot;container&quot;  style&#x3D;&quot;display: inline-block;&quot; type&#x3D;&quot;text&#x2F;plain&quot;&gt;</span><br><span class="line">  初始化内容</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;%ueditor &quot;container&quot;%&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h2><ul>
<li>本程序安装包里面已经包括了Ueditor，不需要再额外安装。</li>
<li>目前暂时不支持ueditor的插件</li>
<li>别忘记了运行collectstatic命令，该命令可以将ueditor的所有文件复制到文件夹里面</li>
<li>Django默认开启了CSRF中间件，因此如果你的表单没有加入<code>{% csrf_token %}</code>，那么当您上传文件和图片时会失败</li>
<li>不过编辑器里面的图片上传View做了CSRF取消设置</li>
<li>上传图片失败提示：Refused to display ‘127.0.0.1:8000/ueditor/controller/?imagePathFormat=&amp;filePathFormat=&amp;action=uploadimage’ in a frame because it set ‘X-Frame-Options’ to ‘deny’.解决方案：注释掉中间件中的’<code>django.middleware.clickjacking.XFrameOptionsMiddleware</code>‘。</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="助手函数"><a href="#助手函数" class="headerlink" title="助手函数"></a>助手函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.helper.generate_filepath.py</span><br><span class="line"></span><br><span class="line">import uuid</span><br><span class="line">def generate_filepath(instanse, filename):</span><br><span class="line">    &#39;&#39;&#39;生成新的文件&#39;&#39;&#39;</span><br><span class="line">    # 获取文件后缀</span><br><span class="line">    ext &#x3D; filename.split(&#39;.&#39;)[-1]</span><br><span class="line">    # 随机生成文件名</span><br><span class="line">    filename &#x3D; &quot;%s.%s&quot; % (uuid.uuid4().hex, ext)</span><br><span class="line">    # 返回新文件名</span><br><span class="line">    return filename</span><br></pre></td></tr></table></figure>

<h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">from DUEditor.models import UEditorField</span><br><span class="line"></span><br><span class="line">from app.helper import generate_filepath</span><br><span class="line"># Create your models here.</span><br><span class="line"># 通用字段</span><br><span class="line">class Common(models.Model):</span><br><span class="line">    id &#x3D; models.AutoField(primary_key &#x3D; True)</span><br><span class="line">    keyword &#x3D; models.CharField(max_length&#x3D;255, verbose_name&#x3D;&#39;关键词&#39;, null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    description &#x3D; models.CharField(max_length&#x3D;255, verbose_name&#x3D;&#39;描述&#39;, null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    created_time &#x3D; models.DateTimeField(auto_now_add&#x3D;True, verbose_name&#x3D;&#39;创建时间&#39;)</span><br><span class="line">    updated_time &#x3D; models.DateTimeField(auto_now&#x3D;True, verbose_name&#x3D;&#39;更新时间&#39;)</span><br><span class="line">    deleted_time &#x3D; models.DateTimeField(verbose_name&#x3D;&#39;删除时间&#39;, null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title if hasattr(self, &#39;title&#39;) else self.name</span><br><span class="line">    class Meta:</span><br><span class="line">        abstract &#x3D; True</span><br><span class="line">class Post(Common):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;&#39;单页标题&#39;, null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    thumbnail &#x3D; models.ImageField(upload_to&#x3D;generate_filepath, null&#x3D;True, blank&#x3D;True, verbose_name&#x3D;&#39;缩略图&#39;)</span><br><span class="line">    body &#x3D; UEditorField(verbose_name&#x3D;&#39;内容&#39;, toolbars&#x3D;&quot;full&quot;, null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    cat &#x3D; models.ForeignKey(to&#x3D;Cat, verbose_name&#x3D;&#39;栏目&#39;, on_delete&#x3D;models.CASCADE, null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &#39;文章&#39;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br></pre></td></tr></table></figure>

<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>我这里使用的<code>django admin</code>，实际视图参照文档即可：</p>
<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, re_path, include</span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.views.static import serve</span><br><span class="line"></span><br><span class="line">from app import views</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;test&#x2F;&#39;, views.test),</span><br><span class="line">    re_path(&#39;^media&#x2F;(?P&lt;path&gt;.*)$&#39;, serve, &#123;&#39;document_root&#39;: settings.MEDIA_ROOT&#125;),</span><br><span class="line">    path(&#39;ueditor&#x2F;&#39;,include(&#39;DUEditor.urls&#39; )),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">Django settings for wechat project.</span><br><span class="line"></span><br><span class="line">Generated by &#39;django-admin startproject&#39; using Django 3.0.5.</span><br><span class="line"></span><br><span class="line">For more information on this file, see</span><br><span class="line">https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;3.0&#x2F;topics&#x2F;settings&#x2F;</span><br><span class="line"></span><br><span class="line">For the full list of settings and their values, see</span><br><span class="line">https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;3.0&#x2F;ref&#x2F;settings&#x2F;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br><span class="line">BASE_DIR &#x3D; os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Quick-start development settings - unsuitable for production</span><br><span class="line"># See https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;3.0&#x2F;howto&#x2F;deployment&#x2F;checklist&#x2F;</span><br><span class="line"></span><br><span class="line"># SECURITY WARNING: keep the secret key used in production secret!</span><br><span class="line">SECRET_KEY &#x3D; &#39;cx2qq($r2ux^0%b6xm7+gz&#x3D;_mzt&#x3D;5a#5&amp;@j@ahp_*72%933)ng&#39;</span><br><span class="line"></span><br><span class="line"># SECURITY WARNING: don&#39;t run with debug turned on in production!</span><br><span class="line">DEBUG &#x3D; True</span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS &#x3D; []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Application definition</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;app.apps.AppConfig&#39;,</span><br><span class="line">    &#39;DUEditor&#39;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE &#x3D; [</span><br><span class="line">    &#39;django.middleware.security.SecurityMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,</span><br><span class="line">    # DUEditor图片上传失败</span><br><span class="line">    # &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">]</span><br><span class="line">from django.middleware.clickjacking import XFrameOptionsMiddleware</span><br><span class="line">ROOT_URLCONF &#x3D; &#39;wechat.urls&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WSGI_APPLICATION &#x3D; &#39;wechat.wsgi.application&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Internationalization</span><br><span class="line"># https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;3.0&#x2F;topics&#x2F;i18n&#x2F;</span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE &#x3D; &#39;zh-hans&#39;</span><br><span class="line"></span><br><span class="line">TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39;</span><br><span class="line"></span><br><span class="line">USE_I18N &#x3D; True</span><br><span class="line"></span><br><span class="line">USE_L10N &#x3D; True</span><br><span class="line"></span><br><span class="line">USE_TZ &#x3D; False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Static files (CSS, JavaScript, Images)</span><br><span class="line"># https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;3.0&#x2F;howto&#x2F;static-files&#x2F;</span><br><span class="line"># 配置上传路径</span><br><span class="line">MEDIA_ROOT &#x3D; os.path.join(BASE_DIR, &#39;uploads&#39;)</span><br><span class="line"># 配置访问上传文件的公用url路径</span><br><span class="line">MEDIA_URL &#x3D; &#39;&#x2F;media&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS &#x3D; [</span><br><span class="line">            os.path.join(BASE_DIR, &quot;static&#x2F;&quot;),</span><br><span class="line">			]</span><br><span class="line">STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;</span><br><span class="line">STATIC_ROOT &#x3D; os.path.join(BASE_DIR, &quot;static_new&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UEDITOR_SETTINGS&#x3D;&#123;</span><br><span class="line">            &quot;toolbars&quot;:&#123;           #定义多个工具栏显示的按钮，允行定义多个</span><br><span class="line">                &quot;name1&quot;:[[ &#39;source&#39;, &#39;|&#39;,&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;]],</span><br><span class="line">                &quot;name2&quot;:[]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;images_upload&quot;:&#123;</span><br><span class="line">                &quot;allow_type&quot;:&quot;jpg,png&quot;,#定义允许的上传的图片类型</span><br><span class="line">                &quot;max_size&quot;:&quot;2222kb&quot;        #定义允许上传的图片大小，0代表不限制</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;files_upload&quot;:&#123;</span><br><span class="line">                 &quot;allow_type&quot;:&quot;zip,rar&quot;,   #定义允许的上传的文件类型</span><br><span class="line">                 &quot;max_size&quot;:&quot;2222kb&quot;       #定义允许上传的文件大小，0代表不限制</span><br><span class="line">             &#125;,</span><br><span class="line">            &quot;image_manager&quot;:&#123;</span><br><span class="line">                 &quot;location&quot;:&quot;&quot;         #图片管理器的位置,如果没有指定，默认跟图片路径上传一样</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>以上只放了跟<code>DUEditor</code>相关的配置，数据库等其他配置按照自己实际设置</p>
<h4 id="收集静态文件"><a href="#收集静态文件" class="headerlink" title="收集静态文件"></a>收集静态文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure>

<h4 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h4><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200527155202.png" alt="img"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django整合Ueditor最新版</tag>
        <tag>django整合ueditor</tag>
        <tag>DUEditor</tag>
        <tag>ueditor</tag>
        <tag>X-Frame-Options</tag>
      </tags>
  </entry>
  <entry>
    <title>Django最近一年按月统计数据</title>
    <url>/8c241345.html</url>
    <content><![CDATA[<p>最近用到<code>Echart</code>等统计图，接口数据接收的是日、月等固定周期的数据总数，本人后台使用的<code>Django</code>，想走捷径，在网上查了很多资料，经测试，基本都是无效的。这里就记录下自己写这个接口的整个流程。</p>
<a id="more"></a>

<h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><h3 id="填充数据"><a href="#填充数据" class="headerlink" title="填充数据"></a>填充数据</h3><p>数据先要准备好，你可以使用<code>faker</code>，本人只是临时测试这个接口，直接使用了<code>mysql</code>的查询插入语句进行了数据填充，<code>mysql</code>查询插入语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into data(create_time, name, phone, city) select create_time, name, phone, city from wechat_formsmodel</span><br></pre></td></tr></table></figure>

<h3 id="修改数据时间"><a href="#修改数据时间" class="headerlink" title="修改数据时间"></a>修改数据时间</h3><p>因为按时间统计我这里复制过来的数据时间大都相同，到了这一步只能用随机函数修改下我们的时间字段内容，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update data set create_time&#x3D;concat(&#39;201&#39;, floor(1+rand()*9), &#39;-&#39;, floor(1+rand()*12), &#39;-&#39;, floor(1+rand()*28), &#39; &#39;, floor(rand()*24),&#39;:&#39;,floor(rand()*59),&#39;:&#39;,floor(rand()*59))</span><br></pre></td></tr></table></figure>

<p>将时间随机修改为2011年到2019年</p>
<p><code>rand()</code>随机一个0到1的小数，<code>floor</code>去除小数。这里有两个坑：月份和日期不能为零，故前面我都加了1；月份中2月会有28天，所以插入的时候如果2月分配的随机日期为28以上会报错停止运行，故日期都是1号到28号。</p>
<p>此时数据准备完毕。``</p>
<h2 id="准备view视图"><a href="#准备view视图" class="headerlink" title="准备view视图"></a>准备view视图</h2><h3 id="初步筛选数据"><a href="#初步筛选数据" class="headerlink" title="初步筛选数据"></a>初步筛选数据</h3><p>先筛选出近一年的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> dateutil.relativedelta <span class="keyword">import</span> relativedelta</span><br><span class="line"><span class="comment"># 一年前的今天</span></span><br><span class="line">start = datetime.datetime.now() - relativedelta(months=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"><span class="comment"># 获取近一年内数据</span></span><br><span class="line">data = DatasModel.objects.filter(create_time__range=(start, now))</span><br></pre></td></tr></table></figure>

<h3 id="利用年月进行分组查询"><a href="#利用年月进行分组查询" class="headerlink" title="利用年月进行分组查询"></a>利用年月进行分组查询</h3><p>使用<code>sql</code>的<code>year</code>和<code>month</code>进行分组查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">res = data.extra(select=&#123;<span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;year(create_time)&#x27;</span>, <span class="string">&#x27;month&#x27;</span>: <span class="string">&#x27;month(create_time)&#x27;</span>&#125;).values(<span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;month&#x27;</span>).annotate(count=Count(<span class="string">&#x27;create_time&#x27;</span>)).order_by()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<p>预览下数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;SoftDeleteQuerySet [&#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2018</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">349</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2018</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">522</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2018</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">545</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">549</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2018</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">556</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">477</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">550</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">555</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">565</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">536</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">533</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">539</span>&#125;, &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2019</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">7</span>&#125;]&gt;</span><br></pre></td></tr></table></figure>

<p>因为我是随机修改的，所以时间都是错乱的，程序正常运行时间会正常录入不会出现这种问题，尽然我这里出现这种问题了，本来就要整理数据格式，所以顺手修改下顺序。</p>
<h3 id="整理格式"><a href="#整理格式" class="headerlink" title="整理格式"></a>整理格式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接收整理好的数据格式</span></span><br><span class="line">res_data=[]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">    <span class="comment"># 原始年份和日期都是整数型，月份小于10我要前置0，保持两位数</span></span><br><span class="line">    month = str(item.get(<span class="string">&#x27;month&#x27;</span>)) <span class="keyword">if</span> item.get(<span class="string">&#x27;month&#x27;</span>)&gt;<span class="number">9</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span>+str(item.get(<span class="string">&#x27;month&#x27;</span>))</span><br><span class="line">    res_data.append(&#123;</span><br><span class="line">    <span class="string">&#x27;date&#x27;</span>: str(item.get(<span class="string">&#x27;year&#x27;</span>))+<span class="string">&#x27;-&#x27;</span>+month,</span><br><span class="line">    <span class="string">&#x27;count&#x27;</span>:item.get(<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">print(res_data)</span><br></pre></td></tr></table></figure>

<p>预览下整理后的格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2018-09&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">349</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2018-10&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">522</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2018-11&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">545</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-04&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">549</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2018-12&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">556</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-01&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">477</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-08&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">550</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-03&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">555</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-06&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">565</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-07&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">536</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-05&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">533</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-02&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">539</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-09&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">7</span>&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="整理排序-正式上线可省略该步骤"><a href="#整理排序-正式上线可省略该步骤" class="headerlink" title="整理排序(正式上线可省略该步骤)"></a>整理排序(正式上线可省略该步骤)</h3><p>格式达到了我们想要的，在整理下顺序吧，按时间排序，<code>python</code>列表为我们准备了<code>sort</code>排序方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按日期排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortList</span>(<span class="params">item</span>):</span></span><br><span class="line">    <span class="keyword">return</span> item.get(<span class="string">&#x27;date&#x27;</span>)</span><br><span class="line">res_data.sort(key=sortList)</span><br><span class="line">print(res_data)</span><br></pre></td></tr></table></figure>

<p>因为我们列表里嵌套的是字典，所以我们只能用函数指定列表用字典中的哪个键进行排序</p>
<p>预览排序后的效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2018-09&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">349</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2018-10&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">522</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2018-11&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">545</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2018-12&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">556</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-01&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">477</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-02&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">539</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-03&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">555</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-04&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">549</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-05&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">533</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-06&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">565</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-07&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">536</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-08&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">550</span>&#125;, &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2019-09&#x27;</span>, <span class="string">&#x27;count&#x27;</span>: <span class="number">7</span>&#125;]</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>这个就是我们最后需要的格式，直接响应给前端就能用了，最后附上<code>view</code>完整代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    <span class="keyword">from</span> dateutil.relativedelta <span class="keyword">import</span> relativedelta</span><br><span class="line">    <span class="comment"># 一年前的今天</span></span><br><span class="line">    start = datetime.datetime.now() - relativedelta(months=<span class="number">12</span>)</span><br><span class="line">    <span class="comment"># 当前时间</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="comment"># 获取近一年内数据</span></span><br><span class="line">    data = FormsModel.objects.filter(create_time__range=(start, now))</span><br><span class="line">    res = data.extra(select=&#123;<span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;year(create_time)&#x27;</span>, <span class="string">&#x27;month&#x27;</span>: <span class="string">&#x27;month(create_time)&#x27;</span>&#125;).values(<span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;month&#x27;</span>).annotate(count=Count(<span class="string">&#x27;create_time&#x27;</span>)).order_by()</span><br><span class="line">    res_data=[]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">        month = str(item.get(<span class="string">&#x27;month&#x27;</span>)) <span class="keyword">if</span> item.get(<span class="string">&#x27;month&#x27;</span>)&gt;<span class="number">9</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span>+str(item.get(<span class="string">&#x27;month&#x27;</span>))</span><br><span class="line">        res_data.append(&#123;</span><br><span class="line">            <span class="string">&#x27;date&#x27;</span>: str(item.get(<span class="string">&#x27;year&#x27;</span>))+<span class="string">&#x27;-&#x27;</span>+month,</span><br><span class="line">            <span class="string">&#x27;count&#x27;</span>:item.get(<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">sortList</span>(<span class="params">item</span>):</span></span><br><span class="line">        <span class="keyword">return</span> item.get(<span class="string">&#x27;date&#x27;</span>)</span><br><span class="line">    res_data.sort(key=sortList)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(res_data)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django按月统计</tag>
        <tag>Django日期统计</tag>
        <tag>Django日期分组</tag>
        <tag>Echart</tag>
        <tag>faker</tag>
        <tag>sql复制插入</tag>
      </tags>
  </entry>
  <entry>
    <title>Django模型字段通用属性</title>
    <url>/83419695.html</url>
    <content><![CDATA[<p>每一个字段都需要一系列属性，例如使用CharField 时必须给出max_length 属性值， 除了以上特殊字段属性外， Django 还为所有字段提供了一系列通用属性，这些属性都是可选属性。</p>
<a id="more"></a>

<h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><p>默认值为<code>True</code> ， 此时保存模型时·， <code>Django</code> 会在数据库的对应字段中保存空。<br>对于文本型字段，尽可能不使用<code>null</code> 属性，因为当使用默认值<code>null</code> 时，数据库中就可能出现两种空数据： <code>NULL</code> 和空字符串，而<code>Django</code> 默认使用空字符串。</p>
<h4 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h4><p>默认值为<code>False</code> ，当设置<code>Field.blank=True</code> 时字段值允许为空。<br>注意与<code>Field.null</code> 属性不同的是， <code>null</code> 只是表示数据库值而<code>blank</code> 用于表单验证，当字段属性<code>blank=True</code> 时，表单，验证将允许字段值为空，但是当<code>blank=False</code> 时，表单字段将变成必填字段。</p>
<h4 id="choices"><a href="#choices" class="headerlink" title="choices"></a>choices</h4><p>属性值为一个可迭代对象，如列表或者元组，迭代对象的每个成员包括两个字符串。当字段设置了<code>choices</code> 属性时，字段在网页中将会以下拉列表的形式显示。<br>列表或元组的第一个值将作为字段值保存到数据库中，第二个值用于提高字段的可读性。</p>
<h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">courses_list_choices1 = (</span><br><span class="line">    (<span class="string">&#x27;Physics&#x27;</span>, <span class="string">&#x27;物理&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;Chemistry&#x27;</span>, <span class="string">&#x27;化学&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;Biology&#x27;</span>, <span class="string">&#x27;生物&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;Politics&#x27;</span>, <span class="string">&#x27;政治&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;History&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;Geography&#x27;</span>, <span class="string">&#x27;地理&#x27;</span>)</span><br><span class="line">)</span><br><span class="line">subject1 = models.CharField(max_length=<span class="number">25</span>, verbose_name=<span class="string">&#x27;科目1&#x27;</span>, default=<span class="string">&#x27;Biology&#x27;</span>, choices=courses_list_choices1)</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<p><img data-src="/images/1564638319473.png" alt="1564638319473"></p>
<h5 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">courses_list_choices2 = (</span><br><span class="line">    (<span class="string">&#x27;理科&#x27;</span>, (</span><br><span class="line">        (<span class="string">&#x27;Physics&#x27;</span>, <span class="string">&#x27;物理&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Chemistry&#x27;</span>, <span class="string">&#x27;化学&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Biology&#x27;</span>, <span class="string">&#x27;生物&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">     ),</span><br><span class="line">    (<span class="string">&#x27;文科&#x27;</span>, (</span><br><span class="line">        (<span class="string">&#x27;Politics&#x27;</span>, <span class="string">&#x27;政治&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;History&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Geography&#x27;</span>, <span class="string">&#x27;地理&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">     )</span><br><span class="line">)</span><br><span class="line">subject2 = models.CharField(max_length=<span class="number">25</span>, verbose_name=<span class="string">&#x27;科目2&#x27;</span>, default=<span class="string">&#x27;History&#x27;</span>, choices=courses_list_choices2)</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<p><img data-src="/images/1564638852855.png" alt="1564638790307"></p>
<h5 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">courses_list_choices2 = (</span><br><span class="line">    (<span class="string">&#x27;理科&#x27;</span>, (</span><br><span class="line">        (<span class="string">&#x27;Physics&#x27;</span>, <span class="string">&#x27;物理&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Chemistry&#x27;</span>, <span class="string">&#x27;化学&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Biology&#x27;</span>, <span class="string">&#x27;生物&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">     ),</span><br><span class="line">    (<span class="string">&#x27;文科&#x27;</span>, (</span><br><span class="line">        (<span class="string">&#x27;Politics&#x27;</span>, <span class="string">&#x27;政治&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;History&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Geography&#x27;</span>, <span class="string">&#x27;地理&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">     )</span><br><span class="line">)</span><br><span class="line">subject3 = models.CharField(max_length=<span class="number">25</span>, verbose_name=<span class="string">&#x27;科目3&#x27;</span>, default=<span class="string">&#x27;History&#x27;</span>, choices=courses_list_choices2, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<p><img data-src="/images/1564638906619.png" alt="1564638906619"></p>
<h5 id="示例4："><a href="#示例4：" class="headerlink" title="示例4："></a>示例4：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">courses_list_choices4 = (</span><br><span class="line">    (<span class="literal">None</span>, <span class="string">&#x27;请选择一门学科&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;理科&#x27;</span>, (</span><br><span class="line">        (<span class="string">&#x27;Physics&#x27;</span>, <span class="string">&#x27;物理&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Chemistry&#x27;</span>, <span class="string">&#x27;化学&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Biology&#x27;</span>, <span class="string">&#x27;生物&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">     ),</span><br><span class="line">    (<span class="string">&#x27;文科&#x27;</span>, (</span><br><span class="line">        (<span class="string">&#x27;Politics&#x27;</span>, <span class="string">&#x27;政治&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;History&#x27;</span>, <span class="string">&#x27;历史&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;Geography&#x27;</span>, <span class="string">&#x27;地理&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">     ),</span><br><span class="line">    (<span class="string">&#x27;unknown&#x27;</span>, <span class="string">&#x27;Unknown&#x27;</span>)</span><br><span class="line">)</span><br><span class="line">subject34 = models.CharField(max_length=<span class="number">25</span>, verbose_name=<span class="string">&#x27;科目4&#x27;</span>, default=<span class="string">&#x27;History&#x27;</span>, choices=courses_list_choices4)</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<p><img data-src="/images/1564638990530.png" alt="1564638990530"></p>
<h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>设置字段默认值。属性值可以是字符串也可以是方法。默认值不可以是可变对象，如列表。</p>
<h4 id="help-text"><a href="#help-text" class="headerlink" title="help_text"></a>help_text</h4><p>HTML 元素的提示文本，在文本中可以使用HTML 标记。</p>
<h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = models.CharField(max_length=<span class="number">35</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>, help_text=<span class="string">&#x27;姓名长度不能超过10&#x27;</span>, default=<span class="string">&#x27;张三丰&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="/images/1564639301127.png" alt="1564639301127"></p>
<h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary_key"></a>primary_key</h4><p>将字段设置为数据表主键。如果模型中任何字段都不包含<code>primary_key= True</code> 属性，<code>Django</code> 将会自动为模型添加一个<code>IntegerField</code> 字段作为主键。<br>主键永远是只读的，当修改一个模型对象的主键后，如果保存将会在数据库中创建一个新对象。</p>
<h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><p>当宇段的<code>unique</code> 属性设置为<code>True</code> 时，该字段的所有值在整张数据表中不能重复，每一行数据’都必须有唯一的字段值。</p>
<h4 id="verbose-name"><a href="#verbose-name" class="headerlink" title="verbose_name"></a>verbose_name</h4><p><code>verbose_name</code> 属性类似于字段的说明。<br>除了<code>ForeignKey</code>、<code>ManyToManyField</code> 、<code>OneToOneField</code> 三种字段类型外，其他宇段类型都包含一个默认的<code>verbose_name</code>属性，可以直接在字段属性列表的第一位输入文本作为<code>verbose_name</code> 属性值。如果没有给出<code>verbose_name</code> 属性， <code>Django</code> 会使用字段名作为<code>verbose_name</code>值，如果字段名中包含下画线时＼下面线会被转换为空格。<br><code>ForeignKey</code>、<code>ManyToManyField</code>  、<code>OneToOneField</code> 三种字段类型要求第一个参数必须是模型类，因此必须使用<code>verbose_name</code>关键字。<br>示例</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django模型</tag>
        <tag>模型字段</tag>
        <tag>字段数形</tag>
        <tag>blank</tag>
        <tag>choices</tag>
        <tag>default</tag>
        <tag>help_text</tag>
        <tag>primary_key</tag>
        <tag>unique</tag>
        <tag>verbose_name</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的视图层</title>
    <url>/148b93b.html</url>
    <content><![CDATA[<p>一个视图函数，简称视图，是一个简单的<code>Python</code> 函数，它接受Web请求并且返回<code>Web</code>响应。响应可以是一张网页的HTML内容，一个重定向，一个404错误，一个XML文档，或者一张图片. . .  是任何东西都可以。无论视图本身包含什么逻辑，都要返回响应。代码写在哪里也无所谓，只要它在你的Python目录下面。除此之外没有更多的要求了——可以说“没有什么神奇的地方”。为了将代码放在某处，约定是将视图放置在项目或应用程序目录中的名为<code>views.py</code>的文件中。</p>
<a id="more"></a>

<p><code>http</code>请求中产生两个核心对象：</p>
<p>1、<code>http</code>请求—-&gt;<code>HttpRequest</code>对象，用户请求相关的所有信息（对象）</p>
<p>2、<code>http</code>响应—-&gt;<code>HttpResponse</code>对象，响应字符串</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建views1.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 在urls.py中修改配置</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views1</span><br><span class="line">path(<span class="string">&#x27;&#x27;</span>, views1.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br></pre></td></tr></table></figure>

<p>例子里，我们用到的<code>request</code>，就是<code>HttpRequest</code>对象。<code>HttpResponse(&quot;你好&quot;)</code>，就是<code>HttpResponse</code>对象，它向<code>http</code>请求响应了一段字符串。</p>
<p>视图函数，就是围绕着<code>HttpRequest</code>和<code>HttpResponse</code>这两个对象进行的。</p>
<h3 id="HttpRequest对象"><a href="#HttpRequest对象" class="headerlink" title="HttpRequest对象"></a><code>HttpRequest</code>对象</h3><p><code>request</code>请求信息和属性和方法。</p>
<p><strong>属性和方法</strong>包含下面几个：</p>
<h4 id="request-path"><a href="#request-path" class="headerlink" title="request.path"></a><code>request.path</code></h4><p>这个主要是用来获取访问文件路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(request.path)</span><br><span class="line">    print(request.get_full_path())</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果我们是通过127.0.0.1:8000/post/23?page=1请求的话。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.path&#96;的结果为：&#96;&#x2F;post&#x2F;23</span><br><span class="line">request.get_full_path()&#96;的结果为：&#96;&#x2F;post&#x2F;23?page&#x3D;1</span><br></pre></td></tr></table></figure>

<h4 id="request-method"><a href="#request-method" class="headerlink" title="request.method"></a><code>request.method</code></h4><p>获取请求中使用的HTTP方式（POST/GET）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(request.method)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="request-body"><a href="#request-body" class="headerlink" title="request.body"></a><code>request.body</code></h4><p>含所有请求体信息 是<code>bytes</code>类型</p>
<h4 id="request-GET"><a href="#request-GET" class="headerlink" title="request.GET"></a><code>request.GET</code></h4><p>获取<code>HTTP GET</code>方式请求传参，的参数（字典类型）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(request.GET)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果我们通过127.0.0.1:8000/post/?fenlei=123 &amp; page=3 请求。</p>
<p>获取到：<code>&lt;QueryDict: &#123;&#39; page&#39;: [&#39;456&#39;], &#39;fenlei&#39;: [&#39;123 &#39;]&#125;&gt;</code></p>
<h4 id="request-POST"><a href="#request-POST" class="headerlink" title="request.POST"></a><code>request.POST</code></h4><p>获取<code>POST</code>请求的数据(类字典对象) 请求体里拿值。服务器收到空的<code>POST</code>请求的情况也是可能发生的，也就是说，表单<code>form</code>通过服务器收到空的<code>POST</code>请求的情况也是可能发生的，也就是说，表单<code>form</code>通过<code>if request.POST</code>来判断是否使用了<code>HTTP POST</code> 方法；应该使用 <code>if request.method==&quot;POST&quot;</code>。</p>
<h4 id="request-META"><a href="#request-META" class="headerlink" title="request.META"></a><code>request.META</code></h4><p>一个标准的<code>Python</code> 字典，包含所有的<code>HTTP</code> 首部。具体的头部信息取决于客户端和服务器，下面是一些示例：</p>
<p><code>CONTENT_LENGTH</code> —— 请求的正文的长度（是一个字符串）。<br><code>CONTENT_TYPE</code> —— 请求的正文的<code>MIME</code> 类型。<br><code>HTTP_ACCEPT</code> —— 响应可接收的<code>Content-Type</code>。<br><code>HTTP_ACCEPT_ENCODING</code> —— 响应可接收的编码。<br><code>HTTP_ACCEPT_LANGUAGE</code> —— 响应可接收的语言。<br><code>HTTP_HOST</code> —— 客服端发送的<code>HTTP Host</code> 头部。<br><code>HTTP_REFERER</code> —— <code>Referring</code> 页面。<br><code>HTTP_USER_AGENT</code> —— 客户端的<code>user-agent</code> 字符串。<br><code>QUERY_STRING</code> —— 单个字符串形式的查询字符串（未解析过的形式）。<br><code>REMOTE_ADDR</code> —— 客户端的<code>IP</code> 地址。<br><code>REMOTE_HOST</code> —— 客户端的主机名。<br><code>REMOTE_USER</code> —— 服务器认证后的用户。<br><code>REQUEST_METHOD</code> —— 一个字符串，例如”<code>GET</code>“ 或”<code>POST</code>“。<br><code>SERVER_NAME</code> —— 服务器的主机名。<br><code>SERVER_PORT</code> —— 服务器的端口（是一个字符串）。<br>从上面可以看到，除 <code>CONTENT_LENGTH</code> 和 <code>CONTENT_TYPE</code> 之外，请求中的任何 <code>HTTP</code> 首部转换为 <code>META</code> 的键时，<br>都会将所有字母大写并将连接符替换为下划线最后加上 <code>HTTP_</code> 前缀。<br>所以，一个叫做 <code>X-Bender</code> 的头部将转换成 <code>META</code> 中的 <code>HTTP_X_BENDER</code> 键。</p>
<h4 id="request-COOKIES"><a href="#request-COOKIES" class="headerlink" title="request.COOKIES"></a><code>request.COOKIES</code></h4><p>包含所有<code>cookies</code>的标准<code>Python</code>字典对象；<code>keys</code>和<code>values</code>都是字符串。</p>
<h4 id="request-FILES"><a href="#request-FILES" class="headerlink" title="request.FILES"></a><code>request.FILES</code></h4><p>包含所有上传文件的类字典对象；<code>FILES</code>中的每一个<code>Key</code>都是标签中name属性的值，<code>FILES</code>中的每一个<code>value</code>同时也是一个标准的python字典对象，包含下面三个<code>Keys：filename</code>：上传文件名，用字符串表示、<code>content_type</code>:上传文件的<code>Content Type</code>、<code>content</code>：上传文件的原始内容。</p>
<h4 id="request-user"><a href="#request-user" class="headerlink" title="request.user"></a><code>request.user</code></h4><p>是一个<code>django.contrib.auth.models.User</code>对象，代表当前登陆的用户。如果访问用户当前没有登陆，<code>user</code>将被初始化为<code>django.contrib.auth.models.AnonymousUser</code>的实例。你可以通过<code>user</code>的<code>is_authenticated()</code>方法来辨别用户是否登陆：<code>if request.user.is_authenticated();</code>只有激活<code>Django</code>中的<code>AuthenticationMiddleware</code>时该属性才可用。</p>
<h4 id="request-session"><a href="#request-session" class="headerlink" title="request.session"></a><code>request.session</code></h4><p>唯一可读写的属性，代表当前会话的字典对象；自己有激活<code>Django</code>中的<code>session</code>支持时该属性才可用</p>
<h4 id="request-GET-get-39-name-39"><a href="#request-GET-get-39-name-39" class="headerlink" title="request.GET.get(&#39;name&#39;)"></a><code>request.GET.get(&#39;name&#39;)</code></h4><p>拿到<code>GET</code>请求里<code>name</code>的值，如果某个键对应有多个值，则不能直接用<code>get</code>取值，需要用<code>getlist</code>，如：<code>request.POST.getlist(&quot;hobby&quot;)</code>。</p>
<h3 id="HttpResponse对象"><a href="#HttpResponse对象" class="headerlink" title="HttpResponse对象"></a><code>HttpResponse</code>对象</h3><p>对于<code>HttpRequest</code>请求对象来说，是由<code>django</code>自动创建的，但是，<code>HttpResponse</code>响应对象就必须我们自己创建。每个view请求处理方法必须返回一个<code>HttpResponse</code>响应对象。<code>HttpResponse</code>类在<code>django.http.HttpResponse</code>。</p>
<p><code>HttpResponse</code>对象的常用方法：</p>
<h4 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a><code>render</code>函数</h4><p>将指定页面渲染后返回给浏览器。</p>
<p><code>render(request, template_name[, context]）</code><br>结合一个给定的模板和一个给定的上下文字典，并返回一个渲染后的<code>HttpResponse</code>对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    blog_index = models.Article.objects.all().order_by(<span class="string">&#x27;-id&#x27;</span>)</span><br><span class="line">    print(request.body)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;blog_index&#x27;</span>:blog_index,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure>

<p>参数：<br><code>request</code>： 用于生成响应的请求对象。<br><code>template_name</code>：要使用的模板的完整名称，可选的参数<br><code>context</code>：添加到模板上下文的一个字典。默认是一个空字典。如果字典中的某个值是可调用的，视图将在渲染模板之前调用它。<br><code>content_type</code>：生成的文档要使用的<code>MIME</code>类型。默认为<code>DEFAULT_CONTENT_TYPE</code> 设置的值。<br><code>status</code>：响应的状态码。默认为200。</p>
<p><code>render</code>方法主要是将从服务器提取的数据，填充到模板中，然后将渲染后的html<code>静态</code>文件返回给浏览器。这里一定要注意：<code>render</code>渲染的是模板。</p>
<p>我们的模板是这样写的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>博客首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0 auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>最新文章<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        &#123;% for x in blog_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; x.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面 <code>之间包括的就是我们要从数据库取出的数据，进行填充。对于这样一个没有填充数据的`html`文件，浏览器是不能进行渲染的，所以，对于上述</code>之间的内容先要被<code>render</code>进行渲染之后，才能发送给浏览器。</p>
<p><code>Views</code>里是这样写的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    blog_index = models.Article.objects.all().order_by(<span class="string">&#x27;-id&#x27;</span>)<span class="comment">#从数据库中取出文章数据</span></span><br><span class="line">    print(request.body)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;blog_index&#x27;</span>:blog_index,<span class="comment">#将数据保存在blog_index</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>,context)<span class="comment">#通过render进行模板渲染</span></span><br></pre></td></tr></table></figure>

<h4 id="redirect函数"><a href="#redirect函数" class="headerlink" title="redirect函数"></a><code>redirect</code>函数</h4><p>多用于页面跳转。</p>
<p><code>redirect</code>的参数可以是：<br>一个模型：将调用模型的<code>get_absolute_url()</code> 函数<br>一个视图，可以带有参数：将使用<code>urlresolvers.reverse</code> 来反向解析名称<br>一个绝对的或相对的<code>URL</code>，将原封不动的作为重定向的位置。<br>默认返回一个临时的重定向；传递<code>permanent=True</code> 可以返回一个永久的重定向。</p>
<p><strong>示例：</strong></p>
<p>传递一个对象，将调用<code>get_absolute_url()</code> 方法来获取重定向的<code>URL</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    object = MyModel.objects.get(...)</span><br><span class="line">    <span class="keyword">return</span> redirect(object)</span><br></pre></td></tr></table></figure>

<p>传递一个视图的名称，可以带有位置参数和关键字参数；将使用<code>reverse()</code> 方法反向解析URL：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;some-view-name&#x27;</span>, foo=<span class="string">&#x27;bar&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>传递要重定向的一个硬编码的URL：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/some/url/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>也可以是一个完整的URL：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;https://www.django.cn/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>默认情况下，<code>redirect()</code> 返回一个临时重定向。以上所有的形式都接收一个<code>permanent</code> 参数；如果设置为<code>True</code>，将返回一个永久的重定向：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ef my_view(request):</span><br><span class="line">    ...</span><br><span class="line">    object = MyModel.objects.get(...)</span><br><span class="line">    <span class="keyword">return</span> redirect(object, permanent=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><code>render</code>和<code>redirect</code>两者区别：　　　　<br>第一，假如<code>render</code>返回一个登陆成功后的页面，刷新该页面将回复到跳转前页面。而redirect则不会<br>第二，如果页面需要模板语言渲染,需要的将数据库的数据加载到<code>html</code>,那么<code>render</code>方法则不会显示这一部分，<code>render</code>返回一个登陆成功页面，不会经过<code>url</code>路由分发系统，也就是说，不会执行跳转后<code>url</code>的视图函数。这样，返回的页面渲染不成功；而<code>redirect</code>是跳转到指定页面，当登陆成功后，会在<code>url</code>路由系统进行匹配，如果有存在的映射函数，就会执行对应的映射函数。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django的视图层</tag>
        <tag>django视图</tag>
        <tag>django view</tag>
        <tag>django CBV</tag>
        <tag>django FBV</tag>
      </tags>
  </entry>
  <entry>
    <title>Django路由系统</title>
    <url>/219c79ef.html</url>
    <content><![CDATA[<p>简洁优雅的<code>URL</code>结构是高质量<code>Web</code>应用程序的象征。<code>Django</code>允许开发人员设计任何形式的<code>URL</code>，这在早期的网站中是不可想象的。早期的网站通常会有很长的一串<code>URL</code>，而且通常U虹还会包括一些无用信息，如.<code>aspx</code>、.<code>php</code>等。<br>为了给应用程序设计<code>URL</code>，开发人员需要开发一个<code>Python</code>模块，这个模块就是URL的配置信息，通常我们将这个配置模块叫作<code>URLconf.</code>。这个模块是一个纯粹的<code>Python</code>脚本，它包含了<code>URL</code>表达式与<code>Python</code>方法之间的映射，这里的<code>Python</code>方法就是<code>Django</code>应用中的视图方法。前面示例中的<code>mysite/urls.py</code>和<code>polls/urls.py</code>就是两个<code>URLconf</code>实例。</p>
<a id="more"></a>

<h2 id="Django处理HTTP请求的流程"><a href="#Django处理HTTP请求的流程" class="headerlink" title="Django处理HTTP请求的流程"></a><code>Django</code>处理<code>HTTP</code>请求的流程</h2><p>当用户发起一个<code>HTTP</code>请求时，<code>Django</code>就会按照以下逻辑对请求进行处理：</p>
<ol>
<li>确定<code>URL</code>根配置位置，通常<code>URL</code>根配置在<code>ROOT_URLCONF</code>中设置。</li>
<li>加载配置信息，在配置信息中查找<code>urlpatterns</code>。</li>
<li>按顺序检索<code>urlpatterns</code>中的所有<code>URL</code>模式字符串，井定位在第一个与<code>URL</code>匹配的<code>URL</code>模式字符串。</li>
<li>当检索到匹配的<code>URL</code>模式字符串后，调用对应的视图方法，并传递以下参数给视图方法：<ul>
<li>一个<code>HttpRequest</code>对象实例。</li>
<li>如果匹配的<code>URL</code>模式字符串不包含任何组，那么匹配的信息会作为位置参数传递给视图。</li>
<li>如果<code>URL</code>模式字符串中的参数给定了参数名，那么匹配的信息会作为命名参数传递给视图。</li>
</ul>
</li>
<li>如果在<code>URLconf</code>中没有找到任何匹配的<code>URL</code>模式字符串，或者出现其他任何错误，<code>Django</code>将会调用一个用于处理错误信息的视图。</li>
</ol>
<h2 id="URLconf-示例"><a href="#URLconf-示例" class="headerlink" title="URLconf 示例"></a><code>URLconf</code> 示例</h2><p>下面是一个<code>URLconf</code> 的简单示例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&#x27;</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/&#x27;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>示例解读：</strong></p>
<ul>
<li>函数<code>path</code>的第一个参数是一个<code>URL</code>模式字符串，用于匹配<code>URL</code>。</li>
<li>函数<code>path</code>的第二个参数是用于处理URL请求的视图函数。</li>
<li>使用尖括号提取<code>URL</code>中的参数，如<code>＜int:year＞</code>。</li>
<li>可使用类型转化器对参数类型进行转换，如<code>int:</code>会将从<code>URL</code>中捕获的值转换为数值类型，如果没有指定类型转换器，如<code>＜year＞</code>，则任何不包含/的字符串都会被提取。</li>
<li><code>URL</code>模式字符串不需要以/开头。</li>
</ul>
<p><strong>应用场景：</strong></p>
<ul>
<li>发送向<code>/articles/2005/03/</code>的请求将会与第三个URL模式字符串匹配成功，匹配成功后<code>Django</code>调用<code>views.month_archive(request,year=2005,month=3)</code>。</li>
<li>发送向<code>/articles/2003/</code>的请求将会与第一个<code>URL</code>模式字符串匹配成功而不是第二个，因为<code>Django</code>在第一个URL匹配成功后停止后续<code>URL</code>检验，匹配成功后<code>Django</code>调用<code>views.special_case_2003(request)</code>。</li>
<li>发送向<code>/articles/2003</code>的请求不会与任何URL模式字符串匹配成功，因为每个URL模式字符串都要求以/结束。</li>
<li>发送向<code>/articles/2003/03/building-a-django-site/</code>的请求将会与最后一个<code>URL</code>模式字符串匹配成功，匹配成功后<code>Django</code>调用<code>views.article_detail(request,year=2003,month=3,slug＝”building-a-django-site”)</code>。</li>
</ul>
<h2 id="URL参数类型转化器"><a href="#URL参数类型转化器" class="headerlink" title="URL参数类型转化器"></a><code>URL</code>参数类型转化器</h2><p>前面提到可以使用<code>int</code>对捕捉到的<code>URL</code>参数进行类型转换，下面是<code>Django</code>支持的所有类型转换器。</p>
<ul>
<li><code>str</code>：匹配任意非空字符串，但是不能匹配<code>URL</code>分隔符“／”。这是默认的URL参数转换器。</li>
<li><code>int</code>：匹配任意大于等于0的整数。</li>
<li><code>slug</code>：匹配任意<code>slug</code>字符串，<code>slug</code>字符串可以包含任意<code>ASCII字符</code>、数字、连字符“－”和下画线”_”</li>
<li><code>uuid</code>：匹配<code>UUID</code>字符串（字符串中的字母必须为小写字－母），例如：<code>075l94d3-6885-4l7e-a8a8-6c93le272tDO</code>。</li>
<li><code>path</code>：匹配任意非空字符串，包括<code>URL</code>分隔符“／”。这允许匹配完整的<code>URL</code>而不是<code>URL</code>的一个片段。</li>
</ul>
<h2 id="自定义URL参数类型转化器"><a href="#自定义URL参数类型转化器" class="headerlink" title="自定义URL参数类型转化器"></a>自定义URL参数类型转化器</h2><p>对于更加复杂的URL场景，开发人员可以开发自定义参数类型转换器，自定义参数类型转换器包括以下几部分：</p>
<ul>
<li>一个<code>regex</code>属性，属性值为正则表达式。</li>
<li>一个<code>to_python(self,value)</code>方法，该方法用于将匹配的<code>URL</code>参数转换为指定类型，当类型转换失败后抛出<code>ValueError</code>异常。</li>
<li>一个<code>to_url(self,value)</code>方法，该方法用于将<code>Python</code>类型转换为类型转换器字符串。</li>
</ul>
<h4 id="下面是一个用于捕获日期年的类型转换器："><a href="#下面是一个用于捕获日期年的类型转换器：" class="headerlink" title="下面是一个用于捕获日期年的类型转换器："></a>下面是一个用于捕获日期年的类型转换器：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourDigitYearConverter</span>:</span></span><br><span class="line">    regex = <span class="string">&#x27;[0-9]&#123;4&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> int(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%04d&#x27;</span> % value</span><br></pre></td></tr></table></figure>

<h4 id="使用register-converter-将以上类型转换器注册到URLconf。"><a href="#使用register-converter-将以上类型转换器注册到URLconf。" class="headerlink" title="使用register_converter() 将以上类型转换器注册到URLconf。"></a>使用<code>register_converter()</code> 将以上类型转换器注册到<code>URLconf</code>。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> register_converter, path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> .converters.FourDigitYearConverter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">register converter(FourDigitYearConverter,<span class="string">&#x27;yyyy&#x27;</span>)</span><br><span class="line">app name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">	path ( <span class="string">&#x27;&lt;yyyy:year&gt;/&#x27;</span> , views.get_year , name = <span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="创建视图："><a href="#创建视图：" class="headerlink" title="创建视图："></a>创建视图：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_year</span>(<span class="params">request, year</span>):</span></span><br><span class="line">	<span class="keyword">return</span> HttpResponse(str(year))</span><br></pre></td></tr></table></figure>

<h4 id="此时目录结构如下："><a href="#此时目录结构如下：" class="headerlink" title="此时目录结构如下："></a>此时目录结构如下：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__. py</span><br><span class="line">    admin.py</span><br><span class="line">apps.py</span><br><span class="line">converters/</span><br><span class="line">    __init__.py</span><br><span class="line">    FourDigitYearConverter.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    statics/</span><br><span class="line">    templates/</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">views.py</span><br></pre></td></tr></table></figure>

<h4 id="启动Web-服务"><a href="#启动Web-服务" class="headerlink" title="启动Web 服务"></a>启动Web 服务</h4><p>访问URL:127.0.0.1:8000/polls/2017/即可看到页面输出：2017</p>
<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><p>与<code>Django1.x</code>一样，<code>Django2.0</code>仍然可以使用正则表达式匹配URL，此时需要使用<code>re_path()</code>方法而不是<code>path()</code>。<br><code>Python</code>的正则表达式支持对分组进行命名，语法格式为：<code>(?P&lt;name&gt;pattern)</code>，其中<code>name</code>为分组名，<code>pattern</code>为匹配的正则表达式。<br>使用正则表达式对前面的<code>URLconf</code>进行重写效果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$&#x27;</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\w-]+)/$&#x27;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>虽然可以使用未命名的正则表达式，例如使用<code>([0-9]&#123;4&#125;)</code>替代<code>(?P&lt;year&gt;[0-9]&#123;4&#125;)</code>，但是为了防止出现意外错误，推荐对分组命名。<br>另外需要注意，不要将命名正则表达式与未命名正则表达式混合使用，这样会造成未命名正则表达式丢失。<br>最后正则表达式可以嵌套使用，如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">re_path(r’comments/(?P&lt;page－number&gt;\d+)/)?$’, comments)</span><br></pre></td></tr></table></figure>

<h2 id="导入其他URLconf"><a href="#导入其他URLconf" class="headerlink" title="导入其他URLconf"></a>导入其他<code>URLconf</code></h2><p>对于现代<code>Web</code> 应用程序来说，一个工程下通常会包含多个应用程序，每个应用程序包含很多<code>URL</code> ，如果将这些<code>URL</code>都写在<code>URLconf</code> 根模块中，那么<code>URLconf</code> 将会变得非常脚肿，不利于维护。对于这种情况，常用的解决办法就是为每一个应用程序写一套独立的<code>URLconf</code>，而<code>URLconf</code>根模块通过使用<code>include()</code>方法将其他<code>URLconf</code>引用进来。<br>下面是Polls 网站的<code>mysite/urls.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>当<code>Django</code> 遇到<code>include()</code>方法时， <code>URL</code>匹配工作跳转进入被引用的<code>URLconf</code> 进行验证。<br>使用<code>include()</code> 方法还可以引用其他<code>URL</code>模式列表， 例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> apps.main <span class="keyword">import</span> views <span class="keyword">as</span> main_views</span><br><span class="line"><span class="keyword">from</span> credit <span class="keyword">import</span> views <span class="keyword">as</span> credit_views</span><br><span class="line">extra_patterns = [</span><br><span class="line">    path (<span class="string">&#x27;reports/&#x27;</span>, creditviews.report),</span><br><span class="line">    path (<span class="string">&#x27;reports/&lt;int:id&gt;/&#x27;</span>, credit_views.report),</span><br><span class="line">    path (<span class="string">&#x27;charge/&#x27;</span>, credit_views.charge),</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path (<span class="string">&#x27;&#x27;</span>, main_views.homepage),</span><br><span class="line">    path (<span class="string">&#x27;help/&#x27;</span>, include (<span class="string">&#x27;apps.help.urls&#x27;</span>)),</span><br><span class="line">    path (<span class="string">&#x27;credit/&#x27;</span>, include(extra_patterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>此时访问<code>/credit/reports/</code>时将会调用<code>credit_views.report()</code>视图方法。这样做的好处是当一个应用程序中多条<code>URL</code> 的前缀相同时，在本例中<code>extra_pattems</code> 中的URL 都是以<code>credit</code> 开头，可以简化<code>URL</code> 模式字符串。</p>
<h2 id="向视图传递额外参数"><a href="#向视图传递额外参数" class="headerlink" title="向视图传递额外参数"></a>向视图传递额外参数</h2><p>可以使用<code>path()</code> 方法的第三个参数向视图传递额外参数， 例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">	path (<span class="string">&quot;blog/&lt;int:year&gt;/&quot;</span>, views.year_archive, &#123;<span class="string">&#x27;foo&#x27;</span>:<span class="string">&#x27;bar&#x27;</span>&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>也可以向<code>include()</code>方法传递额外参数，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpattern = [</span><br><span class="line">	path(<span class="string">&#x27;blog/&#x27;</span>, include(<span class="string">&#x27;inner&#x27;</span>), &#123;<span class="string">&#x27;blog_id&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># inner.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpattern = [</span><br><span class="line">	path(<span class="string">&#x27;archive/&#x27;</span>, views.archive),</span><br><span class="line">	path(<span class="string">&#x27;about/&#x27;</span>, views.about),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>此时，额外参数<code>&#123;&#39;blog_id&#39;: 3&#125;</code>将会被传递给每一个被引用的<code>URL</code></p>
<h2 id="动态生成url"><a href="#动态生成url" class="headerlink" title="动态生成url"></a>动态生成<code>url</code></h2><p>在网页应用中，很多情况下需要动态编写<code>URL</code>，而不是用户直接在浏览器中输入<code>URL</code>，例如网页超链接的<code>URL</code>需要在生成网页时固定好。</p>
<p>用以下URL模式字符串为例，看看如何在<code>Django</code>模板和视图中动态生成URL：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive, name=<span class="string">&#x27;news-year-archive&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li><h4 id="使用url标签在模板中动态生成URL"><a href="#使用url标签在模板中动态生成URL" class="headerlink" title="使用url标签在模板中动态生成URL"></a>使用<code>url</code>标签在模板中动态生成<code>URL</code></h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment"># 使用固定值参数： #&#125;</span></span><br><span class="line">&lt;a href=&quot;&#123;% url &#x27;new-year-archive&#x27; 2012 %&#125;&quot;&gt;2012 Archive&lt;/a&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> yearvar <span class="keyword">in</span> year_list %&#125;</span><br><span class="line">&lt;li&gt;&lt;a href = &quot;&#123;% url &#x27;new-year-archive&#x27; yearvar %&#125;&quot;&gt;&#123;&#123; yearvar &#125;&#125;Archive&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="使用reverse-方法在python代码中生成url"><a href="#使用reverse-方法在python代码中生成url" class="headerlink" title="使用reverse()方法在python代码中生成url"></a>使用<code>reverse()</code>方法在<code>python</code>代码中生成<code>url</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect_to_year</span>(<span class="params">request</span>):</span></span><br><span class="line">	year = <span class="number">2016</span></span><br><span class="line">	<span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;news-year-archive&#x27;</span>, args=(year,)))</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="URL名字和命名空间"><a href="#URL名字和命名空间" class="headerlink" title="URL名字和命名空间"></a><code>URL</code>名字和命名空间</h2><p>给<code>URL</code>命名，可以方便地在模板或<code>Python</code>代码中使用<code>URL</code>，如前面示例中分别在模板和<code>Python</code>代码中使用了<code>URL</code>的名字<code>&#39;news-year-archive&#39;</code>。<br><code>URL</code>命名空间用于将<code>URL</code>进行隔离。应用程序名就可以作用<code>URL</code>的命名空间，例如<code>django.contrib.admin</code>的命名空间就是<code>admin</code>。由于<code>Django</code>的应用程序可以部署多次，所以应用程序的实例名也可以作为命名空间。<br>使用”<code>命名空间名：URL名</code>“的方式调用URL。命名空间可以嵌套使用如<code>&quot;命名空间名l：命名空间名2:URL名&quot;</code>。</p>
<ol>
<li><h4 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h4><p>在<code>URLconf</code>模块中使用<code>appname</code>属性声明命名空间，例如：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">	...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>或者直接在<code>urlpatterns</code>中定义命名空间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">polls_patterns = ([</span><br><span class="line">	path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name = <span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">	path(<span class="string">&#x27;&lt;int:pk&gt;/&#x27;</span>, views.DetailView.as_view(), name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">], <span class="string">&#x27;polls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">	path(<span class="string">&#x27;polls/&#x27;</span>, include(polls_patterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>上面<code>polls_patterns</code>是一个元组，元组的第一个参数是<code>path()</code>或<code>re_path()</code>列表，第二个参数是URL的<code>namespace</code>。当使用<code>include()</code>方法引用<code>polls_patterns</code>时系统会自动为<code>polls_patterns</code>中的所有URL添加<code>namespace</code>。</p>
<ol start="2">
<li><h4 id="在其他URLconf中使用命名空间"><a href="#在其他URLconf中使用命名空间" class="headerlink" title="在其他URLconf中使用命名空间"></a>在其他<code>URLconf</code>中使用命名空间</h4></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">	path(<span class="string">&#x27;polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h4 id="在模板文件中使用命名空间"><a href="#在模板文件中使用命名空间" class="headerlink" title="在模板文件中使用命名空间"></a>在模板文件中使用命名空间</h4></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% url <span class="string">&#x27;polls:index&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h4 id="在python代码中使用命名空间"><a href="#在python代码中使用命名空间" class="headerlink" title="在python代码中使用命名空间"></a>在python代码中使用命名空间</h4></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;polls:results&#x27;</span>, args=(question.id,)))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>路由</tag>
        <tag>urls</tag>
        <tag>Django路由</tag>
        <tag>Django urls</tag>
        <tag>urlpatterns</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile基本使用及打包镜像</title>
    <url>/c2780ebb.html</url>
    <content><![CDATA[<p>镜像是容器的基础，每次执行<code>docker run</code>的时候都会指定哪个镜像作为容器运行的基础。我们之前的例子都是使用来自<code>docker hub</code>的镜像，直接使用这些镜像只能满足一定的需求，当镜像无法满足我们的需求时，就得自定制这些镜像。</p>
<a id="more"></a>

<p>镜像的定制就是定制每一层所添加的配置、文件。如果可以吧每一层修改、安装、构建、操作的命令都写入到一个脚本，用脚本来构建、定制镜像，这个脚本就是<code>dockerfile</code>。<code>Dockerfile</code> 是一个文本文件，其内包含了一条条的指令(<code>Instruction</code>)，每一条指令 构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<h2 id="DockerFile基本关键词及解释"><a href="#DockerFile基本关键词及解释" class="headerlink" title="DockerFile基本关键词及解释"></a><code>DockerFile</code>基本关键词及解释</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM scratch #制作base image 基础镜像，尽量使用官方的image作为base image</span><br><span class="line">FROM centos #使用base image</span><br><span class="line">FROM ubuntu:14.04 #带有tag的base image</span><br><span class="line"></span><br><span class="line">LABEL version=“1.0” #容器元信息，帮助信息，Metadata，类似于代码注释</span><br><span class="line">LABEL maintainer=“yc_uuu@163.com&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">对于复杂的RUN命令，避免无用的分层，多条命令用反斜线换行，合成一条命令！</span></span><br><span class="line">RUN yum update &amp;&amp; yum install -y vim \</span><br><span class="line">    Python-dev #反斜线换行</span><br><span class="line">RUN /bin/bash -c &quot;source $HOME/.bashrc;echo $HOME”</span><br><span class="line"></span><br><span class="line">WORKDIR /root #相当于linux的cd命令，改变目录，尽量使用绝对路径！！！不要用RUN cd</span><br><span class="line">WORKDIR /test #如果没有就自动创建</span><br><span class="line">WORKDIR demo #再进入demo文件夹</span><br><span class="line">RUN pwd     #打印结果应该是/test/demo</span><br><span class="line"></span><br><span class="line">ADD and COPY </span><br><span class="line">ADD hello /  #把本地文件添加到镜像中，吧本地的hello可执行文件拷贝到镜像的/目录</span><br><span class="line">ADD test.tar.gz /  #添加到根目录并解压</span><br><span class="line"></span><br><span class="line">WORKDIR /root</span><br><span class="line">ADD hello test/  #进入/root/ 添加hello可执行命令到test目录下，也就是/root/test/hello 一个绝对路径</span><br><span class="line">COPY hello test/  #等同于上述ADD效果</span><br><span class="line"></span><br><span class="line">ADD与COPY</span><br><span class="line">   - 优先使用COPY命令</span><br><span class="line">    -ADD除了COPY功能还有解压功能</span><br><span class="line">添加远程文件/目录使用curl或wget</span><br><span class="line"></span><br><span class="line">ENV #环境变量，尽可能使用ENV增加可维护性</span><br><span class="line">ENV MYSQL_VERSION 5.6 #设置一个mysql常量</span><br><span class="line">RUN yum install -y mysql-server=“$&#123;MYSQL_VERSION&#125;” </span><br><span class="line">------这里需要稍微理解一下了-------中级知识---先不讲</span><br><span class="line">VOLUME and EXPOSE </span><br><span class="line">存储和网络</span><br><span class="line"></span><br><span class="line">RUN and CMD and ENTRYPOINT</span><br><span class="line">RUN：执行命令并创建新的Image Layer</span><br><span class="line">CMD：设置容器启动后默认执行的命令和参数</span><br><span class="line">ENTRYPOINT：设置容器启动时运行的命令</span><br><span class="line"></span><br><span class="line">Shell格式和Exec格式</span><br><span class="line">RUN yum install -y vim</span><br><span class="line">CMD echo ”hello docker”</span><br><span class="line">ENTRYPOINT echo “hello docker”</span><br><span class="line"></span><br><span class="line">Exec格式</span><br><span class="line">RUN [“apt-get”,”install”,”-y”,”vim”]</span><br><span class="line">CMD [“/bin/echo”,”hello docker”]</span><br><span class="line">ENTRYPOINT [“/bin/echo”,”hello docker”]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过shell格式去运行命令，会读取$name指令，而exec格式是仅仅的执行一个命令，而不是shell指令</span><br><span class="line">cat Dockerfile</span><br><span class="line">    FROM centos</span><br><span class="line">    ENV name Docker</span><br><span class="line">    ENTRYPOINT [“/bin/echo”,”hello $name”]#这个仅仅是执行echo命令，读取不了shell变量</span><br><span class="line">    ENTRYPOINT  [“/bin/bash”,”-c”,”echo hello $name&quot;]</span><br><span class="line"></span><br><span class="line">CMD</span><br><span class="line">容器启动时默认执行的命令</span><br><span class="line">如果docker run指定了其他命令(docker run -it [image] /bin/bash )，CMD命令被忽略</span><br><span class="line">如果定义多个CMD，只有最后一个执行</span><br><span class="line"></span><br><span class="line">ENTRYPOINT</span><br><span class="line">让容器以应用程序或服务形式运行</span><br><span class="line">不会被忽略，一定会执行</span><br><span class="line">最佳实践：写一个shell脚本作为entrypoint</span><br><span class="line">COPY docker-entrypoint.sh /usr/local/bin</span><br><span class="line">ENTRYPOINT [“docker-entrypoint.sh]</span><br><span class="line">EXPOSE 27017</span><br><span class="line">CMD [“mongod”]</span><br><span class="line"></span><br><span class="line">[root@master home]# more Dockerfile</span><br><span class="line">FROm centos</span><br><span class="line">ENV name Docker</span><br><span class="line"><span class="meta">#</span><span class="bash">CMD [<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo hello <span class="variable">$name</span>&quot;</span>]</span></span><br><span class="line">ENTRYPOINT [&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;echo hello $name”]</span><br></pre></td></tr></table></figure>

<h2 id="示例之打包flask程序"><a href="#示例之打包flask程序" class="headerlink" title="示例之打包flask程序"></a>示例之打包<code>flask</code>程序</h2><h3 id="准备几行flask代码"><a href="#准备几行flask代码" class="headerlink" title="准备几行flask代码"></a>准备几行<code>flask</code>代码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">touch app.py</span><br><span class="line">vim app.py</span><br></pre></td></tr></table></figure>

<h3 id="写入以下代码"><a href="#写入以下代码" class="headerlink" title="写入以下代码"></a>写入以下代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;hello docker， Im from Flask!!! Bye&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<h3 id="准备Dockerfile文件"><a href="#准备Dockerfile文件" class="headerlink" title="准备Dockerfile文件"></a>准备<code>Dockerfile</code>文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch Dockerfile</span><br><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line"># 写入以下代码：</span><br><span class="line"># 基础镜像</span><br><span class="line">FROM python:2.7</span><br><span class="line"># 容器镜像元信息，作者</span><br><span class="line">LABEL maintainer&#x3D;&quot;tony yu&lt;tony@visas.to&gt;&quot;</span><br><span class="line"># 运行命令安装flask</span><br><span class="line">RUN pip install flask</span><br><span class="line"># 复制宿主机上的app.py文件到容器镜像中的&#x2F;app文件夹</span><br><span class="line">COPY app.py &#x2F;app&#x2F;</span><br><span class="line"># 切换容器镜像中的目录至&#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"># 打开容器的8080端口，供宿主机使用</span><br><span class="line">EXPOSE 8080</span><br><span class="line"># cmd命令，使用python执行app.py</span><br><span class="line">CMD [&quot;python&quot;,&quot;app.py&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="构建镜像image"><a href="#构建镜像image" class="headerlink" title="构建镜像image"></a>构建镜像<code>image</code></h3><p>命令行中的<code>.</code>代表的是当前目录，会在当前目录中找到一个名为<code>Dockerfile</code>的文件去执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t tonyu&#x2F;flask-hello .</span><br></pre></td></tr></table></figure>

<h3 id="查看是否已安装镜像"><a href="#查看是否已安装镜像" class="headerlink" title="查看是否已安装镜像"></a>查看是否已安装镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">tonyu&#x2F;flask-hello            latest              b7ac47e3f338        About a minute ago   890MB</span><br></pre></td></tr></table></figure>

<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8008:8080 tonyu&#x2F;flask-hello</span><br></pre></td></tr></table></figure>

<h3 id="查看正在运行的镜像"><a href="#查看正在运行的镜像" class="headerlink" title="查看正在运行的镜像"></a>查看正在运行的镜像</h3><p>可以看到我们的镜像已经正常在运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">10c69359fda0        tonyu&#x2F;flask-hello   &quot;python app.py&quot;     2 minutes ago       Up 2 minutes        0.0.0.0:8008-&gt;8080&#x2F;tcp   musing_lehmann</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="导出或上传该镜像"><a href="#导出或上传该镜像" class="headerlink" title="导出或上传该镜像"></a>导出或上传该镜像</h3><p>我们可以参考<a href="https://www.diandian100.cn/cf791c57.html#%E5%AF%BC%E5%87%BAdocker%E9%95%9C%E5%83%8F">导出导入镜像</a>进行该操作</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Dockerfile</tag>
        <tag>Dockerfile打包</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的私有仓库搭建</title>
    <url>/4c5000eb.html</url>
    <content><![CDATA[<p><a href="https://www.diandian100.cn/cf791c57.html"><code>Docker</code>基础使用</a>中我们推送了一个公有镜像，所有人都可以进行下载，所以并不安全，因此我们可以使用<code>docker registry</code>官方提供的私有仓库。</p>
<a id="more"></a>

<p>先给大家放一个docker中文文档<span class="exturl" data-url="aHR0cHM6Ly95ZWFzeS5naXRib29rcy5pby9kb2NrZXJfcHJhY3RpY2UvcmVwb3NpdG9yeS9yZWdpc3RyeS5odG1s">https://yeasy.gitbooks.io/docker_practice/repository/registry.html<i class="fa fa-external-link-alt"></i></span> 。</p>
<h2 id="下载并运行registry镜像"><a href="#下载并运行registry镜像" class="headerlink" title="下载并运行registry镜像"></a>下载并运行<code>registry</code>镜像</h2><p>私有仓库会被创建在容器的<code>/var/lib/registry</code>下，因此通过-v参数将镜像文件存储到本地的<code>/opt/data/registry</code>下，端口映射容器中的<code>5000</code>端口到宿主机的<code>5000</code>端口</p>
<p>也就是说，将<code>docker</code>容器内的<code>/var/lib/registry</code>映射到了物理机的<code>/opt/data/registry</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v &#x2F;opt&#x2F;data&#x2F;registry:&#x2F;var&#x2F;lib&#x2F;registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure>

<h2 id="检查启动的registry镜像"><a href="#检查启动的registry镜像" class="headerlink" title="检查启动的registry镜像"></a>检查启动的<code>registry</code>镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;etc&#x2F;docker# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">9005c0680c00        registry            &quot;&#x2F;entrypoint.sh &#x2F;etc…&quot;   5 seconds ago       Up 4 seconds        0.0.0.0:5000-&gt;5000&#x2F;tcp   musing_heyrovsky</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试连接registry容器"><a href="#测试连接registry容器" class="headerlink" title="测试连接registry容器"></a>测试连接<code>registry</code>容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[c:\~]$ telnet 10.10.10.125 5000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connecting to 10.10.10.125:5000...</span><br><span class="line">Connection established.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改要上传的镜像tag"><a href="#修改要上传的镜像tag" class="headerlink" title="修改要上传的镜像tag"></a>修改要上传的镜像<code>tag</code></h2><p>将要上传到私有仓库中的镜像修改<code>tag</code>，以<code>docker registry</code>的地址端口开头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改乌班图镜像tag</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker tag ubuntu 10.10.10.125:5000&#x2F;myubuntu</span><br></pre></td></tr></table></figure>

<h2 id="查看docker镜像"><a href="#查看docker镜像" class="headerlink" title="查看docker镜像"></a>查看<code>docker</code>镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">10.10.10.125:5000&#x2F;myubuntu   latest              a2a15febcdf3        4 weeks ago         64.2MB</span><br><span class="line">ubuntu                       latest              a2a15febcdf3        4 weeks ago         64.2MB</span><br><span class="line">registry                     latest              f32a97de94e1        6 months ago        25.8MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改insecure-registries"><a href="#修改insecure-registries" class="headerlink" title="修改insecure-registries"></a>修改<code>insecure-registries</code></h2><p><code>Docker</code> 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 <code>Docker</code> 的配置选项来取消这个限制，这里必须写正确<code>json</code>数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;docker&#x2F;daemon.json中添加私有仓库地址insecure-registries</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# cat &#x2F;etc&#x2F;docker&#x2F;daemon.json </span><br><span class="line">&#123;</span><br><span class="line">	&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;f1361db2.m.daocloud.io&quot;],</span><br><span class="line">	&quot;insecure-registries&quot;:[&quot;10.10.10.125:5000&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="写入到docker服务中，写入到-Service-配置块中，加载此配置文件"><a href="#写入到docker服务中，写入到-Service-配置块中，加载此配置文件" class="headerlink" title="写入到docker服务中，写入到[Service]配置块中，加载此配置文件"></a>写入到<code>docker</code>服务中，写入到[<code>Service</code>]配置块中，加载此配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编辑该文件</span><br><span class="line">root@Tony-PC:&#x2F;etc&#x2F;docker# vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service </span><br><span class="line"># 在[service]加载daemon文件</span><br><span class="line">EnvironmentFile&#x3D;&#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure>

<h2 id="重新加载docker"><a href="#重新加载docker" class="headerlink" title="重新加载docker"></a>重新加载<code>docker</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;etc&#x2F;docker# systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h2 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启<code>docker</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;etc&#x2F;docker# systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="重新运行registry容器"><a href="#重新运行registry容器" class="headerlink" title="重新运行registry容器"></a>重新运行<code>registry</code>容器</h2><p>因为重启了<code>docker</code>，之前运行的<code>registry</code>容器进程已结束，重新启动该容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --privileged&#x3D;true -d -p 5000:5000 -v &#x2F;opt&#x2F;data&#x2F;registry:&#x2F;var&#x2F;lib&#x2F;registry registry</span><br><span class="line"># --privileged&#x3D;true  docker容器的安全机制：设置特权级运行的容器</span><br></pre></td></tr></table></figure>

<h2 id="推送本地镜像"><a href="#推送本地镜像" class="headerlink" title="推送本地镜像"></a>推送本地镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;etc&#x2F;docker# docker push 10.10.10.125:5000&#x2F;myubuntu</span><br><span class="line">The push refers to repository [10.10.10.125:5000&#x2F;myubuntu]</span><br><span class="line">122be11ab4a2: Pushed </span><br><span class="line">7beb13bce073: Pushed </span><br><span class="line">f7eae43028b3: Pushed </span><br><span class="line">6cebf3abed5f: Pushed </span><br><span class="line">latest: digest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0 size: 1152</span><br></pre></td></tr></table></figure>

<h2 id="预览私有仓库api数据列表"><a href="#预览私有仓库api数据列表" class="headerlink" title="预览私有仓库api数据列表"></a>预览私有仓库<code>api</code>数据列表</h2><p>由于<code>docker registry</code>没有<code>web</code>节目，但是提供了<code>API</code>数据</p>
<p>curl <span class="exturl" data-url="aHR0cDovLzEwLjEwLjEwLjEyNTo1MDAwL3YyL19jYXRhbG9n">http://10.10.10.125:5000/v2/_catalog<i class="fa fa-external-link-alt"></i></span><br>或者浏览器访问<span class="exturl" data-url="aHR0cDovLzEwLjEwLjEwLjEyNTo1MDAwL3YyL19jYXRhbG9n">http://10.10.10.125:5000/v2/_catalog<i class="fa fa-external-link-alt"></i></span></p>
<p>浏览器显示结果如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190916141140.png"></p>
<h2 id="下载测试镜像"><a href="#下载测试镜像" class="headerlink" title="下载测试镜像"></a>下载测试镜像</h2><h3 id="先删除本地已有镜像"><a href="#先删除本地已有镜像" class="headerlink" title="先删除本地已有镜像"></a>先删除本地已有镜像</h3><p>删除后查看当前本地所有镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;etc&#x2F;docker# docker images</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">646547989&#x2F;flask-centos   latest              9d07a47feca8        3 days ago          374MB</span><br><span class="line">flask-contos             latest              9d07a47feca8        3 days ago          374MB</span><br><span class="line">contos-vim               latest              e90556adf335        3 days ago          369MB</span><br><span class="line">centos                   latest              67fa590cfc1c        3 weeks ago         202MB</span><br><span class="line">registry                 latest              f32a97de94e1        6 months ago        25.8MB</span><br></pre></td></tr></table></figure>

<h3 id="下载私有仓库中的镜像"><a href="#下载私有仓库中的镜像" class="headerlink" title="下载私有仓库中的镜像"></a>下载私有仓库中的镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;etc&#x2F;docker# docker pull 10.10.10.125:5000&#x2F;myubuntu</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from myubuntu</span><br><span class="line">35c102085707: Pull complete </span><br><span class="line">251f5509d51d: Pull complete </span><br><span class="line">8e829fe70a46: Pull complete </span><br><span class="line">6001e1789921: Pull complete </span><br><span class="line">Digest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0</span><br><span class="line">Status: Downloaded newer image for 10.10.10.125:5000&#x2F;myubuntu:latest</span><br><span class="line">10.10.10.125:5000&#x2F;myubuntu:latest</span><br></pre></td></tr></table></figure>

<h3 id="再次查看已有镜像"><a href="#再次查看已有镜像" class="headerlink" title="再次查看已有镜像"></a>再次查看已有镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;etc&#x2F;docker# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">646547989&#x2F;flask-centos       latest              9d07a47feca8        3 days ago          374MB</span><br><span class="line">flask-contos                 latest              9d07a47feca8        3 days ago          374MB</span><br><span class="line">contos-vim                   latest              e90556adf335        3 days ago          369MB</span><br><span class="line">centos                       latest              67fa590cfc1c        3 weeks ago         202MB</span><br><span class="line">10.10.10.125:5000&#x2F;myubuntu   latest              a2a15febcdf3        4 weeks ago         64.2MB</span><br><span class="line">registry                     latest              f32a97de94e1        6 months ago        25.8MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>开发环境下，本地局域网开发人员均可下载该镜像</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Docker私有仓库</tag>
        <tag>registry</tag>
        <tag>daemon</tag>
        <tag>docker.service</tag>
        <tag>daemon-reload</tag>
        <tag>EnvironmentFile</tag>
        <tag>insecure-registries</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch启动常见错误</title>
    <url>/baf9770c.html</url>
    <content><![CDATA[<p>初次接触<code>ElasticSearch</code>，在本机上运行没错，想着让乌班图做服务器，用自己的<code>window</code>做客户端访问，肯定要修改配置文件中的<code>network.host</code>为<code>0.0.0.0</code>，修改后启动各种出错。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-04-03 09:41:19,822 main ERROR Null object returned for RollingFile in Appe</span><br><span class="line">nders.2020-04-03 09:41:19,822 main ERROR Unable to locate appender &quot;rolling&quot; for logg</span><br><span class="line">er config &quot;root&quot;</span><br></pre></td></tr></table></figure>

<p>报错如上，解决方案：</p>
<p>修改<code>config/log4j2.properties</code> ，</p>
<p>将<code>logger.deprecation.level</code> 值修改为<code>error</code>，重新打开终端再次启动<code>ElasticSearch</code>，报错变了。</p>
<p>错误信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p>修改<code>/etc/sysctl.conf</code>文件，最后追加一条内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.max_map_count &#x3D; 655360</span><br></pre></td></tr></table></figure>

<p>保存后执行 <code>sysctl -p</code>，再次启动成功。</p>
<p>其他错误信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max file descriptors [65535] for elasticsearch process is too low, increase to at least [65536]</span><br></pre></td></tr></table></figure>

<p>如果包以上错误，需要编辑 <code>/etc/security/limits.conf</code>，追加以下内容；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure>

<p>此文件修改后需要重新登录用户，才会生效</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ElasticSearch启动常见错误</tag>
        <tag>ElasticSearch错误</tag>
        <tag>ElasticSearch无法启动</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask 15行代码自动回复机器人(附vue前端)</title>
    <url>/f941f8f2.html</url>
    <content><![CDATA[<p>最近没事儿看下<code>Flask</code>，相比<code>Django</code>简直小的不要不要的，单个文件几行代码就完成了路由视图，使用<code>websocker</code>与之结合写一个自动回复聊天程序竟然也只用了15行代码。</p>
<a id="more"></a>

<p>线上效果图![](<span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3Rvbnl1MjAxOS9QaWNHby9tYXN0ZXIvMjAxOTA5MTkxNTEwNDYucG5n">https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190919151046.png<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/talk1.gif"></p>
<p>这个小程序用到了<code>flask</code>、<code>websocket</code>、<code>wsgi</code>，前端使用了<code>html+css+vue</code>。因为只是演示，所以没考虑使用<code>webpack</code>打包，代码包含简单注释，所以就不再详细解释每行代码了。依次附上代码：</p>
<p>注：本地<code>ip</code>为：<code>10.10.10.238</code></p>
<h2 id="Flask代码"><a href="#Flask代码" class="headerlink" title="Flask代码"></a><code>Flask</code>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> geventwebsocket.handler <span class="keyword">import</span> WebSocketHandler</span><br><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启一个flask应用</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义路由和函数功能</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/msg&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span>():</span></span><br><span class="line">	<span class="comment"># 接收连接用户socket</span></span><br><span class="line">    user_socker = request.environ.get(<span class="string">&#x27;wsgi.websocket&#x27;</span>)</span><br><span class="line">    <span class="comment"># 保持与客户端通信</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    	<span class="comment"># 接收客户端发来的消息</span></span><br><span class="line">        msg = user_socker.receive()</span><br><span class="line">        <span class="comment"># 将要返回给客户端的数据封装到一个字典</span></span><br><span class="line">        res = &#123;<span class="string">&quot;id&quot;</span> : <span class="number">0</span>, <span class="string">&quot;user&quot;</span> : <span class="string">&#x27;https://pic.qqtn.com/up/2018-2/15175580434330335.gif&#x27;</span>, <span class="string">&quot;msg&quot;</span> : <span class="string">&#x27;您刚才发送的消息为：【&#x27;</span>+str(msg)+<span class="string">&#x27;】&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 编码为json格式并发送给客户端</span></span><br><span class="line">        user_socker.send(json.dumps(res))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment"># 创建一个服务器，IP地址为0.0.0.0，端口是9687，处理函数是app</span></span><br><span class="line">    http_server = WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9687</span>), app, handler_class=WebSocketHandler)</span><br><span class="line">    <span class="comment"># 开始监听请求:</span></span><br><span class="line">    http_server.serve_forever()</span><br></pre></td></tr></table></figure>

<h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>聊天窗口<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/**重置标签默认样式*/</span></span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">            font-family: &#x27;微软雅黑&#x27;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">            width: 450px;</span><br><span class="line">            height: 780px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">            margin: 80px auto 0;</span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 55<span class="selector-tag">px</span> <span class="selector-id">#777</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            line-height: 34px;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            padding: 0 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">            width: 430px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">            width: 275px;</span><br><span class="line">            height: 45px;</span><br><span class="line">            outline: none;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            text-indent: 10px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            border-radius: 6px;</span><br><span class="line">            right: 80px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 62px;</span><br><span class="line">            height: 48px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            font-weight: 900;</span><br><span class="line">            line-height: 45px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 10px;</span><br><span class="line">            border-radius: 6px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#user_face_icon</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            background: red;</span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            border-radius: 30px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 6px;</span><br><span class="line">            left: 14px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line">            width: 435px;</span><br><span class="line">            height: 662px;</span><br><span class="line">            overflow: auto;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            padding-left: 10px;</span><br><span class="line">            width: 412px;</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#7cfc00</span>;</span></span><br><span class="line">            padding: 10px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            float: left;</span><br><span class="line">            margin: 6px 10px 0 10px;</span><br><span class="line">            max-width: 310px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 0 3<span class="selector-tag">px</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span><span class="selector-class">.imgleft</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span><span class="selector-class">.imgright</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-class">.spanleft</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-class">.spanright</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#7cfc00</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float: left;&quot;</span>&gt;</span>与机器人聊天中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float: right;&quot;</span>&gt;</span>14:21<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环消息列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in messages_list&quot;</span> <span class="attr">v-key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;item.user&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;&#x27;imgright&#x27;:item.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;&#x27;spanright&#x27;:item.id&#125;&quot;</span>&gt;</span>&#123;&#123;item.msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user_face_icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://www.xttblog.com/icons/favicon.ico&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sends&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;说点什么吧...&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sendMessage&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 连接服务器</span></span></span><br><span class="line"><span class="javascript">    ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://10.10.10.238:9687/msg&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 接收消息</span></span></span><br><span class="line"><span class="javascript">    ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 将服务器每次发来的消息存放在vue实例中</span></span></span><br><span class="line"><span class="javascript">        app.messages_list.push(<span class="built_in">JSON</span>.parse(data.data))</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">	<span class="comment">// 实例化一个vue对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 发送给服务器的内容，与发送表单绑定</span></span></span><br><span class="line"><span class="javascript">            sends: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 存放服务器与客户端聊天数据</span></span></span><br><span class="line">            messages_list: []</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 监听聊天数据，每次有变化将聊天区域滚动条定位到底部</span></span></span><br><span class="line"><span class="javascript">            messages_list: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> content = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line">                content.scrollTop = content.scrollHeight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 发送给服务端消息</span></span></span><br><span class="line"><span class="javascript">            sendMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 现将要发送的消息存放到聊天数据中心</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.messages_list.push(&#123;</span></span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="javascript">                    user: <span class="string">&#x27;https://pic.qqtn.com/up/2018-2/15175580428030394.gif&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    msg: <span class="built_in">this</span>.sends</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">                <span class="comment">// 发送给服务器消息</span></span></span><br><span class="line"><span class="javascript">                ws.send(<span class="built_in">this</span>.sends)</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 发送消息后置空发送消息框</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sends = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上就是完整的前后端代码，使用时将<code>ip</code>改为自己的代码就可以了，注聊天框中服务器与客户端消息显示位置以消息对象中id为表示，id为1代表客户端，0代表服务器。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>flask</category>
      </categories>
      <tags>
        <tag>Flask机器人</tag>
        <tag>Flask</tag>
        <tag>python学习</tag>
        <tag>python技巧</tag>
        <tag>python机器人</tag>
        <tag>python聊天</tag>
        <tag>flask聊天</tag>
        <tag>WebSocketHandler</tag>
        <tag>geventwebsocket</tag>
        <tag>WSGIServer</tag>
        <tag>websocket</tag>
        <tag>vue聊天机器人</tag>
        <tag>vue聊天</tag>
        <tag>vue机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask之Flask-SQLAlchemy</title>
    <url>/202c5745.html</url>
    <content><![CDATA[<p>之前文章大概介绍了 <code>SQLAlchemy</code> ，我们今天讲下<code>flask</code>中的<code>Flask-SQLAlchemy</code>，大概用法跟原生的很像，但是配置使用起来更简单了。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>我们在这里仿照<code>Django</code>的目录结构来创建一个项目，这种项目结构也是<code>Flask</code>官方建议的</p>
<p>我们的项目结构大概如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">└──	app					# 应用目录</span><br><span class="line">    ├	├── static		# 静态文件目录</span><br><span class="line">    ├	├── templates	# 模板文件目录</span><br><span class="line">    ├	├── views		# 蓝图目录(视图文件)</span><br><span class="line">    ├	├── __init__.py	# 应用导入时执行文件</span><br><span class="line">    └──manage.py		# 项目入口文件</span><br></pre></td></tr></table></figure>
<p><code>views</code>目录中我们写一个蓝图<code>user.py</code>，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入蓝图</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建蓝图</span></span><br><span class="line">user = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由及视图函数</span></span><br><span class="line"><span class="meta">@user.route(&#x27;/users&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这里是users视图&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>app/__init__.py</code>文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入Flask</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 导入user蓝图</span></span><br><span class="line"><span class="keyword">from</span> .views.user <span class="keyword">import</span> user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建应用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cerate_app</span>():</span></span><br><span class="line">    <span class="comment"># 实例化一个Flask</span></span><br><span class="line">    my_app = Flask(__name__)</span><br><span class="line">    <span class="comment"># 注册user蓝图到应用</span></span><br><span class="line">    my_app.register_blueprint(user)</span><br><span class="line">    <span class="comment"># 返回应用</span></span><br><span class="line">    <span class="keyword">return</span> my_app</span><br></pre></td></tr></table></figure>
<p><code>manage.py</code>文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入应用</span></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建应用</span></span><br><span class="line">my_app = app.cerate_app()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment"># 运行应用</span></span><br><span class="line">    my_app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Flask应用创建"><a href="#Flask应用创建" class="headerlink" title="Flask应用创建"></a><code>Flask</code>应用创建</h2><p>这里同样默认你已经安装好了 <code>Flask-SQLAlchemy</code> (没有安装请使用 <code>pip install Flask-SQLAlchemy</code> 进行安装)</p>
<h3 id="修改app-init-py"><a href="#修改app-init-py" class="headerlink" title="修改app/__init__.py"></a>修改<code>app/__init__.py</code></h3><p>引入<code>Flask-SQLAlchemy</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入视图</span></span><br><span class="line"><span class="keyword">from</span> .views.user <span class="keyword">import</span> user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化SQLAlchemy</span></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建flask应用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>():</span></span><br><span class="line">    <span class="comment"># 实例化一个flask app</span></span><br><span class="line">    my_app = Flask(__name__)</span><br><span class="line">    <span class="comment"># 初始化App配置 这个app配置就厉害了,专门针对 SQLAlchemy 进行配置</span></span><br><span class="line">    <span class="comment"># SQLALCHEMY_DATABASE_URI 配置 SQLAlchemy 的链接字符串儿</span></span><br><span class="line">    my_app.config[<span class="string">&quot;SQLALCHEMY_DATABASE_URI&quot;</span>] = <span class="string">&quot;mysql+pymysql://root:@127.0.0.1:3306/sqlalchemysss?charset=utf8&quot;</span></span><br><span class="line">    <span class="comment"># SQLALCHEMY_POOL_SIZE 配置 SQLAlchemy 的连接池大小</span></span><br><span class="line">    my_app.config[<span class="string">&quot;SQLALCHEMY_POOL_SIZE&quot;</span>] = <span class="number">5</span></span><br><span class="line">    <span class="comment"># SQLALCHEMY_POOL_TIMEOUT 配置 SQLAlchemy 的连接超时时间</span></span><br><span class="line">    my_app.config[<span class="string">&quot;SQLALCHEMY_POOL_TIMEOUT&quot;</span>] = <span class="number">15</span></span><br><span class="line">    my_app.config[<span class="string">&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;</span>] = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 初始化SQLAlchemy</span></span><br><span class="line">    db.init_app(my_app)</span><br><span class="line">    <span class="comment"># 注册路由视图蓝图</span></span><br><span class="line">    my_app.register_blueprint(user)</span><br><span class="line">    <span class="keyword">return</span> my_app</span><br></pre></td></tr></table></figure>

<h3 id="创建models-py"><a href="#创建models-py" class="headerlink" title="创建models.py"></a>创建<code>models.py</code></h3><p>创建<code>orm</code>模型文件，类似<code>Django</code>中的<code>models</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建User模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="comment"># 设置用户数据表名</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;app_users&quot;</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">&quot;useexisting&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">32</span>), comment=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> app <span class="keyword">import</span> create_app</span><br><span class="line">    <span class="comment"># 创建app</span></span><br><span class="line">    my_app = create_app()</span><br><span class="line">    <span class="comment"># 清空数据</span></span><br><span class="line">    db.drop_all(app=my_app)</span><br><span class="line">    <span class="comment"># 执行db操作</span></span><br><span class="line">    db.create_all(app=my_app)</span><br></pre></td></tr></table></figure>

<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p><code>app/views/user.py</code>调用<code>models</code>模型，使用该模型进行增查</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint,jsonify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入User模型</span></span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化蓝图</span></span><br><span class="line">user = Blueprint(<span class="string">&quot;user&quot;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户路由及视图函数</span></span><br><span class="line"><span class="meta">@user.route(&quot;/users/ass&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>():</span></span><br><span class="line">    <span class="comment"># 添加一条数据</span></span><br><span class="line">    db.session.add(User(name=<span class="string">&quot;张学友&quot;</span>))</span><br><span class="line">    <span class="comment"># 执行操作</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;添加用户&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户列表</span></span><br><span class="line"><span class="meta">@user.route(&quot;/users&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span>():</span></span><br><span class="line">    <span class="comment"># 查询所有用户</span></span><br><span class="line">    res = User.query.all()</span><br><span class="line">    <span class="comment"># 待格式化的用户列表</span></span><br><span class="line">    user = []</span><br><span class="line">    <span class="comment"># 循环提取用户</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># 添加用户至列表</span></span><br><span class="line">        user.append(&#123;<span class="string">&quot;name&quot;</span>:item.name, <span class="string">&quot;id&quot;</span>:item.id&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(user)</span><br></pre></td></tr></table></figure>

<p>此时运行flask项目，单独执行<code>models.py</code>进行数据表创建，此时访问路由程序正常运行</p>
<h2 id="使用Flask-Script"><a href="#使用Flask-Script" class="headerlink" title="使用Flask-Script"></a>使用<code>Flask-Script</code></h2><p>我们继续仿照<code>Django</code>进行操作，<code>Django</code>给我们提供了命令来运行<code>django</code>程序，我们要实现类似功能需要借助第三方扩展包<code>Flask-Script</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入 Flask-Script 中的 Manager</span></span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line">my_app = app.create_app()</span><br><span class="line"></span><br><span class="line"><span class="comment">#让app支持 Manager</span></span><br><span class="line">manager = Manager(my_app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用manager.run()代替my_app.run(),此时在项目根目录使用python manager.py runserver即可运行程序</span></span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure>

<h3 id="使用flask-script命令行"><a href="#使用flask-script命令行" class="headerlink" title="使用flask_script命令行"></a>使用<code>flask_script</code>命令行</h3><h4 id="使用command"><a href="#使用command" class="headerlink" title="使用command"></a>使用command</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line">my_app = app.create_app()</span><br><span class="line"></span><br><span class="line"><span class="comment">#让app支持 Manager</span></span><br><span class="line">manager = Manager(my_app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outName</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">f&quot;你好<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用manager.run()代替my_app.run(),此时在项目根目录使用python manager.py runserver即可运行程序</span></span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure>

<p>测试我们控制台使用<code>python manager.py outName 刘德华</code>，控制台就会打印“你好刘德华”</p>
<h4 id="使用option"><a href="#使用option" class="headerlink" title="使用option"></a>使用<code>option</code></h4><p><code>option</code>命令语法如下： <code>@manager.opation(&quot;-短指令&quot;,&quot;--长指令&quot;,dest=&quot;变量名&quot;)</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line">my_app = app.create_app()</span><br><span class="line"></span><br><span class="line"><span class="comment">#让app支持 Manager</span></span><br><span class="line">manager = Manager(my_app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outName</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">f&quot;你好<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option(&#x27;-ip&#x27;, &#x27;--ipaddress&#x27;, dest = &quot;ip&quot;)</span></span><br><span class="line"><span class="meta">@manager.option(&#x27;-p&#x27;, &#x27;--port&#x27;, dest = &quot;port&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runApp</span>(<span class="params">ip, port</span>):</span></span><br><span class="line">    print(<span class="string">f&quot;程序运行在：<span class="subst">&#123;ip&#125;</span>上，且端口为：<span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用manager.run()代替my_app.run(),此时在项目根目录使用python manager.py runserver即可运行程序</span></span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure>

<p>测试我们测试一下命令，无论长指令还是短指令都正确输出了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\site&gt;python manager.py runApp -ip 10.10.10.222 -p 9999</span><br><span class="line">程序运行在：10.10.10.222上，且端口为：9999</span><br><span class="line"></span><br><span class="line">E:\site&gt;python manager.py runApp --ipaddress 10.10.10.111 --port 8888</span><br><span class="line">程序运行在：10.10.10.111上，且端口为：8888</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用指令"><a href="#使用指令" class="headerlink" title="使用指令"></a>使用指令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line">my_app = app.create_app()</span><br><span class="line"></span><br><span class="line"><span class="comment">#让app支持 Manager</span></span><br><span class="line">manager = Manager(my_app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option(&#x27;-ip&#x27;, &#x27;--ipaddress&#x27;, dest = &quot;ip&quot;)</span></span><br><span class="line"><span class="meta">@manager.option(&#x27;-p&#x27;, &#x27;--port&#x27;, dest = &quot;port&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runApp</span>(<span class="params">ip, port</span>):</span></span><br><span class="line">    my_app.run(<span class="string">&quot;0.0.0.0&quot;</span>, int(port),debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用manager.run()代替my_app.run(),此时在项目根目录使用python manager.py runserver即可运行程序</span></span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>经测试，跟<code>Django</code>一样的效果，完成了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\site&gt;python manager.py runApp -ip 0.0.0.0 -p 9588</span><br><span class="line"> * Serving Flask app &quot;app&quot; (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it in a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: on</span><br><span class="line"> * Restarting with stat</span><br><span class="line"> * Debugger is active!</span><br><span class="line"> * Debugger PIN: 339-556-363</span><br><span class="line"> * Running on http:&#x2F;&#x2F;0.0.0.0:9588&#x2F; (Press CTRL+C to quit)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Flask-Migrate"><a href="#Flask-Migrate" class="headerlink" title="Flask-Migrate"></a><code>Flask-Migrate</code></h2><p>上方代码执行的前提还是要先手动执行<code>models.py</code>文件，让其创建数据表，我们既然知道了创建命令是否可以把类似<code>Django</code>的数据库迁移也做出来？这就用到了另一个第三方库<code>Flask-Migrate</code>，该扩展库必须是要基于<code>flask_script</code>。</p>
<h3 id="安装-Flask-Migrate"><a href="#安装-Flask-Migrate" class="headerlink" title="安装 Flask-Migrate"></a>安装 <code>Flask-Migrate</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install Flask-Migrate</span><br></pre></td></tr></table></figure>

<h3 id="引入Flask-Migrate"><a href="#引入Flask-Migrate" class="headerlink" title="引入Flask-Migrate"></a>引入<code>Flask-Migrate</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="comment"># 导入 Flask-Migrate 中的 Migrate 和 MigrateCommand</span></span><br><span class="line"><span class="comment"># 这两个东西说白了就是想在 Flask-Script 中添加几个命令和指令而已</span></span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line">my_app = app.create_app()</span><br><span class="line"></span><br><span class="line"><span class="comment">#让app支持 Manager</span></span><br><span class="line">manager = Manager(my_app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Migrate 既然是数据库迁移,那么就得告诉他数据库在哪里</span></span><br><span class="line"><span class="comment"># 并且告诉他要支持那个app</span></span><br><span class="line">Migrate(my_app, app.db)</span><br><span class="line"><span class="comment"># 现在就要告诉manager 有新的指令了,这个新指令在MigrateCommand 中存着呢</span></span><br><span class="line"><span class="comment"># 当你的命令中出现 db 指令,则去MigrateCommand中寻找对应关系</span></span><br><span class="line">manager.add_command(<span class="string">&quot;db&quot;</span>, MigrateCommand)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据库迁移指令:</span></span><br><span class="line"><span class="string">python manager.py db init </span></span><br><span class="line"><span class="string">python manager.py db migrate   # Django中的 makemigration</span></span><br><span class="line"><span class="string">python manager.py db upgrade  # Django中的 migrate</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option(&#x27;-ip&#x27;, &#x27;--ipaddress&#x27;, dest = &quot;ip&quot;)</span></span><br><span class="line"><span class="meta">@manager.option(&#x27;-p&#x27;, &#x27;--port&#x27;, dest = &quot;port&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runApp</span>(<span class="params">ip, port</span>):</span></span><br><span class="line">    my_app.run(<span class="string">&quot;0.0.0.0&quot;</span>, int(port),debug=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;程序运行成功！！！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用manager.run()代替my_app.run(),此时在项目根目录使用python manager.py runserver即可运行程序</span></span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure>

<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\site&gt;python manager.py db init</span><br><span class="line">Creating directory E:\site\migrations ...  done</span><br><span class="line">Creating directory E:\site\migrations\versions ...  done</span><br><span class="line">Generating E:\site\migrations\alembic.ini ...  done</span><br><span class="line">Generating E:\site\migrations\env.py ...  done</span><br><span class="line">Generating E:\site\migrations\README ...  done</span><br><span class="line">Generating E:\site\script.py.mako ...  done</span><br><span class="line">Please edit configuration&#x2F;connection&#x2F;logging settings in &#39;E:\\site\\migratio</span><br><span class="line">ns\\alembic.ini&#39; before proceeding.</span><br><span class="line"></span><br><span class="line">E:\site&gt;python manager.py db migrate</span><br><span class="line">D:\Program Files\Python37\lib\site-packages\pymysql\cursors.py:170: Warning: (1366, &quot;Incorrect string valu</span><br><span class="line">e: &#39;\\xD6\\xD0\\xB9\\xFA\\xB1\\xEA...&#39; for column &#39;VARIABLE_VALUE&#39; at row 484&quot;)</span><br><span class="line">  result &#x3D; self._query(query)</span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">INFO  [alembic.autogenerate.compare] Detected removed table &#39;teachers&#39;</span><br><span class="line">INFO  [alembic.autogenerate.compare] Detected removed table &#39;app_users&#39;</span><br><span class="line">INFO  [alembic.autogenerate.compare] Detected removed table &#39;students&#39;</span><br><span class="line">INFO  [alembic.autogenerate.compare] Detected removed table &#39;citys&#39;</span><br><span class="line">INFO  [alembic.autogenerate.compare] Detected removed table &#39;user&#39;</span><br><span class="line">INFO  [alembic.autogenerate.compare] Detected removed table &#39;studentteacher&#39;</span><br><span class="line">Generating E:\site\migrations\versions\ed69f0263233_.py ...  done</span><br><span class="line"></span><br><span class="line">E:\site&gt;python manager.py db upgrade</span><br><span class="line">D:\Program Files\Python37\lib\site-packages\pymysql\cursors.py:170: Warning: (1366, &quot;Incorrect string valu</span><br><span class="line">e: &#39;\\xD6\\xD0\\xB9\\xFA\\xB1\\xEA...&#39; for column &#39;VARIABLE_VALUE&#39; at row 484&quot;)</span><br><span class="line">  result &#x3D; self._query(query)</span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行成功，此时查看数据表正常，且文件夹目录多了一个migrations文件夹</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191022104934.png"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>flask</category>
      </categories>
      <tags>
        <tag>Flask-SQLAlchemy</tag>
        <tag>flask_script</tag>
        <tag>flask_migrate</tag>
        <tag>flask数据库迁移</tag>
        <tag>flask项目结构</tag>
        <tag>flask命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask聊天进阶(群聊+私聊)</title>
    <url>/c00cdd97.html</url>
    <content><![CDATA[<p>之前写了一篇文章<a href="https://www.diandian100.cn/f941f8f2.html">Flask 15行代码自动回复机器人(附<code>vue</code>前端)</a>介绍了下客户端与服务器机器人聊天，日常需求不止这一个场景，更多的是客户端相互之间的私聊与群聊，今天我们在之前的基础上再添加几行代码，一样能轻松地实现群聊与私聊。</p>
<a id="more"></a>

<p>我们先来思考下如何实现：</p>
<p>首先，昨天代码我们可以获取到每个客户端<code>socket</code>，那我们是否可以把这些客户端<code>socket</code>临时存放起来，某一个客户端<code>socket</code>发来消息我们就循环下之前存取的<code>socket</code>，给每个客户端<code>socket</code>发送下刚才受到的消息呢？这样的话不就是我们需要的群聊场景吗？</p>
<p>再说下私聊，我们存取的时候能否给每个客户端<code>socket</code>做一个标识呢？类似字典，多存取一个键来区分客户端<code>socket</code>，客户端发来消息时服务端除了要接受这个<code>socket</code>之外，还需要另外接收一个客户端的唯一标识，服务器收到这个消息通过这个标识找到其对应的客户端<code>socket</code>并将刚才收到消息发送给他，这不就是我们想要的私聊场景吗？</p>
<p>接下来我们来实现以上功能。</p>
<h2 id="群聊"><a href="#群聊" class="headerlink" title="群聊"></a>群聊</h2><p>通过以上的业务分析，群聊实现起来更简单一点，我们这里就先实现群聊功能。另外群聊这里我们说下，前端代码我们无需任何更改，只更改服务端即可，所以我们这里之放服务端的代码，需要前端代码的请至：<a href="https://www.diandian100.cn/f941f8f2.html">Flask 15行代码自动回复机器人(附<code>vue</code>前端)</a>。</p>
<h3 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> geventwebsocket.handler <span class="keyword">import</span> WebSocketHandler</span><br><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启一个flask应用</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来存取客户端socket</span></span><br><span class="line">user_list = set()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义路由和函数功能</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/msg&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span>():</span></span><br><span class="line">	<span class="comment"># 接收连接用户socket</span></span><br><span class="line">    user_socket = request.environ.get(<span class="string">&#x27;wsgi.websocket&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新的客户端socket存取至集合</span></span><br><span class="line">    user_list.add(user_socket)</span><br><span class="line">    <span class="comment"># 保持与客户端通信</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    	<span class="comment"># 接收客户端发来的消息</span></span><br><span class="line">        msg = user_socket.receive()</span><br><span class="line">        <span class="comment"># 循环客户端socket集合，给每个客户端发送刚才收到的msg</span></span><br><span class="line">        <span class="keyword">for</span> usocker <span class="keyword">in</span> user_list:</span><br><span class="line">            <span class="comment"># 将要返回给客户端的数据封装到一个字典</span></span><br><span class="line">            res = &#123;<span class="string">&quot;id&quot;</span> : <span class="number">0</span>, <span class="string">&quot;user&quot;</span> : <span class="string">&#x27;https://pic.qqtn.com/up/2018-2/15175580434330335.gif&#x27;</span>, <span class="string">&quot;msg&quot;</span> : <span class="string">&#x27;您刚才发送的消息为：【&#x27;</span>+str(msg)+<span class="string">&#x27;】&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># 编码为json格式并发送给客户端</span></span><br><span class="line">            usocker.send(json.dumps(res))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment"># 创建一个服务器，IP地址为0.0.0.0，端口是9687，处理函数是app</span></span><br><span class="line">    http_server = WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9687</span>), app, handler_class=WebSocketHandler)</span><br><span class="line">    <span class="comment"># 开始监听请求:</span></span><br><span class="line">    http_server.serve_forever()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/000.gif"></p>
<h3 id="修复bug"><a href="#修复bug" class="headerlink" title="修复bug"></a>修复<code>bug</code></h3><p>运行以上代码我们前端进行测试，所有客户端已经可以接收到某个客户端发送的消息了，但是还有一单欠缺，因为发送者自己也收到了刚才自己发送的消息，其实我们在循环的时候判断下发送者是否等于接受者就可以了。</p>
<p>具体实现在25行以后加上以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果接收客户端socket等于要发送的客户端socket则跳过本次循环不执行发送</span></span><br><span class="line"><span class="keyword">if</span> user_socket == usocker:</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/111.gif"></p>
<h2 id="私聊"><a href="#私聊" class="headerlink" title="私聊"></a>私聊</h2><p>上面大概说了私聊的原理，下面我们来具体实现：</p>
<h3 id="服务端代码-1"><a href="#服务端代码-1" class="headerlink" title="服务端代码"></a>服务端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> geventwebsocket.handler <span class="keyword">import</span> WebSocketHandler</span><br><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启一个flask应用</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来存取客户端socket</span></span><br><span class="line">user_dicts = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义路由和函数功能</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/msg/&lt;uname&gt;&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span>(<span class="params">uname</span>):</span></span><br><span class="line">	<span class="comment"># 接收连接用户socket</span></span><br><span class="line">    user_socket = request.environ.get(<span class="string">&#x27;wsgi.websocket&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新的客户端socket存取至字典</span></span><br><span class="line">    user_dicts[uname] = user_socket</span><br><span class="line">    <span class="comment"># 保持与客户端通信</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 解析用户发来的消息</span></span><br><span class="line">        msg = json.loads(user_socket.receive())</span><br><span class="line">        <span class="comment"># 给目标客户端发送消息</span></span><br><span class="line">        toUser = user_dicts.get(msg[<span class="string">&#x27;to&#x27;</span>])</span><br><span class="line">        <span class="comment"># 判断目标客户是否存在，存在则给该用户发送消息</span></span><br><span class="line">        <span class="keyword">if</span> toUser:</span><br><span class="line">            <span class="comment"># 将要返回给客户端的数据封装到一个字典</span></span><br><span class="line">            res = &#123;<span class="string">&quot;id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&#x27;https://pic.qqtn.com/up/2018-2/15175580434330335.gif&#x27;</span>,</span><br><span class="line">                   <span class="string">&quot;msg&quot;</span>: msg[<span class="string">&#x27;msg&#x27;</span>]&#125;</span><br><span class="line">            <span class="comment"># 编码为json格式并发送给客户端</span></span><br><span class="line">            toUser.send(json.dumps(res))</span><br><span class="line">        <span class="comment"># 目标刻骨不存在则返回给发送者提示语</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 将要返回给客户端的数据封装到一个字典</span></span><br><span class="line">            res = &#123;<span class="string">&quot;id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&#x27;https://pic.qqtn.com/up/2018-2/15175580434330335.gif&#x27;</span>,</span><br><span class="line">                   <span class="string">&quot;msg&quot;</span>: <span class="string">&#x27;很抱歉，您要发送的用户不存在&#x27;</span>&#125;</span><br><span class="line">            <span class="comment"># 编码为json格式并发送给客户端</span></span><br><span class="line">            user_socket.send(json.dumps(res))</span><br><span class="line"><span class="comment"># 聊天视图界面            </span></span><br><span class="line"><span class="meta">@app.route(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;layout.html&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment"># 创建一个服务器，IP地址为0.0.0.0，端口是9687，处理函数是app</span></span><br><span class="line">    http_server = WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9687</span>), app, handler_class=WebSocketHandler)</span><br><span class="line">    <span class="comment"># 开始监听请求:</span></span><br><span class="line">    http_server.serve_forever()</span><br></pre></td></tr></table></figure>

<h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>聊天窗口<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/**重置标签默认样式*/</span></span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">            font-family: &#x27;微软雅黑&#x27;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">            width: 450px;</span><br><span class="line">            height: 780px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">            margin: 80px auto 0;</span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 55<span class="selector-tag">px</span> <span class="selector-id">#777</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            line-height: 34px;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            padding: 0 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">            width: 430px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">            width: 275px;</span><br><span class="line">            height: 45px;</span><br><span class="line">            outline: none;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            text-indent: 10px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            border-radius: 6px;</span><br><span class="line">            right: 80px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 62px;</span><br><span class="line">            height: 48px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            font-weight: 900;</span><br><span class="line">            line-height: 45px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 10px;</span><br><span class="line">            border-radius: 6px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#user_face_icon</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            background: red;</span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            border-radius: 30px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 6px;</span><br><span class="line">            left: 14px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line">            width: 435px;</span><br><span class="line">            height: 662px;</span><br><span class="line">            overflow: auto;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            padding-left: 10px;</span><br><span class="line">            width: 412px;</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#7cfc00</span>;</span></span><br><span class="line">            padding: 10px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            float: left;</span><br><span class="line">            margin: 6px 10px 0 10px;</span><br><span class="line">            max-width: 310px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 0 3<span class="selector-tag">px</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span><span class="selector-class">.imgleft</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span><span class="selector-class">.imgright</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-class">.spanleft</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-class">.spanright</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#7cfc00</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;sender &amp;&amp; recever&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float: left;&quot;</span>&gt;</span>与&#123;&#123; recever &#125;&#125;聊天中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float: right;&quot;</span>&gt;</span>14:21<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环消息列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in messages_list&quot;</span> <span class="attr">v-key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;item.user&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;&#x27;imgright&#x27;:item.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;&#x27;spanright&#x27;:item.id&#125;&quot;</span>&gt;</span>&#123;&#123;item.msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user_face_icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://www.xttblog.com/icons/favicon.ico&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sends&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;说点什么吧...&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sendMessage&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">v-model</span>=<span class="string">&quot;sender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择一个用户名：<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users_list&quot;</span> <span class="attr">v-key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user!=recever&quot;</span>&gt;</span>&#123;&#123; user &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">v-model</span>=<span class="string">&quot;recever&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择一个您要发送的用户：<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users_list&quot;</span> <span class="attr">v-key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user!=sender&quot;</span>&gt;</span>&#123;&#123; user &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endraw %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ws;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 供选择的用户列表</span></span></span><br><span class="line"><span class="javascript">            users_list:[<span class="string">&quot;张学友&quot;</span>, <span class="string">&quot;刘德华&quot;</span>, <span class="string">&quot;郭富城&quot;</span> ,<span class="string">&quot;黎明&quot;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送者</span></span></span><br><span class="line"><span class="javascript">            sender:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 接收者</span></span></span><br><span class="line"><span class="javascript">            recever:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送内容</span></span></span><br><span class="line"><span class="javascript">            sends: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 聊天消息列表</span></span></span><br><span class="line">            messages_list: []</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 检测是否有新的消息，有的话滚动条定位至底部</span></span></span><br><span class="line"><span class="javascript">            messages_list: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> content = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line">                content.scrollTop = content.scrollHeight;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            sender: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) </span>&#123;</span></span><br><span class="line">                if (newQuestion)&#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">// 发送者不为空的时候才连接服务器</span></span></span><br><span class="line"><span class="javascript">                        ws = <span class="keyword">new</span> WebSocket(<span class="string">`ws://10.10.10.238:9687/msg/<span class="subst">$&#123;newQuestion&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 接收消息</span></span></span><br><span class="line"><span class="javascript">                        ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 解析为json对象，并存入聊天列表</span></span></span><br><span class="line"><span class="javascript">                            app.messages_list.push(<span class="built_in">JSON</span>.parse(data.data))</span></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 发送消息</span></span></span><br><span class="line"><span class="javascript">            sendMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.messages_list.push(&#123;</span></span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="javascript">                    user: <span class="string">&#x27;https://pic.qqtn.com/up/2018-2/15175580428030394.gif&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    msg: <span class="built_in">this</span>.sends</span></span><br><span class="line">                &#125;)</span><br><span class="line">                sendDatas = &#123;</span><br><span class="line"><span class="javascript">                    to : <span class="built_in">this</span>.recever,</span></span><br><span class="line"><span class="javascript">                    msg: <span class="built_in">this</span>.sends</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">				<span class="comment">// 序列化为json然后发送，并置空发送框</span></span></span><br><span class="line"><span class="javascript">                ws.send(<span class="built_in">JSON</span>.stringify(sendDatas))</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sends = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/44.gif"></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/55.gif"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>flask</category>
      </categories>
      <tags>
        <tag>WebSocketHandler</tag>
        <tag>geventwebsocket</tag>
        <tag>WSGIServer</tag>
        <tag>websocket</tag>
        <tag>vue聊天</tag>
        <tag>Flask聊天进阶</tag>
        <tag>flask群聊</tag>
        <tag>flask私聊</tag>
        <tag>vue聊天室</tag>
        <tag>vue群聊</tag>
        <tag>vue私聊</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章自定义生成永久链接</title>
    <url>/93a989db.html</url>
    <content><![CDATA[<p>在写博客的时候，一些文件，文件夹难免会写成中文。这就导致生成的最终链接带有中文，然后以复制，中文将会翻译成英文，一大串，令人窝心，昨天在逛Hexo官方插件的时候突然发现了这个插件<code>hexo-abbrlink</code>，该插件是根据帖子标题生成静态帖子链接.使用过后觉得不错，推荐给大家。</p>
<a id="more"></a>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<h5 id="修改config-yml文件中的permalink"><a href="#修改config-yml文件中的permalink" class="headerlink" title="修改config.yml文件中的permalink"></a>修改config.yml文件中的permalink</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: posts&#x2F;:abbrlink&#x2F;</span><br></pre></td></tr></table></figure>

<h6 id="两种算法"><a href="#两种算法" class="headerlink" title="两种算法"></a>两种算法</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alg -- Algorithm (currently support crc16 and crc32, which crc16 is default)</span><br><span class="line">rep -- Represent (the generated link could be presented in hex or dec value)</span><br></pre></td></tr></table></figure>

<h6 id="算法设置"><a href="#算法设置" class="headerlink" title="算法设置"></a>算法设置</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:  </span><br><span class="line">  alg: crc32  #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br></pre></td></tr></table></figure>

<p>可选模式：</p>
<ul>
<li>crc16 &amp; hex</li>
<li>crc16 &amp; dec</li>
<li>crc32 &amp; hex</li>
<li>crc32 &amp; dec</li>
</ul>
<h6 id="配置完成后"><a href="#配置完成后" class="headerlink" title="配置完成后"></a>配置完成后</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: posts&#x2F;:abbrlink&#x2F;</span><br><span class="line">abbrlink:  </span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>

<h2 id="样品"><a href="#样品" class="headerlink" title="样品"></a>样品</h2><p>所生成的链接如下 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;65535.html</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;1690090958.html</span><br></pre></td></tr></table></figure>

<h3 id="模板文件修改（自选）"><a href="#模板文件修改（自选）" class="headerlink" title="模板文件修改（自选）"></a>模板文件修改（自选）</h3><p>在博客所在的文件夹里，搜索文件夹<code>scaffolds</code>，找到模板文件<code>post.md</code><br>推荐修改成的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">comments: true</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hexo, abbrlink</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel Blade模板使用</title>
    <url>/c4431a87.html</url>
    <content><![CDATA[<p>Blade 是 Laravel 提供的一个简单而又强大的模板引擎。和其他流行的 PHP 模板引擎不同，Blade 并不限制你在视图中使用原生 PHP 代码。所有 Blade 视图文件都将被编译成原生的 PHP 代码并缓存起来，除非它被修改，否则不会重新编译，这就意味着 Blade 基本上不会给你的应用增加任何负担。Blade 视图文件使用 <code>.blade.php</code> 作为文件扩展名，被存放在 <code>resources/views</code> 目录。</p>
<a id="more"></a>



<h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><h3 id="定义布局"><a href="#定义布局" class="headerlink" title="定义布局"></a>定义布局</h3><p>Blade 的两个主要优点是 <em>模板继承</em> 和 <em>区块</em> 。为方便开始，让我们先通过一个简单的例子来上手。首先，我们来研究一个「主」页面布局。因为大多数 web 应用会在不同的页面中使用相同的布局方式，因此可以很方便地定义单个 Blade 布局视图：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 文件保存于 resources/views/layouts/app.blade.php --&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;应用程序名称 - @<span class="keyword">yield</span>(<span class="string">&#x27;title&#x27;</span>)&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        @section(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">            这是主布局的侧边栏。</span><br><span class="line">        @show</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            @<span class="keyword">yield</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>如你所见，该文件包含了典型的 HTML 语法。不过，请注意 <code>@section</code> 和 <code>@yield</code> 命令。顾名思义，<code>@section</code>命令定义了视图的一部分内容，而 <code>@yield</code> 指令是用来显示指定部分的内容。</p>
<p>现在，我们已经定义好了这个应用程序的布局，接下来，我们定义一个继承此布局的子页面。</p>
<h3 id="继承布局"><a href="#继承布局" class="headerlink" title="继承布局"></a>继承布局</h3><p>当定义子视图时，你可以使用 Blade 提供的 <code>@extends</code> 命令来为子视图指定应该 「继承」 的布局。 继承 Blade 布局的视图可使用 <code>@section</code> 命令将内容注入于布局的 <code>@section</code> 中。而「主」布局中使用 <code>@yield</code> 的地方会显示这些子视图中的 <code>@section</code> 间的内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 文件保存于 resources/views/layouts/child.blade.php --&gt;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">extends</span>(<span class="string">&#x27;layouts.app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">@section(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Page Title&#x27;</span>)</span><br><span class="line"></span><br><span class="line">@section(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    @<span class="built_in">parent</span></span><br><span class="line"></span><br><span class="line">    &lt;p&gt;这将追加到主布局的侧边栏。&lt;/p&gt;</span><br><span class="line">@endsection</span><br><span class="line"></span><br><span class="line">@section(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    &lt;p&gt;这是主体内容。&lt;/p&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<p>在上面的例子里，<code>@section</code> 中的 <code>sidebar</code> 使用 <code>@parent</code> 命令在「主」布局的 <code>@section(&#39;sidebar&#39;)</code> 中增加内容（不是覆盖）。渲染视图时，<code>@parent</code> 指令会被替换为「主」布局中 <code>@section(&#39;sidebar&#39;)</code> 间的内容。</p>
<blockquote>
<p>{tip} 与上一个示例相反，此侧边栏部分以 <code>@endsection</code> 而不是 <code>@show</code> 结尾。 <code>@endsection</code> 指令只定义一个区块，而 <code>@show</code> 则是定义并立即生成该区块。</p>
</blockquote>
<p>你也可以通过在路由中使用全局辅助函数 <code>view</code> 来返回 Blade 视图：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">&#x27;blade&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;child&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h2 id="Components-amp-Slots"><a href="#Components-amp-Slots" class="headerlink" title="Components &amp; Slots"></a>Components &amp; Slots</h2><p>Components 和 slots 类似于布局中的 <code>@section</code>，但其使用方式更容易使人理解。首先，假设我们有一个能在整个应用程序中被重复使用的「警告」组件:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- /resources/views/alert.blade.php --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;alert alert-danger&quot;&gt;</span><br><span class="line">    &#123;&#123; $slot &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>&#123;&#123; $slot &#125;&#125;</code> 变量将包含我们希望注入到组件的内容。然后，我们可以使用 Blade 命令 <code>@component</code> 来构建这个组件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@component(<span class="string">&#x27;alert&#x27;</span>)</span><br><span class="line">    &lt;strong&gt;Whoops!&lt;/strong&gt; Something went wrong!</span><br><span class="line">@endcomponent</span><br></pre></td></tr></table></figure>

<p>有时为组件定义多个 slots 是很有帮助的。现在我们要对「警报」组件进行修改，让它可以注入「标题」。通过简单地 「打印」匹配其名称的变量来显示被命名的 <code>@slot</code> 之间的内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- /resources/views/alert.blade.php --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;alert alert-danger&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;alert-title&quot;&gt;&#123;&#123; $title &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; $slot &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以使用 <code>@slot</code> 指令注入内容到已命名的 slot 中，任何没有被 <code>@slot</code> 指令包裹住的内容将传递给组件中的 <code>$slot</code> 变量:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@component(<span class="string">&#x27;alert&#x27;</span>)</span><br><span class="line">    @slot(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        Forbidden</span><br><span class="line">    @endslot</span><br><span class="line"></span><br><span class="line">    你没有权限访问这个资源！</span><br><span class="line">@endcomponent</span><br></pre></td></tr></table></figure>



<h4 id="向组件传递数据"><a href="#向组件传递数据" class="headerlink" title="向组件传递数据"></a>向组件传递数据</h4><p>需要向组件传递数据时，可以给 <code>@component</code> 指令的第二个参数传入一个数组。数组里的数据将在组件模板以变量的形式生效：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@component(<span class="string">&#x27;alert&#x27;</span>, [<span class="string">&#x27;foo&#x27;</span> =&gt; <span class="string">&#x27;bar&#x27;</span>])</span><br><span class="line">    ...</span><br><span class="line">@endcomponent</span><br></pre></td></tr></table></figure>



<h4 id="组件别名"><a href="#组件别名" class="headerlink" title="组件别名"></a>组件别名</h4><p>子目录中的 Blade 组件，使用别名更方便访问。现在，有一个 Blade 组件存储在 <code>resources/views/components/alert.blade.php</code>，可以使用 <code>component</code> 方法给它起个 <code>alert</code> 的别名。通常，在 <code>AppServiceProvider</code> 的 <code>boot</code> 方法中完成这个操作：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Blade</span>;</span><br><span class="line"></span><br><span class="line">Blade::component(<span class="string">&#x27;components.alert&#x27;</span>, <span class="string">&#x27;alert&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>组件起好别名后，使用指令渲染：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@alert([<span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;danger&#x27;</span>])</span><br><span class="line">    你无权访问！</span><br><span class="line">@endalert</span><br></pre></td></tr></table></figure>

<p>也可以不传参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@alert</span><br><span class="line">    你无权访问！</span><br><span class="line">@endalert</span><br></pre></td></tr></table></figure>





<h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2><p>传入 Blade 视图的数据，通过双花括号包裹来显示。例如，给出如下路由：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">&#x27;greeting&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;welcome&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Samantha&#x27;</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样显示 <code>name</code> 变量的内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Hello, &#123;&#123; $name &#125;&#125;.</span><br></pre></td></tr></table></figure>


<p>当然，不限于显示传入视图的变量内容，还可以输出 PHP 函数结果。实际上，可以在 Blade echo 语句里放置任何 PHP 代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">The current UNIX timestamp is &#123;&#123; time() &#125;&#125;.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>{tip} Blade `{{ }}` 语句会自动调用 PHP 的 <code>htmlspecialchars</code> 函数防止 XSS 攻击。</p>
</blockquote>
<h4 id="显示未转义数据"><a href="#显示未转义数据" class="headerlink" title="显示未转义数据"></a>显示未转义数据</h4> 
默认情况下，Blade `{{ }}` 语句会自动调用 PHP 的 `htmlspecialchars` 函数防止 XSS 攻击。不想转义的话，可以使用以下语法：
 

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Hello, &#123;!! $name !!&#125;.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>{note} 输出用户提供的数据时，千万要小心。对用户提供的数据，总是要使用双花括号进行显示，防止 XSS 攻击。</p>
</blockquote>
<h4 id="渲染-JSON"><a href="#渲染-JSON" class="headerlink" title="渲染 JSON"></a>渲染 JSON</h4><p>有时，为了初始化 JavaScript 变量，需要将传入视图的数组进行 JSON 化。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app = <span class="meta">&lt;?php</span> <span class="keyword">echo</span> json_encode($array); <span class="meta">?&gt;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>然而，可以用 <code>@json</code> Blade 指令替代手动 <code>json_encode</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app = @json($array);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h4 id="HTML-实体转换"><a href="#HTML-实体转换" class="headerlink" title="HTML 实体转换"></a>HTML 实体转换</h4><p>默认情况下，Blade （和 Laravel 的 辅助函数 <code>e</code>） 会将 HTML 全部转换。要关闭全部转换，可以在 <code>AppServiceProvider</code> 的 <code>boot</code> 方法里调用 <code>Blade::withoutDoubleEncoding</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Blade</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引导应用服务.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Blade::withoutDoubleEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Blade-amp-JavaScript-框架"><a href="#Blade-amp-JavaScript-框架" class="headerlink" title="Blade &amp; JavaScript 框架"></a>Blade &amp; JavaScript 框架</h2><p>由于许多 JavaScript 框架也是用花括号来表示要显示在浏览器的表达式， 可以使用 <code>@</code> 符告诉 Blade 渲染引擎保持这个表达式不变。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Laravel&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">Hello, @&#123;&#123; name &#125;&#125;.</span><br></pre></td></tr></table></figure>
 
渲染后，Blade 引擎会把 `@` 符移除，但是 `{{ name }}` 表达式保留，从而让 JavaScript 框架去渲染它。
 


<h4 id="verbatim-指令"><a href="#verbatim-指令" class="headerlink" title="@verbatim 指令"></a><code>@verbatim</code> 指令</h4><p>如果模板中一大部分需要显示 JavaScript 变量，就可以用 <code>@verbatim</code> 指令包裹住 HTML，这样就不用在每个 Blade echo 语句前加 <code>@</code> 符：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@verbatim</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        Hello, &#123;&#123; name &#125;&#125;.</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">@endverbatim</span><br></pre></td></tr></table></figure>





<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>除了模板继承和数据显示外，Blade 还为常用的 PHP 流程控制提供了便捷语句，例如条件语句和循环语句。这些语句不但简洁，还与 PHP 语句相似。</p>
<h3 id="If-语句"><a href="#If-语句" class="headerlink" title="If 语句"></a>If 语句</h3><p>使用 <code>@if</code>、<code>@elseif</code>、<code>@else</code> 和 <code>@endif</code> 指令构建 <code>if</code> 语句。这些指令与 PHP 对应：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">if</span> (count($records) === <span class="number">1</span>)</span><br><span class="line">    我有一条记录！</span><br><span class="line">@<span class="keyword">elseif</span> (count($records) &gt; <span class="number">1</span>)</span><br><span class="line">    我有好几条记录！</span><br><span class="line">@<span class="keyword">else</span></span><br><span class="line">   我没有记录！</span><br><span class="line">@<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<p>为方便起见，Blade 还提供了 <code>@unless</code> 指令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@unless (Auth::check())</span><br><span class="line">    未登陆</span><br><span class="line">@endunless</span><br></pre></td></tr></table></figure>

<p>除了以上述指令，<code>@isset</code> 和 <code>@empty</code> 也可能用到，功能与 PHP 函数对应：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">isset</span>($records)</span><br><span class="line">    <span class="comment">// $records 已定义且不为 null</span></span><br><span class="line">@endisset</span><br><span class="line"></span><br><span class="line">@<span class="keyword">empty</span>($records)</span><br><span class="line">    <span class="comment">// $records 为空</span></span><br><span class="line">@endempty</span><br></pre></td></tr></table></figure>



<h4 id="认证指令"><a href="#认证指令" class="headerlink" title="认证指令"></a>认证指令</h4><p><code>@auth</code> 和 <code>@guest</code> 指令用来快速认证当前用户：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@auth</span><br><span class="line">    <span class="comment">// 通过认证</span></span><br><span class="line">@endauth</span><br><span class="line"></span><br><span class="line">@guest</span><br><span class="line">    <span class="comment">// 未通过认证</span></span><br><span class="line">@endguest</span><br></pre></td></tr></table></figure>

<p>必要的话，可以在 <code>@auth</code> 和 <code>@guest</code> 指令中指定 <span class="exturl" data-url="aHR0cHM6Ly9sZWFybmt1LmNvbS9kb2NzL2xhcmF2ZWwvNS42L2F1dGhlbnRpY2F0aW9u">认证看守器（Guard）<i class="fa fa-external-link-alt"></i></span>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@auth(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">    <span class="comment">// 通过认证</span></span><br><span class="line">@endauth</span><br><span class="line"></span><br><span class="line">@guest(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">    <span class="comment">// 未通过认证</span></span><br><span class="line">@endguest</span><br></pre></td></tr></table></figure>



<h4 id="Section-指令"><a href="#Section-指令" class="headerlink" title="Section 指令"></a>Section 指令</h4><p><code>@hasSection</code> 指令检查 section 是否有内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@hasSection(<span class="string">&#x27;navigation&#x27;</span>)</span><br><span class="line">    &lt;div class=&quot;pull-right&quot;&gt;</span><br><span class="line">        @<span class="keyword">yield</span>(<span class="string">&#x27;navigation&#x27;</span>)</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</span><br><span class="line">@<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>





<h3 id="Switch-语句"><a href="#Switch-语句" class="headerlink" title="Switch 语句"></a>Switch 语句</h3><p>可以使用 <code>@switch</code>、<code>@case</code>、<code>@break</code>、<code>@default</code> 和 <code>@endswitch</code> 指令来构建 Switch 语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">switch</span>($i)</span><br><span class="line">    @<span class="keyword">case</span>(<span class="number">1</span>)</span><br><span class="line">        First <span class="keyword">case</span>...</span><br><span class="line">        @<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    @<span class="keyword">case</span>(<span class="number">2</span>)</span><br><span class="line">        Second <span class="keyword">case</span>...</span><br><span class="line">        @<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    @<span class="keyword">default</span></span><br><span class="line">        <span class="keyword">Default</span> <span class="keyword">case</span>...</span><br><span class="line">@<span class="keyword">endswitch</span></span><br></pre></td></tr></table></figure>





<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>除了条件表达式外，Blade 也支持 PHP 的循环结构。同样，以下这些指令中的每一个都与其 PHP 对应的函数相同：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++)</span><br><span class="line">    目前的值为 &#123;&#123; $i &#125;&#125;</span><br><span class="line">@<span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    &lt;p&gt;此用户为 &#123;&#123; $user-&gt;id &#125;&#125;&lt;/p&gt;</span><br><span class="line">@<span class="keyword">endforeach</span></span><br><span class="line"></span><br><span class="line">@forelse ($users <span class="keyword">as</span> $user)</span><br><span class="line">    &lt;li&gt;&#123;&#123; $user-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line">@<span class="keyword">empty</span></span><br><span class="line">    &lt;p&gt;没有用户&lt;/p&gt;</span><br><span class="line">@endforelse</span><br><span class="line"></span><br><span class="line">@<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &lt;p&gt;死循环了&lt;/p&gt;</span><br><span class="line">@<span class="keyword">endwhile</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>{tip} 循环时，你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9sZWFybmt1LmNvbS9kb2NzL2xhcmF2ZWwvNS42L2JsYWRlLzEzNzUjdGhlLWxvb3AtdmFyaWFibGU=">循环变量<i class="fa fa-external-link-alt"></i></span> 来获取循环的信息，例如是否在循环中进行第一次或最后一次迭代。</p>
</blockquote>
<p>当使用循环时，你也可以结束循环或跳过当前迭代：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    @<span class="keyword">if</span> ($user-&gt;type == <span class="number">1</span>)</span><br><span class="line">        @<span class="keyword">continue</span></span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; $user-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">if</span> ($user-&gt;number == <span class="number">5</span>)</span><br><span class="line">        @<span class="keyword">break</span></span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure>

<p>你还可以使用一行代码包含指令声明的条件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    @<span class="keyword">continue</span>($user-&gt;type == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; $user-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">break</span>($user-&gt;number == <span class="number">5</span>)</span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure>





<h3 id="循环变量"><a href="#循环变量" class="headerlink" title="循环变量"></a>循环变量</h3><p>循环时，可以在循环内使用 <code>$loop</code> 变量。这个变量可以提供一些有用的信息，比如当前循环的索引，当前循环是不是首次迭代，又或者当前循环是不是最后一次迭代：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    @<span class="keyword">if</span> ($loop-&gt;first)</span><br><span class="line">        这是第一个迭代。</span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    @<span class="keyword">if</span> ($loop-&gt;last)</span><br><span class="line">        这是最后一个迭代。</span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    &lt;p&gt;This is user &#123;&#123; $user-&gt;id &#125;&#125;&lt;/p&gt;</span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure>

<p>在一个嵌套的循环中，可以通过使用 <code>$loop</code> 变量的 <code>parent</code> 属性来获取父循环中的 <code>$loop</code> 变量：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    @<span class="keyword">foreach</span> ($user-&gt;posts <span class="keyword">as</span> $post)</span><br><span class="line">        @<span class="keyword">if</span> ($loop-&gt;parent-&gt;first)</span><br><span class="line">            This is first iteration of the <span class="built_in">parent</span> loop.</span><br><span class="line">        @<span class="keyword">endif</span></span><br><span class="line">    @<span class="keyword">endforeach</span></span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure>

<p><code>$loop</code> 变量也包含了其它各种有用的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>$loop-&gt;index</code></td>
<td>当前循环迭代的索引（从 0 开始）。</td>
</tr>
<tr>
<td><code>$loop-&gt;iteration</code></td>
<td>当前循环迭代 （从 1 开始）。</td>
</tr>
<tr>
<td><code>$loop-&gt;remaining</code></td>
<td>循环中剩余迭代数量。</td>
</tr>
<tr>
<td><code>$loop-&gt;count</code></td>
<td>迭代中的数组项目总数。</td>
</tr>
<tr>
<td><code>$loop-&gt;first</code></td>
<td>当前迭代是否是循环中的首次迭代。</td>
</tr>
<tr>
<td><code>$loop-&gt;last</code></td>
<td>当前迭代是否是循环中的最后一次迭代。</td>
</tr>
<tr>
<td><code>$loop-&gt;depth</code></td>
<td>当前循环的嵌套级别。</td>
</tr>
<tr>
<td><code>$loop-&gt;parent</code></td>
<td>在嵌套循环中，父循环的变量。</td>
</tr>
</tbody></table>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>Blade 也能在视图中定义注释。然而，跟 HTML 的注释不同的，Blade 注释不会被包含在应用程序返回的 HTML 内：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;-- 此注释将不会出现在渲染后的 HTML --&#125;&#125;</span><br></pre></td></tr></table></figure>





<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>在某些情况下，将 PHP 代码嵌入到视图中很有用。你可以使用 Blade 的 <code>@php</code> 指令在模板中执行一段纯 PHP 代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@php</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">@endphp</span><br></pre></td></tr></table></figure>

<blockquote>
<p>{tip} 虽然 Blade 提供了这个功能，但频繁地使用意味着你的模版被嵌入了太多的逻辑。</p>
</blockquote>
<h2 id="引入子视图"><a href="#引入子视图" class="headerlink" title="引入子视图"></a>引入子视图</h2><p>你可以使用 Blade 的 <code>@include</code> 命令来引入一个已存在的视图，所有在父视图的可用变量在被引入的视图中都是可用的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="string">&#x27;shared.errors&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;!-- 表单内容 --&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>被引入的视图会继承父视图中的所有数据，同时也可以向引入的视图传递额外的数组数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">include</span>(<span class="string">&#x27;view.name&#x27;</span>, [<span class="string">&#x27;some&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>当然，如果尝试使用 <code>@include</code> 去引入一个不存在的视图，Laravel 会抛出错误。如果想引入一个可能存在或可能不存在的视图，就使用 <code>@includeIf</code> 指令:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@includeIf(<span class="string">&#x27;view.name&#x27;</span>, [<span class="string">&#x27;some&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>如果要根据给定的布尔条件 <code>@include</code> 视图，可以使用 <code>@includeWhen</code> 指令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@includeWhen($boolean, <span class="string">&#x27;view.name&#x27;</span>, [<span class="string">&#x27;some&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>要包含来自给定数组视图的第一个视图，可以使用 <code>includeFirst</code> 指令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@includeFirst([<span class="string">&#x27;custom.admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>], [<span class="string">&#x27;some&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>{note} 请避免在 Blade 视图中使用 <code>__DIR__</code> 及 <code>__FILE__</code> 常量，因为它们会引用编译视图时缓存的位置。</p>
</blockquote>
<h3 id="为集合渲染视图"><a href="#为集合渲染视图" class="headerlink" title="为集合渲染视图"></a>为集合渲染视图</h3><p>你可以使用 Blade 的 <code>@each</code> 命令将循环及引入写成一行代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@each(<span class="string">&#x27;view.name&#x27;</span>, $jobs, <span class="string">&#x27;job&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>第一个参数是对数组或集合中的每个元素进行渲染的部分视图。第二个参数是要迭代的数组或集合，而第三个参数是将被分配给视图中当前迭代的变量名称。举个例子，如果你要迭代一个 <code>jobs</code> 数组，通常会使用子视图中的变量 <code>job</code> 来获取每个 <code>job</code>。当前迭代的 <code>key</code> 将作为子视图中的 <code>key</code> 变量。</p>
<p>你也可以传递第四个参数到 <code>@each</code> 命令。当需要迭代的数组为空时，将会使用这个参数提供的视图来渲染。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@each(<span class="string">&#x27;view.name&#x27;</span>, $jobs, <span class="string">&#x27;job&#x27;</span>, <span class="string">&#x27;view.empty&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>{note} 通过 <code>@each</code> 渲染的视图不会从父视图继承变量。 如果子视图需要这些变量，则应该使用 <code>@foreach</code> 和 <code>@include</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>rd</category>
        <category>php</category>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>blade</tag>
        <tag>laravel</tag>
        <tag>继承</tag>
        <tag>定义</tag>
        <tag>Components</tag>
        <tag>Slots</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 之编辑资源MIX</title>
    <url>/672751f5.html</url>
    <content><![CDATA[<p>Laravel Mix](<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0plZmZyZXlXYXkvbGFyYXZlbC1taXg=">https://github.com/JeffreyWay/laravel-mix<i class="fa fa-external-link-alt"></i></span>) 提供了简洁且可读性高的 API，用于使用几个常见的 CSS 和 JavaScript 预处理器为应用定义 Webpack 构建步骤。可以通过简单链式调用来定义资源的编译。例如：</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.js(<span class="string">&#x27;&#x27;</span>resources/assets/js/app.js<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js<span class="string">&#x27;&#x27;</span>)\n   .sass(<span class="string">&#x27;&#x27;</span>resources/assets/sass/app.scss<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果你曾经对于使用 Webpack 及编译资源感到困惑和不知所措，那么你会爱上 Laravel Mix。当然，Laravel 也并没有强迫你一定要使用 Mix，你可以自由使用任何你喜欢的资源编译工具，或者不用也行。</p>
<h2 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装 &amp; 配置"></a>安装 &amp; 配置</h2><h4 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h4><p>在开始使用 Mix 之前，必须先确保你的机器上安装了 Node.js 和 NPM。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">node -v\nnpm -v</span><br></pre></td></tr></table></figure>

<p>默认情况下，Laravel Homestead 会包含你所需的一切。当然，如果你没有使用 Vagrant，就使用简单的图形安装程序从 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==">其下载页面<i class="fa fa-external-link-alt"></i></span> 安装最新版的 Node 和 NPM。</p>
<h4 id="Laravel-Mix"><a href="#Laravel-Mix" class="headerlink" title="Laravel Mix"></a>Laravel Mix</h4><p>然后就只需要安装 Laravel Mix。在新的 Laravel 项目中，你可以在目录结构的根目录中找到一个 <code>package.json</code> 文件，它包括了运行基本的 Mix 所需的内容。就如同 <code>composer.json</code> 文件，只不过它定义的是 Node 的依赖而不是 PHP。你可以使用以下的命令安装它引用的依赖项：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="运行-Mix"><a href="#运行-Mix" class="headerlink" title="运行 Mix"></a>运行 Mix</h2><p>Mix 是位于 <span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy8=">Webpack<i class="fa fa-external-link-alt"></i></span> 顶部的配置层，所以要运行 Mix 任务，只需要执行默认的Laravel <code>package.json</code> 文件中包含的一个 NPM 脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行所有 Mix 任务...npm run dev// 运行所有 Mix 任务并缩小输出..npm run production</span></span><br></pre></td></tr></table></figure>

<h4 id="监控资源文件修改"><a href="#监控资源文件修改" class="headerlink" title="监控资源文件修改"></a>监控资源文件修改</h4><p><code>npm run watch</code> 会在你的终端里持续运行，监控所有相关的资源文件以便进行更改。Webpack 会在检测到文件更改时自动重新编译资源：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">npm run watch</span><br></pre></td></tr></table></figure>

<p>在某些环境中，当文件更改时，Webpack 不会更新。如果系统出现这种情况，请考虑使用 <code>watch-poll</code> 命令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">npm run watch-poll</span><br></pre></td></tr></table></figure>

<h2 id="使用样式"><a href="#使用样式" class="headerlink" title="使用样式"></a>使用样式</h2><p><code>webpack.mix.js</code> 文件是所有资源编译的入口点。可以把它看作是 Webpack 中的轻量级配置封装清单。Mix 任务可以一起被链式调用，以精确定义资源的编译方式。</p>
<h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h3><p><code>less</code> 方法可以用于将 <span class="exturl" data-url="aHR0cDovL2xlc3Njc3Mub3JnLw==">Less<i class="fa fa-external-link-alt"></i></span> 编译为 CSS。在 <code>webpack.mix.js</code> 中这样写，可以将 <code>app.less</code> 编译到 <code>public/css/app.css</code> 中。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.less(<span class="string">&#x27;&#x27;</span>resources/assets/less/app.less<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>可以多次调用 <code>less</code> 方法来编译多个文件:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.less(<span class="string">&#x27;&#x27;</span>resources/assets/less/app.less<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>)\n   .less(<span class="string">&#x27;&#x27;</span>resources/assets/less/admin.less<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果要自定义编译的 CSS 的文件名，可以将一个完整的路径作为第二个参数传给 <code>less</code> 方法:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.less(<span class="string">&#x27;&#x27;</span>resources/assets/less/app.less<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/stylesheets/styles.css<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果你需要重写 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9sZXNzLWxvYWRlciNvcHRpb25z">底层 Less 插件选项<i class="fa fa-external-link-alt"></i></span>，你可以将一个对象作为第三个参数传到 <code>mix.less()</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.less(<span class="string">&#x27;&#x27;</span>resources/assets/less/app.less<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>, &#123;\n    strictMath: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h3><p><code>sass</code> 方法可以将 <span class="exturl" data-url="aHR0cDovL3Nhc3MtbGFuZy5jb20v">Sass<i class="fa fa-external-link-alt"></i></span> 编译为 CSS。用法如下所示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.sass(<span class="string">&#x27;&#x27;</span>resources/assets/sass/app.scss<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>跟 <code>less</code> 方法一样，你可以将多个 Sass 文件编译到各自的 CSS 文件中，甚至可以自定义生成的 CSS 的输出目录：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.sass(<span class="string">&#x27;&#x27;</span>resources/assets/sass/app.sass<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>)\n   .sass(<span class="string">&#x27;&#x27;</span>resources/assets/sass/admin.sass<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css/admin<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>另外，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nhc3Mvbm9kZS1zYXNzI29wdGlvbnM=">Node-Sass 插件选项<i class="fa fa-external-link-alt"></i></span> 也同样可以作为第三个参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.sass(<span class="string">&#x27;&#x27;</span>resources/assets/sass/app.sass<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>, &#123;\n    precision: <span class="number">5</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a>Stylus</h3><p>类似于 Less 和 Sass，<code>stylus</code> 方法可以将 <span class="exturl" data-url="aHR0cDovL3N0eWx1cy1sYW5nLmNvbS8=">Stylus<i class="fa fa-external-link-alt"></i></span> 编译为 CSS：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.stylus(<span class="string">&#x27;&#x27;</span>resources/assets/stylus/app.styl<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>你也可以安装其他的 Stylus 插件，例如 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plc2NhbGFuL3J1cHR1cmU=">Rupture<i class="fa fa-external-link-alt"></i></span>。首先，通过 NPM (<code>npm install rupture</code>) 来安装插件，然后在调用 <code>mix.stylus()</code> 时引用它：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.stylus(<span class="string">&#x27;&#x27;</span>resources/assets/stylus/app.styl<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>, &#123;\n    <span class="keyword">use</span>: [\<span class="title">n</span>        <span class="title">require</span>(&#x27;&#x27;<span class="title">rupture</span>&#x27;&#x27;)()\<span class="title">n</span>    ]&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h3><p>Laravel Mix 自带了一个用来转换 CSS 的强大工具 <span class="exturl" data-url="aHR0cDovL3Bvc3Rjc3Mub3JnLw==">PostCSS<i class="fa fa-external-link-alt"></i></span>。默认情况下， Mix 利用了流行的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVy">Autoprefixer<i class="fa fa-external-link-alt"></i></span> 插件来自动添加所需要的 CSS3 浏览器引擎前缀。不过，你也可以自由添加任何适合你应用程序的插件。首先，通过 NPM 安装所需的插件，然后在 <code>webpack.mix.js</code> 文件中引用它：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.sass(<span class="string">&#x27;&#x27;</span>resources/assets/sass/app.scss<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>)\n   .options(&#123;\n        postCss: [\n            <span class="keyword">require</span>(<span class="string">&#x27;&#x27;</span>postcss-css-variables<span class="string">&#x27;&#x27;</span>)()\n        ]\n   &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="纯-CSS"><a href="#纯-CSS" class="headerlink" title="纯 CSS"></a>纯 CSS</h3><p>如果你只是想将一些纯 CSS 样式合并成单个的文件, 你可以使用 <code>styles</code> 方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.styles([\n    <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css/vendor/normalize.css<span class="string">&#x27;&#x27;</span>,\n    <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css/vendor/videojs.css<span class="string">&#x27;&#x27;</span>], <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css/all.css<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="URL-处理"><a href="#URL-处理" class="headerlink" title="URL 处理"></a>URL 处理</h3><p>由于 Laravel Mix 是建立在 Webpack 之上的，所以了解一些 Webpack 概念就非常有必要。编译 CSS 的时候，Webpack 会重写和优化样式表中对 <code>url()</code> 的调用。 一开始听起来可能会觉得奇怪，但这确实是一个非常强大的功能。试想一下我们要编译一个包含图片的相对路径的 Sass 文件:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">.example &#123;\n    background: url(<span class="string">&#x27;&#x27;</span>../images/example.png<span class="string">&#x27;&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>{note} 任何给定 <code>url()</code> 的绝对路径会被排除在 URL 重写之外。例如 <code>url(&#39;&#39;/images/thing.png&#39;&#39;)</code> 或者 <code>url(&#39;&#39;http://example.com/images/thing.png&#39;&#39;)</code> 不会被修改。</p>
</blockquote>
<p>默认情况下，Laravel Mix 和 Webpack 会找到 <code>example.png</code>，然后把它复制到你的 <code>public/images</code> 目录下，然后重写生成的样式中的 <code>url()</code>。这样，你编译之后的 CSS 会变成：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">.example &#123;\n  background: url(/images/example.png?d41d8cd98f00b204e9800998ecf8427e);&#125;</span><br></pre></td></tr></table></figure>

<p>但如果你想以你喜欢的方式配置现有的文件夹结构，可以禁用 <code>url()</code> 的重写：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.sass(<span class="string">&#x27;&#x27;</span>resources/assets/app/app.scss<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css<span class="string">&#x27;&#x27;</span>)\n   .options(&#123;\n      processCssUrls: <span class="literal">false</span>\n   &#125;);</span><br></pre></td></tr></table></figure>

<p>在你的 <code>webpack.mix.js</code> 文件像上面这样配置之后，Mix 将不再匹配 <code>url()</code> 或者将资源复制到你的 public 目录。换句话说，编译后的 CSS 会跟原来输入的一样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">.example &#123;\n    background: url(<span class="string">&quot;../images/thing.png&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>

<h3 id="资源映射"><a href="#资源映射" class="headerlink" title="资源映射"></a>资源映射</h3><p>默认情况下资源映射是禁用的，可以在 <code>webpack.mix.js</code> 文件中调用 <code>mix.sourceMaps()</code> 方法来开启它。尽管它会带来一些编译／性能的成本，但在使用编译资源时，可以为使用浏览器的开发人员工具提供额外的调试信息：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.js(<span class="string">&#x27;&#x27;</span>resources/assets/js/app.js<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js<span class="string">&#x27;&#x27;</span>)\n   .sourceMaps();</span><br></pre></td></tr></table></figure>

<h2 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h2><p>Mix 提供了一些函数来处理 JavaScript 文件，像是编译 ECMAScript 2015、模块绑定、压缩以及简单地合并纯 JavaScript 文件。更棒的是，这些操作都不需要进行任何自定义的配置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.js(<span class="string">&#x27;&#x27;</span>resources/assets/js/app.js<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>仅仅这上面的一行代码，就支持：</p>
<ul>
<li>ES 2015 语法</li>
<li>模块</li>
<li>编译 <code>.vue</code> 文件</li>
<li>生产环境压缩代码</li>
</ul>
<h3 id="提取依赖库"><a href="#提取依赖库" class="headerlink" title="提取依赖库"></a>提取依赖库</h3><p>将应用程序特定的 JavaScript 与依赖库捆绑在一起有个潜在的缺点，会使得长期缓存更加困难。例如，即使应用程序使用的依赖库没有被更改，只要有代码被单独更新，都会强制浏览器重新下载所有依赖库。</p>
<p>如果你打算频繁更新应用程序的 JavaScript，应该考虑将所有的依赖库提取到自己的文件中。如此一来，应用程序代码的更改就不会影响到大型 <code>vendor.js</code> 文件的缓存。而 Mix 的 <code>extract</code> 方法能使之变得轻而易举：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.js(<span class="string">&#x27;&#x27;</span>resources/assets/js/app.js<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js<span class="string">&#x27;&#x27;</span>)\n   .extract([<span class="string">&#x27;&#x27;</span>vue<span class="string">&#x27;&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p><code>extract</code> 方法接受一个数组参数。这个数组是要提取到 <code>vendor.js</code> 文件中的所有的依赖库或模块。比如上面的例子中，Mix 将生成以下文件：</p>
<ul>
<li><code>public/js/manifest.js</code>: <em>Webpack 运行清单</em></li>
<li><code>public/js/vendor.js</code>: <em>第三方库</em></li>
<li><code>public/js/app.js</code>: <em>应用代码</em></li>
</ul>
<p>务必按照以下文件顺序加载，以防 JavaScript 报错：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;/js/manifest.js&quot;</span>&gt;&lt;/script&gt;&lt;script src=<span class="string">&quot;/js/vendor.js&quot;</span>&gt;&lt;/script&gt;&lt;script src=<span class="string">&quot;/js/app.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>Mix 会自动安装 React 必要的 Babel 插件。只需替换 <code>mix.js()</code> 为 <code>mix.react()</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.react(<span class="string">&#x27;&#x27;</span>resources/assets/js/app.jsx<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>Mix 会在后台自动下载包括 <code>babel-preset-react</code> Babel 插件在内的库。</p>
<h3 id="原生-JS"><a href="#原生-JS" class="headerlink" title="原生 JS"></a>原生 JS</h3><p>类似 <code>mix.styles()</code> 合并样式表文件， <code>scripts()</code> 方法可以合并压缩任意数量的 JavaScript 文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.scripts([\n    <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js/admin.js<span class="string">&#x27;&#x27;</span>,\n    <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js/dashboard.js<span class="string">&#x27;&#x27;</span>], <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js/all.js<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>对那些没有用 Webpack 编译 JavaScript 的旧项目来说，这个方法非常实用。</p>
<blockquote>
<p>{tip} <code>mix.babel()</code>与 <code>mix.scripts()</code> 还是有些差别的。在使用上与 <code>scripts</code> 一致，但是，所有文件都会经过 Babel 编译， 任何 ES2015 语法的代码都会编译成所有浏览器都支持的原生 JavaScript。</p>
</blockquote>
<h3 id="自定义-Webpack-配置"><a href="#自定义-Webpack-配置" class="headerlink" title="自定义 Webpack 配置"></a>自定义 Webpack 配置</h3><p>Laravel Mix 在背后引用一个预配置的 <code>webpack.config.js</code> 文件加速启动与运行。有时，可能有一个特殊的加载器或需要引用的插件，或倾向于 Stylus 而不是 Sass，而不得不去手动修改这个文件。这种情况下，有两个选择：</p>
<h4 id="合并自定义配置"><a href="#合并自定义配置" class="headerlink" title="合并自定义配置"></a>合并自定义配置</h4><p>Mix 提供了一个 <code>webpackConfig</code> 方法来合并任何 <code>Webpack</code> 配置以覆盖默认配置。因此你不需要复制和维护 <code>webpack.config.js</code> 的文件副本。 <code>webpackConfig</code> 方法接受一个包含任何要应用的 <span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uLw==">Webpack 配置项<i class="fa fa-external-link-alt"></i></span> 的对象：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.webpackConfig(&#123;\n    resolve: &#123;\n        modules: [\n            path.resolve(__dirname, <span class="string">&#x27;&#x27;</span>vendor/laravel/spark/resources/assets/js<span class="string">&#x27;&#x27;</span>)\n        ]\n    &#125;&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h4><p>如果想完全自定义 Webpack 配置，就将 <code>node_modules/laravel-mix/setup/webpack.config.js</code> 文件复制到项目的根目录。然后在 <code>package.json</code> 文件中将所有 <code>--config</code> 的值指向新复制的配置文件。采用这种方法进行自定义，如果后续 Mix 版本有更新时，需要手动合并 <code>webpack.config.js</code> 并到你的自定义文件中。</p>
<h2 id="复制文件-amp-目录"><a href="#复制文件-amp-目录" class="headerlink" title="复制文件 &amp; 目录"></a>复制文件 &amp; 目录</h2><p><code>copy</code> 方法用于将文件和目录复制到新位置。当 <code>node_modules</code> 目录中的特定资源需要被重定位到 <code>public</code> 文件夹时会很有用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.copy(<span class="string">&#x27;&#x27;</span>node_modules/foo/bar.css<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/css/bar.css<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>复制目录时，<code>copy</code> 方法会平面化目录的结构。要维护目录的原始结构，应该使用 <code>copyDirectory</code> 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.copyDirectory(<span class="string">&#x27;&#x27;</span>assets/img<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/img<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="版本控制／缓存清除"><a href="#版本控制／缓存清除" class="headerlink" title="版本控制／缓存清除"></a>版本控制／缓存清除</h2><p>许多的开发者会对其编译的资源文件中加上时间戳或是唯一的令牌作为后缀，以此来强迫浏览器加载全新的资源文件，而不是旧版本的代码副本。你可以使用 Mix 的 <code>version</code> 方法处理它们。</p>
<p><code>version</code> 方法会自动为所有编译文件的文件名附加一个唯一的哈希值，从而实现更方便的缓存清除功能：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.js(<span class="string">&#x27;&#x27;</span>resources/assets/js/app.js<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js<span class="string">&#x27;&#x27;</span>)\n   .version();</span><br></pre></td></tr></table></figure>

<p>生成版本化文件后，你不会知道确切的文件名。因此，你应该在你的视图中使用 Laravel 的全局辅助函数 <code>mix</code> 来正确加载名称被哈希后的文件。 <code>mix</code> 函数会自动确定被哈希的文件名称：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&#123;&#123; mix(&#x27;&#x27;/css/app.css&#x27;&#x27;) &#125;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>因为在开发中通常是不需要版本化，你可以指示版本控制过程仅在 <code>npm run production</code> 运行期间进行：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.js(<span class="string">&#x27;&#x27;</span>resources/assets/js/app.js<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span><span class="keyword">public</span>/js<span class="string">&#x27;&#x27;</span>);<span class="keyword">if</span> (mix.inProduction()) &#123;\n    mix.version();&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Browsersync-重新加载"><a href="#Browsersync-重新加载" class="headerlink" title="Browsersync 重新加载"></a>Browsersync 重新加载</h2><p><span class="exturl" data-url="aHR0cHM6Ly9icm93c2Vyc3luYy5pby8=">BrowserSync<i class="fa fa-external-link-alt"></i></span> 会自动监控文件修改并将修改注入浏览器而无需手动刷新。 你可以通过调用 <code>mix.browserSync()</code> 方法启用该支持：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.browserSync(<span class="string">&#x27;&#x27;</span>my-domain.test<span class="string">&#x27;&#x27;</span>);<span class="comment">// Or...// https://browsersync.io/docs/optionsmix.browserSync(&#123;\n    proxy: &#x27;&#x27;my-domain.test&#x27;&#x27;&#125;);</span></span><br></pre></td></tr></table></figure>

<p>你可以传递一个字符串（代理）或对象（BrowserSync 设置）到该方法。 接下来，使用 <code>npm run watch</code> 命令来启动 Webpack 的开发服务器。现在，当你编辑一个 JavaScript 脚本或 PHP 文件时，会看到浏览器会立即刷新以响应你的修改。</p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>你可以通过在 <code>.env</code> 文件添加 <code>MIX_</code> 前缀将环境变量注入 Mix：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">MIX_SENTRY_DSN_PUBLIC=http:<span class="comment">//example.com</span></span><br></pre></td></tr></table></figure>

<p>在 <code>.env</code> 文件中定义号变量之后，可以通过 <code>process.env</code> 对象进行访问。如果在运行 <code>watch</code> 任务期间变量值有变动，需要重启任务：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">process.env.MIX_SENTRY_DSN_PUBLIC</span><br></pre></td></tr></table></figure>

<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>正常情况下，Mix 会自动为每个捆绑显示操作系统通知，这可以给你一个及时的反馈：编译成功还是失败。不过，某些场景下你可能希望禁止这些通知，一个典型的例子就是在生产境服务器触发 Mix。通知可以通过 <code>disableNotifications</code>方法被停用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.disableNotifications();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>php</category>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>laravel mix</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用 migrate时报错: Specified key was too long</title>
    <url>/2498645a.html</url>
    <content><![CDATA[<p>Laravel 5.4默认使用<code>utf8mb4</code>字符编码，而不是之前的<code>utf8</code>编码。因此运行<code>php artisan migrate </code>会出现如下错误：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Illuminate\Database\QueryException]</span><br><span class="line">SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table users add unique users_email_unique(email))</span><br><span class="line"></span><br><span class="line">[PDOException]</span><br><span class="line">SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes</span><br></pre></td></tr></table></figure>

<h4 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h4><p>MySql支持的<code>utf8</code>编码最大字符长度为3字节，如果遇到4字节的宽字符就会出现插入异常。三个字节UTF-8最大能编码的Unicode字符是0xffff，即Unicode中的基本多文种平面（BMP）。因而包括Emoji表情（Emoji是一种特殊的Unicode编码）在内的非基本多文种平面的Unicode字符都无法使用MySql的<code>utf8</code>字符集存储。</p>
<p>这也应该就是Laravel 5.4改用4字节长度的<code>utf8mb4</code>字符编码的原因之一。不过要注意的是，只有MySql 5.5.3版本以后才开始支持<code>utf8mb4</code>字符编码（查看版本：<code>select version();</code>）。如果MySql版本过低，需要进行版本更新。</p>
<p><em>注：如果是从Laravel 5.3升级到Laravel 5.4，不需要对字符编码做切换。</em></p>
<h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><ol>
<li>升级MySql版本到5.5.3以上。</li>
<li>手动配置迁移命令<code>migrate</code>生成的默认字符串长度，在<code>AppServiceProvider</code>中调用<code>Schema::defaultStringLength</code>方法来实现配置：</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::defaultStringLength(<span class="number">191</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>php</category>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>migrate</tag>
        <tag>artisan</tag>
        <tag>迁移出错</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel授权策略之用户只能编辑自己的资料</title>
    <url>/3b1aaf3f.html</url>
    <content><![CDATA[<p>在完成对未登录用户的限制之后，接下来我们要限制的是已登录用户的操作，当 id 为 1 的用户去尝试更新 id 为 2 的用户信息时，我们应该返回一个 403 禁止访问的异常。在 <code>Laravel</code> 中可以使用 授权策略 (<code>Policy</code>) 来对用户的操作权限进行验证，在用户未经授权进行操作时将返回 403 禁止访问的异常。</p>
<a id="more"></a>

<p>我们可以使用以下命令来生成一个名为 <code>UserPolicy</code> 的授权策略类文件，用于管理用户模型的授权。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> php artisan make:policy UserPolicy</span></span><br></pre></td></tr></table></figure>

<p>所有生成的授权策略文件都会被放置在 <code>app/Policies</code> 文件夹下。</p>
<p>让我们为默认生成的用户授权策略添加 <code>edit</code>方法，用于用户更新时的权限验证。</p>
<p><em><code>app/Policies/UserPolicy.php</code></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Policies</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">HandlesAuthorization</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPolicy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HandlesAuthorization</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new policy instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止已登录用户修改其他用户资料</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params">User $current, User $user</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $current-&gt;id === $user-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>edit方法接收两个参数，第一个参数默认为当前登录用户实例，第二个参数则为要进行授权的用户实例。当两个 id 相同时，则代表两个用户是相同用户，用户通过授权，可以接着进行下一个操作。如果 id 不相同的话，将抛出 403 异常信息来拒绝访问。</p>
<p>使用授权策略需要注意以下两点：</p>
<ol>
<li>我们并不需要检查 <code>$current</code> 是不是 <code>NULL</code>。未登录用户，框架会自动为其 <strong>所有权限</strong> 返回 <code>false</code>；</li>
<li>调用时，默认情况下，我们 <strong>不需要</strong> 传递当前登录用户至该方法内，因为框架会自动加载当前登录用户（接着看下去，后面有例子）；</li>
</ol>
<p>接下来我们还需要在 <code>AuthServiceProvider</code> 类中对授权策略进行设置。<code>AuthServiceProvider</code> 包含了一个 <code>policies</code> 属性，该属性用于将各种模型对应到管理它们的授权策略上。我们需要为用户模型 <code>User</code> 指定授权策略 <code>UserPolicy</code>。</p>
<p><em><code>app/Providers/AuthServiceProvider.php</code></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Gate</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Support</span>\<span class="title">Providers</span>\<span class="title">AuthServiceProvider</span> <span class="title">as</span> <span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The policy mappings for the application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $policies = [</span><br><span class="line">        <span class="string">&#x27;App\Model&#x27;</span> =&gt; <span class="string">&#x27;App\Policies\ModelPolicy&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;App\User&#x27;</span>  =&gt; <span class="string">&#x27;App\Policies\UserPolicy&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register any authentication / authorization services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;registerPolicies();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>授权策略定义完成之后，我们便可以通过在用户控制器中使用 <code>authorize</code> 方法来验证用户授权策略。默认的 <code>App\Http\Controllers\Controller</code> 类包含了 <code>Laravel</code> 的 <code>AuthorizesRequests</code> <code>trait</code>。此 trait 提供了 <code>authorize</code>方法，它可以被用于快速授权一个指定的行为，当无权限运行该行为时会抛出 <code>HttpException</code>。<code>authorize</code> 方法接收两个参数，第一个为授权策略的名称，第二个为进行授权验证的数据。</p>
<p>我们需要为 <code>edit</code> 和 <code>update</code> 方法加上这行：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;authorize(<span class="string">&#x27;edit&#x27;</span>, $user);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里 <code>edit</code> 是指授权类里的 <code>edit</code> 授权方法，<code>$user</code> 对应传参 <code>edit</code> 授权方法的第二个参数。正如上面定义 <code>edit</code> 授权方法时候提起的，调用时，默认情况下，我们 <strong>不需要</strong> 传递第一个参数，也就是当前登录用户至该方法内，因为框架会自动加载当前登录用户。</p>
</blockquote>
<p>书写的位置如下：</p>
<p><em><code>app/Http/Controllers/UsersController.php</code></em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params">User $user</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;authorize(<span class="string">&#x27;edit&#x27;</span>, $user);</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;admin.user.edit&#x27;</span>, [<span class="string">&#x27;user&#x27;</span>=&gt;$user]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，使用 id 为 1 的用户登录，当访问 id 为 2 的用户编辑页面系统将会拒绝访问。</p>
<p>为了更友好的显示，建议大家都在<code>view/errors</code>里创建一个<code>403.blade.php</code>文件</p>
<p>再次刷新该页面则显示</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>php</category>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>授权策略</tag>
        <tag>policy</tag>
        <tag>403</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中yum和apt-get</title>
    <url>/513fdd7f.html</url>
    <content><![CDATA[<p>一般来说著名的<code>linux</code>系统基本上分两大类：</p>
<p>1.<code>RedHat</code>系列：<code>Redhat</code>、<code>Centos</code>、<code>Fedora</code>等</p>
<p>2.<code>Debian</code>系列：<code>Debian</code>、<code>Ubuntu</code>、<code>Deepin</code>等 </p>
<a id="more"></a>

<p><strong><code>RedHat</code> 系列</strong> </p>
<p>1 常见的安装包格式 <code>rpm</code>包,安装<code>rpm</code>包的命令是“<code>rpm -参数</code>” </p>
<p>2 包管理工具 <code>yum</code> </p>
<p>3 支持<code>tar</code>包 </p>
<p><strong><code>Debian</code>系列</strong> </p>
<p>1 常见的安装包格式 <code>deb</code>包,安装<code>deb</code>包的命令是“<code>dpkg -参数</code>” </p>
<p>2 包管理工具 <code>apt-get</code> </p>
<p>3 支持<code>tar</code>包 </p>
<p><code>tar</code> 只是一种压缩文件格式，所以，它只是把文件压缩打包而已。 </p>
<p><code>rpm</code> 相当于<code>windows</code>中的安装文件，它会自动处理软件包之间的依赖关系。 </p>
<p>优缺点来说，<code>rpm</code>一般都是预先编译好的文件，它可能已经绑定到某种<code>CPU</code>或者发行版上面了。 </p>
<p><code>tar</code>一般包括编译脚本，你可以在你的环境下编译，所以具有通用性。 </p>
<p>如果你的包不想开放源代码，你可以制作成<code>rpm</code>，如果开源，用tar更方便了。 </p>
<p><code>tar</code>一般都是源码打包的软件，需要自己解包，然后进行安装三部曲，<code>./configure</code>, <code>make</code>, <code>make install</code>.　来安装软件。</p>
<h2 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a><code>rpm</code></h2><p><code>rpm</code>是<code>redhat</code>公司的一种软件包管理机制，直接通过<code>rpm</code>命令进行安装删除等操作，最大的优点是自己内部自动处理了各种软件包可能的依赖关系。 </p>
<p><strong><code>rpm</code>命令</strong>是RPM软件包的管理工具。<code>rpm</code>原本是<code>Red Hat Linux</code>发行版专门用来管理<code>Linux</code>各项套件的程序，由于它遵循<code>GPL</code>规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。<code>RPM</code>套件管理方式的出现，让<code>Linux</code>易于安装，升级，间接提升了<code>Linux</code>的适用度。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm(选项)(参数)</span><br></pre></td></tr></table></figure>

<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-a</span>：查询所有套件；</span><br><span class="line"><span class="literal">-b</span>&lt;完成阶段&gt;&lt;套件档&gt;+或<span class="literal">-t</span> &lt;完成阶段&gt;&lt;套件档&gt;+：设置包装套件的完成阶段，并指定套件档的文件名称；</span><br><span class="line"><span class="literal">-c</span>：只列出组态配置文件，本参数需配合<span class="string">&quot;-l&quot;</span>参数使用；</span><br><span class="line"><span class="literal">-d</span>：只列出文本文件，本参数需配合<span class="string">&quot;-l&quot;</span>参数使用；</span><br><span class="line"><span class="literal">-e</span>&lt;套件档&gt;或-<span class="literal">-erase</span>&lt;套件档&gt;：删除指定的套件；</span><br><span class="line"><span class="operator">-f</span>&lt;文件&gt;+：查询拥有指定文件的套件；</span><br><span class="line"><span class="literal">-h</span>或-<span class="literal">-hash</span>：套件安装时列出标记；</span><br><span class="line"><span class="literal">-i</span>：显示套件的相关信息；</span><br><span class="line"><span class="literal">-i</span>&lt;套件档&gt;或-<span class="literal">-install</span>&lt;套件档&gt;：安装指定的套件档；</span><br><span class="line"><span class="literal">-l</span>：显示套件的文件列表；</span><br><span class="line"><span class="literal">-p</span>&lt;套件档&gt;+：查询指定的RPM套件档；</span><br><span class="line"><span class="literal">-q</span>：使用询问模式，当遇到任何问题时，rpm指令会先询问用户；</span><br><span class="line"><span class="literal">-R</span>：显示套件的关联性信息；</span><br><span class="line"><span class="literal">-s</span>：显示文件状态，本参数需配合<span class="string">&quot;-l&quot;</span>参数使用；</span><br><span class="line"><span class="literal">-U</span>&lt;套件档&gt;或-<span class="literal">-upgrade</span>&lt;套件档&gt;：升级指定的套件档；</span><br><span class="line"><span class="literal">-v</span>：显示指令执行过程；</span><br><span class="line"><span class="literal">-vv</span>：详细显示指令执行过程，便于排错。</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>软件包：指定要操纵的rpm软件包。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>如何安装<code>rpm</code>软件包</strong></p>
<p><code>rpm</code>软件包的安装可以使用程序<code>rpm</code>来完成。执行下面的命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-ivh</span> your<span class="literal">-package</span>.rpm</span><br></pre></td></tr></table></figure>

<p>其中<code>your-package.rpm</code>是你要安装的<code>rpm</code>包的文件名，一般置于当前目录下。</p>
<p>安装过程中可能出现下面的警告或者提示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">... conflict with ...</span><br></pre></td></tr></table></figure>

<p>可能是要安装的包里有一些文件可能会覆盖现有的文件，缺省时这样的情况下是无法正确安装的可以用<code>rpm --force -i</code>强制安装即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">... is needed by ...</span><br><span class="line">... is not installed ...</span><br></pre></td></tr></table></figure>

<p>此包需要的一些软件你没有安装可以用<code>rpm --nodeps -i</code>来忽略此信息，也就是说<code>rpm -i --force --nodeps</code>可以忽略所有依赖关系和文件问题，什么包都能安装上，但这种强制安装的软件包不能保证完全发挥功能。</p>
<p><strong>如何安装<code>.src.rpm</code>软件包</strong></p>
<p>有些软件包是以<code>.src.rpm</code>结尾的，这类软件包是包含了源代码的<code>rpm</code>包，在安装时需要进行编译。这类软件包有两种安装方法：</p>
<p>方法一：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-i</span> your<span class="literal">-package</span>.src.rpm</span><br><span class="line"><span class="built_in">cd</span> /usr/src/redhat/SPECS</span><br><span class="line">rpmbuild <span class="literal">-bp</span> your<span class="literal">-package</span>.specs             <span class="comment">#一个和你的软件包同名的specs文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/src/redhat/BUILD/your<span class="literal">-package</span>/      <span class="comment">#一个和你的软件包同名的目录</span></span><br><span class="line">./configure                                 <span class="comment">#这一步和编译普通的源码软件一样，可以加上参数</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-i</span> you<span class="literal">-package</span>.src.rpm</span><br><span class="line"><span class="built_in">cd</span> /usr/src/redhat/SPECS</span><br></pre></td></tr></table></figure>

<p>前两步和方法一相同</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpmbuild <span class="literal">-bb</span> your<span class="literal">-package</span>.specs       <span class="comment">#一个和你的软件包同名的specs文件</span></span><br></pre></td></tr></table></figure>

<p>这时在<code>/usr/src/redhat/RPM/i386/</code>（根据具体包的不同，也可能是<code>i686</code>,<code>noarch</code>等等）在这个目录下，有一个新的<code>rpm</code>包，这个是编译好的二进制文件。</p>
<p>执行<code>rpm -i new-package.rpm</code>即可安装完成。</p>
<p><strong>如何卸载rpm软件包</strong></p>
<p>使用命令<code>rpm -e</code>包名，包名可以包含版本号等信息，但是不可以有后缀<code>.rpm</code>，比如卸载软件包<code>proftpd-1.2.8-1</code>，可以使用下列格式：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-e</span> proftpd<span class="literal">-1</span>.<span class="number">2.8</span><span class="literal">-1</span></span><br><span class="line">rpm <span class="literal">-e</span> proftpd<span class="literal">-1</span>.<span class="number">2.8</span></span><br><span class="line">rpm <span class="literal">-e</span> proftpd-</span><br><span class="line">rpm <span class="literal">-e</span> proftpd</span><br></pre></td></tr></table></figure>

<p>不可以是下列格式：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-e</span> proftpd<span class="literal">-1</span>.<span class="number">2.8</span><span class="literal">-1</span>.i386.rpm</span><br><span class="line">rpm <span class="literal">-e</span> proftpd<span class="literal">-1</span>.<span class="number">2.8</span><span class="literal">-1</span>.i386</span><br><span class="line">rpm <span class="literal">-e</span> proftpd<span class="literal">-1</span>.<span class="number">2</span></span><br><span class="line">rpm <span class="literal">-e</span> proftpd<span class="literal">-1</span></span><br></pre></td></tr></table></figure>

<p>有时会出现一些错误或者警告：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">... is needed by ...</span><br></pre></td></tr></table></figure>

<p>这说明这个软件被其他软件需要，不能随便卸载，可以用<code>rpm -e --nodeps</code>强制卸载</p>
<p><strong>如何不安装但是获取<code>rpm</code>包中的文件</strong></p>
<p>使用工具<code>rpm2cpio</code>和<code>cpio</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm2cpio xxx.rpm | cpio <span class="literal">-vi</span></span><br><span class="line">rpm2cpio xxx.rpm | cpio <span class="literal">-idmv</span></span><br><span class="line">rpm2cpio xxx.rpm | cpio -<span class="literal">-extract</span> -<span class="literal">-make</span><span class="literal">-directories</span></span><br></pre></td></tr></table></figure>

<p>参数i和<code>extract</code>相同，表示提取文件。<code>v</code>表示指示执行进程，<code>d</code>和make-directory相同，表示根据包中文件原来的路径建立目录，<code>m</code>表示保持文件的更新时间。</p>
<p><strong>如何查看与<code>rpm</code>包相关的文件和其他信息</strong></p>
<p>下面所有的例子都假设使用软件包<code>mysql-3.23.54a-11</code></p>
<p>1、我的系统中安装了那些<code>rpm</code>软件包。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-qa</span> 讲列出所有安装过的包</span><br></pre></td></tr></table></figure>

<p>如果要查找所有安装过的包含某个字符串<code>sql</code>的软件包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-qa</span> | grep sql</span><br></pre></td></tr></table></figure>

<p>2、如何获得某个软件包的文件全名。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-q</span> mysql</span><br></pre></td></tr></table></figure>

<p>可以获得系统中安装的<code>mysql</code>软件包全名，从中可以获得当前软件包的版本等信息。这个例子中可以得到信息<code>mysql-3.23.54a-11</code></p>
<p>3、一个<code>rpm</code>包中的文件安装到那里去了？</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-ql</span> 包名</span><br></pre></td></tr></table></figure>

<p>注意这里的是不包括<code>.rpm</code>后缀的软件包的名称，也就是说只能用<code>mysql</code>或者<code>mysql-3.23.54a-11</code>而不是<code>mysql-3.23.54a-11.rpm</code>。如果只是想知道可执行程序放到那里去了，也可以用<code>which</code>，比如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">which mysql</span><br></pre></td></tr></table></figure>

<p>4、一个<code>rpm</code>包中包含那些文件。</p>
<ul>
<li>一个没有安装过的软件包，使用<code>rpm -qlp ****.rpm</code></li>
<li>一个已经安装过的软件包，还可以使用<code>rpm -ql ****.rpm</code></li>
</ul>
<p>5、如何获取关于一个软件包的版本，用途等相关信息？</p>
<ul>
<li>一个没有安装过的软件包，使用<code>rpm -qip ****.rpm</code></li>
<li>一个已经安装过的软件包，还可以使用<code>rpm -qi ****.rpm</code></li>
</ul>
<p>6、某个程序是哪个软件包安装的，或者哪个软件包包含这个程序。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rpm <span class="literal">-qf</span> `which 程序名`    <span class="comment">#返回软件包的全名</span></span><br><span class="line">rpm <span class="literal">-qif</span> `which 程序名`   <span class="comment">#返回软件包的有关信息</span></span><br><span class="line">rpm <span class="literal">-qlf</span> `which 程序名`   <span class="comment">#返回软件包的文件列表</span></span><br></pre></td></tr></table></figure>

<p>注意，这里不是引号，而是`，就是键盘左上角的那个键。也可以使用<code>rpm -qilf</code>，同时输出软件包信息和文件列表。</p>
<p>7、某个文件是哪个软件包安装的，或者哪个软件包包含这个文件。</p>
<p>注意，前一个问题中的方法，只适用与可执行的程序，而下面的方法，不仅可以用于可执行程序，也可以用于普通的任何文件。前提是知道这个文件名。首先获得这个程序的完整路径，可以用<code>whereis</code>或者<code>which</code>，然后使用<code>rpm -qf</code>例如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">whereis ftptop</span><br><span class="line">ftptop: /usr/bin/ftptop /usr/share/<span class="built_in">man</span>/man1/ftptop.<span class="number">1</span>.gz</span><br><span class="line"></span><br><span class="line">rpm <span class="literal">-qf</span> /usr/bin/ftptop</span><br><span class="line">proftpd<span class="literal">-1</span>.<span class="number">2.8</span><span class="literal">-1</span></span><br><span class="line"></span><br><span class="line">rpm <span class="literal">-qf</span> /usr/share/doc/proftpd<span class="literal">-1</span>.<span class="number">2.8</span>/rfc/rfc0959.txt</span><br><span class="line">proftpd<span class="literal">-1</span>.<span class="number">2.8</span><span class="literal">-1</span></span><br></pre></td></tr></table></figure>

<h2 id="dkpg"><a href="#dkpg" class="headerlink" title="dkpg"></a><code>dkpg</code></h2><p><code>dpkg</code> 是<code>Debian</code>[待宾] Package 的简写。为 <code>Debian</code> 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自<code>Debian</code>的Linux 发行版都使用 <code>dpkg</code>，例如 <code>Ubuntu</code>、<code>Knoppix</code> 等。 </p>
<p><strong><code>dpkg</code>命令</strong>是<code>Debian</code> <code>Linux</code>系统用来安装、创建和管理软件包的实用工具。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dpkg(选项)(参数)</span><br></pre></td></tr></table></figure>

<h3 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-i</span>：安装软件包；</span><br><span class="line"><span class="literal">-r</span>：删除软件包；</span><br><span class="line"><span class="literal">-P</span>：删除软件包的同时删除其配置文件；</span><br><span class="line"><span class="literal">-L</span>：显示于软件包关联的文件；</span><br><span class="line"><span class="literal">-l</span>：显示已安装软件包列表；</span><br><span class="line">-<span class="literal">-unpack</span>：解开软件包；</span><br><span class="line"><span class="literal">-c</span>：显示软件包内文件列表；</span><br><span class="line">-<span class="literal">-confiugre</span>：配置软件包。</span><br></pre></td></tr></table></figure>

<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><p><code>Deb</code>软件包：指定要操作的<code>.deb</code>软件包。</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dpkg <span class="literal">-i</span> package.deb     <span class="comment">#安装包</span></span><br><span class="line">dpkg <span class="literal">-r</span> package         <span class="comment">#删除包</span></span><br><span class="line">dpkg <span class="literal">-P</span> package         <span class="comment">#删除包（包括配置文件）</span></span><br><span class="line">dpkg <span class="literal">-L</span> package         <span class="comment">#列出与该包关联的文件</span></span><br><span class="line">dpkg <span class="literal">-l</span> package         <span class="comment">#显示该包的版本</span></span><br><span class="line">dpkg -<span class="literal">-unpack</span> package.deb  <span class="comment">#解开deb包的内容</span></span><br><span class="line">dpkg <span class="literal">-S</span> keyword            <span class="comment">#搜索所属的包内容</span></span><br><span class="line">dpkg <span class="literal">-l</span>                    <span class="comment">#列出当前已安装的包</span></span><br><span class="line">dpkg <span class="literal">-c</span> package.deb        <span class="comment">#列出deb包的内容</span></span><br><span class="line">dpkg -<span class="literal">-configure</span> package   <span class="comment">#配置包</span></span><br></pre></td></tr></table></figure>

<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a><code>yum</code></h2><p><code>Yum</code>（全称为 <code>Yellow dog Updater</code>, <code>Modified</code>）是一个在<code>Fedora</code>和<code>RedHat</code>以及<code>CentOS</code>中的<code>Shell</code>前端软件包管理器。基于<code>RPM</code>包管理，能够从指定的服务器自动下载<code>RPM</code>包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装</p>
<p><strong><code>yum</code>命令</strong>是在<code>Fedora</code>和<code>RedHat</code>以及<code>SUSE</code>中基于<code>rpm</code>的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理<code>RPM</code>软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p>
<p><code>yum</code>提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum(选项)(参数)</span><br></pre></td></tr></table></figure>

<h3 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-h</span>：显示帮助信息；</span><br><span class="line"><span class="literal">-y</span>：对所有的提问都回答“yes”；</span><br><span class="line"><span class="literal">-c</span>：指定配置文件；</span><br><span class="line"><span class="literal">-q</span>：安静模式；</span><br><span class="line"><span class="literal">-v</span>：详细模式；</span><br><span class="line"><span class="literal">-d</span>：设置调试等级（<span class="number">0</span><span class="literal">-10</span>）；</span><br><span class="line"><span class="literal">-e</span>：设置错误等级（<span class="number">0</span><span class="literal">-10</span>）；</span><br><span class="line"><span class="literal">-R</span>：设置yum处理一个命令的最大等待时间；</span><br><span class="line"><span class="literal">-C</span>：完全从缓存中运行，而不去下载或者更新任何头文件。</span><br></pre></td></tr></table></figure>

<h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">install：安装rpm软件包；</span><br><span class="line">update：更新rpm软件包；</span><br><span class="line">check<span class="literal">-update</span>：检查是否有可用的更新rpm软件包；</span><br><span class="line">remove：删除指定的rpm软件包；</span><br><span class="line">list：显示软件包的信息；</span><br><span class="line">search：检查软件包的信息；</span><br><span class="line">info：显示指定的rpm软件包的描述信息和概要信息；</span><br><span class="line">clean：清理yum过期的缓存；</span><br><span class="line">shell：进入yum的shell提示符；</span><br><span class="line">resolvedep：显示rpm软件包的依赖关系；</span><br><span class="line">localinstall：安装本地的rpm软件包；</span><br><span class="line">localupdate：显示本地rpm软件包进行更新；</span><br><span class="line">deplist：显示rpm软件包的所有依赖关系。</span><br></pre></td></tr></table></figure>

<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>部分常用的命令包括：</p>
<ul>
<li>自动搜索最快镜像插件：<code>yum install yum-fastestmirror</code></li>
<li>安装yum图形窗口插件：<code>yum install yumex</code></li>
<li>查看可能批量安装的列表：<code>yum grouplist</code></li>
</ul>
<p><strong>安装</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install              <span class="comment">#全部安装</span></span><br><span class="line">yum install package1     <span class="comment">#安装指定的安装包package1</span></span><br><span class="line">yum groupinsall group1   <span class="comment">#安装程序组group1</span></span><br></pre></td></tr></table></figure>

<p><strong>更新和升级</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum update               <span class="comment">#全部更新</span></span><br><span class="line">yum update package1      <span class="comment">#更新指定程序包package1</span></span><br><span class="line">yum check<span class="literal">-update</span>         <span class="comment">#检查可更新的程序</span></span><br><span class="line">yum upgrade package1     <span class="comment">#升级指定程序包package1</span></span><br><span class="line">yum groupupdate group1   <span class="comment">#升级程序组group1</span></span><br></pre></td></tr></table></figure>

<p><strong>查找和显示</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum info package1      <span class="comment">#显示安装包信息package1</span></span><br><span class="line">yum list               <span class="comment">#显示所有已经安装和可以安装的程序包</span></span><br><span class="line">yum list package1      <span class="comment">#显示指定程序包安装情况package1</span></span><br><span class="line">yum groupinfo group1   <span class="comment">#显示程序组group1信息yum search string 根据关键字string查找安装包</span></span><br></pre></td></tr></table></figure>

<p><strong>删除程序</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum remove &amp;<span class="comment">#124; erase package1   #删除程序包package1</span></span><br><span class="line">yum groupremove group1             <span class="comment">#删除程序组group1</span></span><br><span class="line">yum deplist package1               <span class="comment">#查看程序package1依赖情况</span></span><br></pre></td></tr></table></figure>

<p><strong>清除缓存</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum clean packages       <span class="comment">#清除缓存目录下的软件包</span></span><br><span class="line">yum clean headers        <span class="comment">#清除缓存目录下的 headers</span></span><br><span class="line">yum clean oldheaders     <span class="comment">#清除缓存目录下旧的 headers</span></span><br></pre></td></tr></table></figure>

<h2 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a><code>apt-get</code></h2><p><code>apt-get</code> 命令适用于 <code>deb</code> 包管理式的 <code>Linux</code> 操作系统（<code>Debian</code>、<code>Ubuntu</code>等），主要用于自动从互联网软件仓库中搜索、下载、安装、升级、卸载软件或操作系统。</p>
<p><strong><code>apt-get</code>命令</strong>是<code>Debian Linux</code>发行版中的<code>APT</code>软件包管理工具。所有基于<code>Debian</code>的发行都使用这个包管理系统。<code>deb</code>包可以把一个应用的文件包在一起，大体就如同<code>Windows</code>上的安装文件。</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span>(选项)(参数)</span><br></pre></td></tr></table></figure>

<h3 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-c</span>：指定配置文件。</span><br></pre></td></tr></table></figure>

<h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><ul>
<li>管理指令：对<code>APT</code>软件包的管理操作；</li>
<li>软件包：指定要操纵的软件包。</li>
</ul>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>使用<code>apt-get</code>命令的第一步就是引入必需的软件库，<code>Debian</code>的软件库也就是所有<code>Debian</code>软件包的集合，它们存在互联网上的一些公共站点上。把它们的地址加入，<code>apt-get</code>就能搜索到我们想要的软件。<code>/etc/apt/sources.list</code>是存放这些地址列表的配置文件，其格式如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">deb [<span class="type">web</span>或<span class="type">ftp</span>地址] [发行版名字] [<span class="type">main</span>/<span class="type">contrib</span>/<span class="type">non</span>-<span class="type">free</span>]</span><br></pre></td></tr></table></figure>

<p>我们常用的<code>Ubuntu</code>就是一个基于<code>Debian</code>的发行，我们使用<code>apt-get</code>命令获取这个列表，以下是我整理的常用命令：</p>
<p>在修改<code>/etc/apt/sources.list</code>或者<code>/etc/apt/preferences</code>之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> update</span><br></pre></td></tr></table></figure>

<p>安装一个新软件包：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> install packagename</span><br></pre></td></tr></table></figure>

<p>卸载一个已安装的软件包（保留配置文件）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> remove packagename</span><br></pre></td></tr></table></figure>

<p>卸载一个已安装的软件包（删除配置文件）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> –purge remove packagename</span><br></pre></td></tr></table></figure>

<p>会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> autoclean apt</span><br></pre></td></tr></table></figure>

<p>这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> clean</span><br></pre></td></tr></table></figure>

<p>更新所有已安装的软件包：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> upgrade</span><br></pre></td></tr></table></figure>

<p>将系统升级到新版本：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> dist<span class="literal">-upgrade</span></span><br></pre></td></tr></table></figure>

<p>定期运行这个命令来清除那些已经卸载的软件包的<code>.deb</code>文件。通过这种方式，您可以释放大量的磁盘空间。如果您的需求十分迫切，可以使用<code>apt-get clean</code>以释放更多空间。这个命令会将已安装软件包裹的<code>.deb</code>文件一并删除。大多数情况下您不会再用到这些.<code>debs</code>文件，因此如果您为磁盘空间不足 而感到焦头烂额，这个办法也许值得一试：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> autoclean</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>yum</tag>
        <tag>apt-get</tag>
        <tag>dkpg</tag>
        <tag>rpm</tag>
        <tag>redhat</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux定时任务请求一个链接</title>
    <url>/a826c44f.html</url>
    <content><![CDATA[<p><code>windows</code>虽然也有定时任务，不过跟<code>Linux</code>系统自带的定时任务是有差别的，它需要访客访问时检测而进行的。如果使用<code>Linux</code>则可以在明确的时间中执行任务，而不需要有人干预，本文将学习一下这方面的东西。</p>
<a id="more"></a>

<h5 id="1-登录ssh，执行以下命令，进入vim模式，使用i编辑这个crontab文件，使用-wq命令保存。"><a href="#1-登录ssh，执行以下命令，进入vim模式，使用i编辑这个crontab文件，使用-wq命令保存。" class="headerlink" title="1.登录ssh，执行以下命令，进入vim模式，使用i编辑这个crontab文件，使用:wq命令保存。"></a>1.登录<code>ssh</code>，执行以下命令，进入<code>vim</code>模式，使用i编辑这个<code>crontab</code>文件，使用<code>:wq</code>命令保存。</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<h5 id="2-你可以使用以下的任意三种方式来请求一个链接。"><a href="#2-你可以使用以下的任意三种方式来请求一个链接。" class="headerlink" title="2.你可以使用以下的任意三种方式来请求一个链接。"></a>2.你可以使用以下的任意三种方式来请求一个链接。</h5><p>Add ONE of the following lines:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">45</span> * * * *  /usr/bin/lynx <span class="literal">-source</span> http://example.com/cron.php</span><br><span class="line"><span class="number">45</span> * * * * /usr/bin/<span class="built_in">wget</span> <span class="literal">-O</span> - <span class="literal">-q</span> <span class="literal">-t</span> <span class="number">1</span> http://www.example.com/cron.php</span><br><span class="line"><span class="number">45</span> * * * * <span class="built_in">curl</span> <span class="literal">-s</span> http://example.com/cron.php</span><br></pre></td></tr></table></figure>

<h5 id="3-例如使用wget请求某个链接，我们可以使用下面的格式。"><a href="#3-例如使用wget请求某个链接，我们可以使用下面的格式。" class="headerlink" title="3.例如使用wget请求某个链接，我们可以使用下面的格式。"></a>3.例如使用wget请求某个链接，我们可以使用下面的格式。</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* * * * * wget -O - http://yoursite.com/tasks.php &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>That should work for you. Just have a wget script that loads the page.</p>
<p>Using -O - means that the output of the web request will be sent to STDOUT (standard output)</p>
<p>by adding &gt;/dev/null we instruct standard output to be redirect to a black hole. by adding 2&gt;&amp;1 we instruct STDERR (errors) to also be sent to STDOUT, and thus all output will be sent to a blackhole. (so it will load the website, but never write a file anywhere)</p>
<h5 id="4-前面的-号代表一下时间"><a href="#4-前面的-号代表一下时间" class="headerlink" title="4.前面的*号代表一下时间"></a>4.前面的*号代表一下时间</h5><p>minute: 0</p>
<p>of hour: 1</p>
<p>of day of month: * (every day of month)</p>
<p>of month: * (every month)</p>
<p>and weekday: 1-5 (=Monday til Friday)</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown文档书写语法</title>
    <url>/c8d85c2.html</url>
    <content><![CDATA[<p><code>Markdown</code>的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<code>WordPress</code>和大型<code>CMS</code>如<code>Joomla</code>、<code>Drupal</code>都能很好的支持<code>Markdown</code>。完全采用<code>Markdown</code>编辑器的博客平台有<code>Ghost</code>和<code>Typecho</code>。</p>
<a id="more"></a>

<h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><h3 id="使用-和-标记一级和二级标题"><a href="#使用-和-标记一级和二级标题" class="headerlink" title="使用 = 和 - 标记一级和二级标题"></a>使用 = 和 - 标记一级和二级标题</h3><p>= 和 - 标记语法格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">我展示的是一级标题</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">我展示的是二级标题</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<div class="note success"><p><img data-src="/images/1564736427455.png" alt="1564736427455"></p>
</div>



<h3 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 # 号标记</h3><p>使用 <strong><code>#</code></strong> 号可表示 1-6 级标题，一级标题对应一个 <strong><code>#</code></strong> 号，二级标题对应两个 <strong><code>#</code></strong> 号，以此类推。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<div class="note success"><p><img data-src="/images/1564736396142.png" alt="1564736396142"></p>
</div>

<h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><p><code>Markdown</code> 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><code>Markdown</code> 可以使用以下几种字体：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__<span class="emphasis">_粗斜体文本<span class="strong">__<span class="emphasis">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>

<p>显示效果如下所示：</p>
<div class="note success"><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p>
</div>

<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">- - -</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">----------</span></span></span><br></pre></td></tr></table></figure>

<p>显示效果如下所示：</p>
<div class="note success"><hr>
<hr>
<hr>
<hr>
<hr>
</div>

<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 **<code>~~**</code> 即可，实例如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~在我上面添加删除线~~</span><br></pre></td></tr></table></figure>

<p>显示效果如下所示：</p>
<div class="note success"><p><del>在我上面添加删除线</del></p>
</div>

<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 <code>HTML</code> 的 <code>&lt;u&gt;</code> 标签来实现：</p>
<p>带下划线文本</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>给我添加下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>显示效果如下所示：</p>
<div class="note success"><p><u>给我添加下划线</u></p>
</div>

<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p>
<p><code>Markdown</code> 脚注的格式如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">创建脚注格式类似这样 [^Markdown]。</span><br><span class="line">[<span class="symbol">^Markdown</span>]: <span class="link">Markdown是一种可以使用普通文本编辑器编写的标记语言</span></span><br></pre></td></tr></table></figure>

<div class="note success"><p><img data-src="/images/1564728083748.png" alt="1564728083748"></p>
</div>

<h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p><code>Markdown</code> 支持有序列表和无序列表。</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用星号(<strong><code>*</code></strong>)、加号(<strong><code>+</code></strong>)或是减号(<strong><code>-</code></strong>)作为列表标记：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure>

<div class="note success"><ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</div>

<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用数字并加上 <strong><code>.</code></strong> 号来表示，如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
</div>

<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项添加四个空格即可：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第一个元素</li>
</ul>
</li>
</ol>
</div>

<h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong><code>&gt;</code></strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 区块引用</span></span><br><span class="line"><span class="quote">&gt; 菜鸟教程</span></span><br><span class="line"><span class="quote">&gt; 学的不仅是技术更是梦想</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><blockquote>
<p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p>
</blockquote>
</div>

<p>另外区块是可以嵌套的，一个 <strong><code>&gt;</code></strong> 符号是最外层，两个 <strong><code>&gt;</code></strong> 符号是第一层嵌套，以此类推退：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
</div>

<h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 区块中使用列表</span></span><br><span class="line"><span class="quote">&gt; 1. 第一项</span></span><br><span class="line"><span class="quote">&gt; 2. 第二项</span></span><br><span class="line"><span class="quote">&gt; + 第一项</span></span><br><span class="line"><span class="quote">&gt; + 第二项</span></span><br><span class="line"><span class="quote">&gt; + 第三项</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
</div>

<h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong><code>&gt;</code></strong> 前添加四个空格的缩进。</p>
<p>区块中使用列表实例如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="code">    &gt; 菜鸟教程</span></span><br><span class="line"><span class="code">    &gt; 学的不仅是技术更是梦想</span></span><br><span class="line"><span class="code">* 第二项</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><ul>
<li>第一项<blockquote>
<p>菜鸟教程<br>学的不仅是技术更是梦想</p>
</blockquote>
</li>
<li>第二项</li>
</ul>
</div>

<h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`printf()`</span> 函数</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><p><code>printf()</code> 函数</p>
</div>

<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（<code>Tab</code> 键）</strong>。</p>
<p><del>注意：直接使用```浏览器会解释，故加了\做转义，实际使用不用加\</del></p>
<p>实例如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="code">`\`</span>\`</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line"><span class="code">    alert(&#x27;Hello world&#x27;);</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">\`\`\`</span></span><br></pre></td></tr></table></figure>



<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#39;Hello world&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="code">`\`</span>\`javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line"><span class="code">    alert(&#x27;Hello world&#x27;);</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">\`\`\`</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;Hello world&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><p>链接使用方法如下：</p>
<p>效果如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址</span>)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">链接地址</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是一个链接 [<span class="string">托小尼的博客</span>](<span class="link">https://www.diandian100.cn</span>)</span><br></pre></td></tr></table></figure>

<div class="note success"><p>这是一个链接 <a href="https://www.diandian100.cn/">托小尼的博客</a></p>
</div>

<p>直接使用链接地址：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">www.diandian100.cn</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><p><a href="https://www.diandian100.cn/">https://www.diandian100.cn</a></p>
</div>

<h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">链接也可以用变量来代替，文档末尾附带变量地址：</span><br><span class="line">这个链接用 1 作为网址变量 [<span class="string">谷歌</span>][<span class="symbol">1</span>]</span><br><span class="line">这个链接用 diandian 作为网址变量 [<span class="string">托小尼的博客</span>][<span class="symbol">diandian</span>]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [diandian]: https://www.diandian100.cn/</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><p>链接也可以用变量来代替，文档末尾附带变量地址：<br>这个链接用 <code>1</code> 作为网址变量 <span class="exturl" data-url="aHR0cDovL3d3dy5nb29nbGUuY29tLw==">谷歌<i class="fa fa-external-link-alt"></i></span><br>这个链接用 <code>diandian</code> 作为网址变量 <a href="https://www.diandian100.cn/">托小尼的博客</a><br>然后在文档的结尾为变量赋值（网址）</p>
</div>

<h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p><code>Markdown</code> 图片语法格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址 &quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>开头一个感叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>
</ul>
<p>使用实例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">谷歌 图标</span>](<span class="link">https://www.diandian100.cn/images/1441128028538_l.gif</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">谷歌 图标</span>](<span class="link">https://www.diandian100.cn/images/1441128028538_l.gif &quot;谷歌logo&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><p><img data-src="https://www.diandian100.cn/images/1441128028538_l.gif" alt="谷歌 图标"></p>
<p><img data-src="https://www.diandian100.cn/images/1441128028538_l.gif" alt="谷歌 图标" title="谷歌logo"></p>
</div>

<p>当然，你也可以像网址那样对图片网址使用变量:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">谷歌</span>][<span class="symbol">1</span>].</span><br><span class="line">然后在文档的结尾位变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">https://www.diandian100.cn/images/1441128028538_l.gif</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><p>这个链接用 1 作为网址变量 <a href="https://www.diandian100.cn/images/1441128028538_l.gif">谷歌</a>.<br>然后在文档的结尾位变量赋值（网址）</p>
</div>

<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.diandian100.cn/images/1441128028538_l.gif&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><img data-src="https://www.diandian100.cn/images/1441128028538_l.gif" width="50%">
</div>

<h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong><code>|</code></strong> 来分隔不同的单元格，使用 <strong><code>-</code></strong> 来分隔表头和其他行。</p>
<p>语法格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
</div>

<p>对齐方式</p>
<p><strong>我们可以设置表格的对齐方式：</strong></p>
<ul>
<li><strong><code>-:</code></strong> 设置内容和标题栏居右对齐。</li>
<li><strong><code>:-</code></strong> 设置内容和标题栏居左对齐。</li>
<li><strong><code>:-:</code></strong> 设置内容和标题栏居中对齐。</li>
</ul>
<p>实例如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><p><img data-src="/images/1564727989914.png" alt="1564727989914"></p>
</div>

<h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>
<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">使用 <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
</div>

<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**文本加粗**</span> </span><br><span class="line">\<span class="emphasis">*\*</span> 正常显示星号 \<span class="emphasis">*\*</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<div class="note success"><p><strong>文本加粗</strong><br>** 正常显示星号 **</p>
</div>

<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*</span>   星号</span><br><span class="line"><span class="emphasis">_   下划线</span></span><br><span class="line"><span class="emphasis">&#123;&#125;  花括号</span></span><br><span class="line"><span class="emphasis">[]  方括号</span></span><br><span class="line"><span class="emphasis">()  小括号</span></span><br><span class="line"><span class="emphasis">#   井字号</span></span><br><span class="line"><span class="emphasis">+   加号</span></span><br><span class="line"><span class="emphasis">-   减号</span></span><br><span class="line"><span class="emphasis">.   英文句点</span></span><br><span class="line"><span class="emphasis">!   感叹号</span></span><br></pre></td></tr></table></figure>

<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;<span class="emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="/images/1564727957513.png" alt="1564727957513"></p>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>markdown甚至可以帮你做流程图。如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">​<span class="code">```flow</span></span><br><span class="line"><span class="code">st=&gt;start: 开始</span></span><br><span class="line"><span class="code">op=&gt;operation: My Operation</span></span><br><span class="line"><span class="code">cond=&gt;condition: Yes or No?</span></span><br><span class="line"><span class="code">e=&gt;end</span></span><br><span class="line"><span class="code">st-&gt;op-&gt;cond</span></span><br><span class="line"><span class="code">cond(yes)-&gt;e</span></span><br><span class="line"><span class="code">cond(no)-&gt;op</span></span><br><span class="line"><span class="code">&amp;```</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="/images/1564727878546.png" alt="1564727878546"></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Markdown语法</tag>
        <tag>markdown基础</tag>
        <tag>markdown基础使用</tag>
        <tag>markdown使用</tag>
        <tag>markdown流程图</tag>
        <tag>markdown公式</tag>
        <tag>markdown表格</tag>
        <tag>markdown代码</tag>
      </tags>
  </entry>
  <entry>
    <title>ModuleNotFoundError: No module named &#39;mutagen._compat&#39;</title>
    <url>/898d455c.html</url>
    <content><![CDATA[<p><code>python</code>使用<code>FastDFS</code>客户端上传文件，实例化报错：<code>ModuleNotFoundError: No module named &#39;mutagen._compat&#39;</code>，奇怪了，直接用的第三方包怎么还有错呢，一番发现了问题。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; from fdfs_client.client import Fdfs_client</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;code.py&quot;, line 90, in runcode</span><br><span class="line">    exec(code, self.locals)</span><br><span class="line">  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&#x2F;home&#x2F;tony&#x2F;.local&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;fdfs_client&#x2F;client.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    from fdfs_client.tracker_client import *</span><br><span class="line">  File &quot;&#x2F;home&#x2F;tony&#x2F;.local&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;fdfs_client&#x2F;tracker_client.py&quot;, line 17, in &lt;module&gt;</span><br><span class="line">    from fdfs_client.utils import *</span><br><span class="line">  File &quot;&#x2F;home&#x2F;tony&#x2F;.local&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;fdfs_client&#x2F;utils.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    from mutagen._compat import StringIO</span><br><span class="line">ModuleNotFoundError: No module named &#39;mutagen._compat&#39;</span><br></pre></td></tr></table></figure>

<p><code>mutagen</code>的安装包内查找,发现原来<code>_compat</code>文件是在<code>_senf</code>目录下,而在<code>FastDFS</code>客户端里用的直接是<code>mutagen._compat</code>,怪不得提示找不到模块，我们重新修改下路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from mutagen._senf._compat import StringIO</span><br></pre></td></tr></table></figure>

<p>再次运行上传文件，错误不在了，图片也上传成功了。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>ModuleNotFoundError: No module named &#39;mutagen._compat&#39;</tag>
        <tag>FastDFS客户端</tag>
        <tag>FastDFS客户端报错</tag>
        <tag>FastDFS报错</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis介绍与优势对比</title>
    <url>/ade73181.html</url>
    <content><![CDATA[<p>redis是一个key-value<span class="exturl" data-url="aHR0cDovL2JhaWtlLmJhaWR1LmNvbS92aWV3LzUxODM5Lmh0bQ==">存储系统<i class="fa fa-external-link-alt"></i></span>。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(<span class="exturl" data-url="aHR0cDovL2JhaWtlLmJhaWR1LmNvbS92aWV3LzU0OTQ3OS5odG0=">链表<i class="fa fa-external-link-alt"></i></span>)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些<span class="exturl" data-url="aHR0cDovL2JhaWtlLmJhaWR1LmNvbS92aWV3LzY3NTY0NS5odG0=">数据类型<i class="fa fa-external-link-alt"></i></span>都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
<a id="more"></a>

<h2 id="使用Redis有哪些好处？"><a href="#使用Redis有哪些好处？" class="headerlink" title="使用Redis有哪些好处？"></a>使用Redis有哪些好处？</h2><ol>
<li><p><strong>速度快</strong>，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</p>
</li>
<li><p><strong>支持丰富数据类型</strong>，支持string，list，set，sorted set，hash</p>
</li>
<li><p><strong>支持事务</strong>，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</p>
</li>
<li><p><strong>丰富的特性</strong>：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p>
</li>
</ol>
<h2 id="redis相比memcached有哪些优势？"><a href="#redis相比memcached有哪些优势？" class="headerlink" title="redis相比memcached有哪些优势？"></a>redis相比memcached有哪些优势？</h2><ol>
<li><p>memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</p>
</li>
<li><p>redis的速度比memcached快很多</p>
</li>
<li><p>redis可以持久化其数据</p>
</li>
</ol>
<h2 id="redis常见性能问题和解决方案："><a href="#redis常见性能问题和解决方案：" class="headerlink" title="redis常见性能问题和解决方案："></a>redis常见性能问题和解决方案：</h2><ol>
<li><p>Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件</p>
</li>
<li><p>如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次</p>
</li>
<li><p>为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内</p>
</li>
<li><p>尽量避免在压力很大的主库上增加从库</p>
</li>
<li><p>主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3…</p>
</li>
</ol>
<p>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</p>
<h2 id="MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h2><p> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：</p>
<p>**<code>voltile-lru</code>**：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p>
<p>**<code>volatile-ttl</code>**：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p>
<p>**<code>volatile-random</code>**：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p>
<p>**<code>allkeys-lru</code>**：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p>
<p>**<code>allkeys-random</code>**：从数据集（server.db[i].dict）中任意选择数据淘汰</p>
<p>**<code>no-enviction</code>**（驱逐）：禁止驱逐数据</p>
<h2 id="Memcache与Redis的区别都有哪些？"><a href="#Memcache与Redis的区别都有哪些？" class="headerlink" title="Memcache与Redis的区别都有哪些？"></a>Memcache与Redis的区别都有哪些？</h2><ol>
<li><strong>存储方式</strong></li>
</ol>
<ul>
<li><p>Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。</p>
</li>
<li><p>Redis有部份存在硬盘上，这样能保证数据的持久性。</p>
</li>
</ul>
<ol start="2">
<li><p><strong>数据支持类型</strong></p>
<p>Memcache对数据类型支持相对简单。</p>
<p>Redis有复杂的数据类型。</p>
</li>
<li><p><strong>value大小</strong></p>
<p>redis最大可以达到1GB，而memcache只有1MB</p>
</li>
</ol>
<h2 id="Redis-常见的性能问题都有哪些？如何解决？"><a href="#Redis-常见的性能问题都有哪些？如何解决？" class="headerlink" title="Redis 常见的性能问题都有哪些？如何解决？"></a>Redis 常见的性能问题都有哪些？如何解决？</h2><ol>
<li><p><strong>Master写内存快照</strong>，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</p>
</li>
<li><p><strong>Master AOF持久化</strong>，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</p>
</li>
<li><p><strong>Master调用BGREWRITEAOF重写AOF文件</strong>，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</p>
</li>
<li><p><strong>Redis主从复制的性能问题</strong>，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</p>
</li>
</ol>
<h2 id="redis-最适合的场景"><a href="#redis-最适合的场景" class="headerlink" title="redis 最适合的场景"></a>redis 最适合的场景</h2><p>Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?</p>
<div class="note success"><p>如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：</p>
<p>1 . Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。<br>2 . Redis支持数据的备份，即master-slave模式的数据备份。<br>3 . Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p>
</div>
<ol>
<li><h4 id="会话缓存（Session-Cache）"><a href="#会话缓存（Session-Cache）" class="headerlink" title="会话缓存（Session Cache）"></a><strong>会话缓存（Session Cache）</strong></h4></li>
</ol>
<p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？</p>
<p>幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</p>
<ol start="2">
<li><h4 id="全页缓存（FPC）"><a href="#全页缓存（FPC）" class="headerlink" title="全页缓存（FPC）"></a><strong>全页缓存（FPC）</strong></h4></li>
</ol>
<p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</p>
<p>再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</p>
<p>此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p>
<ol start="3">
<li><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a><strong>队列</strong></h4></li>
</ol>
<p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</p>
<p>如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</p>
<ol start="4">
<li><h4 id="排行榜-计数器"><a href="#排行榜-计数器" class="headerlink" title="排行榜/计数器"></a><strong>排行榜/计数器</strong></h4></li>
</ol>
<p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：</p>
<p>当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：</p>
<p>ZRANGE user_scores 0 10 WITHSCORES</p>
<p>Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。</p>
<ol start="5">
<li><h4 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a><strong>发布/订阅</strong></h4></li>
</ol>
<p>最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。</p>
<p>Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</p>
]]></content>
      <categories>
        <category>db</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>数据库</tag>
        <tag>memcached</tag>
      </tags>
  </entry>
  <entry>
    <title>SPU与SKU</title>
    <url>/4f8f24de.html</url>
    <content><![CDATA[<p>做商城，要理解两个概念，<code>SPU</code>与<code>SKU</code>。最枯燥的就是概念，下面除了基本的概念我们用实际例子来说明下这两个东西，抛弃难理解的概念。</p>
<a id="more"></a>

<h3 id="SPU"><a href="#SPU" class="headerlink" title="SPU"></a><code>SPU</code></h3><p><code>SPU</code>(<code>Standard Product Unit</code>)：标准化产品单元。 <code>SPU</code>是商品<strong>信息聚合</strong>的最小单位，是一组<strong>可复用、易检索</strong>的<strong>标准化信息的集合</strong>，该集合描述了一个产品的特性。</p>
<p>这里面有几个关键词:</p>
<p><strong>信息聚合：</strong>意味着有识别度的信息被用来作为不同<code>SPU</code>的区分点；不是所有属性，使用的属性值是能够有区分度的关键属性值；</p>
<p><strong>易检索：</strong>信息聚合与易检索这两个说明，是通过关键属性+属性值的聚合来实现易检索这个目的；目的与使用场景相关联，并非万古不变；哪些属性和属性值会被选为区分<code>SPU</code>的关键属性是会随着场景变化的； 但对于一些场景，已经是共识；比如电商销售，对于标品基本都会选择品牌+型号+关键属性；这也是很多年前我所得到的解释。</p>
<p><strong>标准化的信息集合：</strong>说明<code>SPU</code>的本质是信息集合，是一个<strong>抽象概念</strong>，并非是看得见的东西。</p>
<p>通俗点讲，属性值、特性相同的商品就可以称为一个<code>SPU</code>。</p>
<p>例如，<code>iphone7</code>就是一个<code>SPU</code>，路虎车也是一个<code>SPU</code>，这个与商家无关，与颜色、款式、套餐也无关。</p>
<p>在商品信息电子化过程中，商品的特性可以由多个“属性及对应的属性值对”进行描述。“属性及对应的属性值对”完全相同的商品，可以抽象成为一个 <code>SPU</code>。同 时，这些“属性及对应的属性值对”也在<code>SPU</code>中固化下来，逐步标准化。基于<code>SPU</code>的商品信息结构，可以实现丰富的应用，比如商品信息与资讯、评论、以及其它<code>SPU</code>的整合。从这个意义上讲，比较购物的产品库以<code>SPU</code>为标准来建立是最合适的。</p>
<h3 id="SKU"><a href="#SKU" class="headerlink" title="SKU"></a><code>SKU</code></h3><p><code>SKU</code>=<code>stock keeping unit</code>(库存量单位) <code>SKU</code>即库存进出计量的单位（买家购买、商家进货、供应商备货、工厂生产都是依据<code>SKU</code>进行的），在服装、鞋类商品中使用最多最普遍。 例如纺织品中一个<code>SKU</code>通常表示：规格、颜色、款式。 <code>SKU</code>是物理上不可分割的最小存货单元。也就是说一款商品，可以根据<code>SKU</code>来确定具体的货物存量。 <code>sku</code> 属性(会影响到库存和价格的属性, 又叫销售属性)—规格</p>
<p><strong>注意的是，<code>SKU</code>仍然是一个具有场景性，同时也有相对性的概念；</strong></p>
<p><code>SKU</code>是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管 理模式来处理。</p>
<p>比如一香烟是50条，一条里有十盒，一盒中有20支，这些单位就要根据不同的需要来设定<code>SKU</code>。</p>
<p>比如仓储批发式大卖场，一定是按照一箱来设 定的。普通大卖场一定是按照条来设定的。烟酒专卖店一定是按照盒来设定的。过去上海等地的街边小店一定是按一支来设定的。这样一支就是烟的最小零售单位 但要根据自己的业态和服务模式来设定。(香烟这个例子非常好，是网上看到的，但找不到出处了，有知道的同学跟我说下，我添加下引用)；</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结起来说，这三个概念都是约定概念，不同场景可以有不同的定义； 对我们自己来说，有一套我们自己的约定概念是最重要的；</p>
<p>简单来说我们可以<code>SPU</code>简单理解为“款”，<code>SKU</code>理解为“件”；对于程序员的世界里，我们可以讲<code>SPU</code>理解为“类”，<code>SKU</code>理解为“对象”。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>SPU与SKU</tag>
        <tag>sku</tag>
        <tag>spu</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemy之orm多表关系操作</title>
    <url>/6fb6a269.html</url>
    <content><![CDATA[<p>之前<a href="https://www.diandian100.cn/8b7323d7.html">SQLAlchemy介绍及使用</a>中介绍了下<code>SQLAlchemy</code>的基本操作，本文继续进阶介绍多表操作中，<code>orm</code>关系模型如何处理。</p>
<p>这里我们来举例说明一对多和多对多的操作(一对一可以划入多对一故不再讲)。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h2 id="数据库连接引擎"><a href="#数据库连接引擎" class="headerlink" title="数据库连接引擎"></a>数据库连接引擎</h2><p>文件名为<code>alchemy_base.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入数据库基础模型</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="comment"># 导入数据库连接引擎</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化数据库模型基类</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"><span class="comment"># 创建数据库连接引擎</span></span><br><span class="line">conn = create_engine(<span class="string">&quot;mysql+pymysql://root:@127.0.0.1:3306/sqlalchemysss?charset=utf8&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="数据表模型"><a href="#数据表模型" class="headerlink" title="数据表模型"></a>数据表模型</h3><p>文件名为：<code>alchemy_create_table.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入数据库列、类型</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库模型基类和数据库连接引擎</span></span><br><span class="line"><span class="keyword">from</span> alchemy_base <span class="keyword">import</span> Base, conn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学员表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;students&#x27;</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, comment=<span class="string">&quot;学生主键&quot;</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), comment=<span class="string">&#x27;学生姓名&#x27;</span>)</span><br><span class="line">    <span class="comment"># 城市id</span></span><br><span class="line">    city_id = Column(Integer, ForeignKey(<span class="string">&#x27;citys.id&#x27;</span>), comment=<span class="string">&#x27;城市id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 关联城市，一对多</span></span><br><span class="line">    student2city = relationship(<span class="string">&#x27;Citys&#x27;</span>, backref = <span class="string">&#x27;city2student&#x27;</span>)</span><br><span class="line">    <span class="comment"># 关联教师，多对多</span></span><br><span class="line">    student2teacher = relationship(<span class="string">&#x27;Teachers&#x27;</span>, secondary=<span class="string">&quot;studentTeacher&quot;</span>, backref = <span class="string">&quot;teacher2student&quot;</span>)</span><br><span class="line"><span class="comment"># 教师表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teachers</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;teachers&#x27;</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, comment=<span class="string">&quot;学生主键&quot;</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), comment=<span class="string">&#x27;学生姓名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 城市表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Citys</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;citys&#x27;</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, comment=<span class="string">&quot;学生教师关系主键&quot;</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), comment=<span class="string">&#x27;学生姓名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生城市表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentTeacher</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;studentTeacher&#x27;</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, comment=<span class="string">&quot;学生主键&quot;</span>)</span><br><span class="line">    <span class="comment"># 学生id</span></span><br><span class="line">    student_id = Column(Integer, ForeignKey(<span class="string">&#x27;students.id&#x27;</span>), comment=<span class="string">&#x27;学生id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 教师id</span></span><br><span class="line">    teacher_id = Column(Integer, ForeignKey(<span class="string">&#x27;teachers.id&#x27;</span>), comment=<span class="string">&#x27;教师id&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检索所有继承Base的模型对象，并在数据库中创建所有数据表</span></span><br><span class="line">Base.metadata.create_all(conn)</span><br></pre></td></tr></table></figure>
<h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入会话</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库连接引擎</span></span><br><span class="line"><span class="keyword">from</span> alchemy_base <span class="keyword">import</span> conn</span><br><span class="line"><span class="comment"># 导入数据表模型</span></span><br><span class="line"><span class="keyword">from</span> alchemy_create_table <span class="keyword">import</span> Students, Teachers, Citys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">Sessions = sessionmaker(conn)</span><br><span class="line"><span class="comment"># 开启会话</span></span><br><span class="line">db_session = Sessions()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一对多</span></span><br><span class="line"><span class="comment"># 正向添加</span></span><br><span class="line"><span class="comment"># stu_obj = Students(name=&quot;张学友&quot;, student2city=Citys(name=&quot;香港&quot;))</span></span><br><span class="line"><span class="comment"># res = db_session.add(stu_obj)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向添加</span></span><br><span class="line"><span class="comment"># city_obj = Citys(name=&#x27;台湾&#x27;, city2student=[Students(name=&quot;陈奕迅&quot;), Students(name=&quot;周杰伦&quot;)])</span></span><br><span class="line"><span class="comment"># res = db_session.add(city_obj)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多对多</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向添加</span></span><br><span class="line"><span class="comment"># stu_obj = Students(name=&#x27;郭富城&#x27;, student2teacher=[Teachers(name=&quot;孙悟空&quot;), Teachers(name=&quot;唐僧&quot;)])</span></span><br><span class="line"><span class="comment"># res = db_session.add(stu_obj)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向添加</span></span><br><span class="line">teacher_obj = Teachers(name=<span class="string">&quot;猪八戒&quot;</span>, teacher2student=[Students(name=<span class="string">&quot;peppa&quot;</span>), Students(name=<span class="string">&quot;乔治&quot;</span>)])</span><br><span class="line">res = db_session.add(teacher_obj)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交会话</span></span><br><span class="line">db_session.commit()</span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入会话</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库连接引擎</span></span><br><span class="line"><span class="keyword">from</span> alchemy_base <span class="keyword">import</span> conn</span><br><span class="line"><span class="comment"># 导入数据表模型</span></span><br><span class="line"><span class="keyword">from</span> alchemy_create_table <span class="keyword">import</span> Students, Teachers, Citys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">Sessions = sessionmaker(conn)</span><br><span class="line"><span class="comment"># 开启会话</span></span><br><span class="line">db_session = Sessions()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一对多</span></span><br><span class="line"><span class="comment"># 正向查询</span></span><br><span class="line"><span class="comment"># 查询id为2的学生姓名及所在城市</span></span><br><span class="line"><span class="comment"># stu_obj = db_session.query(Students).filter(Students.id==2).first()</span></span><br><span class="line"><span class="comment"># print(stu_obj.name, stu_obj.student2city.name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查询</span></span><br><span class="line"><span class="comment"># 查询所在城市为台湾的所有学生姓名</span></span><br><span class="line"><span class="comment"># city_obj = db_session.query(Citys).filter(Citys.name==&quot;台湾&quot;).first()</span></span><br><span class="line"><span class="comment"># print(city_obj.name)</span></span><br><span class="line"><span class="comment"># for stu_obj in city_obj.city2student:</span></span><br><span class="line"><span class="comment">#     print(stu_obj.name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多对多</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向查询</span></span><br><span class="line"><span class="comment"># 查询学生姓名为郭富城的所有老师姓名</span></span><br><span class="line"><span class="comment"># stu_obj = db_session.query(Students).filter(Students.name==&quot;郭富城&quot;).first()</span></span><br><span class="line"><span class="comment"># print(stu_obj.name)</span></span><br><span class="line"><span class="comment"># # 查询学生对应的老师</span></span><br><span class="line"><span class="comment"># for teacher_obj in stu_obj.student2teacher:</span></span><br><span class="line"><span class="comment">#     print(teacher_obj.name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查询</span></span><br><span class="line"><span class="comment"># 查询猪八戒的所有学生</span></span><br><span class="line">teacher_obj = db_session.query(Teachers).filter(Teachers.name==<span class="string">&quot;猪八戒&quot;</span>).first()</span><br><span class="line">print(teacher_obj.name)</span><br><span class="line"><span class="comment"># 查询对应的学生</span></span><br><span class="line"><span class="keyword">for</span> stu_obj <span class="keyword">in</span> teacher_obj.teacher2student:</span><br><span class="line">    print(stu_obj.name)</span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入会话</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库连接引擎</span></span><br><span class="line"><span class="keyword">from</span> alchemy_base <span class="keyword">import</span> conn</span><br><span class="line"><span class="comment"># 导入数据表模型</span></span><br><span class="line"><span class="keyword">from</span> alchemy_create_table <span class="keyword">import</span> Students, Teachers, Citys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">Sessions = sessionmaker(conn)</span><br><span class="line"><span class="comment"># 开启会话</span></span><br><span class="line">db_session = Sessions()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一对多</span></span><br><span class="line"><span class="comment"># 正向更新</span></span><br><span class="line"><span class="comment"># 将张学友城市姓名都修改为魔都</span></span><br><span class="line"><span class="comment"># stu_obj = db_session.query(Students).filter(Students.name==&quot;张学友&quot;).first()</span></span><br><span class="line"><span class="comment"># res = db_session.query(Citys).filter(Citys.id == stu_obj.city_id).update(&#123;&quot;name&quot;:&#x27;魔都&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向更新</span></span><br><span class="line"><span class="comment"># 将所在城市为台湾的所有学生姓名改为蔡蔡</span></span><br><span class="line"><span class="comment"># city_obj = db_session.query(Citys).filter(Citys.name==&quot;台湾&quot;).first()</span></span><br><span class="line"><span class="comment"># res = db_session.query(Students).filter(Students.city_id==city_obj.id).update(&#123;&quot;name&quot;:&quot;蔡蔡&quot;&#125;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交会话</span></span><br><span class="line">db_session.commit()</span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入会话</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库连接引擎</span></span><br><span class="line"><span class="keyword">from</span> alchemy_base <span class="keyword">import</span> conn</span><br><span class="line"><span class="comment"># 导入数据表模型</span></span><br><span class="line"><span class="keyword">from</span> alchemy_create_table <span class="keyword">import</span> Students, Teachers, Citys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">Sessions = sessionmaker(conn)</span><br><span class="line"><span class="comment"># 开启会话</span></span><br><span class="line">db_session = Sessions()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一对多</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所在城市为台湾的所有学生删除</span></span><br><span class="line"><span class="comment"># city_obj = db_session.query(Citys).filter(Citys.name==&quot;台湾&quot;).first()</span></span><br><span class="line"><span class="comment"># res = db_session.query(Students).filter(Students.city_id==city_obj.id).delete()</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多对多</span></span><br><span class="line"><span class="comment"># 删除郭富城姓名为唐僧的老师(仅删除关联关系，不删除教师表中的该条数据)</span></span><br><span class="line"><span class="comment"># stu_obj = db_session.query(Students).filter(Students.name==&quot;郭富城&quot;).first()</span></span><br><span class="line"><span class="comment"># teacher_obj = db_session.query(Teachers).filter(Teachers.name==&quot;唐僧&quot;).first()</span></span><br><span class="line"><span class="comment"># res = stu_obj.student2teacher.remove(teacher_obj)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交会话</span></span><br><span class="line">db_session.commit()</span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>SQLAlchemy之orm</tag>
        <tag>SQLAlchemy一对一</tag>
        <tag>SQLAlchemy一对多</tag>
        <tag>SQLAlchemy多对多</tag>
        <tag>SQLAlchemy多对一</tag>
        <tag>SQLAlchemy关系查询</tag>
        <tag>SQLAlchemy多表查询</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemy介绍及使用</title>
    <url>/8b7323d7.html</url>
    <content><![CDATA[<p><code>ORM</code> 全称 <code>Object Relational Mapping</code>, 翻译过来叫对象关系映射。简单的说，<code>ORM</code> 将数据库中的表与面向对象语言中的类建立了一种对应关系。这样，我们要操作数据库，数据库中的表或者表中的一条记录就可以直接通过操作类或者类实例来完成。</p>
<p><code>SQLAlchemy</code> 是<code>Python</code> 社区最知名的 <code>ORM</code> 工具之一，为高效和高性能的数据库访问设计，实现了完整的企业级持久模型。</p>
<a id="more"></a>

<h2 id="连接数据库-amp-创建数据表"><a href="#连接数据库-amp-创建数据表" class="headerlink" title="连接数据库&amp;创建数据表"></a>连接数据库&amp;创建数据表</h2><p>使用过<code>django</code>，使用其<code>model</code>很方便的帮我们管理数据，<code>SQLAlchemy</code> 负责的就是这个作用。</p>
<p><code>alchemy_db.py</code>代码内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入基础模型</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="comment"># 导入列、字段类型</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="comment"># 导入数据库创建引擎</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_conn</span><br><span class="line"><span class="comment"># 实例化模型基类</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据表对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">Base</span>):</span></span><br><span class="line">    <span class="comment"># 数据库中表真实名称</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="comment"># 创建id列</span></span><br><span class="line">    id = Column(Integer, comment=<span class="string">&quot;用户主键&quot;</span>, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 创建姓名列</span></span><br><span class="line">    name = Column(String(<span class="number">32</span>), comment=<span class="string">&#x27;用户姓名&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建数据库连接引擎</span></span><br><span class="line">conn = create_conn(<span class="string">&quot;mysql+pymysql://root:@127.0.0.1:3306/sqlalchemysss?charset=utf8&quot;</span>)</span><br><span class="line"><span class="comment"># 检索所有继承Base的模型对象，并在数据库中创建所有数据表</span></span><br><span class="line">Base.metadata.create_all(conn)</span><br></pre></td></tr></table></figure>

<h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><h3 id="创建单条"><a href="#创建单条" class="headerlink" title="创建单条"></a>创建单条</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入会话</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库连接引擎和User模型</span></span><br><span class="line"><span class="keyword">from</span> alchemy_db <span class="keyword">import</span> conn, User</span><br><span class="line">print(User)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库会话</span></span><br><span class="line">Session = sessionmaker(conn)</span><br><span class="line"><span class="comment"># 打开数据库会话</span></span><br><span class="line">db_session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用User模型创建一条数据</span></span><br><span class="line">user_obj = User(name=<span class="string">&#x27;张学友&#x27;</span>)</span><br><span class="line"><span class="comment"># 数据库会话中添加该数据</span></span><br><span class="line">db_session.add(user_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话提交</span></span><br><span class="line">db_session.commit()</span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h3 id="创建多条"><a href="#创建多条" class="headerlink" title="创建多条"></a>创建多条</h3><p>创建多条的方式有两种，第一种可以按照单条的方式，再回话中多添加几次；另外一种可以讲数据模型放在列表中进行批量添加。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入会话</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库连接引擎和User模型</span></span><br><span class="line"><span class="keyword">from</span> alchemy_db <span class="keyword">import</span> conn, User</span><br><span class="line">print(User)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库会话</span></span><br><span class="line">Session = sessionmaker(conn)</span><br><span class="line"><span class="comment"># 打开数据库会话</span></span><br><span class="line">db_session = Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多条方法1</span></span><br><span class="line"><span class="comment"># 使用User模型创建一条数据</span></span><br><span class="line">user_obj1 = User(name=<span class="string">&#x27;刘德华&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用User模型创建一条数据</span></span><br><span class="line">user_obj2 = User(name=<span class="string">&#x27;郭富城&#x27;</span>)</span><br><span class="line"><span class="comment"># 数据库会话中添加该数据</span></span><br><span class="line">db_session.add(user_obj1)</span><br><span class="line"><span class="comment"># 数据库会话中添加该数据</span></span><br><span class="line">db_session.add(user_obj2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多条方法2</span></span><br><span class="line"><span class="comment"># 创建数据表模型列表</span></span><br><span class="line">user_list = [</span><br><span class="line">    User(name=<span class="string">&#x27;孙悟空&#x27;</span>),</span><br><span class="line">    User(name=<span class="string">&#x27;猪八戒&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 提交到会话</span></span><br><span class="line">db_session.add_all(user_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话提交</span></span><br><span class="line">db_session.commit()</span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入数据库会话</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库连接引擎和数据模型</span></span><br><span class="line"><span class="keyword">from</span> alchemy_db <span class="keyword">import</span> conn, User</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">Session = sessionmaker(conn)</span><br><span class="line"><span class="comment"># 打开会话</span></span><br><span class="line">db_session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有数据</span></span><br><span class="line"><span class="comment"># 查询所有数据并按姓名正序</span></span><br><span class="line">res = db_session.query(User).order_by(User.name.asc()).all()</span><br><span class="line"><span class="comment"># 循环读取查询到的数据</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">    print(item.id, <span class="string">&#x27;-&#x27;</span>, item.name)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 只查询name列</span></span><br><span class="line">res = db_session.query(User.name).all()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    print(i, i.name )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询单条</span></span><br><span class="line">res = sql.first()</span><br><span class="line">print(res.id, res.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定条件查询</span></span><br><span class="line">res = db_session.query(User).filter(User.id == <span class="number">3</span>).first()</span><br><span class="line">print(res.id, res.name)</span><br><span class="line">res = db_session.query(User).filter_by(id = <span class="number">3</span>).first()</span><br><span class="line">print(res.id, res.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> alchemy_db <span class="keyword">import</span> conn, User</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(conn)</span><br><span class="line">db_session = Session()</span><br><span class="line"><span class="comment"># 更新一条</span></span><br><span class="line">res = db_session.query(User).filter_by(id=<span class="number">5</span>).update(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;布吉岛&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 更新多条</span></span><br><span class="line">res = db_session.query(User).filter(User.id&gt;<span class="number">5</span>).update(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;小冤家&#x27;</span>&#125;)</span><br><span class="line">print(res)</span><br><span class="line">db_session.commit()</span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> alchemy_db <span class="keyword">import</span> conn, User</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(conn)</span><br><span class="line">db_session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一条</span></span><br><span class="line">res = db_session.query(User).filter(User.id==<span class="number">7</span>).delete()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">db_session.commit()</span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 高级版查询操作,厉害了哦</span></span><br><span class="line"><span class="comment">#老规矩</span></span><br><span class="line"><span class="keyword">from</span> alchemy_db <span class="keyword">import</span> User,conn</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(conn)</span><br><span class="line">db_session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据表操作</span></span><br><span class="line"><span class="comment"># and or</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> and_ , or_</span><br><span class="line">ret = db_session.query(User).filter(and_(User.id &gt; <span class="number">3</span>, User.name == <span class="string">&#x27;张学友&#x27;</span>)).all()</span><br><span class="line">ret = db_session.query(User).filter(or_(User.id &lt; <span class="number">2</span>, User.name == <span class="string">&#x27;张学友&#x27;</span>)).all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有数据</span></span><br><span class="line">r1 = db_session.query(User).all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据 指定查询数据列 加入别名</span></span><br><span class="line">r2 = db_session.query(User.name.label(<span class="string">&#x27;username&#x27;</span>), User.id).first()</span><br><span class="line">print(r2.id,r2.username) <span class="comment"># 15 张学友</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表达式筛选条件</span></span><br><span class="line">r3 = db_session.query(User).filter(User.name == <span class="string">&quot;张学友&quot;</span>).all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原生SQL筛选条件</span></span><br><span class="line">r4 = db_session.query(User).filter_by(name=<span class="string">&#x27;张学友&#x27;</span>).all()</span><br><span class="line">r5 = db_session.query(User).filter_by(name=<span class="string">&#x27;张学友&#x27;</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串匹配方式筛选条件 并使用 order_by进行排序</span></span><br><span class="line">r6 = db_session.query(User).filter(text(<span class="string">&quot;id&lt;:value and name=:name&quot;</span>)).params(value=<span class="number">224</span>, name=<span class="string">&#x27;张学友&#x27;</span>).order_by(User.id).all()</span><br><span class="line"></span><br><span class="line"><span class="comment">#原生SQL查询</span></span><br><span class="line">r7 = db_session.query(User).from_statement(text(<span class="string">&quot;SELECT * FROM User where name=:name&quot;</span>)).params(name=<span class="string">&#x27;张学友&#x27;</span>).all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选查询列</span></span><br><span class="line"><span class="comment"># query的时候我们不在使用User ORM对象,而是使用User.name来对内容进行选取</span></span><br><span class="line">user_list = db_session.query(User.name).all()</span><br><span class="line">print(user_list)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> user_list:</span><br><span class="line">    print(row.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 别名映射  name as nick</span></span><br><span class="line">user_list = db_session.query(User.name.label(<span class="string">&quot;nick&quot;</span>)).all()</span><br><span class="line">print(user_list)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> user_list:</span><br><span class="line">    print(row.nick) <span class="comment"># 这里要写别名了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选条件格式</span></span><br><span class="line">user_list = db_session.query(User).filter(User.name == <span class="string">&quot;张学友&quot;</span>).all()</span><br><span class="line">user_list = db_session.query(User).filter(User.name == <span class="string">&quot;张学友&quot;</span>).first()</span><br><span class="line">user_list = db_session.query(User).filter_by(name=<span class="string">&quot;张学友&quot;</span>).first()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> user_list:</span><br><span class="line">    print(row.nick)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂查询</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line">user_list = db_session.query(User).filter(text(<span class="string">&quot;id&lt;:value and name=:name&quot;</span>)).params(value=<span class="number">3</span>,name=<span class="string">&quot;张学友&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询语句</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line">user_list = db_session.query(User).filter(text(<span class="string">&quot;select * from User id&lt;:value and name=:name&quot;</span>)).params(value=<span class="number">3</span>,name=<span class="string">&quot;张学友&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序 :</span></span><br><span class="line">user_list = db_session.query(User).order_by(User.id).all()</span><br><span class="line">user_list = db_session.query(User).order_by(User.id.desc()).all()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> user_list:</span><br><span class="line">    print(row.name,row.id)</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他查询条件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ret = session.query(User).filter_by(name=&#x27;张学友&#x27;).all()</span></span><br><span class="line"><span class="string">ret = session.query(User).filter(User.id &gt; 1, User.name == &#x27;张学友&#x27;).all()</span></span><br><span class="line"><span class="string">ret = session.query(User).filter(User.id.between(1, 3), User.name == &#x27;张学友&#x27;).all() # between 大于1小于3的</span></span><br><span class="line"><span class="string">ret = session.query(User).filter(User.id.in_([1,3,4])).all() # in_([1,3,4]) 只查询id等于1,3,4的</span></span><br><span class="line"><span class="string">ret = session.query(User).filter(~User.id.in_([1,3,4])).all() # ~xxxx.in_([1,3,4]) 查询不等于1,3,4的</span></span><br><span class="line"><span class="string">ret = session.query(User).filter(User.id.in_(session.query(User.id).filter_by(name=&#x27;张学友&#x27;))).all() 子查询</span></span><br><span class="line"><span class="string">from sqlalchemy import and_, or_</span></span><br><span class="line"><span class="string">ret = session.query(User).filter(and_(User.id &gt; 3, User.name == &#x27;张学友&#x27;)).all()</span></span><br><span class="line"><span class="string">ret = session.query(User).filter(or_(User.id &lt; 2, User.name == &#x27;张学友&#x27;)).all()</span></span><br><span class="line"><span class="string">ret = session.query(User).filter(</span></span><br><span class="line"><span class="string">    or_(</span></span><br><span class="line"><span class="string">        User.id &lt; 2,</span></span><br><span class="line"><span class="string">        and_(User.name == &#x27;eric&#x27;, User.id &gt; 3),</span></span><br><span class="line"><span class="string">        User.extra != &quot;&quot;</span></span><br><span class="line"><span class="string">    )).all()</span></span><br><span class="line"><span class="string"># select * from User where id&lt;2 or (name=&quot;eric&quot; and id&gt;3) or extra != &quot;&quot; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 通配符</span></span><br><span class="line"><span class="string">ret = db_session.query(User).filter(User.name.like(&#x27;e%&#x27;)).all()</span></span><br><span class="line"><span class="string">ret = db_session.query(User).filter(~User.name.like(&#x27;e%&#x27;)).all()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 限制</span></span><br><span class="line"><span class="string">ret = db_session.query(User)[1:2]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 排序</span></span><br><span class="line"><span class="string">ret = db_session.query(User).order_by(User.name.desc()).all()</span></span><br><span class="line"><span class="string">ret = db_session.query(User).order_by(User.name.desc(), User.id.asc()).all()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 分组</span></span><br><span class="line"><span class="string">from sqlalchemy.sql import func</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ret = db_session.query(User).group_by(User.extra).all()</span></span><br><span class="line"><span class="string">ret = db_session.query(</span></span><br><span class="line"><span class="string">    func.max(User.id),</span></span><br><span class="line"><span class="string">    func.sum(User.id),</span></span><br><span class="line"><span class="string">    func.min(User.id)).group_by(User.name).all()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ret = db_session.query(</span></span><br><span class="line"><span class="string">    func.max(User.id),</span></span><br><span class="line"><span class="string">    func.sum(User.id),</span></span><br><span class="line"><span class="string">    func.min(User.id)).group_by(User.name).having(func.min(User.id) &gt;2).all()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">db_session.close()</span><br></pre></td></tr></table></figure>

<h2 id="高级修改"><a href="#高级修改" class="headerlink" title="高级修改"></a>高级修改</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#高级版更新操作</span></span><br><span class="line"><span class="keyword">from</span> alchemy_db <span class="keyword">import</span> User,conn</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(conn)</span><br><span class="line">db_session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接修改</span></span><br><span class="line">db_session.query(User).filter(User.id &gt; <span class="number">0</span>).update(&#123;<span class="string">&quot;name&quot;</span> : <span class="string">&quot;郑学友&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在原有值基础上添加 - 1</span></span><br><span class="line">db_session.query(User).filter(User.id &gt; <span class="number">0</span>).update(&#123;User.name: User.name + <span class="string">&quot;099&quot;</span>&#125;, synchronize_session=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在原有值基础上添加 - 2</span></span><br><span class="line">db_session.query(User).filter(User.id &gt; <span class="number">0</span>).update(&#123;<span class="string">&quot;age&quot;</span>: User.age + <span class="number">1</span>&#125;, synchronize_session=<span class="string">&quot;evaluate&quot;</span>)</span><br><span class="line">db_session.commit()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>SQLAlchemy</tag>
        <tag>SQLAlchemy添加数据</tag>
        <tag>SQLAlchemy修改</tag>
        <tag>SQLAlchemy删除</tag>
        <tag>SQLAlchemy查询</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy之scrapy-redis分布式爬虫</title>
    <url>/44767e0f.html</url>
    <content><![CDATA[<p> <code>scrapy-redis</code>是<code>scrapy</code>框架基于<code>redis</code>数据库的组件，用于<code>scrapy</code>项目的分布式开发和部署。 </p>
<a id="more"></a>

<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><h3 id="分布式爬取"><a href="#分布式爬取" class="headerlink" title="分布式爬取"></a>分布式爬取</h3><p>　　您可以启动多个spider工程，相互之间共享单个<code>redis</code>的<code>requests</code>队列。最适合广泛的多个域名网站的内容爬取。</p>
<h3 id="分布式数据处理"><a href="#分布式数据处理" class="headerlink" title="分布式数据处理"></a>分布式数据处理</h3><p>　　爬取到的<code>scrapy</code>的<code>item</code>数据可以推入到<code>redis</code>队列中，这意味着你可以根据需求启动尽可能多的处理程序来共享<code>item</code>的队列，进行<code>item</code>数据持久化处理</p>
<h3 id="Scrapy即插即用组件"><a href="#Scrapy即插即用组件" class="headerlink" title="Scrapy即插即用组件"></a><code>Scrapy</code>即插即用组件</h3><p>　　<code>Scheduler</code>调度器 + <code>Duplication</code>复制 过滤器，<code>Item Pipeline</code>，基本<code>spider</code></p>
<h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><h2 id="安装组件"><a href="#安装组件" class="headerlink" title="安装组件"></a>安装组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install scrapy-redis</span><br></pre></td></tr></table></figure>

<h2 id="redis修改配置文件"><a href="#redis修改配置文件" class="headerlink" title="redis修改配置文件"></a><code>redis</code>修改配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 注释该行：bind 127.0.0.1，表示可以让其他ip访问redis</span><br><span class="line"></span><br><span class="line">- 将yes该为no：protected-mode no，表示可以让其他ip操作redis</span><br></pre></td></tr></table></figure>

<h2 id="爬虫文件"><a href="#爬虫文件" class="headerlink" title="爬虫文件"></a>爬虫文件</h2><p>将爬虫类的父类修改成基于<code>RedisSpider</code>或者<code>RedisCrawlSpider</code>。注意：如果原始爬虫文件是基于<code>Spider</code>的，则应该将父类修改成<code>RedisSpider</code>，如果原始爬虫文件是基于<code>CrawlSpider</code>的，则应该将其父类修改成<code>RedisCrawlSpider</code>； 注释或者删除<code>start_urls</code>列表，且加入<code>redis_key</code>属性，属性值为<code>scrpy-redis</code>组件中调度器队列的名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Rule</span><br><span class="line"><span class="keyword">from</span> scrapy_redis.spiders <span class="keyword">import</span> RedisCrawlSpider</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> redisscrapy.items <span class="keyword">import</span> RedisscrapyItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiandianSpider</span>(<span class="params">RedisCrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;diandian&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.diandian100.cn&#x27;]</span></span><br><span class="line">    <span class="comment"># start_urls = [&#x27;http://www.diandian100.cn/&#x27;]</span></span><br><span class="line"></span><br><span class="line">    redis_key = <span class="string">&#x27;diandianredis&#x27;</span></span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;/page/\d+/&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        posts = response.xpath(<span class="string">&#x27;//div[@class=&quot;posts-expand&quot;]/article&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">            print(post)</span><br><span class="line">            <span class="comment"># 取出该条文章第一个link标签下的href属性值</span></span><br><span class="line">            url = post.xpath(<span class="string">&#x27;./link/@href&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 在该条文章html中搜索h2标签下的第一个a标签的内容</span></span><br><span class="line">            tit = post.xpath(<span class="string">&#x27;.//h2/a/text()&#x27;</span>).extract_first()</span><br><span class="line">            <span class="keyword">yield</span> RedisscrapyItem(url=url, tit=tit)</span><br><span class="line">        <span class="comment"># return item</span></span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启管道</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapy_redis.pipelines.RedisPipeline&#x27;</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用scrapy-redis组件的去重队列</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span></span><br><span class="line"><span class="comment"># 使用scrapy-redis组件自己的调度器</span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span></span><br><span class="line"><span class="comment"># 是否允许暂停</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">REDIS_HOST = <span class="string">&#x27;redis服务的ip地址&#x27;</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line">REDIS_ENCODING = ‘utf<span class="number">-8</span>’</span><br><span class="line">REDIS_PARAMS = &#123;‘password’:’<span class="number">123456</span>’&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动redis服务器"><a href="#启动redis服务器" class="headerlink" title="启动redis服务器"></a>启动<code>redis</code>服务器</h2><p>使用修改后的<code>redis</code>配置文件来启动<code>redis</code>服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server 配置文件</span><br></pre></td></tr></table></figure>

<h2 id="启动redis客户端"><a href="#启动redis客户端" class="headerlink" title="启动redis客户端"></a>启动<code>redis</code>客户端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<h2 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h2><p>要进入爬虫目录，使用一下命令运行爬虫文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy runspider 爬虫文件名</span><br></pre></td></tr></table></figure>

<h2 id="开始爬取"><a href="#开始爬取" class="headerlink" title="开始爬取"></a>开始爬取</h2><p>在<code>redis</code>客户端中丢入要爬取的页面起始<code>url</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lpush diandianredis https:&#x2F;&#x2F;www.diandian100.cn</span><br></pre></td></tr></table></figure>

<p>以上就是分布式的完整示例</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>Scrapy之scrapy-redis分布式爬虫</tag>
        <tag>scrapy-redis</tag>
        <tag>分布式爬虫</tag>
        <tag>分布式爬取</tag>
        <tag>scrapy-redis分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy之增量式爬虫</title>
    <url>/831012e0.html</url>
    <content><![CDATA[<p> 当我们在浏览相关网页的时候会发现，某些网站定时会在原有网页数据的基础上更新一批数据，例如某电影网站会实时更新一批最近热门的电影。小说网站会根据作者创作的进度实时更新最新的章节数据等等。那么，类似的情景，当我们在爬虫的过程中遇到时，我们是不是需要定时更新程序以便能爬取到网站中最近更新的数据呢？ </p>
<a id="more"></a>

<h2 id="增量式爬虫"><a href="#增量式爬虫" class="headerlink" title="增量式爬虫"></a>增量式爬虫</h2><ul>
<li><p>概念：通过爬虫程序监测某网站数据更新的情况，以便可以爬取到该网站更新出的新数据。</p>
</li>
<li><p>如何进行增量式的爬取工作：</p>
<ul>
<li><p>在发送请求之前判断这个URL是不是之前爬取过</p>
</li>
<li><p>在解析内容后判断这部分内容是不是之前爬取过</p>
</li>
<li><p>写入存储介质时判断内容是不是已经在介质中存在</p>
<ul>
<li><p>分析：</p>
<p>   不难发现，其实增量爬取的核心是<strong>去重</strong>， 至于去重的操作在哪个步骤起作用，只能说各有利弊。在我看来，前两种思路需要根据实际情况取一个（也可能都用）。第一种思路适合不断有新页面出现的网站，比如说小说的新章节，每天的最新新闻等等；第二种思路则适合页面内容会更新的网站。第三个思路是相当于是最后的一道防线。这样做可以最大程度上达到去重的目的。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>去重方法</p>
<ul>
<li>将爬取过程中产生的<code>url</code>进行存储，存储在<code>redis</code>的<code>set</code>中。当下次进行数据爬取时，首先对即将要发起的请求对应的<code>url</code>在存储的<code>url</code>的<code>set</code>中做判断，如果存在则不进行请求，否则才进行请求。</li>
<li>对爬取到的网页内容进行唯一标识的制定，然后将该唯一表示存储至<code>redis</code>的<code>set</code>中。当下次爬取到网页数据的时候，在进行持久化存储之前，首先可以先判断该数据的唯一标识在<code>redis</code>的<code>set</code>中是否存在，在决定是否进行持久化存储。</li>
</ul>
</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>我们这里使用一个示例来演示增量式爬虫，我们这里原本要爬取糗事百科，无奈访问的时候正值糗事百科官方升级，随便爬取了笑话网来演示吧。</p>
<h3 id="爬虫文件"><a href="#爬虫文件" class="headerlink" title="爬虫文件"></a>爬虫文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapyIncremental.items <span class="keyword">import</span> ScrapyincrementalItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuanziwangSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;duanziwang&#x27;</span></span><br><span class="line">    <span class="comment"># 起始url</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://xiaohua.zol.com.cn/lengxiaohua/1.html&#x27;</span>]</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 其他列表页规则</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;/lengxiaohua/\d+\.html&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析每页数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># 连接redis并实例化redis</span></span><br><span class="line">        conn = Redis(host=<span class="string">&#x27;127.0.0.7&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line">        <span class="comment"># 解析笑话列表</span></span><br><span class="line">        posts = response.xpath(<span class="string">&#x27;//*[@class=&quot;article-list&quot;]/li&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    	<span class="comment"># 循环解析每条笑话，取出每条笑话标题和内容</span></span><br><span class="line">        <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">            tit = post.xpath(<span class="string">&#x27;./span[2]/a/text()&#x27;</span>).extract_first()</span><br><span class="line">            content = post.xpath(<span class="string">&#x27;./div[2]/text()&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">            item = ScrapyincrementalItem()</span><br><span class="line">            item[<span class="string">&#x27;tit&#x27;</span>] = tit</span><br><span class="line">            item[<span class="string">&#x27;content&#x27;</span>] = content</span><br><span class="line">    		<span class="comment"># 加密该条笑话标题和内容</span></span><br><span class="line">            hash_str = hashlib.sha256((tit+content).encode()).hexdigest()</span><br><span class="line">            <span class="comment"># 将哈希后的笑话串添加到redis set集合中</span></span><br><span class="line">            redis_save_res = conn.sadd(<span class="string">&#x27;duanzi_hash&#x27;</span>, hash_str)</span><br><span class="line">            <span class="comment"># 如果redis返回1说明集合中没有该条笑话，反之已经爬取过了</span></span><br><span class="line">            <span class="keyword">if</span> redis_save_res == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">yield</span> item</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">f&#x27;【<span class="subst">&#123;tit&#125;</span>】已经爬取过了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="item文件"><a href="#item文件" class="headerlink" title="item文件"></a><code>item</code>文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 笑话标题和内容</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapyincrementalItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">   tit = scrapy.Field()</span><br><span class="line">   content = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="管道文件"><a href="#管道文件" class="headerlink" title="管道文件"></a>管道文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapyincrementalPipeline</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.conn = Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line">	<span class="comment"># 将该条笑话存入redis</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;爬取到一条【%s】,正在入库......&#x27;</span> % item[<span class="string">&#x27;tit&#x27;</span>])</span><br><span class="line">        res = self.conn.lpush(<span class="string">&#x27;duanzi_data&#x27;</span>, str(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>爬取依次后再次爬取，已爬取过的笑话会提示爬取过了，不会再重新爬取。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>scrapy-redis</tag>
        <tag>增量式爬虫</tag>
        <tag>去重爬虫</tag>
        <tag>去重爬取</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy利用中间件使用UA和代理IP池</title>
    <url>/2390e565.html</url>
    <content><![CDATA[<p>爬取页面过程中免不了目标网站做了反爬虫机制，我们也要相应的有反反爬虫策略来应对，最基本的<code>user-agent</code>和<code>ip</code>我们在爬取一些特别是相对来说知名的网站，目标肯定做了反爬虫机制，我们就要随机的改变下我们爬虫的<code>user-agent</code>和访问<code>ip</code>。</p>
<a id="more"></a>

<p>下图是<code>Scrapy</code>的五大组件示意图：</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191108151049.png"></p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p> 下载中间件（<code>Downloader Middlewares</code>） 位于<code>scrapy</code>引擎和下载器之间的一层组件。 </p>
<p>（1）引擎将请求传递给下载器过程中， 下载中间件可以对请求进行一系列处理。比如设置请求的 <code>User-Agent</code>，设置代理等</p>
<p>（2）在下载器完成将<code>Response</code>传递给引擎中，下载中间件可以对响应进行一系列处理。比如进行<code>gzip</code>解压等</p>
<h2 id="user-agent池"><a href="#user-agent池" class="headerlink" title="user-agent池"></a><code>user-agent</code>池</h2><p> 作用：尽可能多的将<code>scrapy</code>工程中的请求伪装成不同类型的浏览器身份。 </p>
<p>操作流程：</p>
<p>  1.在下载中间件中拦截请求</p>
<p>  2.将拦截到的请求的请求头信息中的<code>UA</code>进行篡改伪装</p>
<p>  3.在配置文件中开启下载中间件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> scrapy.contrib.downloadermiddleware.useragent <span class="keyword">import</span> UserAgentMiddleware</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-agent池</span></span><br><span class="line">user_agent_list = [</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 &quot;</span></span><br><span class="line">        <span class="string">&quot;(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># UA池代码的编写（单独给UA池封装一个下载中间件的一个类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgent</span>(<span class="params">UserAgentMiddleware</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment"># 从列表中随机抽选出一个ua值</span></span><br><span class="line">        ua = random.choice(user_agent_list)</span><br><span class="line">        <span class="comment"># ua值进行当前拦截到请求的ua的写入操作</span></span><br><span class="line">        request.headers.setdefault(<span class="string">&#x27;User-Agent&#x27;</span>,ua)</span><br></pre></td></tr></table></figure>

<h2 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h2><p>- 作用：尽可能多的将<code>scrapy</code>工程中的请求的·设置成不同的。</p>
<p>- 操作流程：</p>
<p>  1.在下载中间件中拦截请求</p>
<p>  2.将拦截到的请求的<code>IP</code>修改成某一代理<code>IP</code></p>
<p>  3.在配置文件中开启下载中间件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#批量对拦截到的请求进行ip更换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可被选用的代理IP池</span></span><br><span class="line">PROXY_http = [</span><br><span class="line">    <span class="string">&#x27;153.180.102.104:80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;195.208.131.189:56055&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">PROXY_https = [</span><br><span class="line">    <span class="string">&#x27;120.83.49.90:9000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;95.189.112.214:35508&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#单独封装下载中间件类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment">#对拦截到请求的url进行判断（协议头到底是http还是https）</span></span><br><span class="line">        <span class="comment">#request.url返回值：http://www.xxx.com</span></span><br><span class="line">        h = request.url.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]  <span class="comment">#请求的协议头</span></span><br><span class="line">        <span class="keyword">if</span> h == <span class="string">&#x27;https&#x27;</span>:</span><br><span class="line">            ip = random.choice(PROXY_https)</span><br><span class="line">            request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&#x27;https://&#x27;</span>+ip</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip = random.choice(PROXY_http)</span><br><span class="line">            request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&#x27;http://&#x27;</span> + ip</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>Scrapy代理池</tag>
        <tag>scrapy ua池</tag>
        <tag>scrapy user-agent</tag>
        <tag>scrapy爬虫</tag>
        <tag>scrapy反爬虫</tag>
        <tag>scrapy反反爬虫</tag>
        <tag>scrapy更换ip</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy日志等级与请求传参</title>
    <url>/fe16a914.html</url>
    <content><![CDATA[<p>运行爬虫时，控制台会打印出<code>scrapy</code>日志信息，我们可以控制<code>scrapy</code>日志显示等级。</p>
<a id="more"></a>

<h2 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h2><p>我们不管使用何种编程语言编写程序，关于日志基本上我们都是分为4类<code>INFO</code>/<code>WARNING</code>/<code>ERROR</code>/~。我们控制日志等级输出可以在<code>settings.py</code>中配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只显示错误日志</span></span><br><span class="line">LOG_LEVEL = ‘ERROR’</span><br><span class="line"><span class="comment"># 则表示将日志信息写入到指定文件中进行存储。</span></span><br><span class="line">LOG_FILE = <span class="string">&#x27;log.txt&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="请求传参"><a href="#请求传参" class="headerlink" title="请求传参"></a>请求传参</h2><p> 在某些情况下，我们爬取的数据不在同一个页面中，例如，我们爬取一个电影网站，电影的名称，评分在一级页面，而要爬取的其他电影详情在其二级子页面中。这时我们就需要用到请求传参。 </p>
<p>我们这里直接通过一个案例来演示如何在请求的时候进行传参。</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>爬取电影列表页中的电影名称，并获取该电影对应详情页中的电影简介。</p>
<h4 id="爬虫文件"><a href="#爬虫文件" class="headerlink" title="爬虫文件"></a>爬虫文件</h4><p><code>4567tv.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapyBiography.items <span class="keyword">import</span> ScrapybiographyItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A4567tvtvSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;4567tvtv&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.4567tv.tv&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.4567tv.tv/index.php/vod/show/id/5.html&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析详情页</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_info</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># 解析详情页电影简介</span></span><br><span class="line">        desc = response.xpath(<span class="string">&#x27;//*[@class=&quot;detail-sketch&quot;]/text()&#x27;</span>).extract_first()</span><br><span class="line">        <span class="comment"># 提交item给管道</span></span><br><span class="line">        <span class="keyword">yield</span> ScrapybiographyItem(tit = response.meta[<span class="string">&#x27;tit&#x27;</span>], desc = desc)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># 获取电影列表</span></span><br><span class="line">        videos = response.xpath(<span class="string">&#x27;//*[@class=&quot;stui-vodlist clearfix&quot;]/li/div&#x27;</span>)</span><br><span class="line">        <span class="comment"># 循环解析每个电影</span></span><br><span class="line">        <span class="keyword">for</span> video <span class="keyword">in</span> videos:</span><br><span class="line">            <span class="comment"># 获取该电影的url</span></span><br><span class="line">            video_url = <span class="string">&#x27;https://www.4567tv.tv&#x27;</span>+video.xpath(<span class="string">&#x27;./a/@href&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 获取该电影的标题</span></span><br><span class="line">            video_tit = video.xpath(<span class="string">&#x27;./a/@title&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 请求电影详情页面，解析详情页面中相应的内容，通过meta参数进行Request的数据传递，将meta中的数据传递给parse_info函数</span></span><br><span class="line">            <span class="keyword">yield</span> Request(url=video_url, callback=self.parse_info, meta=&#123;<span class="string">&quot;tit&quot;</span>:video_tit&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a><code>items.py</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ScrapybiographyItem(scrapy.Item):</span><br><span class="line">	# 接收电影标题和简介</span><br><span class="line">    tit &#x3D; scrapy.Field()</span><br><span class="line">    desc &#x3D; scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="管道文件"><a href="#管道文件" class="headerlink" title="管道文件"></a>管道文件</h4><p><code>pipelines.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapybiographyPipeline</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始爬取&#x27;</span>)</span><br><span class="line">        <span class="comment"># 打开文件句柄</span></span><br><span class="line">        self.f = open(<span class="string">&#x27;movie.log&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment"># 将标题和简介写入文件</span></span><br><span class="line">        self.f.write(<span class="string">&#x27;【&#x27;</span>+item[<span class="string">&#x27;tit&#x27;</span>]+<span class="string">&#x27;】-&#x27;</span>+item[<span class="string">&#x27;desc&#x27;</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        print(item[<span class="string">&#x27;tit&#x27;</span>]+<span class="string">&#x27; 下载完成……&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="comment"># 关闭文件句柄</span></span><br><span class="line">        self.f.close()</span><br><span class="line">        print(<span class="string">&#x27;爬取完成&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="执行爬虫"><a href="#执行爬虫" class="headerlink" title="执行爬虫"></a>执行爬虫</h4><p>电影标题和简介成功写入到了文件中</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>Scrapy日志等级与请求传参</tag>
        <tag>scrapy日志</tag>
        <tag>scrapy日志等级</tag>
        <tag>scrapy传参</tag>
        <tag>scrapy请求传参</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy框架之CrawlSpider</title>
    <url>/2e94b40e.html</url>
    <content><![CDATA[<p> <code>CrawlSpider</code>其实是<code>Spider</code>的一个子类，除了继承到<code>Spider</code>的特性和功能外，还派生除了其自己独有的更加强大的特性和功能。其中最显著的功能就是”<code>LinkExtractors</code>链接提取器“。是所有爬虫的基类，其设计原则只是为了爬取<code>start_url</code>列表中网页，而从爬取到的网页中提取出的<code>url</code>进行继续的爬取工作使用<code>CrawlSpider</code>更合适。 </p>
<a id="more"></a>前我们爬取起始页面以外的其他列表页时，使用了递归爬取的方式，即使用 `Request`模块递归回调`parse`方法 ，不太熟悉可参考[递归的访问](https://www.diandian100.cn/64071ba.html#%E9%80%92%E5%BD%92%E7%9A%84%E8%AE%BF%E9%97%AE)。今天我们通过使用`CrawlSpider`来进行目标爬取，感受下写原生递归爬取有何不同及优势。

<h2 id="创建爬虫工程"><a href="#创建爬虫工程" class="headerlink" title="创建爬虫工程"></a>创建爬虫工程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scrapy startproject mySpider</span><br></pre></td></tr></table></figure>

<h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入爬虫工程</span><br><span class="line">cd mySpider</span><br><span class="line"># 创建爬虫</span><br><span class="line">scrapy genspider -t crawl chouti www.chouti.com</span><br></pre></td></tr></table></figure>

<h2 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h2><p> <code>CrawlSpider</code>类和<code>Spider</code>类的最大不同是<code>CrawlSpider</code>多了一个<code>rules</code>属性，其作用是定义”提取动作“。在<code>rules</code>中可以包含一个或多个<code>Rule</code>对象，在Rule对象中包含了<code>LinkExtractor</code>对象。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="comment"># 导入CrawlSpider相关模块</span></span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoutidemoSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;choutiDemo&#x27;</span></span><br><span class="line">    <span class="comment">#allowed_domains = [&#x27;www.chouti.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.chouti.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表示为提取Link规则（页码链接正则匹配）</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;Items/&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line">	<span class="comment"># 解析列表每条标题等属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        i = &#123;&#125;</span><br><span class="line">        <span class="comment">#i[&#x27;domain_id&#x27;] = response.xpath(&#x27;//input[@id=&quot;sid&quot;]/@value&#x27;).extract()</span></span><br><span class="line">        <span class="comment">#i[&#x27;name&#x27;] = response.xpath(&#x27;//div[@id=&quot;name&quot;]&#x27;).extract()</span></span><br><span class="line">        <span class="comment">#i[&#x27;description&#x27;] = response.xpath(&#x27;//div[@id=&quot;description&quot;]&#x27;).extract()</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>

<h3 id="LinkExtractor"><a href="#LinkExtractor" class="headerlink" title="LinkExtractor"></a><code>LinkExtractor</code></h3><p> 链接提取器，用来提取<code>response</code>中符合规则的链接。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LinkExtractor(</span><br><span class="line">　　　　　　　  allow=<span class="string">r&#x27;Items/&#x27;</span>，<span class="comment"># 满足括号中“正则表达式”的值会被提取，如果为空，则全部匹配。</span></span><br><span class="line">　　　　　　　　 deny=xxx,  <span class="comment"># 满足正则表达式的则不会被提取。</span></span><br><span class="line">　　　　　　　　 restrict_xpaths=xxx, <span class="comment"># 满足xpath表达式的值会被提取</span></span><br><span class="line">　　　　　　　　 restrict_css=xxx, <span class="comment"># 满足css表达式的值会被提取</span></span><br><span class="line">　　　　　　　　 deny_domains=xxx, <span class="comment"># 不会被提取的链接的domains。　</span></span><br><span class="line">　　  )</span><br></pre></td></tr></table></figure>

<h3 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a><code>Rule</code></h3><p> 规则解析器。根据链接提取器中提取到的链接，根据指定规则提取解析器链接网页中的内容。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Rule(LinkExtractor(allow=<span class="string">r&#x27;Items/&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>参数1：指定链接提取器；参数2：指定规则解析器解析数据的规则（回调函数）；参数3：是否将链接提取器继续作用到链接提取器提取出的链接网页中。当<code>callback</code>为<code>None</code>,参数3的默认值为<code>true</code>。</p>
<h3 id="rules"><a href="#rules" class="headerlink" title="rules"></a><code>rules</code></h3><p> 指定不同规则解析器。一个Rule对象表示一种提取规则。 </p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>a)爬虫文件首先根据起始<code>url</code>，获取该<code>url</code>的网页内容</p>
<p>b)链接提取器会根据指定提取规则将步骤a中网页内容中的链接进行提取</p>
<p>c)规则解析器会根据指定解析规则将链接提取器中提取到的链接中的网页内容根据指定的规则进行解析</p>
<p>d)将解析数据封装到<code>item</code>中，然后提交给管道进行持久化存储</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="爬取糗图所有列表页面"><a href="#爬取糗图所有列表页面" class="headerlink" title="爬取糗图所有列表页面"></a>爬取糗图所有列表页面</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrawldemoSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;qiubai&#x27;</span></span><br><span class="line">    <span class="comment">#allowed_domains = [&#x27;www.qiushibaike.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.qiushibaike.com/pic/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#连接提取器：会去起始url响应回来的页面中提取指定的url</span></span><br><span class="line">    link = LinkExtractor(allow=<span class="string">r&#x27;/pic/page/\d+\?&#x27;</span>) <span class="comment">#s=为随机数</span></span><br><span class="line">    link1 = LinkExtractor(allow=<span class="string">r&#x27;/pic/$&#x27;</span>)<span class="comment">#爬取第一页</span></span><br><span class="line">    <span class="comment">#rules元组中存放的是不同的规则解析器（封装好了某种解析规则)</span></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment">#规则解析器：可以将连接提取器提取到的所有连接表示的页面进行指定规则（回调函数）的解析</span></span><br><span class="line">        Rule(link, callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(link1, callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line">	<span class="comment"># 解析页面数据，并打印</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        print(response)</span><br></pre></td></tr></table></figure>

<h4 id="爬取糗图作者内容"><a href="#爬取糗图作者内容" class="headerlink" title="爬取糗图作者内容"></a>爬取糗图作者内容</h4><h5 id="爬虫文件"><a href="#爬虫文件" class="headerlink" title="爬虫文件"></a>爬虫文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> qiubaiBycrawl.items <span class="keyword">import</span> QiubaibycrawlItem</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiubaitestSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;qiubaiTest&#x27;</span></span><br><span class="line">    <span class="comment">#起始url</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.qiushibaike.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义链接提取器，且指定其提取规则</span></span><br><span class="line">    page_link = LinkExtractor(allow=<span class="string">r&#x27;/8hr/page/\d+/&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment">#定义规则解析器，且指定解析规则通过callback回调函数</span></span><br><span class="line">        Rule(page_link, callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">#自定义规则解析器的解析规则函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        div_list = response.xpath(<span class="string">&#x27;//div[@id=&quot;content-left&quot;]/div&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">            <span class="comment">#定义item</span></span><br><span class="line">            item = QiubaibycrawlItem()</span><br><span class="line">            <span class="comment">#根据xpath表达式提取糗百中段子的作者</span></span><br><span class="line">            item[<span class="string">&#x27;author&#x27;</span>] = div.xpath(<span class="string">&#x27;./div/a[2]/h2/text()&#x27;</span>).extract_first().strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment">#根据xpath表达式提取糗百中段子的内容</span></span><br><span class="line">            item[<span class="string">&#x27;content&#x27;</span>] = div.xpath(<span class="string">&#x27;.//div[@class=&quot;content&quot;]/span/text()&#x27;</span>).extract_first().strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> item <span class="comment">#将item提交至管道</span></span><br></pre></td></tr></table></figure>

<h5 id="item文件"><a href="#item文件" class="headerlink" title="item文件"></a><code>item</code>文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiubaibycrawlItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    author = scrapy.Field() <span class="comment">#作者</span></span><br><span class="line">    content = scrapy.Field() <span class="comment">#内容</span></span><br></pre></td></tr></table></figure>

<h5 id="管道文件"><a href="#管道文件" class="headerlink" title="管道文件"></a>管道文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiubaibycrawlPipeline</span>(<span class="params">object</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fp = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始爬虫&#x27;</span>)</span><br><span class="line">        self.fp = open(<span class="string">&#x27;./data.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment">#将爬虫文件提交的item写入文件进行持久化存储</span></span><br><span class="line">        self.fp.write(item[<span class="string">&#x27;author&#x27;</span>]+<span class="string">&#x27;:&#x27;</span>+item[<span class="string">&#x27;content&#x27;</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;结束爬虫&#x27;</span>)</span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>Scrapy框架之CrawlSpider</tag>
        <tag>LinkExtractor</tag>
        <tag>Rule</tag>
        <tag>CrawlSpider</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkCMF阿里云虚拟主机配置</title>
    <url>/ad8b0cf6.html</url>
    <content><![CDATA[<p>以下是<code>ThinkCMF</code>官方为我们提供的如何在虚拟主机中部署，本人也没有一个一个尝试过，只是有朋友让帮忙出个站，因为用过<code>tp</code>索性直接拉了这个<code>cms</code>，因为底层文件全部放在了网站目录外，不像云服务器随意我们配置网站目录，刚用个阿里云的虚拟机就出现了问题，<code>ftp</code>根目录不让我们创建文件夹，甚至修改原有文件夹的名字的权限都不给，所以在官方文档的基础上，遵循阿里云虚拟机的规则下来稍微修改下配置就可以了。</p>
<a id="more"></a>

<h2 id="如何在虚拟机部署-ThinkCMF5-1？"><a href="#如何在虚拟机部署-ThinkCMF5-1？" class="headerlink" title="如何在虚拟机部署 ThinkCMF5.1？"></a>如何在虚拟机部署 <code>ThinkCMF5.1</code>？</h2><p>在 <code>public/index.php</code> 文件中有个常量<code>CMF_ROOT</code>;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义CMF根目录,可更改此目录</span><br><span class="line">define(&#39;CMF_ROOT&#39;, __DIR__ . &#39;&#x2F;..&#x2F;&#39;);</span><br></pre></td></tr></table></figure>

<p>这个常量定义了 <code>ThinkCMF</code>根目录的地址，<code>public</code>目录是个例外，它是程序的 web 根目录，也就说这个目录可以随意调整，对有自己服务器的同学，可以直接把 <code>public</code> 目录当网站根目录，但对于虚拟机可能无法直接把 public 当网站根目录。</p>
<p>今天我们来说一下怎么在虚拟机部署 <code>ThinkCMF5.1</code> ？</p>
<p>一般空间目录结构基本是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wwwroot(或 www)</span><br><span class="line">logs</span><br><span class="line">data</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这时<code>thinkcmf</code> 默认的结构并不适用空间目录结构，因为空间的网站根目录是 <code>wwwroot</code> 或 <code>www</code>，这时我们就要对默认的 <code>cmf</code> 进行改造了，其实很简单。</p>
<p>我们可以 <code>thinkcmf</code> 放到 <code>wwwroot</code> 之外，比如放在空间根目录的 <code>thinkcmf</code> 目录里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wwwroot(或 www)</span><br><span class="line">logs</span><br><span class="line">data</span><br><span class="line">...</span><br><span class="line">thinkcmf</span><br><span class="line">    app</span><br><span class="line">    data</span><br><span class="line">    public</span><br><span class="line">        index.php</span><br><span class="line">        ...</span><br><span class="line">    vendor</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>然后把 public 目录的所有文件都移动到 wwwroot 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wwwroot(或 www)</span><br><span class="line">    static</span><br><span class="line">    upload</span><br><span class="line">    index.php</span><br><span class="line">    ...</span><br><span class="line">logs</span><br><span class="line">data</span><br><span class="line">...</span><br><span class="line">thinkcmf</span><br><span class="line">    app</span><br><span class="line">    data</span><br><span class="line">    public</span><br><span class="line">    vendor</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>这时我们再改一下 <code>index.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义CMF根目录,可更改此目录</span><br><span class="line">define(&#39;CMF_ROOT&#39;, __DIR__ . &#39;&#x2F;..&#x2F;thinkcmf&#x2F;&#39;);&#x2F;&#x2F;NOTE 我改过了</span><br></pre></td></tr></table></figure>

<p>下在完整 <code>index.php</code> 下如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; +----------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; | ThinkCMF [ WE CAN DO IT MORE SIMPLE ]</span><br><span class="line">&#x2F;&#x2F; +----------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; | Copyright (c) 2013-2019 http:&#x2F;&#x2F;www.thinkcmf.com All rights reserved.</span><br><span class="line">&#x2F;&#x2F; +----------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; | Author: 老猫 &lt;zxxjjforever@163.com&gt;</span><br><span class="line">&#x2F;&#x2F; +----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">namespace think;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; [ 入口文件 ]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调试模式开关</span><br><span class="line">define(&#39;APP_DEBUG&#39;, true);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义CMF根目录,可更改此目录</span><br><span class="line">define(&#39;CMF_ROOT&#39;, __DIR__ . &#39;&#x2F;..&#x2F;thinkcmf&#x2F;&#39;);&#x2F;&#x2F;NOTE 我改过了</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义CMF数据目录,可更改此目录</span><br><span class="line">define(&#39;CMF_DATA&#39;, CMF_ROOT . &#39;data&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义应用目录</span><br><span class="line">define(&#39;APP_PATH&#39;, CMF_ROOT . &#39;app&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义网站入口目录</span><br><span class="line">define(&#39;WEB_ROOT&#39;, __DIR__ . &#39;&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 加载基础文件</span><br><span class="line">require CMF_ROOT . &#39;vendor&#x2F;thinkphp&#x2F;base.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行应用并响应</span><br><span class="line">Container::get(&#39;app&#39;, [APP_PATH])-&gt;run()-&gt;send();</span><br></pre></td></tr></table></figure>

<p>最后更改<code>vendor/thinkphp/library/think/Loader.php</code>的<code>getRootPath</code>方法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取应用根目录</span><br><span class="line">public static function getRootPath()</span><br><span class="line">&#123;</span><br><span class="line">    return CMF_ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虚拟机部署 <code>ThinkCMF5.1</code> 讲解完毕！</p>
<p>以上官方的讲解，下面说下阿里云虚拟主机的配置，有类似要求的都可以参照：</p>
<h2 id="阿里云虚拟配置"><a href="#阿里云虚拟配置" class="headerlink" title="阿里云虚拟配置"></a>阿里云虚拟配置</h2><p>因为阿里云不允许我们创建及修改目录，但是他给我们提供了几个类似<code>data</code>、<code>log</code>之类的文件夹，其中有一个文件夹<code>myfolder</code>明显是为我们准备的嘛，所以，我们把底层文件全部上传到这个文件夹，将public下的文件全部上传到<code>htdocs</code>文件夹。</p>
<h3 id="修改htdocs-index-php文件"><a href="#修改htdocs-index-php文件" class="headerlink" title="修改htdocs/index.php文件"></a>修改<code>htdocs/index.php</code>文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义CMF根目录,可更改此目录</span><br><span class="line">define(&#39;CMF_ROOT&#39;, __DIR__ . &#39;&#x2F;..&#x2F;myfolder&#x2F;&#39;);&#x2F;&#x2F;NOTE 我改过了</span><br></pre></td></tr></table></figure>

<h3 id="修改Loader-php文件"><a href="#修改Loader-php文件" class="headerlink" title="修改Loader.php文件"></a>修改<code>Loader.php</code>文件</h3><p>该文件目录为<code>/myfoldervendor/thinkphp/library/think/Loader.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取应用根目录</span><br><span class="line">public static function getRootPath()</span><br><span class="line">&#123;</span><br><span class="line">    return CMF_ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次尝试，完美了吧</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>php</category>
        <category>thinkphp</category>
      </categories>
      <tags>
        <tag>ThinkCMF虚拟主机配置</tag>
        <tag>thinkcmf阿里云配置</tag>
        <tag>thinkcmf阿里云虚拟主机配置</tag>
        <tag>虚拟主机配置</tag>
        <tag>tp虚拟主机配置</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP5表单令牌刷新</title>
    <url>/7344513.html</url>
    <content><![CDATA[<p>当我制作一个登录页面时候发现验证码填写错误或者账号密码填写错误重新填写提交时，提示表单令牌错误，这时候就只能重新刷新页面重新填写，不怕麻烦的同学当然没关系了；</p>
<p>其他的账号密码复杂的就麻烦了，也许我只是输错了一个字符，你却让我刷新页面重新填写，未免太可恶了吧，于是当时一脑残想出了第一个办法：</p>
<a id="more"></a>

<p>首次尝试</p>
<p>既然我可以在不刷新页面的时候用js事件来更换验证码，表单令牌不也一样吗？就有了下面的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;[name=&#x27;__token__&#x27;]&quot;</span>).val(<span class="string">&#x27;&#123;$Request.token&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>尝试之后发现这两个表单令牌值一样的，要通过事件更换一样无解啊，想到了用<code>ajax</code>，但是<code>ajax</code>需要有一个地址生成这个token，再写个控制器方法？其实差不多，虽然没写方法，利用了闭包路由</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">&#x27;refresh/token&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Request::token();</span><br><span class="line">&#125;)-&gt;cache(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>这样就有一个随时生成表单令牌的地址了，当你的<code>ajax</code>登录失败的时候，自动刷新<code>token</code>和验证码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.get(<span class="string">&quot;&#123;:url(&#x27;@refresh/token&#x27;)&#125;&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;[name=&#x27;__token__&#x27;]&quot;</span>).val(result);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&#x27;#captcha&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>, $(<span class="string">&#x27;#captcha&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>)+<span class="string">&#x27;?&#x27;</span>+<span class="built_in">Math</span>.random());</span><br></pre></td></tr></table></figure>

<p><strong>修复</strong></p>
<p>因为很久没用<code>tp</code>了，公司赶一个小项目，顺手拉了个5.0做了下，前端表单用到了这个表单令牌，用以上代码竟然报错了，大概意思是不存在这个静态方法，索性换了一种写法，完美。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="comment">//刷新表单令牌；我的token隐藏输入框名字叫做__csrf__，改成你自己的即可</span></span><br><span class="line">Route::get(<span class="string">&#x27;refresh/token&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $request = Request::instance();</span><br><span class="line">    <span class="keyword">return</span> json([<span class="string">&#x27;token&#x27;</span>=&gt;$request-&gt;token(<span class="string">&#x27;__csrf__&#x27;</span>, <span class="string">&#x27;sha1&#x27;</span>)]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同样前端提交表单后，<code>js</code>调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.get(<span class="string">&quot;&#123;:url(&#x27;@refresh/token&#x27;)&#125;&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;[name=&#x27;__csrf__&#x27;]&quot;</span>).val(res.token);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php</category>
        <category>thinkphp</category>
      </categories>
      <tags>
        <tag>token</tag>
        <tag>表单令牌</tag>
        <tag>tp表单令牌</tag>
        <tag>thinkphp表单令牌</tag>
        <tag>表单令牌刷新</tag>
        <tag>tp表单令牌刷新</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu开启ssh服务</title>
    <url>/75becf6.html</url>
    <content><![CDATA[<p>一直使用<code>windows</code>进行开发，今天安装第三方包再次出现了问题，忍无可忍，果断使用乌班图。安装很简单，开启<code>ssh</code>服务也很顺利，换了用<code>xshell</code>去连接它的时候却出现了问题。</p>
<a id="more"></a>

<p>警告框提示：“<strong>服务器发送了一个意外的数据包。received：3，expected：20</strong>”的错误提示，索性这里从开启ssh服务到使用ssh成功连接整个流程跑一遍吧。</p>
<h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><p>我这里使用的是<code>VMware</code>虚拟机，系统为<code>Ubuntu 20.04.1 LTS</code>版，这里安装我就不提了，虚拟机不需要设置什么，很快就好了。</p>
<h3 id="配置虚拟机网络"><a href="#配置虚拟机网络" class="headerlink" title="配置虚拟机网络"></a>配置虚拟机网络</h3><p>查看当前主机ip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 查看ip，发现提示找不到命令</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ ifconfig</span><br><span class="line"></span><br><span class="line">Command &#39;ifconfig&#39; not found, but can be installed with:</span><br><span class="line"></span><br><span class="line">sudo apt install net-tools</span><br><span class="line"> 安装net-tools，重新查看ip</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo apt install net-tools</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  net-tools</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 51 not upgraded.</span><br><span class="line">Need to get 196 kB of archives.</span><br><span class="line">After this operation, 864 kB of additional disk space will be used.</span><br><span class="line">Get:1 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;main amd64 net-tools amd64 1.60+git20180626.aebd88e-1ubuntu1 [196 kB]</span><br><span class="line">Fetched 196 kB in 10s (19.8 kB&#x2F;s)</span><br><span class="line">Selecting previously unselected package net-tools.</span><br><span class="line">(Reading database ... 143430 files and directories currently installed.)</span><br><span class="line">Preparing to unpack ...&#x2F;net-tools_1.60+git20180626.aebd88e-1ubuntu1_amd64.deb ..</span><br><span class="line">.</span><br><span class="line">Unpacking net-tools (1.60+git20180626.aebd88e-1ubuntu1) ...</span><br><span class="line">Setting up net-tools (1.60+git20180626.aebd88e-1ubuntu1) ...</span><br><span class="line">Processing triggers for man-db (2.9.1-1) ...</span><br><span class="line"> 查看ip</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ ifconfig</span><br><span class="line">ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.146.130  netmask 255.255.255.0  broadcast 192.168.146.255</span><br><span class="line">        inet6 fe80::e15a:ba4e:3d34:d093  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:c1:25:52  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 428442  bytes 641012262 (641.0 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 76212  bytes 4832937 (4.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 1619  bytes 144115 (144.1 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1619  bytes 144115 (144.1 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<p>此处可以看到我们的<code>ip</code>为<code>192.168.146.130</code></p>
<h3 id="安装ssh服务"><a href="#安装ssh服务" class="headerlink" title="安装ssh服务"></a>安装<code>ssh</code>服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 安装openssh服务</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo apt install openssh-server</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  ncurses-term openssh-sftp-server ssh-import-id</span><br><span class="line">Suggested packages:</span><br><span class="line">  molly-guard monkeysphere ssh-askpass</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  ncurses-term openssh-server openssh-sftp-server ssh-import-id</span><br><span class="line">0 upgraded, 4 newly installed, 0 to remove and 51 not upgraded.</span><br><span class="line">Need to get 688 kB of archives.</span><br><span class="line">After this operation, 6,010 kB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y&#x2F;n] y</span><br><span class="line">Get:1 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;main amd64 ncurses-term all 6.2-0ubuntu2 [249 kB]</span><br><span class="line">Get:2 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal-updates&#x2F;main amd64 openssh-sftp-server amd64 1:8.2p1-4ubuntu0.1 [51.5 kB]</span><br><span class="line">Get:3 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal-updates&#x2F;main amd64 openssh-server amd64 1:8.2p1-4ubuntu0.1 [377 kB]</span><br><span class="line">Get:4 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;main amd64 ssh-import-id all 5.10-0ubuntu1 [10.0 kB]</span><br><span class="line">Fetched 688 kB in 6s (117 kB&#x2F;s)     </span><br><span class="line">Preconfiguring packages ...</span><br><span class="line">Selecting previously unselected package ncurses-term.</span><br><span class="line">(Reading database ... 143479 files and directories currently installed.)</span><br><span class="line">Preparing to unpack ...&#x2F;ncurses-term_6.2-0ubuntu2_all.deb ...</span><br><span class="line">Unpacking ncurses-term (6.2-0ubuntu2) ...</span><br><span class="line">Selecting previously unselected package openssh-sftp-server.</span><br><span class="line">Preparing to unpack ...&#x2F;openssh-sftp-server_1%3a8.2p1-4ubuntu0.1_amd64.deb ...</span><br><span class="line">Unpacking openssh-sftp-server (1:8.2p1-4ubuntu0.1) ...</span><br><span class="line">Selecting previously unselected package openssh-server.</span><br><span class="line">Preparing to unpack ...&#x2F;openssh-server_1%3a8.2p1-4ubuntu0.1_amd64.deb ...</span><br><span class="line">Unpacking openssh-server (1:8.2p1-4ubuntu0.1) ...</span><br><span class="line">Selecting previously unselected package ssh-import-id.</span><br><span class="line">Preparing to unpack ...&#x2F;ssh-import-id_5.10-0ubuntu1_all.deb ...</span><br><span class="line">Unpacking ssh-import-id (5.10-0ubuntu1) ...</span><br><span class="line">Setting up openssh-sftp-server (1:8.2p1-4ubuntu0.1) ...</span><br><span class="line">Setting up openssh-server (1:8.2p1-4ubuntu0.1) ...</span><br><span class="line"></span><br><span class="line">Creating config file &#x2F;etc&#x2F;ssh&#x2F;sshd_config with new version</span><br><span class="line">Creating SSH2 RSA key; this may take some time ...</span><br><span class="line">3072 SHA256:kqACe+gbHMcR9JkngU+1DbODJZJEswuAwFJOpgIQKcc root@ubuntu (RSA)</span><br><span class="line">Creating SSH2 ECDSA key; this may take some time ...</span><br><span class="line">256 SHA256:1XTWKEQcYj0lD&#x2F;bVLknF&#x2F;rCQhF1K+1AAxmagW758zlM root@ubuntu (ECDSA)</span><br><span class="line">Creating SSH2 ED25519 key; this may take some time ...</span><br><span class="line">256 SHA256:cQdi29OAp1pbdlcwczgYqcA+M&#x2F;6NOv+VwjnpVsYJcL8 root@ubuntu (ED25519)</span><br><span class="line">Created symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;sshd.service → &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ssh.service.</span><br><span class="line">Created symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;ssh.service → &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ssh.service.</span><br><span class="line">rescue-ssh.target is a disabled or a static unit, not starting it.</span><br><span class="line">Setting up ssh-import-id (5.10-0ubuntu1) ...</span><br><span class="line">Attempting to convert &#x2F;etc&#x2F;ssh&#x2F;ssh_import_id</span><br><span class="line">Setting up ncurses-term (6.2-0ubuntu2) ...</span><br><span class="line">Processing triggers for systemd (245.4-4ubuntu3.2) ...</span><br><span class="line">Processing triggers for man-db (2.9.1-1) ...</span><br><span class="line">Processing triggers for ufw (0.36-6) ...</span><br><span class="line"> 安装后查看ssh服务，已经自动运行起来了</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo systemctl status ssh</span><br><span class="line">● ssh.service - OpenBSD Secure Shell server</span><br><span class="line">     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ssh.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Fri 2020-08-14 16:04:46 CST; 26s ago</span><br><span class="line">       Docs: man:sshd(8)</span><br><span class="line">             man:sshd_config(5)</span><br><span class="line">   Main PID: 10580 (sshd)</span><br><span class="line">      Tasks: 1 (limit: 2285)</span><br><span class="line">     Memory: 1.4M</span><br><span class="line">     CGroup: &#x2F;system.slice&#x2F;ssh.service</span><br><span class="line">             └─10580 sshd: &#x2F;usr&#x2F;sbin&#x2F;sshd -D [listener] 0 of 10-100 startups</span><br><span class="line"></span><br><span class="line">Aug 14 16:04:46 ubuntu systemd[1]: Starting OpenBSD Secure Shell server...</span><br><span class="line">Aug 14 16:04:46 ubuntu sshd[10580]: Server listening on 0.0.0.0 port 22.</span><br><span class="line">Aug 14 16:04:46 ubuntu sshd[10580]: Server listening on :: port 22.</span><br><span class="line">Aug 14 16:04:46 ubuntu systemd[1]: Started OpenBSD Secure Shell server.</span><br></pre></td></tr></table></figure>

<p>没启动的可自行启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;ssh start</span><br><span class="line"> 或</span><br><span class="line">sudo systemctl start ssh</span><br></pre></td></tr></table></figure>

<h3 id="开启22端口"><a href="#开启22端口" class="headerlink" title="开启22端口"></a>开启22端口</h3><p>虽然可以用命令 <code>systemctl disable firewalld</code> 直接关闭防火墙，但不建议这样做，推荐仅允许22端口通过防火墙：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 若firewalld未安装，则进行安装</span><br><span class="line">ony@ubuntu:~&#x2F;Desktop$ sudo apt install firewalld</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  ipset libipset13 libnftables1 python3-decorator python3-firewall python3-nftables python3-selinux python3-slip</span><br><span class="line">  python3-slip-dbus</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  firewalld ipset libipset13 libnftables1 python3-decorator python3-firewall python3-nftables python3-selinux</span><br><span class="line">  python3-slip python3-slip-dbus</span><br><span class="line">0 upgraded, 10 newly installed, 0 to remove and 51 not upgraded.</span><br><span class="line">Need to get 945 kB of archives.</span><br><span class="line">After this operation, 5,382 kB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y&#x2F;n] y</span><br><span class="line">Get:1 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;universe amd64 libnftables1 amd64 0.9.3-2 [229 kB]</span><br><span class="line">Get:2 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;universe amd64 python3-nftables amd64 0.9.3-2 [11.5 kB]</span><br><span class="line">Get:3 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;main amd64 python3-decorator all 4.4.2-0ubuntu1 [10.3 kB]</span><br><span class="line">Get:4 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;universe amd64 python3-selinux amd64 3.0-1build2 [139 kB]</span><br><span class="line">Get:5 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;universe amd64 python3-slip all 0.6.5-2 [7,116 B]</span><br><span class="line">Get:6 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;universe amd64 python3-slip-dbus all 0.6.5-2 [8,872 B]</span><br><span class="line">Get:7 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;universe amd64 python3-firewall all 0.8.2-1 [115 kB]</span><br><span class="line">Get:8 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;universe amd64 firewalld all 0.8.2-1 [342 kB]                        </span><br><span class="line">Get:9 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;main amd64 libipset13 amd64 7.5-1~exp1 [53.4 kB]                     </span><br><span class="line">Get:10 http:&#x2F;&#x2F;us.archive.ubuntu.com&#x2F;ubuntu focal&#x2F;main amd64 ipset amd64 7.5-1~exp1 [29.8 kB]                         </span><br><span class="line">Fetched 945 kB in 19s (48.7 kB&#x2F;s)                                                                                    </span><br><span class="line">Selecting previously unselected package libnftables1:amd64.</span><br><span class="line">(Reading database ... 146326 files and directories currently installed.)</span><br><span class="line">Preparing to unpack ...&#x2F;0-libnftables1_0.9.3-2_amd64.deb ...</span><br><span class="line">Unpacking libnftables1:amd64 (0.9.3-2) ...</span><br><span class="line">Selecting previously unselected package python3-nftables.</span><br><span class="line">Preparing to unpack ...&#x2F;1-python3-nftables_0.9.3-2_amd64.deb ...</span><br><span class="line">Unpacking python3-nftables (0.9.3-2) ...</span><br><span class="line">Selecting previously unselected package python3-decorator.</span><br><span class="line">Preparing to unpack ...&#x2F;2-python3-decorator_4.4.2-0ubuntu1_all.deb ...</span><br><span class="line">Unpacking python3-decorator (4.4.2-0ubuntu1) ...</span><br><span class="line">Selecting previously unselected package python3-selinux.</span><br><span class="line">Preparing to unpack ...&#x2F;3-python3-selinux_3.0-1build2_amd64.deb ...</span><br><span class="line">Unpacking python3-selinux (3.0-1build2) ...</span><br><span class="line">Selecting previously unselected package python3-slip.</span><br><span class="line">Preparing to unpack ...&#x2F;4-python3-slip_0.6.5-2_all.deb ...</span><br><span class="line">Unpacking python3-slip (0.6.5-2) ...</span><br><span class="line">Selecting previously unselected package python3-slip-dbus.</span><br><span class="line">Preparing to unpack ...&#x2F;5-python3-slip-dbus_0.6.5-2_all.deb ...</span><br><span class="line">Unpacking python3-slip-dbus (0.6.5-2) ...</span><br><span class="line">Selecting previously unselected package python3-firewall.</span><br><span class="line">Preparing to unpack ...&#x2F;6-python3-firewall_0.8.2-1_all.deb ...</span><br><span class="line">Unpacking python3-firewall (0.8.2-1) ...</span><br><span class="line">Selecting previously unselected package firewalld.</span><br><span class="line">Preparing to unpack ...&#x2F;7-firewalld_0.8.2-1_all.deb ...</span><br><span class="line">Unpacking firewalld (0.8.2-1) ...</span><br><span class="line">Selecting previously unselected package libipset13:amd64.</span><br><span class="line">Preparing to unpack ...&#x2F;8-libipset13_7.5-1~exp1_amd64.deb ...</span><br><span class="line">Unpacking libipset13:amd64 (7.5-1~exp1) ...</span><br><span class="line">Selecting previously unselected package ipset.</span><br><span class="line">Preparing to unpack ...&#x2F;9-ipset_7.5-1~exp1_amd64.deb ...</span><br><span class="line">Unpacking ipset (7.5-1~exp1) ...</span><br><span class="line">Setting up libnftables1:amd64 (0.9.3-2) ...</span><br><span class="line">Setting up python3-decorator (4.4.2-0ubuntu1) ...</span><br><span class="line">Setting up libipset13:amd64 (7.5-1~exp1) ...</span><br><span class="line">Setting up python3-selinux (3.0-1build2) ...</span><br><span class="line">Setting up ipset (7.5-1~exp1) ...</span><br><span class="line">Setting up python3-nftables (0.9.3-2) ...</span><br><span class="line">Setting up python3-slip (0.6.5-2) ...</span><br><span class="line">Setting up python3-slip-dbus (0.6.5-2) ...</span><br><span class="line">Setting up python3-firewall (0.8.2-1) ...</span><br><span class="line">Setting up firewalld (0.8.2-1) ...</span><br><span class="line">update-alternatives: using &#x2F;usr&#x2F;share&#x2F;polkit-1&#x2F;actions&#x2F;org.fedoraproject.FirewallD1.server.policy.choice to provide &#x2F;u</span><br><span class="line">sr&#x2F;share&#x2F;polkit-1&#x2F;actions&#x2F;org.fedoraproject.FirewallD1.policy (org.fedoraproject.FirewallD1.policy) in auto mode</span><br><span class="line">Created symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;dbus-org.fedoraproject.FirewallD1.service → &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service.</span><br><span class="line">Created symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;firewalld.service → &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service.</span><br><span class="line">Processing triggers for systemd (245.4-4ubuntu3.2) ...</span><br><span class="line">Processing triggers for man-db (2.9.1-1) ...</span><br><span class="line">Processing triggers for dbus (1.12.16-2ubuntu2.1) ...</span><br><span class="line">Processing triggers for libc-bin (2.31-0ubuntu9) ...</span><br><span class="line"> 允许tcp 22端口</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo firewall-cmd --permanent --add-port&#x3D;22&#x2F;tcp</span><br><span class="line">success</span><br><span class="line"> 可选：允许ssh服务</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo firewall-cmd --permanent --add-service&#x3D;ssh</span><br><span class="line">Warning: ALREADY_ENABLED: ssh</span><br><span class="line">success</span><br><span class="line"> 查看firewalld状态，已经是存活状态</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Fri 2020-08-14 16:06:09 CST; 1min 15s ago</span><br><span class="line">       Docs: man:firewalld(1)</span><br><span class="line">   Main PID: 11920 (firewalld)</span><br><span class="line">      Tasks: 2 (limit: 2285)</span><br><span class="line">     Memory: 24.7M</span><br><span class="line">     CGroup: &#x2F;system.slice&#x2F;firewalld.service</span><br><span class="line">             └─11920 &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;sbin&#x2F;firewalld --nofork --nopid</span><br><span class="line"></span><br><span class="line">Aug 14 16:06:08 ubuntu systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class="line">Aug 14 16:06:09 ubuntu systemd[1]: Started firewalld - dynamic firewall daemon.</span><br><span class="line">Aug 14 16:07:02 ubuntu firewalld[11920]: WARNING: ALREADY_ENABLED: ssh</span><br><span class="line"> 重启firewalld，如果已启用，可忽略</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<p>验证22端口是否打开：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo firewall-cmd --list-all</span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens33</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: 22&#x2F;tcp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure>

<p>结果显示22端口已开启。</p>
<h3 id="远程ssh登录"><a href="#远程ssh登录" class="headerlink" title="远程ssh登录"></a>远程ssh登录</h3><p>我这里尝试使用<code>xshell</code>进行连接，结果提示“<strong>服务器发送了一个意外的数据包。received：3，expected：20</strong>”，查了好多资料，说是新版的<code>sshd</code>可能与<code>xshell</code>存在兼容性问题。</p>
<p>解决方法：在<code>/etc/ssh/sshd_config</code>最后增加以下一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1</span><br></pre></td></tr></table></figure>

<p>使用vim添加并保存后，再次连接依然连接不上，忘记了重启了……</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 重启ssh</span><br><span class="line">tony@ubuntu:~&#x2F;Desktop$ sudo systemctl restart ssh</span><br></pre></td></tr></table></figure>

<p>连上了！！！！！！</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Ubuntu开启ssh服务</tag>
        <tag>Ubuntu ssh连接</tag>
        <tag>Ubuntu shell失败</tag>
        <tag>linux连接失败</tag>
        <tag>linux shh失败</tag>
        <tag>linux远程连接失败</tag>
        <tag>乌班图ssh失败</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible剧本playbook使用一览</title>
    <url>/2b9f1cbd.html</url>
    <content><![CDATA[<p> <code>playbooks</code>是 一个不同于使用<code>Ansible</code>命令行执行方式的模式，其功能更强大灵活。简单来说，<code>playbook</code>是一个非常简单的配置管理和多主机部署系统，不同于任何已经存在的模式，可作为一个适合部署复杂应用程序的基础。<code>Playbook</code>可以定制配置，可以按照指定的操作步骤有序执行，支持同步和异步方式。值得注意的是<code>playbook</code>是通过<code>YAML</code>格式来进行描述定义的。 </p>
<a id="more"></a>

<h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a><code>yaml</code></h2><p> 编程的配置文件，<code>YAML</code>是专门用来写配置文件的语言，比<code>JSON</code>格式更加方便 </p>
<h3 id="基本语法规则"><a href="#基本语法规则" class="headerlink" title="基本语法规则"></a>基本语法规则</h3><ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用Tab键，只允许使用空格。</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
</ul>
<p>字典: <code>key</code>: <code>value</code></p>
<p>列表: [] -</p>
<p>后缀名 <code>yaml yml</code></p>
<h3 id="支持的数据格式"><a href="#支持的数据格式" class="headerlink" title="支持的数据格式"></a>支持的数据格式</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitmex:</span><br><span class="line">    online:</span><br><span class="line">        tick: [<span class="string">&#x27;XBTUSD&#x27;</span>]</span><br><span class="line">    <span class="built_in">test</span>:</span><br><span class="line">        tick: [<span class="string">&#x27;XBTUSD&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>转为 python 如下<br> <code>&#123;&quot;bitmex&quot;:&#123;&quot;online&quot;: &#123;&quot;tick&quot;: [&quot;XBTUSD&quot;]&#125;, &quot;test&quot;: &#123;&quot;tick&quot;: [&quot;XBTUSD&quot;]&#125;&#125;&#125;</code></p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>一组按次序排列的值，又称为序列（sequence） / 列表（list）<br>    一组连词线开头的行，构成一个数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- BTC</span><br><span class="line">- ETH</span><br><span class="line">- EOS</span><br></pre></td></tr></table></figure>

<p>转为python如下<br> <code>[&quot;BTC&quot;, &quot;ETH&quot;, &quot;EOS&quot;]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-</span><br><span class="line"> - BTC</span><br><span class="line"> - USD</span><br><span class="line"> - EOS</span><br></pre></td></tr></table></figure>

<p>转为python如下<br> <code>[[&quot;BTC&quot;, &quot;USD&quot;, &quot;EOS&quot;]]</code></p>
<h2 id="ansible-playbook命令格式"><a href="#ansible-playbook命令格式" class="headerlink" title="ansible-playbook命令格式"></a><code>ansible-playbook</code>命令格式</h2><p>执行顺序: 从上往下</p>
<p>特性:幂等性 不管执行多少遍,结果都是一样的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook [options] playbook.yml [playbook2 ...] </span><br><span class="line">-C, --check   # 检查,白跑,干跑</span><br><span class="line">-f FORKS, --forks=FORKS #用来做并发</span><br><span class="line">--list-hosts # 列出主机列表</span><br><span class="line">--syntax-check # 语法检查 </span><br></pre></td></tr></table></figure>

<p>简单用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">  - name: creategroup</span><br><span class="line">    group: name=tom10</span><br><span class="line">  - name: cretaeuser</span><br><span class="line">    user: name=wusir10</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hosts: gb</span><br><span class="line">tasks:</span><br><span class="line">- name: 第san个姑娘</span><br><span class="line">  dong: 第san个姑娘</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">  - name: create&#123;&#123; user &#125;&#125;</span><br><span class="line">    user: name=&#123;&#123; user&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>第一种方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook -e &#x27;user=tomsb10&#x27; p2.yml</span><br></pre></td></tr></table></figure>

<p>第二种方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[db]</span><br><span class="line">172.17.0.3 user=tomsb11</span><br><span class="line">172.17.0.4 user=tomsb12</span><br></pre></td></tr></table></figure>

<p>第三种方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[db:vars] #表示组的参数</span><br><span class="line">user=tomsb13</span><br></pre></td></tr></table></figure>

<p>第四种方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: db</span><br><span class="line">  vars:</span><br><span class="line">  - user: tomsb14</span><br><span class="line">  tasks:</span><br><span class="line">  - name: create&#123;&#123; user &#125;&#125;</span><br><span class="line">    user: name=&#123;&#123; user&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>第五种传参方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: db</span><br><span class="line">  tasks:</span><br><span class="line">  - name: sum</span><br><span class="line">    shell: echo 7+8|bc</span><br><span class="line">    register: user</span><br><span class="line">  - name: createuser</span><br><span class="line">    user: name=&#123;&#123;user.stdout&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>传参方式的优先级</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-e &gt; playbook vars &gt; hosts文件</span><br></pre></td></tr></table></figure>

<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible_all_ipv4_addresses # ipv4的所有地址</span><br><span class="line">ansible_all_ipv6_addresses # ipv6的所有地址</span><br><span class="line">ansible_date_time # 获取到控制节点时间</span><br><span class="line">ansible_default_ipv4 # 默认的ipv4地址</span><br><span class="line">ansible_distribution # 系统</span><br><span class="line">ansible_distribution_major_version # 系统的大版本</span><br><span class="line">ansible_distribution_version # 系统的版本号</span><br><span class="line">ansible_domain #系统所在的域</span><br><span class="line">ansible_env #系统的环境变量</span><br><span class="line">ansible_hostname #系统的主机名</span><br><span class="line">ansible_fqdn #系统的全名</span><br><span class="line">ansible_machine #系统的架构</span><br><span class="line">ansible_memory_mb #系统的内存信息</span><br><span class="line">ansible_os_family # 系统的家族</span><br><span class="line">ansible_pkg_mgr # 系统的包管理工具</span><br><span class="line">ansible_processor_cores #系统的cpu的核数(每颗)</span><br><span class="line">ansible_processor_count #系统cpu的颗数</span><br><span class="line">ansible_processor_vcpus #系统cpu的总个数=cpu的颗数*CPU的核数</span><br><span class="line">ansible_python # 系统上的python</span><br><span class="line">ansible cache -m setup -a &#x27;filter=*processor*&#x27; # 用来搜索</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>* 匹配数量,表示0或者多次</p>
<p>? 匹配数量,表示0或者1次</p>
<p>. 除换行符以外的所有字符 </p>
<p>+ 至少一次</p>
<p>[123abc] 匹配内容,or</p>
<p>() 分组</p>
<p>{m} 次数,出现m次</p>
<p>{m,} 至少m次</p>
<p>{m,n}出现m-n次</p>
<p>a*.b</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: db</span><br><span class="line">  tasks:</span><br><span class="line">  - name: zzgbgn</span><br><span class="line">    dong: zzdbgn</span><br><span class="line">    when: zhanzhe</span><br><span class="line">  - name: pzhegbgn</span><br><span class="line">    dong: pzhedbgn</span><br><span class="line">    when: pazhe</span><br></pre></td></tr></table></figure>

<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul>
<li><p>不同的系统</p>
</li>
<li><p>不同的版本</p>
</li>
<li><p>不同的环境</p>
</li>
<li><p>不同的用户</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@7474265a0267 tmp]# ansible-playbook -e &#x27;a=2&#x27; test.yml </span><br><span class="line"></span><br><span class="line">- hosts: db</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: createfile</span><br><span class="line">    copy: content=&quot;大弦嘈嘈如急雨&quot; dest=/tmp/a.txt</span><br><span class="line">    when: a==&quot;3&quot;</span><br><span class="line">  - name: cratefile</span><br><span class="line">    copy: content=&quot;小弦切切如私语&quot; dest=/tmp/a.txt</span><br><span class="line">    when: a==&quot;4&quot;</span><br></pre></td></tr></table></figure>

<h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><p>只执行tag标识的任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: db</span><br><span class="line">  tasks:</span><br><span class="line">  - name: wadong</span><br><span class="line">    tieqiao: wadong</span><br><span class="line">  - name: tk</span><br><span class="line">    dong: tk</span><br><span class="line">    tags: tk</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">  - name: installnginx</span><br><span class="line">    yum: name=nginx</span><br><span class="line">  - name: copyfile</span><br><span class="line">    copy: src=/etc/nginx/nginx.conf dest=/etc/nginx/nginx.conf</span><br><span class="line">    tags: copyfile</span><br><span class="line">  - name: start</span><br><span class="line">    service: name=nginx state=started</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook -t copyfile p7.yml </span><br></pre></td></tr></table></figure>

<h2 id="循环-with-item"><a href="#循环-with-item" class="headerlink" title="循环 with_item"></a>循环 with_item</h2><p><strong>一次性创建多个<code>txt</code>文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">  - name: out</span><br><span class="line">    shell: touch /tmp/&#123;&#123;item&#125;&#125;.txt</span><br><span class="line">    with_items:</span><br><span class="line">    - tony</span><br><span class="line">    - tiny</span><br><span class="line">    - caty    </span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@7474265a0267 tmp]# ansible-playbook addmysql.yml</span><br><span class="line">PLAY [web] ****************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ****************************************************************************************************************************</span><br><span class="line">ok: [172.17.0.3]</span><br><span class="line"></span><br><span class="line">TASK [out] ****************************************************************************************************************************************</span><br><span class="line">changed: [172.17.0.3] &#x3D;&gt; (item&#x3D;tony)</span><br><span class="line">changed: [172.17.0.3] &#x3D;&gt; (item&#x3D;tiny)</span><br><span class="line">changed: [172.17.0.3] &#x3D;&gt; (item&#x3D;caty)</span><br><span class="line"> [WARNING]: Consider using the file module with state&#x3D;touch rather than running &#39;touch&#39;.  If you need to use command because file is insufficient</span><br><span class="line">you can add &#39;warn: false&#39; to this command task or set &#39;command_warnings&#x3D;False&#39; in ansible.cfg to get rid of this message.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY RECAP ****************************************************************************************************************************************</span><br><span class="line">172.17.0.3                 : ok&#x3D;2    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@7225c5bf1567 tmp]# ls -l</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root    0 Oct 25 06:05 caty.txt</span><br><span class="line">drwx------ 3 root root 4096 Oct 25 02:49 systemd-private-48a15306f1fa4d5b99624bd74a722301-nginx.service-GNMuXG</span><br><span class="line">-rw-r--r-- 1 root root    0 Oct 25 06:05 tiny.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Oct 25 06:05 tony.txt</span><br></pre></td></tr></table></figure>



<p><strong>创建多个用户且创建多个用户组</strong> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">  - name: crateuser</span><br><span class="line">    user: name=&#123;&#123;item&#125;&#125;</span><br><span class="line">    with_items:</span><br><span class="line">    - alex30</span><br><span class="line">    - alex31</span><br><span class="line">    - alex32</span><br><span class="line">  - name: crategroup</span><br><span class="line">    group: name=&#123;&#123;item&#125;&#125;</span><br><span class="line">    with_items:</span><br><span class="line">    - wulaoshi20</span><br><span class="line">    - wulaoshi21</span><br><span class="line">    - wulaoshi22</span><br><span class="line">~                </span><br></pre></td></tr></table></figure>

<h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><p>创建多个用户和用户组，并将用户依次加入到对应用户组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">  - name: addgroup</span><br><span class="line">    group: name=&#123;&#123;item&#125;&#125;</span><br><span class="line">    with_items:</span><br><span class="line">    - vs01</span><br><span class="line">    - vs02</span><br><span class="line">    - vs03</span><br><span class="line">  - name: adduser</span><br><span class="line">    user: name=&#123;&#123;item.name&#125;&#125; group=&#123;&#123;item.group&#125;&#125;</span><br><span class="line">    with_items:</span><br><span class="line">    - &#123;&#x27;name&#x27;:tony1, &#x27;group&#x27;:vs01&#125;</span><br><span class="line">    - &#123;&#x27;name&#x27;:tony2, &#x27;group&#x27;:vs02&#125;</span><br><span class="line">    - &#123;&#x27;name&#x27;:tony3, &#x27;group&#x27;:vs03&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@7474265a0267 tmp]# ansible-playbook test.yml </span><br><span class="line"></span><br><span class="line">PLAY [web] ****************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ****************************************************************************************************************************</span><br><span class="line">ok: [172.17.0.3]</span><br><span class="line"></span><br><span class="line">TASK [addgroup] ***********************************************************************************************************************************</span><br><span class="line">changed: [172.17.0.3] =&gt; (item=vs01)</span><br><span class="line">changed: [172.17.0.3] =&gt; (item=vs02)</span><br><span class="line">changed: [172.17.0.3] =&gt; (item=vs03)</span><br><span class="line"></span><br><span class="line">TASK [adduser] ************************************************************************************************************************************</span><br><span class="line">changed: [172.17.0.3] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;vs01&#x27;, u&#x27;name&#x27;: u&#x27;tony1&#x27;&#125;)</span><br><span class="line">changed: [172.17.0.3] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;vs02&#x27;, u&#x27;name&#x27;: u&#x27;tony2&#x27;&#125;)</span><br><span class="line">changed: [172.17.0.3] =&gt; (item=&#123;u&#x27;group&#x27;: u&#x27;vs03&#x27;, u&#x27;name&#x27;: u&#x27;tony3&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">PLAY RECAP ****************************************************************************************************************************************</span><br><span class="line">172.17.0.3                 : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@7225c5bf1567 tmp]# id tony1</span><br><span class="line">uid=1000(tony1) gid=1000(vs01) groups=1000(vs01)</span><br><span class="line">[root@7225c5bf1567 tmp]# id tony2</span><br><span class="line">uid=1001(tony2) gid=1001(vs02) groups=1001(vs02)</span><br><span class="line">[root@7225c5bf1567 tmp]# id tony3</span><br><span class="line">uid=1002(tony3) gid=1002(vs03) groups=1002(vs03)</span><br></pre></td></tr></table></figure>

<h2 id="template"><a href="#template" class="headerlink" title="template"></a><code>template</code></h2><p>应用场景：多用于批量复制配置文件到从机</p>
<h3 id="创建模板文件"><a href="#创建模板文件" class="headerlink" title="创建模板文件"></a>创建模板文件</h3><p><code>test.conf</code>，就一句话显示当前主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyHostName:&#123;&#123;ansible_hostname&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改yml文件"><a href="#修改yml文件" class="headerlink" title="修改yml文件"></a>修改<code>yml</code>文件</h3><p><code>test.yml</code>，将t<code>est.conf</code>复制到目标主机中的<code>dest.conf</code>（模板复制）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copytemp</span><br><span class="line">    template: src&#x3D;&#x2F;tmp&#x2F;test.conf dest&#x3D;&#x2F;tmp&#x2F;dest.conf</span><br></pre></td></tr></table></figure>

<h3 id="执行yml"><a href="#执行yml" class="headerlink" title="执行yml"></a>执行yml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@7474265a0267 tmp]# ansible-playbook addmysql.yml </span><br><span class="line"></span><br><span class="line">PLAY [all] ****************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ****************************************************************************************************************************</span><br><span class="line">ok: [172.17.0.4]</span><br><span class="line">ok: [172.17.0.3]</span><br><span class="line"></span><br><span class="line">TASK [copytemp] ***********************************************************************************************************************************</span><br><span class="line">changed: [172.17.0.3]</span><br><span class="line">changed: [172.17.0.4]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ****************************************************************************************************************************************</span><br><span class="line">172.17.0.3                 : ok&#x3D;2    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   </span><br><span class="line">172.17.0.4                 : ok&#x3D;2    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   </span><br></pre></td></tr></table></figure>

<h3 id="测试查看"><a href="#测试查看" class="headerlink" title="测试查看"></a>测试查看</h3><h4 id="172-17-0-3测试"><a href="#172-17-0-3测试" class="headerlink" title="172.17.0.3测试"></a>172.17.0.3测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@7225c5bf1567 tmp]# cat dest.conf</span><br><span class="line">MyHostName:7225c5bf1567</span><br></pre></td></tr></table></figure>

<h4 id="172-17-0-4测试"><a href="#172-17-0-4测试" class="headerlink" title="172.17.0.4测试"></a>172.17.0.4测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@c5c6db1e6ac4 tmp]# cat dest.conf</span><br><span class="line">MyHostName:c5c6db1e6ac4</span><br></pre></td></tr></table></figure>

<h3 id="copy和tamplate的区别"><a href="#copy和tamplate的区别" class="headerlink" title="copy和tamplate的区别"></a><code>copy</code>和<code>tamplate</code>的区别</h3><ul>
<li><p><code>copy</code>模块不替代参数</p>
</li>
<li><p><code>template</code>模块替代参数</p>
<p><code>yml</code>文件中我们<code>template</code>项中的<code>src</code>我们使用了绝对路径，我们在当前目录创建一个<code>templates</code>文件夹，将<code>test.conf</code>放入其中，文件可改为以下，省略了绝对路径</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copytemp</span><br><span class="line">    template: src=test.conf dest=/tmp/dest.conf</span><br></pre></td></tr></table></figure>

<h2 id="handlers"><a href="#handlers" class="headerlink" title="handlers"></a>handlers</h2><p>我们以<code>redis</code>为例，我们需要将主机上的<code>redis</code>配置复制到从机上，从机<code>redis</code>配置文件修改后不会重启，需要我们来手动重启，这时候就用到了<code>handlers</code>，当前<code>yml</code>文件含义为如果执行到<code>copyfle</code>任务，notify代表着会触发<code>restart</code>任务，即：复制完配置文件要执行重启<code>redis</code>操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- hosts: web</span><br><span class="line">  tasks:</span><br><span class="line">  - name: installredis</span><br><span class="line">    yum: name=redis</span><br><span class="line">  - name: copyfile</span><br><span class="line">    template: src=redis.conf dest=/etc/redis.conf</span><br><span class="line">    tags: copyfile</span><br><span class="line">    notify: restart</span><br><span class="line">  - name: start</span><br><span class="line">    service: name=redis state=started</span><br><span class="line">  handlers:</span><br><span class="line">  - name: restart</span><br><span class="line">    service: name=redis state=restarted</span><br></pre></td></tr></table></figure>

<p>命令执行</p>
<p>该命令只执行<code>copyfile</code>任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible-playbook -t copyfile test.yml</span><br></pre></td></tr></table></figure>

<h2 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h2><ul>
<li>目录清晰</li>
<li>可以互相调用</li>
</ul>
<p><code>roles</code>文件夹</p>
<p>文件夹里面是要创建的每一个角色,每一个角色一个文件夹</p>
<p>每一个角色里面都有<code>tasks</code>(必须的),<code>templates</code>,<code>files</code>,<code>handlers</code>,<code>vars</code>目录</p>
<p>每个目录都要有<code>main.yml</code>文件,通过import_tasks来调用</p>
<p>其中<code>templates</code>文件夹中的文件可以通过相对路径来调用</p>
<p>其中<code>files</code>文件夹中的文件是否可以通过相对路径来调用?</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ansible剧本</tag>
        <tag>playbook使用一览</tag>
        <tag>playbook</tag>
        <tag>ansible</tag>
        <tag>yaml</tag>
        <tag>yaml格式</tag>
        <tag>template</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible配置基础使用</title>
    <url>/f6309410.html</url>
    <content><![CDATA[<p> <code>ansible</code>是新出现的自动化运维工具，基于<code>Python</code>开发，集合了众多运维工具（<code>puppet</code>、<code>cfengine</code>、<code>chef</code>、<code>func</code>、<code>fabric</code>）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。 </p>
<a id="more"></a>

<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><p>学习<code>ansible</code>至少需要两台及以上服务器做基础，一台主机，多台从机。多于缺乏硬件资源的同学我们可以使用<code>Docker</code>，关于<code>Docker</code>可以参考之前的文章<a href="https://www.diandian100.cn/cf791c57.html">Docker基础使用</a>，使用<code>docker</code>开启以下三个镜像。</p>
<table>
<thead>
<tr>
<th align="left">服务器环境</th>
<th align="left"><code>centos7</code></th>
<th align="left"><code>centos7</code></th>
<th align="left"><code>centos7</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>ip</code>地址</td>
<td align="left">172.17.0.2</td>
<td align="left">172.17.0.3</td>
<td align="left">172.17.0.4</td>
</tr>
<tr>
<td align="left">身份</td>
<td align="left"><code>master</code></td>
<td align="left"><code>slave</code></td>
<td align="left"><code>slave</code></td>
</tr>
<tr>
<td align="left">容器ID</td>
<td align="left">0784b3ebd803</td>
<td align="left">462f8117e08f</td>
<td align="left">a341fb8cc4f8</td>
</tr>
<tr>
<td align="left">容器名</td>
<td align="left">centos-master</td>
<td align="left">centos-slave1</td>
<td align="left">centos-slave2</td>
</tr>
</tbody></table>
<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="配置epel源"><a href="#配置epel源" class="headerlink" title="配置epel源"></a>配置<code>epel</code>源</h3><p>修改3个容器的<code>epel</code>源，我们这里使用了阿里的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>

<h3 id="主机安装ansible"><a href="#主机安装ansible" class="headerlink" title="主机安装ansible"></a>主机安装<code>ansible</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y ansible</span><br></pre></td></tr></table></figure>

<h3 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装<code>ssh</code></h3><p>如果你生成秘钥时出现以下提示<code>bash: ssh: command not found</code>，则要安装<code>ssh</code>客户端，已安装的请忽略</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装ssh服务端客户端</span></span><br><span class="line">yum -y install openssh-server</span><br><span class="line">yum -y install openssh-clients</span><br></pre></td></tr></table></figure>

<h3 id="主机生成密钥对"><a href="#主机生成密钥对" class="headerlink" title="主机生成密钥对"></a>主机生成密钥对</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen # 用来生成ssh的密钥对</span><br></pre></td></tr></table></figure>

<h3 id="复制公钥到从机"><a href="#复制公钥到从机" class="headerlink" title="复制公钥到从机"></a>复制公钥到从机</h3><p> 用<code>ssh-copy-id</code>将公钥复制到远程机器中 ，此步干净的容器会出现问题，参考底部常见问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id 172.17.0.3 # 复制公钥到远程主机</span><br><span class="line">ssh-copy-id 172.17.0.4 # 复制公钥到远程主机</span><br></pre></td></tr></table></figure>

<h3 id="配置ansible-hosts文件"><a href="#配置ansible-hosts文件" class="headerlink" title="配置ansible hosts文件"></a>配置<code>ansible hosts</code>文件</h3><p>配置文件位置：<code>/etc/ansible/hosts</code></p>
<h4 id="未分组主机"><a href="#未分组主机" class="headerlink" title="未分组主机"></a>未分组主机</h4><p>直接书写主机名或<code>ip</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">172.17.0.3</span><br><span class="line">172.17.0.4</span><br></pre></td></tr></table></figure>

<h4 id="分组主机"><a href="#分组主机" class="headerlink" title="分组主机"></a>分组主机</h4><p>按组操控其下的主机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[db]</span><br><span class="line">172.17.0.3</span><br><span class="line">[web]</span><br><span class="line">172.17.0.4</span><br><span class="line">172.17.0.5</span><br></pre></td></tr></table></figure>

<p>甚至其中可以用到类似正则</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[db]</span><br><span class="line">172.17.0.[100:103]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等同于</span></span><br><span class="line">[db]</span><br><span class="line">172.17.0.100</span><br><span class="line">172.17.0.101</span><br><span class="line">172.17.0.102</span><br><span class="line">172.17.0.103</span><br></pre></td></tr></table></figure>

<p>我们这里就按未分组主机形式，其中控制多个分组可以有以下几种：</p>
<h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看分组web和db之间的交集所包含的主机是否在线</span></span><br><span class="line">ansible web:&amp;db -m ping</span><br></pre></td></tr></table></figure>

<h5 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看分组web和db之间的并集所包含的主机是否在线</span></span><br><span class="line">ansible web,db -m ping</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">ansible &#x27;web:db&#x27; -m ping</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回结果</span></span><br><span class="line">172.17.0.3 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">172.17.0.4 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看分组web和db之间的交集(web包含且db不包含的)所包含的主机是否在线</span></span><br><span class="line"></span><br><span class="line">[root@0784b3ebd803 /]# ansible &#x27;web:!db&#x27; -m ping</span><br><span class="line">172.17.0.3 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible web -a &#x27;ls /&#x27;#第一个命令</span><br><span class="line">ansible web -a &#x27;pwd&#x27;</span><br><span class="line">ansible web -a &#x27;chdir=/tmp pwd&#x27;# 切换目录执行命令，使用场景是编译安装时使用</span><br><span class="line">ansible web -a &#x27;creates=/tmp pwd&#x27; # 用来判断/tmp目录是否存在，存在就不执行操作</span><br><span class="line"> ansible web -a &#x27;creates=/data pwd&#x27; # 因为data不存在，所有才会执行pwd命令</span><br><span class="line"> ansible web -a &#x27;removes=/tmp pwd&#x27; #用来判断tmp目录是否存在，存在就执行操作</span><br><span class="line"> ansible web -a &#x27;removes=/data pwd&#x27; #因为data不存在，所有才不会执行</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看用户是否创建成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tail -1 /etc/passwd</span><br><span class="line">tail -1 /etc/shadow</span><br><span class="line">id tom</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;123&#x27;</span> | passwd --stdin tom <span class="comment">#设置密码</span></span><br></pre></td></tr></table></figure>



<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible web -m shell -a &#x27;echo &quot;123&quot; | passwd --stdin tom&#x27; # 批量创建密码</span><br><span class="line">ansible 192.168.107.131 -m shell -a &#x27;bash a.sh&#x27; # 执行远程文件方式一</span><br><span class="line">ansible 192.168.107.131 -m shell -a &#x27;/root/a.sh&#x27; #执行远程文件方式二，文件必须有执行权限</span><br><span class="line">ansible 192.168.107.131 -m shell -a &#x27;/root/a.py&#x27; # 执行远端的Python脚本</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible web -m script -a &#x27;/root/m.sh&#x27; # 执行本地的文件，执行管控机上的文件</span><br><span class="line">ansible web -m script -a &#x27;removes=/root/m.sh /root/m.sh&#x27; # 用来判断被管控机上是不是存在文件，如果存在，存在就执行，不存在就不执行</span><br><span class="line">ansible web -m script -a &#x27;creates=/root/a.sh /root/m.sh&#x27; #用来判断被管控机上是不是存在文件，如果存在，就不执行</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">backup 备份，以时间戳结尾</span><br><span class="line">dest 目的地址</span><br><span class="line">group 文件的属组</span><br><span class="line">mode 文件的权限 r 4 w 2 x 1</span><br><span class="line">owner 文件的属主</span><br><span class="line">src 源文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过md5码来判断是否需要复制</span></span><br><span class="line">ansible db -m copy -a &#x27;src=/root/m.sh dest=/tmp/a.sh&#x27; #复制本地文件的到远程主机</span><br><span class="line">ansible db -m copy -a &#x27;src=/root/m.sh dest=/tmp/a.sh mode=755&#x27; #修改文件的权限</span><br><span class="line"> ansible web -m copy -a &#x27;src=/root/m.sh dest=/tmp/a.sh mode=755 owner=tom&#x27; 修改文件的属主</span><br><span class="line"> ansible web -m copy -a &#x27;src=/etc/init.d dest=/tmp/ mode=755 owner=tom&#x27; # 复制本地目录到远程主机，如果改变文件的属性，则文件夹内的文件也会被改变</span><br><span class="line"> ansible web -m copy -a &#x27;src=/etc/init.d/ dest=/tmp/ mode=755 owner=tom&#x27; # 复制本地目录内的所有文件到远程主机</span><br><span class="line"> ansible web -m copy -a &quot;content=&#x27;大弦嘈嘈如急雨，小弦切切如私语\n&#x27; dest=/tmp/b.txt&quot; # 直接将文本内容注入到远程主机的文件中</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>补充</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inode 硬盘的地址</span><br><span class="line">id 获取到的是内存的地址</span><br><span class="line">ln -s a.py b.py 创建软连接</span><br><span class="line">ln  a.py c.py 创建硬链接</span><br><span class="line">当 源文件变化时，软连接和硬链接文件都会跟着变化</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible db -m file -a &#x27;path=/lzmly2  state=directory&#x27; #在远程机器上创建文件夹</span><br><span class="line">ansible db -m file -a &#x27;path=/root/q.txt  state=touch&#x27; #用来在远程机器上创建文件</span><br><span class="line">ansible db -m file -a &#x27;path=/tmp/f src=/etc/fstab state=link&#x27; #创建软连接src是源地址，path是目标地址</span><br><span class="line">ansible db -m file -a &#x27;path=/tmp/f state=absent&#x27; #用来删除文件或者文件夹</span><br></pre></td></tr></table></figure>

<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dest 目的地址</span><br><span class="line">src 源地址</span><br><span class="line">ansible web -m fetch -a &#x27;src=/var/log/cron dest=/tmp&#x27; # 下载被控节点的文件，每台机器创建一个文件夹，并保留原来的目录结构</span><br></pre></td></tr></table></figure>

<h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a><code>yum</code></h3><ul>
<li><p><code>rpm</code> 和<code>yum</code> 的区别</p>
<p><code>rpm</code>:<code>redhat package manager yum</code>可以解决依赖关系</p>
</li>
<li><p><code>yum</code> 源配置</p>
</li>
<li><pre><code class="shell">[epel]
name=Extra Packages for Enterprise Linux 7 - $basearch #名字
baseurl=http://mirrors.aliyun.com/epel/7/$basearch  #rpm源的地址,可以写http,https,ftp,Samba,file:
failovermethod=priority
enabled=1 # 是否开启,1代表开启,0表示关闭
gpgcheck=0  #是否校验签名,1代表校验,0表示校验
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;yum&#96; 安装包组</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;shell</span><br><span class="line">  yum grouplist # 查看包组信息</span><br><span class="line">  yum groupinstall # 安装包组</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">disablerepo #禁用源</span><br><span class="line">enablerepo #启用源</span><br><span class="line">name #包名</span><br><span class="line">state  install (`present&#x27; or `installed&#x27;, `latest&#x27;), or remove (`absent&#x27; or `removed&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible web -m yum -a &#x27;name=wget&#x27; # 安装wget</span><br><span class="line">ansible web -m yum -a &#x27;name=python2-pip&#x27; # 安装python2-pip</span><br><span class="line">ansible web -m yum -a &#x27;name=wget state=absent&#x27; # 卸载软件包</span><br><span class="line"> ansible web -m yum -a &#x27;name=&quot;@Development Tools&quot;&#x27; # 安装包组</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p>查看是否已安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -q nginx</span><br></pre></td></tr></table></figure>

<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install 安装包</span><br><span class="line">pip freeze &gt; a.txt 将python的环境打包到文件中</span><br><span class="line">pip install -r a.txt 安装文件中的包</span><br><span class="line">pip list 查看所有的以安装成功的包</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible web -m pip -a &#x27;name=flask&#x27; # 安装flask模块</span><br></pre></td></tr></table></figure>

<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep nginx #查看进程</span><br><span class="line">ss -tnlp # 查看端口信息</span><br><span class="line">systemctl start nginx # centos7</span><br><span class="line">service nginx start  # centos6</span><br><span class="line">systemctl enabled nginx # centos7 开机自启动</span><br><span class="line">chkconfig nginx on # centos6开机自启动</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible web -m service -a &#x27;name=nginx state=started&#x27; # 启动nginx</span><br><span class="line">ansible web -m service -a &#x27;name=nginx state=stopped&#x27; # 关闭nginx</span><br></pre></td></tr></table></figure>

<h3 id="cron"><a href="#cron" class="headerlink" title="cron"></a><code>cron</code></h3><p>本人用的容器，测试没有<code>crontab</code>命令，见常见问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* * * * * job </span><br><span class="line">分 时 日 月 周 任务</span><br><span class="line">0 */2 *  * *  job  每隔两个小时</span><br><span class="line">0 12,13 * * * job 12点和13点</span><br><span class="line">0 12-17 * * * job 12点到17点</span><br><span class="line">0 12-17/2 * * 1,3,6,0 周1,周3,周6,周7 12点到17点每隔两个小时 </span><br><span class="line">crontab -e # 编辑计划任务</span><br><span class="line">crontab -l # 查看计划任务</span><br><span class="line">crontab -r # 删除计划任务</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">day  天</span><br><span class="line">disabled 禁用</span><br><span class="line">hour 小时</span><br><span class="line">job 任务</span><br><span class="line">minute 分钟</span><br><span class="line">month 月</span><br><span class="line">name 任务名字</span><br><span class="line">weekday 周</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible db -m cron -a &#x27;minute=26 job=&quot;touch /tmp/xzmly.txt&quot; name=touchfile&#x27; # 新建一个计划任务</span><br><span class="line">ansible db -m cron -a &#x27;name=touchfile state=absent&#x27; # 删除一个计划任务</span><br><span class="line">ansible db -m cron -a &#x27;minute=26 job=&quot;touch /tmp/xzmly.txt&quot; name=touchfile disabled=yes&#x27;  # 禁用计划任务,以#表示禁用</span><br></pre></td></tr></table></figure>



<h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">用户:</span><br><span class="line">	管理员  root 0</span><br><span class="line">	普通用户</span><br><span class="line">		系统用户  不能登录  1-999 centos7 1-499 centos6</span><br><span class="line">		登录用户  可以登录  1000-65535 centos7 500-65535 centos6</span><br><span class="line">用户组:</span><br><span class="line">    管理员组 root 0</span><br><span class="line">    系统用户组 1-999 centos7 1-499 centos6</span><br><span class="line">    登录用户组 1000-65535 centos7 500-65535 centos6 </span><br><span class="line">    </span><br><span class="line"> -d  指定用户的家目录</span><br><span class="line"> -g  指定用户的组</span><br><span class="line"> -G  执行用户的附加组</span><br><span class="line"> -s  指定登录后使用的shell</span><br><span class="line"> -r 创建一个系统组</span><br><span class="line"> useradd -r kitty  创建系统用户, 从999倒序</span><br><span class="line"> useradd -s /sbin/nologin tomsb 创建的是普通用户,从1000开始升序</span><br><span class="line">  useradd -d /opt/tomsb2 tomsb2 创建用户时指定用户的家目录</span><br><span class="line">   useradd -u 3000 tomsb6 # 创建用户并指定用户的uid</span><br><span class="line">  userdel tom 删除用户</span><br><span class="line">  userdel -r tomsb2 删除用户并删除用户的家目录</span><br><span class="line">  </span><br><span class="line">  groupadd machao 创建用户组</span><br><span class="line">  groupdel machao 删除用户组</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">group 组</span><br><span class="line">groups 附加组</span><br><span class="line">home 家目录</span><br><span class="line">name 用户名</span><br><span class="line">password 密码</span><br><span class="line">remove ?</span><br><span class="line">shell 用户登录后使用的shell</span><br><span class="line">system 创建一个系统用户</span><br><span class="line">uid 用来指定用户的id</span><br><span class="line">state 状态</span><br><span class="line">ansible db -m user -a &#x27;name=canglaoshi uid=4000 home=/opt/canglaoshi groups=root shell=/sbin/nologin&#x27; #创建一个用户,并指定用户的id,用户的家目录,用户的附加组,用户的shell</span><br><span class="line">ansible db -m user -a &#x27;name=canglaoshi state=absent&#x27; #删除用户但是不删除用户的家目录</span><br><span class="line">ansible db -m user -a &#x27;name=canglaoshi3 state=absent remove=yes&#x27; # 删除用户并删除用户的家目录</span><br></pre></td></tr></table></figure>

<h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gid 组的id</span><br><span class="line">name 组名</span><br><span class="line">system 系统组</span><br><span class="line">state</span><br><span class="line">ansible db -m group -a &#x27;name=canglaoshi system=yes&#x27; #创建系统组</span><br><span class="line">ansible db -m group -a &#x27;name=canglaoshi state=absent&#x27; # 删除组</span><br></pre></td></tr></table></figure>

<p>web</p>
<p>创建一个用户组tom10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible web -m group -a &#39;name&#x3D;tom10&#39;</span><br></pre></td></tr></table></figure>

<p>创建一个用户kitty10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible web -m user -a &#39;name&#x3D;kitty10&#39;</span><br></pre></td></tr></table></figure>

<p>把/etc/fstab文件复制到远程主机上/tmp/f</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible web -m copy -a &#39;src&#x3D;&#x2F;etc&#x2F;fstab dest&#x3D;&#x2F;tmp&#x2F;f&#39;</span><br></pre></td></tr></table></figure>

<p>安装nginx,并启动,设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible web -m yum -a &#39;name&#x3D;nginx&#39;</span><br><span class="line"></span><br><span class="line">ansible web -m service -a &#39;name&#x3D;nginx enabled&#x3D;yes&#39;</span><br></pre></td></tr></table></figure>



<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="从机拒绝访问"><a href="#从机拒绝访问" class="headerlink" title="从机拒绝访问"></a>从机拒绝访问</h3><p>报错如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ssh-copy-id: ERROR: ssh: connect to host 172.17.0.2 port 22: Connection refused</span><br></pre></td></tr></table></figure>

<p>此时因为从机没有开启ssh导致的，从机可以执行以下操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/sbin/sshd-keygen -A # 手动执行</span><br><span class="line"></span><br><span class="line">/usr/sbin/sshd # 再执行</span><br></pre></td></tr></table></figure>

<p>从机测试ssh服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>

<p>问题解决。如果提示输入密码就先设置一个密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen # 用来生成ssh的密钥对</span><br></pre></td></tr></table></figure>

<h3 id="从机无法安装软件"><a href="#从机无法安装软件" class="headerlink" title="从机无法安装软件"></a>从机无法安装软件</h3><p>报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to get D-Bus connection: Operation not permitted</span><br></pre></td></tr></table></figure>

<p><code>Docker</code>的设计理念是在容器里面不运行后台服务，容器本身就是宿主机上的一个独立的主进程，也可以间接的理解为就是容器里运行服务的应用进程。一个容器的生命周期是围绕这个主进程存在的，所以正确的使用容器方法是将里面的服务运行在前台。</p>
<p>再说到<code>systemd</code>，这个套件已经成为主流<code>Linux</code>发行版（比如<code>CentOS7</code>、<code>Ubuntu14+</code>）默认的服务管理，取代了传统的<code>SystemV</code>风格服务管理。<code>systemd</code>维护系统服务程序，它需要特权去会访问<code>Linux</code>内核。而容器并不是一个完整的操作系统，只有一个文件系统，而且默认启动只是普通用户这样的权限访问<code>Linux</code>内核，也就是没有特权，所以自然就用不了！因此，请遵守容器设计原则，一个容器里运行一个前台服务！</p>
<p>如果想使用<code>systemctl</code>命令，可以使用特权模式启动<code>docker</code>，具体步骤如下：</p>
<h4 id="特权模式运行容器"><a href="#特权模式运行容器" class="headerlink" title="特权模式运行容器"></a>特权模式运行容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker run -d --privileged centos-master init</span><br><span class="line">7474265a02674d34d7ea94c89f05e60a1a2edf7a95ba4830b8e728b512b8e163</span><br></pre></td></tr></table></figure>

<h4 id="后台模式进入容器"><a href="#后台模式进入容器" class="headerlink" title="后台模式进入容器"></a>后台模式进入容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it 7474 bash</span><br></pre></td></tr></table></figure>

<p>再次使用该命令，没问题了。</p>
<h3 id="无法使用cron"><a href="#无法使用cron" class="headerlink" title="无法使用cron"></a>无法使用<code>cron</code></h3><p>报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash: crontab: command not found</span><br></pre></td></tr></table></figure>

<p>解决办法就是安装呗</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@7474265a0267 &#x2F;]# ansible all -m yum -a &#39;name&#x3D;crontabs&#39;</span><br></pre></td></tr></table></figure>

<p>测试，已解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@c5c6db1e6ac4 &#x2F;]# crontab -l</span><br><span class="line">no crontab for root</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>yum</tag>
        <tag>ansible</tag>
        <tag>ansible使用</tag>
        <tag>ansible配置</tag>
        <tag>ansible分组</tag>
        <tag>ansible模块</tag>
        <tag>command</tag>
        <tag>shell</tag>
        <tag>script</tag>
        <tag>copy</tag>
        <tag>file</tag>
        <tag>fetch</tag>
        <tag>pip</tag>
        <tag>service</tag>
        <tag>cron</tag>
        <tag>user</tag>
        <tag>group</tag>
      </tags>
  </entry>
  <entry>
    <title>apiadmin初体验</title>
    <url>/f9964561.html</url>
    <content><![CDATA[<p><code>apiadmin</code>相对来说还是一个新生系统，使用上肯定还是有很多不便和<code>bug</code>；另外更是连官方文档都没有更新全，按照仅有的项目，你或许连部署完成都会成为问题；部署此项目的需求，会<code>thinkphp</code>，会配置<code>nginx</code>或者apache，会点<code>vue</code>（知道<code>webpack</code>）也行，了解以上几点部署应该不成问题。</p>
<a id="more"></a>

<p>本人也是新手一枚，牵涉到二次开发，文档是一点都没讲，我这里按照自己的测试初步写了一个post、get的自定义小接口</p>
<h3 id="首先getAccessToken"><a href="#首先getAccessToken" class="headerlink" title="首先getAccessToken"></a>首先getAccessToken</h3><p>官方文档里没有明确的说获取token需要的参数，接口wiki文档里稍微提了下这个算法，也是让初步接触apiadmin的我费了一番周章。</p>
<h4 id="新建获取token接口"><a href="#新建获取token接口" class="headerlink" title="新建获取token接口"></a>新建获取token接口</h4><p><img data-src="/images/1564124893866.png" alt="1564124893866"></p>
<p>获取token按照图示操作即可，真实类库官方已经替我们写好了</p>
<h4 id="新建获取token的请求参数"><a href="#新建获取token的请求参数" class="headerlink" title="新建获取token的请求参数"></a>新建获取token的请求参数</h4><p><img data-src="/images/1564124945710.png" alt="1564124945710"></p>
<h4 id="返回参数依照返回值上传下即可"><a href="#返回参数依照返回值上传下即可" class="headerlink" title="返回参数依照返回值上传下即可"></a>返回参数依照返回值上传下即可</h4><p><img data-src="/images/1564125038598.png" alt="1564125038598"></p>
<h4 id="如此getAccessToken接口开发完毕"><a href="#如此getAccessToken接口开发完毕" class="headerlink" title="如此getAccessToken接口开发完毕"></a>如此getAccessToken接口开发完毕</h4><p>获取<code>toekn</code>接口需要用到<code>signature</code>密匙，我们要先得到<code>signature</code></p>
<h3 id="获取signature"><a href="#获取signature" class="headerlink" title="获取signature"></a>获取signature</h3><h4 id="首先封装获取signature的参数"><a href="#首先封装获取signature的参数" class="headerlink" title="首先封装获取signature的参数"></a>首先封装获取signature的参数</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序好后应当是如下所示的数据</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;app_id&quot;</span>:<span class="string">&quot;服务器颁发的应用ID&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;app_secret&quot;</span>:<span class="string">&quot;服务器颁发的应用秘钥&quot;</span>,   <span class="comment">//请注意，此字段只是在计算加密串的时候在被加入，API请求请勿传递此字段值</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span>:<span class="string">&quot;设备唯一ID&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rand_str&quot;</span>:<span class="string">&quot;随机字符串&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>:当前系统时间戳</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生成原始字符串"><a href="#生成原始字符串" class="headerlink" title="生成原始字符串"></a>生成原始字符串</h4><p>将上面的数据构建成HTTP查询字符串，如下所示:</p>
<p><code>app_id=服务器颁发的应用ID&amp;app_secret=服务器颁发的应用秘钥&amp;device_id=设备唯一ID&amp;rand_str=随机字符串&amp;timestamp=当前系统时间戳</code></p>
<h4 id="计算signature密匙"><a href="#计算signature密匙" class="headerlink" title="计算signature密匙"></a>计算signature密匙</h4><p>将第三步生成的字符串进行哈希计算（md5）获得最终身份认证秘钥（32位小写md5加密字符串）。</p>
<h3 id="测试获取token接口"><a href="#测试获取token接口" class="headerlink" title="测试获取token接口"></a>测试获取token接口</h3><p><img data-src="/images/1564125137847.png" alt="1564125137847"></p>
<p>按照上面得到的signature测试接口，得到AccessToken。</p>
<h3 id="自定义数据接口"><a href="#自定义数据接口" class="headerlink" title="自定义数据接口"></a>自定义数据接口</h3><p>我们以活动为例，创建一个查询、创建活动的接口。</p>
<h4 id="首先创建数据表"><a href="#首先创建数据表" class="headerlink" title="首先创建数据表"></a>首先创建数据表</h4><p>参照apiadmin模型表创建admin_activity活动表</p>
<p><img data-src="/images/1564125740748.png" alt="1564125740748"></p>
<h4 id="创建数据模型"><a href="#创建数据模型" class="headerlink" title="创建数据模型"></a>创建数据模型</h4><p>在model中创建AdminActivity.php模型文件及对应的类，记得继承Base类</p>
<p><img data-src="/images/1564125799900.png" alt="1564125799900"></p>
<h4 id="创建活动接口类及接口方法"><a href="#创建活动接口类及接口方法" class="headerlink" title="创建活动接口类及接口方法"></a>创建活动接口类及接口方法</h4><p><code>api/controller</code>中创建名为<code>Activity.php</code>的活动类，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">model</span>\<span class="title">AdminActivity</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">util</span>\<span class="title">ReturnCode</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 活动列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//获取所有活动</span></span><br><span class="line">        $activities = AdminActivity::all();</span><br><span class="line">		<span class="comment">//定义活动列表数组</span></span><br><span class="line">        $data = [];</span><br><span class="line">		<span class="comment">//将活动数据集转为数组格式</span></span><br><span class="line">        <span class="keyword">foreach</span>($activities <span class="keyword">as</span> $key=&gt;$value)&#123;</span><br><span class="line">            $data[$key] = $value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;buildSuccess($data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取活动详情</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getActivity</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//获取用户发来的活动id参数</span></span><br><span class="line">        $activity_id = <span class="keyword">$this</span>-&gt;request-&gt;get(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">		<span class="comment">//获取单个活动对象</span></span><br><span class="line">        $activityObj = AdminActivity::get([<span class="string">&#x27;id&#x27;</span>=&gt;$activity_id]);</span><br><span class="line">		<span class="comment">//判断活动是否存在</span></span><br><span class="line">        <span class="keyword">if</span>($activityObj)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;buildSuccess($activityObj-&gt;toArray());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;buildFailed(ReturnCode::INVALID, <span class="string">&#x27;该活动不存在&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 添加活动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//获取用户发来的活动参数</span></span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;request-&gt;post();</span><br><span class="line">		<span class="comment">//写入创建时间</span></span><br><span class="line">        $data[<span class="string">&#x27;create_time&#x27;</span>]=time();</span><br><span class="line">		<span class="comment">//实例化模型</span></span><br><span class="line">        $activity = <span class="keyword">new</span> AdminActivity($data);</span><br><span class="line">		<span class="comment">//保存数据至模型</span></span><br><span class="line">        $activity-&gt;allowField(<span class="literal">true</span>)-&gt;save();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;buildSuccess($activity-&gt;toArray(), <span class="string">&#x27;添加成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加单个活动详情接口"><a href="#添加单个活动详情接口" class="headerlink" title="添加单个活动详情接口"></a>添加单个活动详情接口</h3><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><p><img data-src="/images/1564126336842.png" alt="1564126336842"></p>
<h4 id="添加请求参数"><a href="#添加请求参数" class="headerlink" title="添加请求参数"></a>添加请求参数</h4><p><img data-src="/images/1564126362099.png" alt="1564126362099"></p>
<h4 id="上传响应参数"><a href="#上传响应参数" class="headerlink" title="上传响应参数"></a>上传响应参数</h4><p><img data-src="/images/1564126398074.png" alt="1564126398074"></p>
<h4 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h4><p><img data-src="/images/1564126457984.png" alt="1564126457984"></p>
<h3 id="添加活动列表接口"><a href="#添加活动列表接口" class="headerlink" title="添加活动列表接口"></a>添加活动列表接口</h3><h4 id="创建接口-1"><a href="#创建接口-1" class="headerlink" title="创建接口"></a>创建接口</h4><p><img data-src="/images/1564126505868.png" alt="1564126505868"></p>
<p>活动列表默认获取所有，故无需添加参数</p>
<h4 id="上传响应参数-1"><a href="#上传响应参数-1" class="headerlink" title="上传响应参数"></a>上传响应参数</h4><p>将postman查询的结果格式上传至参数即可</p>
<h4 id="测试接口-1"><a href="#测试接口-1" class="headerlink" title="测试接口"></a>测试接口</h4><p><img data-src="/images/1564126711492.png" alt="1564126711492"></p>
<h3 id="添加创建活动接口"><a href="#添加创建活动接口" class="headerlink" title="添加创建活动接口"></a>添加创建活动接口</h3><h4 id="创建接口-2"><a href="#创建接口-2" class="headerlink" title="创建接口"></a>创建接口</h4><p><img data-src="/images/1564126727793.png" alt="1564126727793"></p>
<h4 id="添加请求参数-1"><a href="#添加请求参数-1" class="headerlink" title="添加请求参数"></a>添加请求参数</h4><p><img data-src="/images/1564126739494.png" alt="1564126739494"></p>
<h4 id="上传响应参数-2"><a href="#上传响应参数-2" class="headerlink" title="上传响应参数"></a>上传响应参数</h4><p><img data-src="/images/1564126750423.png" alt="1564126750423"></p>
<h4 id="测试接口-2"><a href="#测试接口-2" class="headerlink" title="测试接口"></a>测试接口</h4><p><img data-src="/images/1564126770036.png" alt="1564126770036"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>apiadmin</tag>
        <tag>接口</tag>
        <tag>开发接口</tag>
        <tag>api</tag>
        <tag>开发api</tag>
        <tag>php接口开发</tag>
        <tag>phpapi</tag>
      </tags>
  </entry>
  <entry>
    <title>checkbox限制选中数量</title>
    <url>/cf5b448a.html</url>
    <content><![CDATA[<p>牵涉到表单基本上离不开<code>checkbox</code>和<code>radiobox</code>，现在越来越多的程序前端采用<code>vue</code>来编写，就连小程序，小程序内部帮我们提供好了代码，但是需要限制选中个数，就要进行二次加工了。</p>
<a id="more"></a>

<h3 id="修改官方代码示例"><a href="#修改官方代码示例" class="headerlink" title="修改官方代码示例"></a>修改官方代码示例</h3><p>官方代码地址：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9jaGVja2JveC5odG1s">https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html<i class="fa fa-external-link-alt"></i></span></p>
<p>我们着重看切换方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checkboxChange(e) &#123;</span><br><span class="line">  console.log(&#39;checkbox发生change事件，携带value值为：&#39;, e.detail.value)</span><br><span class="line">  const items &#x3D; this.data.items</span><br><span class="line">  const values &#x3D; e.detail.value</span><br><span class="line">  for (let i &#x3D; 0, lenI &#x3D; items.length; i &lt; lenI; ++i) &#123;</span><br><span class="line">    items[i].checked &#x3D; false</span><br><span class="line"></span><br><span class="line">    for (let j &#x3D; 0, lenJ &#x3D; values.length; j &lt; lenJ; ++j) &#123;</span><br><span class="line">      if (items[i].value &#x3D;&#x3D;&#x3D; values[j]) &#123;</span><br><span class="line">        items[i].checked &#x3D; true</span><br><span class="line">        break</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    items</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实解决方法很简单，<code>e.detail.value</code>保存的是我们选中的数据，我们判断下他长度就可以了，比如我们限制最多选3个。</p>
<p>修改后的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checkboxChange(e) &#123;</span><br><span class="line">  console.log(&#39;checkbox发生change事件，携带value值为：&#39;, e.detail.value)</span><br><span class="line">  const items &#x3D; this.data.items</span><br><span class="line">  const values &#x3D; e.detail.value</span><br><span class="line">  &#x2F;&#x2F; 如果长度大于3，直接删除第一个选中的</span><br><span class="line">  if(values.length&gt;3)&#123;</span><br><span class="line">      values.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  for (let i &#x3D; 0, lenI &#x3D; items.length; i &lt; lenI; ++i) &#123;</span><br><span class="line">    items[i].checked &#x3D; false</span><br><span class="line"></span><br><span class="line">    for (let j &#x3D; 0, lenJ &#x3D; values.length; j &lt; lenJ; ++j) &#123;</span><br><span class="line">      if (items[i].value &#x3D;&#x3D;&#x3D; values[j]) &#123;</span><br><span class="line">        items[i].checked &#x3D; true</span><br><span class="line">        break</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    items</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看似没什么问题，甚至测试几次也没发现有异常，但是你如果从下往上选择就发现很大的问题了。</p>
<p>比如选项依次为：中国，美国，俄罗斯，加拿大，韩国，日本。如果你选择的是加拿大、韩国和日本，再尝试点击中国、美国、俄罗斯中的任意一个，发现无效，并没有删除第一个，而添加进来新点击的选项。</p>
<p>此时观察下输出<code>e.detail.value</code>，我们点击中、美、俄，发现<code>e.detail.value</code>里存的就是中美俄，我们依次点击俄美中，<code>e.detail.value</code>中存的还是中美俄,也就是说人根本不按我们点击的顺序来依次保存选项，所以会出现选中三个再选上面的没反应了，因为上面的加在第一个了然后直接又被删除掉了。不管他们基于什么这样写的，我们就按照自己的逻辑写一个。</p>
<h3 id="自定义方案"><a href="#自定义方案" class="headerlink" title="自定义方案"></a>自定义方案</h3><p>我们看下<code>wxml</code>可以看出他们的点击事件挂载到了<code>checkbox-group</code>组件上，并不是绑定到<code>checkbox-item</code>上，我们按照自己的逻辑就绑定到每个选项上。</p>
<p>直接上代码，<code>wxml</code>部分(我这里使用的<code>uni-app</code>，跟原生小程序相差不大)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;checkbox-group class&#x3D;&quot;block&quot; name&#x3D;&quot;purpose_abroad&quot;&gt;</span><br><span class="line"></span><br><span class="line">		&lt;view class&#x3D;&quot;cu-form-group&quot; @click&#x3D;&quot;checkboxChange(index)&quot; v-for&#x3D;&quot;(item, index) in purpose_abroad&quot; :key&#x3D;&#39;index&#39;&gt;</span><br><span class="line">			&lt;view class&#x3D;&quot;title&quot;&gt;&#123;&#123;item.value&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;checkbox :class&#x3D;&quot;item.checked?&#39;checked&#39;:&#39;&#39;&quot; :checked&#x3D;&quot;item.checked&quot; :value&#x3D;&quot;item.value&quot;&gt;&lt;&#x2F;checkbox&gt;</span><br><span class="line">		&lt;&#x2F;view&gt;</span><br><span class="line">	&lt;&#x2F;checkbox-group&gt;</span><br></pre></td></tr></table></figure>

<p>我的逻辑是点击该项，会把该项在选项列表中对应的索引带到函数中，我们在函数中根据该索引提取其值和样式控制。</p>
<p><code>js</code>部分，包含数据项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            purpose_abroad: [&#123;</span><br><span class="line">                value: &#39;子女教育&#39;,</span><br><span class="line">                checked: false</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                value: &#39;环境与健康&#39;,</span><br><span class="line">                checked: false</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                value: &#39;税务筹划&#39;,</span><br><span class="line">                checked: false</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                value: &#39;出行自由&#39;,</span><br><span class="line">                checked: false</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                value: &#39;海外资产配置&#39;,</span><br><span class="line">                checked: false</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                value: &#39;财富传承&#39;,</span><br><span class="line">                checked: false</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                value: &#39;海外创业&#39;,</span><br><span class="line">                checked: false</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                value: &#39;其他&#39;,</span><br><span class="line">                checked: false</span><br><span class="line">            &#125;],</span><br><span class="line">            purpose_abroad_result: [],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 出国目的</span><br><span class="line">        checkboxChange(index) &#123;</span><br><span class="line">            &#x2F;&#x2F; 判断是否已选中3项了				</span><br><span class="line">            if (this.purpose_abroad_result.length &gt; 2) &#123;</span><br><span class="line">                &#x2F;&#x2F; 删除结果中第一个选中的项</span><br><span class="line">                var deleted_item &#x3D; this.purpose_abroad_result.shift()</span><br><span class="line">                &#x2F;&#x2F; 循环选项列表,一一比对,找出第一项在想选列表中的索引,修改其选中状态					</span><br><span class="line">                for (var i &#x3D; 0; i &lt; this.purpose_abroad.length; i++) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 判断该项是否是要删除的项</span><br><span class="line">                    if (this.purpose_abroad[i].value &#x3D;&#x3D; deleted_item) &#123;</span><br><span class="line">                        this.purpose_abroad[i].checked &#x3D; false</span><br><span class="line">                        break</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 判断当前选项是否已被选</span><br><span class="line">            if (this.purpose_abroad[index].checked) &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果当前项已被选中,则取消选中</span><br><span class="line">                this.purpose_abroad[index].checked &#x3D; false</span><br><span class="line">                &#x2F;&#x2F; 并将该选中值从结果中删除</span><br><span class="line">                &#x2F;&#x2F; 找出该项在结果中的索引</span><br><span class="line">                this.purpose_abroad_result.splice(this.purpose_abroad_result.indexOf(this.purpose_abroad[index].value), 1)</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; 选中该项</span><br><span class="line">                this.purpose_abroad[index].checked &#x3D; true</span><br><span class="line">                &#x2F;&#x2F; 将该项添加至结果中</span><br><span class="line">                this.purpose_abroad_result.push(this.purpose_abroad[index].value)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>展示效果：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/QQ%E5%BD%95%E5%B1%8F20200630151840.gif" alt="img"></p>
]]></content>
      <categories>
        <category>fe</category>
        <category>miniprogram</category>
      </categories>
      <tags>
        <tag>checkbox限制选中数量</tag>
        <tag>多选框限制选中</tag>
        <tag>多选框限制数量</tag>
        <tag>checkbox个数</tag>
        <tag>checkbox限制勾选</tag>
      </tags>
  </entry>
  <entry>
    <title>django使用ueditor服务器端配置</title>
    <url>/9923e2ee.html</url>
    <content><![CDATA[<p>之前我们说到了<code>vue</code>中使用<code>editor</code>，可以使用<code>vue-ueditor-wrap</code>，其实<code>python</code>中也有人帮我们集成了<code>ueditor</code>，今天我们不打算从零写<code>ueditor</code>服务端接口，参考**<code>DjangoUeditor3</code>**定制属于我们自己的<code>ueditor</code>服务端接口</p>
<a id="more"></a>

<p>我们来打开<code>DjangoUeditor3</code>的仓库<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R3ejkxNS9EamFuZ29VZWRpdG9yMyVFRiVCQyU4Qw==">https://github.com/twz915/DjangoUeditor3，<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="拷贝项目源码"><a href="#拷贝项目源码" class="headerlink" title="拷贝项目源码"></a>拷贝项目源码</h2><h3 id="新建视图"><a href="#新建视图" class="headerlink" title="新建视图"></a>新建视图</h3><p>新建我们的<code>ueditor</code>视图接口<code>ueditor_view.py</code></p>
<p>拷贝仓库中的<code>DjangoUeditor3/DjangoUeditor/views.py</code>文件内容到<code>ueditor_view.py</code></p>
<h3 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h3><p>视图中引用了自己的一个<code>setting</code>，包含自己<code>ueditor</code>上传的一些设置，我们也一起拿过来</p>
<p>在我们当前应用中创建<code>settings.py</code></p>
<p><code>DjangoUeditor3/DjangoUeditor/settings.py</code>复制到其中</p>
<h3 id="创建接口url"><a href="#创建接口url" class="headerlink" title="创建接口url"></a>创建接口<code>url</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app.ueditorviews <span class="keyword">import</span> get_ueditor_controller</span><br><span class="line">path(<span class="string">&#x27;controller&#x27;</span>,get_ueditor_controller)</span><br></pre></td></tr></table></figure>

<p><code>get_ueditor_controller</code>就是我们的入口</p>
<h2 id="连接前端vue"><a href="#连接前端vue" class="headerlink" title="连接前端vue"></a>连接前端<code>vue</code></h2><p>将<a href="/574181d3.html"><code>vue</code>使用<code>ueditor</code>前端配置</a>中的<code>serverUrl</code>配置为我们刚才的接口地址，我这里都在本地测试，端口不同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">serverUrl: <span class="string">&#x27;http://localhost:8000/controller&#x27;</span>,</span><br></pre></td></tr></table></figure>

<h3 id="初试接口"><a href="#初试接口" class="headerlink" title="初试接口"></a>初试接口</h3><h4 id="点击上传图片无反应"><a href="#点击上传图片无反应" class="headerlink" title="点击上传图片无反应"></a>点击上传图片无反应</h4><p>默认请求接口带了一个<code>action</code>和<code>callback</code>的参数，200接口访问成功，但是却没有取回任何数据，观察下之前我们用到的测试服务接口，是有返回数据的，对方是用的<code>php</code>，我们来看下<code>ueditor_view.py</code>源码</p>
<p>控制台也打印了如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Cross-Origin Read Blocking (CORB) blocked cross-origin response http://localhost:8000/controller?action=config&amp;callback=bd__editor__ve7qge with MIME type text/html. See https://www.chromestatus.com/feature/5629709824032768 for more details.</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190829161101.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ueditor_controller</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取ueditor的后端URL地址&quot;&quot;&quot;</span></span><br><span class="line">    action = request.GET.get(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    reponseAction = &#123;</span><br><span class="line">        <span class="string">&quot;config&quot;</span>: get_ueditor_settings,</span><br><span class="line">        <span class="string">&quot;uploadimage&quot;</span>: UploadFile,</span><br><span class="line">        <span class="string">&quot;uploadscrawl&quot;</span>: UploadFile,</span><br><span class="line">        <span class="string">&quot;uploadvideo&quot;</span>: UploadFile,</span><br><span class="line">        <span class="string">&quot;uploadfile&quot;</span>: UploadFile,</span><br><span class="line">        <span class="string">&quot;catchimage&quot;</span>: catcher_remote_image,</span><br><span class="line">        <span class="string">&quot;listimage&quot;</span>: list_files,</span><br><span class="line">        <span class="string">&quot;listfile&quot;</span>: list_files</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reponseAction[action](request)</span><br></pre></td></tr></table></figure>

<p>可以看出来做了一个类似反射的东西，初始连接带了<code>action</code>参数为<code>config</code>，所以对应的把我们给踢到<code>get_ueditor_settings</code>方法中了，继续跟进到这个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ueditor_settings</span>(<span class="params">request</span>):</span></span><br><span class="line">    json_data = json.dumps(</span><br><span class="line">        USettings.UEditorUploadSettings,</span><br><span class="line">        ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json_data, content_type=<span class="string">&quot;application/javascript&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>我们来打印下<code>json_data</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;imageActionName&quot;</span>: <span class="string">&quot;uploadimage&quot;</span>, <span class="attr">&quot;imageMaxSize&quot;</span>: <span class="number">10485760</span>, <span class="attr">&quot;imageFieldName&quot;</span>: <span class="string">&quot;upfile&quot;</span>, <span class="attr">&quot;imageUrlPrefix&quot;</span>: <span class="string">&quot;http://localhost:8000&quot;</span>, <span class="attr">&quot;imagePathFormat&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;imageAllowFiles&quot;</span>: [<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.bmp&quot;</span>], <span class="attr">&quot;scrawlActionName&quot;</span>: <span class="string">&quot;uploadscrawl&quot;</span>, <span class="attr">&quot;scrawlFieldName&quot;</span>: <span class="string">&quot;upfile&quot;</span>, <span class="attr">&quot;scrawlMaxSize&quot;</span>: <span class="number">10485760</span>, <span class="attr">&quot;scrawlUrlPrefix&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;scrawlPathFormat&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;snapscreenActionName&quot;</span>: <span class="string">&quot;uploadimage&quot;</span>, <span class="attr">&quot;snapscreenPathFormat&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;snapscreenUrlPrefix&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;catcherLocalDomain&quot;</span>: [<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;img.baidu.com&quot;</span>], <span class="attr">&quot;catcherPathFormat&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;catcherActionName&quot;</span>: <span class="string">&quot;catchimage&quot;</span>, <span class="attr">&quot;catcherFieldName&quot;</span>: <span class="string">&quot;source&quot;</span>, <span class="attr">&quot;catcherMaxSize&quot;</span>: <span class="number">10485760</span>, <span class="attr">&quot;catcherAllowFiles&quot;</span>: [<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.bmp&quot;</span>], <span class="attr">&quot;catcherUrlPrefix&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;videoActionName&quot;</span>: <span class="string">&quot;uploadvideo&quot;</span>, <span class="attr">&quot;videoPathFormat&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;videoFieldName&quot;</span>: <span class="string">&quot;upfile&quot;</span>, <span class="attr">&quot;videoMaxSize&quot;</span>: <span class="number">102400000</span>, <span class="attr">&quot;videoUrlPrefix&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;videoAllowFiles&quot;</span>: [<span class="string">&quot;.flv&quot;</span>, <span class="string">&quot;.swf&quot;</span>, <span class="string">&quot;.mkv&quot;</span>, <span class="string">&quot;.avi&quot;</span>, <span class="string">&quot;.rm&quot;</span>, <span class="string">&quot;.rmvb&quot;</span>, <span class="string">&quot;.mpeg&quot;</span>, <span class="string">&quot;.mpg&quot;</span>, <span class="string">&quot;.ogg&quot;</span>, <span class="string">&quot;.ogv&quot;</span>, <span class="string">&quot;.mov&quot;</span>, <span class="string">&quot;.wmv&quot;</span>, <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;.webm&quot;</span>, <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;.wav&quot;</span>, <span class="string">&quot;.mid&quot;</span>], <span class="attr">&quot;fileActionName&quot;</span>: <span class="string">&quot;uploadfile&quot;</span>, <span class="attr">&quot;filePathFormat&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;fileFieldName&quot;</span>: <span class="string">&quot;upfile&quot;</span>, <span class="attr">&quot;fileMaxSize&quot;</span>: <span class="number">204800000</span>, <span class="attr">&quot;fileUrlPrefix&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;fileAllowFiles&quot;</span>: [<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.bmp&quot;</span>, <span class="string">&quot;.flv&quot;</span>, <span class="string">&quot;.swf&quot;</span>, <span class="string">&quot;.mkv&quot;</span>, <span class="string">&quot;.avi&quot;</span>, <span class="string">&quot;.rm&quot;</span>, <span class="string">&quot;.rmvb&quot;</span>, <span class="string">&quot;.mpeg&quot;</span>, <span class="string">&quot;.mpg&quot;</span>, <span class="string">&quot;.ogg&quot;</span>, <span class="string">&quot;.ogv&quot;</span>, <span class="string">&quot;.mov&quot;</span>, <span class="string">&quot;.wmv&quot;</span>, <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;.webm&quot;</span>, <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;.wav&quot;</span>, <span class="string">&quot;.mid&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.tar&quot;</span>, <span class="string">&quot;.gz&quot;</span>, <span class="string">&quot;.7z&quot;</span>, <span class="string">&quot;.bz2&quot;</span>, <span class="string">&quot;.cab&quot;</span>, <span class="string">&quot;.iso&quot;</span>, <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.docx&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.xlsx&quot;</span>, <span class="string">&quot;.ppt&quot;</span>, <span class="string">&quot;.pptx&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.md&quot;</span>, <span class="string">&quot;.xml&quot;</span>], <span class="attr">&quot;imageManagerActionName&quot;</span>: <span class="string">&quot;listimage&quot;</span>, <span class="attr">&quot;imageManagerListPath&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;imageManagerListSize&quot;</span>: <span class="number">30</span>, <span class="attr">&quot;imageManagerAllowFiles&quot;</span>: [<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.bmp&quot;</span>], <span class="attr">&quot;imageManagerUrlPrefix&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;fileManagerActionName&quot;</span>: <span class="string">&quot;listfile&quot;</span>, <span class="attr">&quot;fileManagerListPath&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;fileManagerUrlPrefix&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;fileManagerListSize&quot;</span>: <span class="number">30</span>, <span class="attr">&quot;fileManagerAllowFiles&quot;</span>: [<span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.bmp&quot;</span>, <span class="string">&quot;.tif&quot;</span>, <span class="string">&quot;.psd.flv&quot;</span>, <span class="string">&quot;.swf&quot;</span>, <span class="string">&quot;.mkv&quot;</span>, <span class="string">&quot;.avi&quot;</span>, <span class="string">&quot;.rm&quot;</span>, <span class="string">&quot;.rmvb&quot;</span>, <span class="string">&quot;.mpeg&quot;</span>, <span class="string">&quot;.mpg&quot;</span>, <span class="string">&quot;.ogg&quot;</span>, <span class="string">&quot;.ogv&quot;</span>, <span class="string">&quot;.mov&quot;</span>, <span class="string">&quot;.wmv&quot;</span>, <span class="string">&quot;.mp4&quot;</span>, <span class="string">&quot;.webm&quot;</span>, <span class="string">&quot;.mp3&quot;</span>, <span class="string">&quot;.wav&quot;</span>, <span class="string">&quot;.mid&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.tar&quot;</span>, <span class="string">&quot;.gz&quot;</span>, <span class="string">&quot;.7z&quot;</span>, <span class="string">&quot;.bz2&quot;</span>, <span class="string">&quot;.cab&quot;</span>, <span class="string">&quot;.iso&quot;</span>, <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.docx&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.xlsx&quot;</span>, <span class="string">&quot;.ppt&quot;</span>, <span class="string">&quot;.pptx&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.md&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.exe&quot;</span>, <span class="string">&quot;.com&quot;</span>, <span class="string">&quot;.dll&quot;</span>, <span class="string">&quot;.msi&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>

<p>有返回数据，可以前台没有响应，再仔细观察下除了<code>action</code>还带了一个<code>callback</code>参数，我们还没用到，刷新发下，这个<code>callback</code>的值每次还随机变动，跟原示例返回值比较下，外层少了一个<code>callback()</code>,我们简单来组装下这个参数。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">callback = request.GET.get(&#x27;callback&#x27;)</span><br><span class="line">json_data = &#x27;%s(%s)&#x27; % (callback,json_data)</span><br></pre></td></tr></table></figure>

<p>再次测试，控制台没有警告了，且我们也取到返回值了</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">bd__editor__dzdteh(&#123;&quot;imageActionName&quot;: &quot;uploadimage&quot;, &quot;imageMaxSize&quot;: 10485760, &quot;imageFieldName&quot;: &quot;upfile&quot;, &quot;imageUrlPrefix&quot;: &quot;http://localhost:8000&quot;, &quot;imagePathFormat&quot;: &quot;&quot;, &quot;imageAllowFiles&quot;: [&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.bmp&quot;], &quot;scrawlActionName&quot;: &quot;uploadscrawl&quot;, &quot;scrawlFieldName&quot;: &quot;upfile&quot;, &quot;scrawlMaxSize&quot;: 10485760, &quot;scrawlUrlPrefix&quot;: &quot;&quot;, &quot;scrawlPathFormat&quot;: &quot;&quot;, &quot;snapscreenActionName&quot;: &quot;uploadimage&quot;, &quot;snapscreenPathFormat&quot;: &quot;&quot;, &quot;snapscreenUrlPrefix&quot;: &quot;&quot;, &quot;catcherLocalDomain&quot;: [&quot;127.0.0.1&quot;, &quot;localhost&quot;, &quot;img.baidu.com&quot;], &quot;catcherPathFormat&quot;: &quot;&quot;, &quot;catcherActionName&quot;: &quot;catchimage&quot;, &quot;catcherFieldName&quot;: &quot;source&quot;, &quot;catcherMaxSize&quot;: 10485760, &quot;catcherAllowFiles&quot;: [&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.bmp&quot;], &quot;catcherUrlPrefix&quot;: &quot;&quot;, &quot;videoActionName&quot;: &quot;uploadvideo&quot;, &quot;videoPathFormat&quot;: &quot;&quot;, &quot;videoFieldName&quot;: &quot;upfile&quot;, &quot;videoMaxSize&quot;: 102400000, &quot;videoUrlPrefix&quot;: &quot;&quot;, &quot;videoAllowFiles&quot;: [&quot;.flv&quot;, &quot;.swf&quot;, &quot;.mkv&quot;, &quot;.avi&quot;, &quot;.rm&quot;, &quot;.rmvb&quot;, &quot;.mpeg&quot;, &quot;.mpg&quot;, &quot;.ogg&quot;, &quot;.ogv&quot;, &quot;.mov&quot;, &quot;.wmv&quot;, &quot;.mp4&quot;, &quot;.webm&quot;, &quot;.mp3&quot;, &quot;.wav&quot;, &quot;.mid&quot;], &quot;fileActionName&quot;: &quot;uploadfile&quot;, &quot;filePathFormat&quot;: &quot;&quot;, &quot;fileFieldName&quot;: &quot;upfile&quot;, &quot;fileMaxSize&quot;: 204800000, &quot;fileUrlPrefix&quot;: &quot;&quot;, &quot;fileAllowFiles&quot;: [&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.bmp&quot;, &quot;.flv&quot;, &quot;.swf&quot;, &quot;.mkv&quot;, &quot;.avi&quot;, &quot;.rm&quot;, &quot;.rmvb&quot;, &quot;.mpeg&quot;, &quot;.mpg&quot;, &quot;.ogg&quot;, &quot;.ogv&quot;, &quot;.mov&quot;, &quot;.wmv&quot;, &quot;.mp4&quot;, &quot;.webm&quot;, &quot;.mp3&quot;, &quot;.wav&quot;, &quot;.mid&quot;, &quot;.rar&quot;, &quot;.zip&quot;, &quot;.tar&quot;, &quot;.gz&quot;, &quot;.7z&quot;, &quot;.bz2&quot;, &quot;.cab&quot;, &quot;.iso&quot;, &quot;.doc&quot;, &quot;.docx&quot;, &quot;.xls&quot;, &quot;.xlsx&quot;, &quot;.ppt&quot;, &quot;.pptx&quot;, &quot;.pdf&quot;, &quot;.txt&quot;, &quot;.md&quot;, &quot;.xml&quot;], &quot;imageManagerActionName&quot;: &quot;listimage&quot;, &quot;imageManagerListPath&quot;: &quot;&quot;, &quot;imageManagerListSize&quot;: 30, &quot;imageManagerAllowFiles&quot;: [&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.bmp&quot;], &quot;imageManagerUrlPrefix&quot;: &quot;&quot;, &quot;fileManagerActionName&quot;: &quot;listfile&quot;, &quot;fileManagerListPath&quot;: &quot;&quot;, &quot;fileManagerUrlPrefix&quot;: &quot;&quot;, &quot;fileManagerListSize&quot;: 30, &quot;fileManagerAllowFiles&quot;: [&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.bmp&quot;, &quot;.tif&quot;, &quot;.psd.flv&quot;, &quot;.swf&quot;, &quot;.mkv&quot;, &quot;.avi&quot;, &quot;.rm&quot;, &quot;.rmvb&quot;, &quot;.mpeg&quot;, &quot;.mpg&quot;, &quot;.ogg&quot;, &quot;.ogv&quot;, &quot;.mov&quot;, &quot;.wmv&quot;, &quot;.mp4&quot;, &quot;.webm&quot;, &quot;.mp3&quot;, &quot;.wav&quot;, &quot;.mid&quot;, &quot;.rar&quot;, &quot;.zip&quot;, &quot;.tar&quot;, &quot;.gz&quot;, &quot;.7z&quot;, &quot;.bz2&quot;, &quot;.cab&quot;, &quot;.iso&quot;, &quot;.doc&quot;, &quot;.docx&quot;, &quot;.xls&quot;, &quot;.xlsx&quot;, &quot;.ppt&quot;, &quot;.pptx&quot;, &quot;.pdf&quot;, &quot;.txt&quot;, &quot;.md&quot;, &quot;.xml&quot;, &quot;.exe&quot;, &quot;.com&quot;, &quot;.dll&quot;, &quot;.msi&quot;]&#125;)</span><br></pre></td></tr></table></figure>

<p>测试单图片上传，应该大多数人已经可以成功上传了。</p>
<p><strong>图片上传成功，却提示上传错误，不显示图片</strong></p>
<p>这部分都是跨域问题，解决办法如下：<code>UploadFile</code>函数返回值做修改，添加一个<code>header</code>即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = HttpResponse(json.dumps(return_info, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">response[<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="测试多图片"><a href="#测试多图片" class="headerlink" title="测试多图片"></a>测试多图片</h3><p>点击上传多张图片按钮会出现以下提示：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190829162706.png"></p>
<p>控制台：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://localhost:8000/controller?action=uploadimage&amp;encode=utf-8&#x27; from origin &#x27;http://localhost:8080&#x27; has been blocked by CORS policy: Request header field x_requested_with is not allowed by Access-Control-Allow-Headers in preflight response.</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190829162822.png"></p>
<p>图片上传失败；跨域问题；而且访问接口请求成功200，请求方法却是<code>options</code>以前没有用到过该方法，百度查了下，大概意思是说这个浏览器自己发的，先试探下服务器允不允许。我在<code>ueditor_view</code>入口函数包括上传函数中都打印请求，很显然什么也没打印出来，真是不知道这个<code>options</code>方法会走到程序的哪里，甚至打算将这个视图写成<code>cbv</code>，走走<code>options</code>函数试试。</p>
<p>后来想到初始使用<code>vue</code>连<code>django</code>时也出现了该提示，详见：<a href="/807b7587.html">Access-Control-Allow-Origin跨域问题</a>，当时用的是</p>
<p><code>django-cors-headers</code>，按照文中内容配置好</p>
<p>主要配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CORS_ALLOW_HEADERS = [</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>测试多图片上传，完美</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190829164100.png"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django-cors-headers</tag>
        <tag>django ueditor</tag>
        <tag>ueditor服务端</tag>
        <tag>ueditor跨域</tag>
        <tag>ueditor多图片上传</tag>
        <tag>ueditor多图片跨域</tag>
        <tag>ueditor单图片跨域</tag>
        <tag>ueditor上传失败</tag>
        <tag>ueditor上传成功不显示</tag>
        <tag>ueditor上传错误</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/953.html</url>
    <content><![CDATA[<p>Git 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 在本书中，我们将使用命令行模式。 这是因为首先，只有在命令行模式下你才能执行 Git 的 <strong>所有</strong>命令，而大多数的 GUI 软件只实现了 Git 所有功能的一个子集以降低操作难度。 如果你学会了在命令行下如何操作，那么你在操作 GUI 软件时应该也不会遇到什么困难，但是，反之则不成立。 此外，由于每个人的想法与侧重点不同，不同的人常常会安装不同的 GUI 软件，但 <em>所有</em> 人一定会有命令行工具。</p>
<a id="more"></a>

<p>假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本书中的讲述和举例将用到这些技能。</p>
<p>上传代码至远程仓库流程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add &#x27;aaa.txt&#x27;</span><br><span class="line">添加aaa.txt文件</span><br><span class="line">git add .</span><br><span class="line">添加当前文件夹所有文件及文件夹</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;本次修改注释&#x27;</span><br><span class="line">提交文件</span><br><span class="line"></span><br><span class="line">git remote add origin https://gitee.com/tonyyu2016/pythonquanzhanhanvuexuexidaima.git</span><br><span class="line">推送至远程仓库https://gitee.com/tonyyu2016/pythonquanzhanhanvuexuexidaima.git；</span><br><span class="line">origin为https://gitee.com/tonyyu2016/pythonquanzhanhanvuexuexidaima.git别名</span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br><span class="line">上传master分支到别名为origin的仓库</span><br></pre></td></tr></table></figure>

<h3 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置:"></a>Git 全局设置:</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config -<span class="literal">-global</span> user.name <span class="string">&quot;托小尼的微博&quot;</span></span><br><span class="line">git config -<span class="literal">-global</span> user.email <span class="string">&quot;646547989@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库:"></a>创建 git 仓库:</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir pythonquanzhanhanvuexuexidaima</span><br><span class="line">cd pythonquanzhanhanvuexuexidaima</span><br><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://gitee.com/tonyyu2016/pythonquanzhanhanvuexuexidaima.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>已有仓库?</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd existing_git_repo</span><br><span class="line">git remote add origin https://gitee.com/tonyyu2016/pythonquanzhanhanvuexuexidaima.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h3 id="git分支："><a href="#git分支：" class="headerlink" title="git分支："></a>git分支：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">创建dev分支</span><br><span class="line"></span><br><span class="line">git checkout dev</span><br><span class="line">切换至dev分支</span><br><span class="line"></span><br><span class="line">上述两行代码等同于：</span><br><span class="line">git checkout -b dev</span><br><span class="line"></span><br><span class="line">git merge dev</span><br><span class="line">将dev分支合并至当前分支</span><br></pre></td></tr></table></figure>

<h3 id="克隆下载托管代码："><a href="#克隆下载托管代码：" class="headerlink" title="克隆下载托管代码："></a>克隆下载托管代码：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/schacon/grit.git</span><br><span class="line">下载代码至当前文件夹</span><br></pre></td></tr></table></figure>

<h3 id="查看远程仓库地址："><a href="#查看远程仓库地址：" class="headerlink" title="查看远程仓库地址："></a>查看远程仓库地址：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitee   https://gitee.com/tonyyu2016/pythonquanzhanhanvuexuexidaima.git (fetch)</span><br><span class="line">gitee   https://gitee.com/tonyyu2016/pythonquanzhanhanvuexuexidaima.git (push)</span><br><span class="line">origin  git@github.com:646547989/python-vue-.git (fetch)</span><br><span class="line">origin  git@github.com:646547989/python-vue-.git (push)</span><br></pre></td></tr></table></figure>

<h3 id="删除远程仓库地址："><a href="#删除远程仓库地址：" class="headerlink" title="删除远程仓库地址："></a>删除远程仓库地址：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm gitee</span><br></pre></td></tr></table></figure>

<h3 id="添加配置远程仓库地址："><a href="#添加配置远程仓库地址：" class="headerlink" title="添加配置远程仓库地址："></a>添加配置远程仓库地址：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin url </span><br></pre></td></tr></table></figure>

<h3 id="同一别名配置多个远程仓库地址"><a href="#同一别名配置多个远程仓库地址" class="headerlink" title="同一别名配置多个远程仓库地址"></a>同一别名配置多个远程仓库地址</h3><h5 id="首先添加别名为origin的第一个远程仓库地址"><a href="#首先添加别名为origin的第一个远程仓库地址" class="headerlink" title="首先添加别名为origin的第一个远程仓库地址"></a>首先添加别名为origin的第一个远程仓库地址</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin url1</span><br></pre></td></tr></table></figure>

<h5 id="使用origin别名添加第二个远程仓库地址"><a href="#使用origin别名添加第二个远程仓库地址" class="headerlink" title="使用origin别名添加第二个远程仓库地址"></a>使用origin别名添加第二个远程仓库地址</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url --add origin url2</span><br></pre></td></tr></table></figure>

<h5 id="查看是否添加成功"><a href="#查看是否添加成功" class="headerlink" title="查看是否添加成功"></a>查看是否添加成功</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">origin  url1 (fetch)</span><br><span class="line">origin  url1 (push)</span><br><span class="line">origin  url2 (push)</span><br></pre></td></tr></table></figure>

<h5 id="一行命令推送到多个仓库"><a href="#一行命令推送到多个仓库" class="headerlink" title="一行命令推送到多个仓库"></a>一行命令推送到多个仓库</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master:master</span><br><span class="line">或</span><br><span class="line">git push origin --all</span><br><span class="line">或</span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure>

<p>如果推送失败，很大程度上是因为没有吧本地ssh密匙添加至仓库公匙中</p>
]]></content>
      <tags>
        <tag>git命令</tag>
      </tags>
  </entry>
  <entry>
    <title>django软删除与模型字段复用</title>
    <url>/ebdbdc90.html</url>
    <content><![CDATA[<p>之前使用<code>TP</code>，框架自带有软删除功能，如果使用<code>django</code>，虽然没有内置，我们也可以来简单的手写一下。想到这里权衡下，我们几乎所有的表都要用到这个字段甚至多个字段，当然我们可以不厌其烦的每个模型单独创建下，我们也可以使用代码复用的思想来完成这件事。</p>
<a id="more"></a>

<h2 id="模型字段复用"><a href="#模型字段复用" class="headerlink" title="模型字段复用"></a>模型字段复用</h2><p>需要复用的字段有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create_time = models.DateTimeField(verbose_name=<span class="string">&#x27;添加时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">update_time = models.DateTimeField(verbose_name=<span class="string">&#x27;更新时间&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">delete_time = models.DateTimeField(verbose_name=<span class="string">&#x27;删除时间&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>模型类都有一个元属性，有一个关键字叫<code>abstract</code>，如果将该属性设置为<code>True</code>，数据库将不再创建该表。然而我们可以利用其来做父类，继承过来所有的模型不就自带这些字段了吗。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoftDeleteModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    create_time = models.DateTimeField(verbose_name=<span class="string">&#x27;添加时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(verbose_name=<span class="string">&#x27;更新时间&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">    delete_time = models.DateTimeField(verbose_name=<span class="string">&#x27;删除时间&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatsModel</span>(<span class="params">SoftDeleteModel</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">25</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    remark = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">&#x27;备注&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>如此，<code>CatsModel</code>数据表中变自带了三个字段，其他模型同理。</p>
<h2 id="Django软删除"><a href="#Django软删除" class="headerlink" title="Django软删除"></a><code>Django</code>软删除</h2><p>软删除也要用到字段复用，默认<code>delete_time</code>为<code>Null</code>，删除时该字段为当前删除时间，这样就形成了软删除。</p>
<p>网上有的说在模型里直接重写<code>delete</code>方法，即可完成自定义软删除，我们来分析下我们的删除命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TableModel.objects.filter(pk=<span class="number">2</span>).delete()</span><br></pre></td></tr></table></figure>

<p>可以看到是走了一个<code>objects</code>的东西，如果你尝试过在模型类中重写<code>delete</code>方法你会发现，这条命令根本不会走你自己的<code>delete</code>方法。</p>
<h3 id="objects是什么"><a href="#objects是什么" class="headerlink" title="objects是什么"></a>objects是什么</h3><p>默认情况下，<code>Django</code> 为每个<code>Django</code>模型类添加一个模型管理类<code>Manager</code>的对象为<code>objects</code>。如果想要将这个对象修改为其他名称，那么可以用<code>models.Manager()</code>来自定义创建对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AREA</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    ....</span><br><span class="line">    area_obj = models.Manager() <span class="comment"># 自定义模型管理对象</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;AREA&#x27;</span> <span class="comment"># 设置表名为 AREA</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 此时执行数据库操作，我们就可以不用objects了</span></span><br><span class="line">AREA.area_obj.filter(pk=<span class="number">2</span>).first()</span><br><span class="line">AREA.area_obj.filter(pk=<span class="number">2</span>).delete()</span><br></pre></td></tr></table></figure>

<h3 id="软删除示例"><a href="#软删除示例" class="headerlink" title="软删除示例"></a>软删除示例</h3><h4 id="创建自定义manager"><a href="#创建自定义manager" class="headerlink" title="创建自定义manager"></a>创建自定义<code>manager</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.db.models.query <span class="keyword">import</span> QuerySet</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="comment"># 重写delete</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoftDeleteQuerySet</span>(<span class="params">QuerySet</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.update(delete_time=timezone.now())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写manager，并重置查询筛选未删除记录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoftDeleteManager</span>(<span class="params">models.Manager</span>):</span></span><br><span class="line">    _queryset_class = SoftDeleteQuerySet</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        kwargs = &#123;<span class="string">&#x27;model&#x27;</span>:self.model, <span class="string">&#x27;using&#x27;</span>:self._db&#125;</span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">&#x27;_hints&#x27;</span>):</span><br><span class="line">            kwargs[<span class="string">&#x27;hints&#x27;</span>] = self._hints</span><br><span class="line">        <span class="keyword">return</span> self._queryset_class(**kwargs).filter(delete_time__isnull=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软删除模型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoftDeleteModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    create_time = models.DateTimeField(verbose_name=<span class="string">&#x27;添加时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(verbose_name=<span class="string">&#x27;更新时间&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">    delete_time = models.DateTimeField(verbose_name=<span class="string">&#x27;删除时间&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">    objects = SoftDeleteManager()</span><br></pre></td></tr></table></figure>

<h4 id="继承软删除模型"><a href="#继承软删除模型" class="headerlink" title="继承软删除模型"></a>继承软删除模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatsModel</span>(<span class="params">SoftDeleteModel</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">25</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    remark = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">&#x27;备注&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>以上即完成了软删除的功能，迁移下数据库测试数据，看是否达到你想要的了！！！</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django软删除</tag>
        <tag>字段复用</tag>
        <tag>django字段复用</tag>
        <tag>django模型复用</tag>
        <tag>django共用字段</tag>
        <tag>django通用字段</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/58913.html</url>
    <content><![CDATA[<p>hexo常用命令，下面解释每个命令的具体使用方式</p>
<a id="more"></a>

<p>常见命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>

<p>缩写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure>

<p>组合命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>

<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>

<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbg==">_config.yml<i class="fa fa-external-link-alt"></i></span> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>

<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>



<h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>发表草稿。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>, <code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>



<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>

<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o</code>, <code>--output</code></td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>从其他博客系统 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvbWlncmF0aW9u">迁移内容<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>列出网站资料。</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>

<p>显示 Hexo 版本。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure>

<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure>

<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcy9uZXc=">提交调试信息到 GitHub<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure>

<p>隐藏终端信息。</p>
<h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>

<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>

<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>
<h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>

<p>自定义当前工作目录（Current working directory）的路径。</p>
]]></content>
      <tags>
        <tag>hexo, npm</tag>
      </tags>
  </entry>
  <entry>
    <title>iview-admin上线部署踩坑记</title>
    <url>/6fe23185.html</url>
    <content><![CDATA[<p><code>iView-admin</code>是<code>iView</code>生态中的成员之一，是一套采用前后端分离开发模式，基于<code>Vue</code>的后台管理系统前端解决方案。该模板界面优美，功能齐全俘获了很多前端的心，然，对于新手来说注定是要踩很多坑。关于文档确实太过简洁，简单叙述了几个功能，并不是从开发到生产的完整说明书，接下来说下本人遇到的坑。</p>
<a id="more"></a>

<h2 id="刷新404"><a href="#刷新404" class="headerlink" title="刷新404"></a>刷新404</h2><h3 id="修改服务器配置文件"><a href="#修改服务器配置文件" class="headerlink" title="修改服务器配置文件"></a>修改服务器配置文件</h3><p>这个是伪静态造成的，常用服务器有两种：<code>Nginx</code>和<code>Apache</code>，Apache常用配置文件为：<code>.htaccess</code>,该文件放在网站根目录即可。<code>Nginx</code>则是对应的<code>vhost.conf</code>文件。</p>
<h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a><code>Nginx</code>配置</h4><p>全部请求转发给<code>index.html</code>去处理</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">index</span>  index.html  index.htm;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/   /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Apache配置"><a href="#Apache配置" class="headerlink" title="Apache配置"></a><code>Apache</code>配置</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  <span class="attribute">RewriteEngine</span> On</span><br><span class="line">  RewriteBase /</span><br><span class="line">  RewriteRule<span class="regexp"> ^index\.html$</span> - [L]</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  <span class="attribute">RewriteRule</span> . /index.html [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修改vue-admin配置"><a href="#修改vue-admin配置" class="headerlink" title="修改vue-admin配置"></a>修改<code>vue-admin</code>配置</h3><p>发布到线上二级路由无法正常点击 <code>vue.config.js</code> 根目录设置为自己的域名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 项目部署基础</span></span><br><span class="line"><span class="comment">// 默认情况下，我们假设你的应用将被部署在域的根目录下,</span></span><br><span class="line"><span class="comment">// 例如：https://www.diandian100.cn/</span></span><br><span class="line"><span class="comment">// 默认：&#x27;/&#x27;</span></span><br><span class="line"><span class="comment">// 如果您的应用程序部署在子路径中，则需要在这指定子路径</span></span><br><span class="line"><span class="comment">// 例如：https://www.diandian100.cn/my-app/</span></span><br><span class="line"><span class="comment">// 需要将它改为&#x27;/my-app/&#x27;</span></span><br><span class="line"><span class="keyword">const</span> BASE_URL = process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">  ? <span class="string">&#x27;https://www.diandian100.cn/&#x27;</span></span><br><span class="line">  : <span class="string">&#x27;/&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p><code>vue.config.js</code>里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  proxy: &#39;http:&#x2F;&#x2F;xxxxxx&#x2F;api&#x2F;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="header认证问题"><a href="#header认证问题" class="headerlink" title="header认证问题"></a><code>header</code>认证问题</h2><p><code>ib/axios.js</code>文件里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getInsideConfig () &#123;</span><br><span class="line">    <span class="keyword">const</span> config = &#123;</span><br><span class="line">      baseURL: <span class="built_in">this</span>.baseUrl,</span><br><span class="line">      headers: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置全局headers</span></span><br><span class="line">    <span class="keyword">let</span> token = Cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(token != <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">      config.headers.AUTHKEY=token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="发送message-count请求"><a href="#发送message-count请求" class="headerlink" title="发送message/count请求"></a>发送<code>message/count</code>请求</h2><p>应该极少数人会像我这么迷糊吧，请求页面控制台一直输出一个404的错误，<code>服务器地址/message/count</code>请求404，因为刚好我这个<code>api</code>有一个<code>echart</code>的统计接口，地址也叫<code>count</code>，以为是自己接口地址写错了，怎么都找不到，后来想到扒了下<code>main</code>组件，<code>main</code>组件里包含了头部、和菜单部分，而投不中包含了用户组件，用户下拉有一个未读信息，问题找到了，就是<code>main</code>组件里请求读取了一个未读消息，接口就是这个<code>message/count</code></p>
<p>修改<code>src/components/main/main.vue</code>，挂载组件是获取了一个请求，把该请求注释掉即可！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="comment">// 获取未读消息条数</span></span><br><span class="line">    <span class="comment">// this.getUnreadMessageCount()</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>fe</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>iview-admin</tag>
        <tag>iview-admin上线</tag>
        <tag>iview-admin部署</tag>
        <tag>iview-admin404</tag>
        <tag>iview-admin伪静态</tag>
        <tag>iview-admin跨域</tag>
        <tag>iview-admin header</tag>
        <tag>message/count</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下python项目开发独立环境之virturlenv及virtualenvwraper</title>
    <url>/c9c15d88.html</url>
    <content><![CDATA[<p>在使用 <code>Python</code> 开发的过程中，工程一多，难免会碰到不同的工程依赖不同版本的库的问题；亦或者是在开发过程中不想让物理环境里充斥各种各样的库，引发未来的依赖灾难。此时，我们需要对于不同的工程使用不同的虚拟环境来保持开发环境以及宿主环境的清洁。</p>
<p>这里，就要隆重介绍 <code>virtualenv</code>，一个可以帮助我们管理不同 <code>Python</code> 环境的绝好工具。<code>virtualenv</code> 可以在系统中建立多个不同并且相互不干扰的虚拟环境。</p>
<a id="more"></a>

<h2 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装<code>virtualenv</code></h2><p>在开发<code>Python</code>应用程序的时候，系统安装的<code>Python3</code>只有一个版本：3.6。所有第三方的包都会被<code>pip</code>安装到<code>Python3</code>的<code>site-packages</code>目录下。</p>
<p>如果我们要同时开发多个应用程序，那这些应用程序都会共用一个<code>Python</code>，就是安装在系统的<code>Python 3</code>。如果应用A需要<code>jinja 2.7</code>，而应用B需要<code>jinja 2.6</code>怎么办？</p>
<p>这种情况下，每个应用可能需要各自拥有一套“独立”的<code>Python</code>运行环境。<code>virtualenv</code>就是用来为一个应用创建一套“隔离”的<code>Python</code>运行环境。</p>
<h3 id="virtualenv原理"><a href="#virtualenv原理" class="headerlink" title="virtualenv原理"></a><code>virtualenv</code>原理</h3><p>将系统<code>Python</code>复制一份到<code>virtualenv</code>的环境，用命令<code>source venv/bin/activate</code>进入一个<code>virtualenv</code>环境时，<code>virtualenv</code>会修改相关环境变量，让命令<code>python</code>和<code>pip</code>均指向当前的<code>virtualenv</code>环境。</p>
<h3 id="使用pip安装virtualenv包"><a href="#使用pip安装virtualenv包" class="headerlink" title="使用pip安装virtualenv包"></a>使用<code>pip</code>安装<code>virtualenv</code>包</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure>

<h3 id="创建虚拟运行环境"><a href="#创建虚拟运行环境" class="headerlink" title="创建虚拟运行环境"></a>创建虚拟运行环境</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建python虚拟环境目录</span></span><br><span class="line">mkdir /www/pyenv</span><br><span class="line"><span class="built_in">cd</span> /www/pyenv</span><br><span class="line"><span class="comment"># 创建一个python2的独立虚拟环境</span></span><br><span class="line">virtualenv -<span class="literal">-no</span><span class="literal">-site</span><span class="literal">-packages</span> -<span class="literal">-python</span>=python2 py2</span><br><span class="line"><span class="comment"># 创建一个python3的独立虚拟环境</span></span><br><span class="line">virtualenv -<span class="literal">-no</span><span class="literal">-site</span><span class="literal">-packages</span> -<span class="literal">-python</span>=python3 py3</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="运行虚拟环境"><a href="#运行虚拟环境" class="headerlink" title="运行虚拟环境"></a>运行虚拟环境</h3><h4 id="运行py2虚拟环境"><a href="#运行py2虚拟环境" class="headerlink" title="运行py2虚拟环境"></a>运行<code>py2</code>虚拟环境</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取进入python2独立虚拟环境</span></span><br><span class="line">source py2/bin/activate</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看py2虚拟环境中pyhon版本</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment"># python -V</span></span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">15</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看py2虚拟环境中python位置和pip位置</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment"># which python</span></span><br><span class="line">/www/envpy/py2/bin/python</span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment"># which pip</span></span><br><span class="line">/www/envpy/py2/bin/pip</span><br></pre></td></tr></table></figure>

<h4 id="运行py3虚拟环境"><a href="#运行py3虚拟环境" class="headerlink" title="运行py3虚拟环境"></a>运行<code>py3</code>虚拟环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 读取进入python3独立虚拟环境</span><br><span class="line">source py3&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看py3虚拟环境中pyhon版本</span><br><span class="line">(py3) root@Tony-PC:&#x2F;www&#x2F;sitepy&#x2F;py2# python -V</span><br><span class="line">Python 3.6.5</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看py3虚拟环境中python位置和pip位置</span><br><span class="line">(py3) root@Tony-PC:&#x2F;www&#x2F;sitepy&#x2F;py2# which python</span><br><span class="line">&#x2F;www&#x2F;envpy&#x2F;py3&#x2F;bin&#x2F;python</span><br><span class="line">(py3) root@Tony-PC:&#x2F;www&#x2F;sitepy&#x2F;py2# which pip</span><br><span class="line">&#x2F;www&#x2F;envpy&#x2F;py3&#x2F;bin&#x2F;pip</span><br></pre></td></tr></table></figure>

<h3 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装<code>django</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># py2环境安装django</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment"># pip install django</span></span><br><span class="line"><span class="comment"># 查看py2环境已安装的pip包</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment"># pip list</span></span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">Django     <span class="number">1.11</span>.<span class="number">23</span></span><br><span class="line">pip        <span class="number">19.2</span>.<span class="number">1</span> </span><br><span class="line">pytz       <span class="number">2019.2</span> </span><br><span class="line">setuptools <span class="number">41.0</span>.<span class="number">1</span> </span><br><span class="line">wheel      <span class="number">0.33</span>.<span class="number">4</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># py3环境安装django</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment"># pip install django</span></span><br><span class="line"><span class="comment"># 查看py3环境已安装的pip包</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment"># pip list</span></span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">Django     <span class="number">2.2</span>.<span class="number">4</span></span><br><span class="line">pip        <span class="number">19.2</span>.<span class="number">1</span> </span><br><span class="line">pytz       <span class="number">2019.2</span> </span><br><span class="line">setuptools <span class="number">41.0</span>.<span class="number">1</span> </span><br><span class="line">wheel      <span class="number">0.33</span>.<span class="number">4</span> </span><br></pre></td></tr></table></figure>

<h3 id="创建django项目"><a href="#创建django项目" class="headerlink" title="创建django项目"></a>创建<code>django</code>项目</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入网站目录</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www<span class="comment">#cd /www/sitepy</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/wwwcd /www/sitepy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建py2环境的django项目</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy<span class="comment">#django-admin startproject py2</span></span><br><span class="line"><span class="comment"># 进入py2项目目录</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy<span class="comment">#cd py2</span></span><br><span class="line"><span class="comment"># 创建py2项目应用</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment">#django-admin startap app01</span></span><br><span class="line"><span class="comment"># 修改settings.py</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment">#vim py2/settings.py</span></span><br><span class="line"><span class="comment"># 将其中的allowed_host修改为[&#x27;*&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建py3环境的django项目</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/www/sitepy<span class="comment">#django-admin startproject py3</span></span><br><span class="line"><span class="comment"># 进入py3项目目录</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/www/sitepy<span class="comment">#cd py3</span></span><br><span class="line"><span class="comment"># 创建py3项目应用</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/www/sitepy/py3<span class="comment">#django-admin startap app01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改settings.py</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/www/sitepy/py3<span class="comment">#vim py3/settings.py</span></span><br><span class="line"><span class="comment"># 将其中的allowed_host修改为[&#x27;*&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="运行django"><a href="#运行django" class="headerlink" title="运行django"></a>运行<code>django</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># py2环境下运行py2网站项目</span></span><br><span class="line">(py2) root@Tony<span class="literal">-PC</span>:/www/sitepy/py2<span class="comment">#python manage.py runserver 0.0.0.0:8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># py3环境下运行py3网站项目</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/www/sitepy/py3<span class="comment">#python manage.py runserver 0.0.0.0:8002</span></span><br></pre></td></tr></table></figure>

<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>访问：127.0.0.1:8001</p>
<p>效果如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190809131953.png"></p>
<p>访问：127.0.0.1:8002</p>
<p>效果如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190808140007.png"></p>
<p>完美，两个网站在两个版本的python环境下跑起来了</p>
<h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<h2 id="开发一致性"><a href="#开发一致性" class="headerlink" title="开发一致性"></a>开发一致性</h2><p>1.假设我们在本地开发环境，准备好了项目+依赖包环境<br>2.现在需要将项目上传至服务器，上线发布<br>3.那么就要保证服务器的python环境一致性</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li><p>通过命令保证环境的一致性，导出当前python环境的包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将py3环境依赖包列表导出到requirements.txt文件</span></span><br><span class="line">(py3) root@Tony<span class="literal">-PC</span>:/www/pyenv/py3<span class="comment">#pip freeze &gt; requirements.txt</span></span><br></pre></td></tr></table></figure>

<p>这将会创建一个 <code>requirements.txt</code> 文件，其中包含了当前环境中所有包及 各自的版本的简单列表。可以使用 “<code>pip list</code>”在不产生<code>requirements</code>文件的情况下， 查看已安装包的列表。</p>
</li>
<li><p>上传至服务器后，在服务器下创建<code>virtualenv</code>，在<code>venv</code>中导入项目所需的模块依赖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip3 install <span class="literal">-r</span> requirements.txt</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="virtualenvwraper安装与使用"><a href="#virtualenvwraper安装与使用" class="headerlink" title="virtualenvwraper安装与使用"></a><code>virtualenvwraper</code>安装与使用</h2><p><code>virtualenv</code> 的一个最大的缺点就是：</p>
<p>每次开启虚拟环境之前要去虚拟环境所在目录下的 <code>bin</code> 目录下 <code>source</code> 一下 <code>activate</code>，这就需要我们记住每个虚拟环境所在的目录。</p>
<p>并且还有可能你忘记了虚拟环境放在哪。。。</p>
<ul>
<li>一种可行的解决方案是，将所有的虚拟环境目录全都集中起来，例如<code>/opt/all_venv/</code>，并且针对不同的目录做不同的事。</li>
<li>使用<code>virtualenvwrapper</code>管理你的虚拟环境（<code>virtualenv</code>），其实他就是统一管理虚拟环境的目录，并且省去了<code>source</code>的步骤。</li>
</ul>
<h3 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装<code>virtualenvwrapper</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure>

<h3 id="设置Linux的环境变量"><a href="#设置Linux的环境变量" class="headerlink" title="设置Linux的环境变量"></a>设置<code>Linux</code>的环境变量</h3><p>设置<code>Linux</code>的环境变量，每次启动就加载<code>virtualenvwrapper</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">把下面两行代码添加到 ~/.bashrc文件中</span><br><span class="line">打开文件</span><br><span class="line">vim ~/.bashrc <span class="comment"># vim编辑用户家目录下的.bashrc文件，这个文件是用户在登录的时候，就读取这个文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># export 是读取shell命令的作用</span></span><br><span class="line"><span class="comment"># 这些变量根据你自己的绝对路径环境修改</span></span><br><span class="line">export WORKON_HOME=~/Envs   <span class="comment">#设置virtualenv的统一管理目录</span></span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=<span class="string">&#x27;--no-site-packages&#x27;</span>   <span class="comment">#添加virtualenvwrapper的参数，生成干净隔绝的环境</span></span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/opt/python347/bin/python3     <span class="comment">#指定python解释器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行virtualenvwrapper安装脚本</span></span><br><span class="line">source /opt/python34/bin/virtualenvwrapper.sh </span><br><span class="line">读取文件，使得生效，此时已经可以使用virtalenvwrapper</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="基本使用virtualenvwrapper"><a href="#基本使用virtualenvwrapper" class="headerlink" title="基本使用virtualenvwrapper"></a>基本使用<code>virtualenvwrapper</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">创建一个虚拟环境：</span><br><span class="line"><span class="variable">$</span> mkvirtualenv my_django115</span><br><span class="line">这会在 ~/Envs 中创建 my_django115 文件夹。</span><br><span class="line"></span><br><span class="line">在虚拟环境上工作：激活虚拟环境my_django115</span><br><span class="line"><span class="variable">$</span> workon my_django115</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">再创建一个新的虚拟环境</span><br><span class="line"><span class="variable">$</span> mkvirtualenv my_django2</span><br><span class="line"></span><br><span class="line">virtualenvwrapper 提供环境名字的tab补全功能。</span><br><span class="line">当有很多环境， 并且很难记住它们的名字时，这就显得很有用。</span><br><span class="line">workon还可以任意停止你当前的环境，可以在多个虚拟环境中来回切换</span><br><span class="line">workon django1.<span class="number">15</span></span><br><span class="line"></span><br><span class="line">workon django2.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">也可以手动停止虚拟环境</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">删除虚拟环境，需要先退出虚拟环境</span><br><span class="line">rmvirtualenv my_django115</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">lsvirtualenv</span><br><span class="line">列举所有的环境。</span><br><span class="line">cdvirtualenv</span><br><span class="line">导航到当前激活的虚拟环境的目录中，比如说这样您就能够浏览它的 site<span class="literal">-packages</span> 。</span><br><span class="line">cdsitepackages</span><br><span class="line">和上面的类似，但是是直接进入到 site<span class="literal">-packages</span> 目录中。</span><br><span class="line">lssitepackages</span><br><span class="line">显示 site<span class="literal">-packages</span> 目录中的内容。</span><br><span class="line"></span><br><span class="line">完整官网介绍：https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>virturlenv</tag>
        <tag>virtualenvwraper</tag>
        <tag>python2</tag>
        <tag>python3</tag>
        <tag>virtualenv原理</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下redis安装与配置</title>
    <url>/4e81ab57.html</url>
    <content><![CDATA[<p><code>Redis</code> 是一个开源（<code>BSD</code>许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件<br><code>redis</code>是<code>c语言</code>编写的，支持数据持久化，是<code>key-value</code>类型数据库。<br>应用在缓存，队列系统中<br><code>redis</code>支持数据备份，也就是<code>master-slave</code>模式</p>
<a id="more"></a>

<h2 id="nosql"><a href="#nosql" class="headerlink" title="nosql"></a><code>nosql</code></h2><p>存储结构与<code>mysql</code>这一种关系型数据库完全不同，<code>nosql</code>存储的是<code>KV</code>形式。<code>nosql</code>有很多产品，都有自己的<code>api</code>和语法，以及业务场景，如：<code>Mongodb</code>、<code>redis</code>等</p>
<p>应用场景不同，<code>sql</code>支持关系复杂的数据查询，<code>nosql</code>反之；<code>sql</code>支持事务性，<code>nosql</code>不支持</p>
<h2 id="redis优势"><a href="#redis优势" class="headerlink" title="redis优势"></a><code>redis</code>优势</h2><ul>
<li>性能高，读取速度10万次每秒</li>
<li>写入速度8万次每秒</li>
<li>所有操作支持原子性</li>
<li>用作缓存数据库，数据放在内存中</li>
<li>替代某些场景下的<code>mysql</code>，如社交类<code>app</code></li>
<li>大型系统中，可以存储<code>session</code>信息，购物车订单</li>
</ul>
<h2 id="apt-get安装redis"><a href="#apt-get安装redis" class="headerlink" title="apt-get安装redis"></a><code>apt-get</code>安装<code>redis</code></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看redis是否已安装</span></span><br><span class="line">apt list -<span class="literal">-installed</span> | grep redis</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">dkpg -<span class="literal">-get</span><span class="literal">-selections</span> | grep redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装redis</span></span><br><span class="line">apt<span class="literal">-get</span> install redis <span class="literal">-y</span></span><br><span class="line"><span class="comment"># 启动redis</span></span><br><span class="line">systemctl <span class="built_in">start</span> redis</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="检测redis"><a href="#检测redis" class="headerlink" title="检测redis"></a>检测<code>redis</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动redis客户端工具</span></span><br><span class="line">redis<span class="literal">-cli</span></span><br><span class="line"><span class="comment"># 进入交互式环境后，执行ping，返回pong表示安装成功</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>

<p><code>redis</code>可执行文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">./redis<span class="literal">-benchmark</span> //用于进行redis性能测试的工具</span><br><span class="line">./redis<span class="literal">-check</span><span class="literal">-dump</span> //用于修复出问题的dump.rdb文件</span><br><span class="line">./redis<span class="literal">-cli</span> //redis的客户端</span><br><span class="line">./redis<span class="literal">-server</span> //redis的服务端</span><br><span class="line">./redis<span class="literal">-check</span><span class="literal">-aof</span> //用于修复出问题的AOF文件</span><br><span class="line">./redis<span class="literal">-sentinel</span> //用于集群管理</span><br></pre></td></tr></table></figure>

<h2 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a><code>redis</code>配置</h2><p><code>redis</code>配置文件为<code>redis.conf</code>，本人该文件位置为<code>/etc/redis/redis.conf</code></p>
<h3 id="redis配置项"><a href="#redis配置项" class="headerlink" title="redis配置项"></a><code>redis</code>配置项</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绑定ip，如需要远程访问，需要填写服务器ip，0.0.0.0允许远程访问</span></span><br><span class="line">bind <span class="number">127.0</span>.<span class="number">0.1</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口，redis启动端口</span></span><br><span class="line">port </span><br><span class="line"></span><br><span class="line"><span class="comment"># 守护进程方式运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># rdb数据文件</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据文件存放路径</span></span><br><span class="line"><span class="built_in">dir</span> /var/lib/redis/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line">logfile /var/log/redis/redis<span class="literal">-server</span>.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主从复制</span></span><br><span class="line">slaveof </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>db</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis安装</tag>
        <tag>redis配置</tag>
        <tag>redis设置密码</tag>
        <tag>redis守护进程</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下安装python及搭建Django项目初体验</title>
    <url>/cbf7818.html</url>
    <content><![CDATA[<p>网上有很多关于<code>linux</code>下安装<code>python</code>的教程，大多是自己下载安装包解压编译的一个过程，个人感觉这么繁琐的操作为什么不用包管理器？个人本地电脑使用的<code>Deepin</code>，自带安装了<code>python2</code>和<code>python3</code>，但是玄乎的是没有安装<code>pip3</code>，所以这里以本人系统为例说下如何使用包管理器<code>apt-get</code>安装<code>python3</code>和<code>pip3</code>，红帽系统使用<code>yum</code>，差不多的流程。</p>
<a id="more"></a>

<h2 id="python3安装"><a href="#python3安装" class="headerlink" title="python3安装"></a><code>python3</code>安装</h2><p>本人将程序安装在了<code>/usr/bin</code>目录，作用是该目录已经加入到了环境变量，装好之后直接可以使用<code>python3</code>命令做事</p>
<h3 id="使用管理工具安装"><a href="#使用管理工具安装" class="headerlink" title="使用管理工具安装"></a>使用管理工具安装</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line"><span class="comment"># 使用sudo安装python3</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install python3.<span class="number">6</span></span><br><span class="line"><span class="comment"># centos使用yum安装</span></span><br><span class="line">sudo yum install python36</span><br></pre></td></tr></table></figure>

<p>安装好测试下自己<code>python</code>版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python3 <span class="literal">-V</span></span><br></pre></td></tr></table></figure>

<p>就这么简单的一行命令就完成了<code>python3</code>的安装，看完这个你还会使用安装包自己解压编译来操作吗？</p>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>某些特定时候还是需要使用编译安装</p>
<h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><p><code>python</code>库依赖包，先安装，避免掉坑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y</span><br></pre></td></tr></table></figure>

<h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz</span><br></pre></td></tr></table></figure>

<h4 id="configure"><a href="#configure" class="headerlink" title="configure"></a><code>configure</code></h4><p>这一步一般用来生成 Makefile，为下一步的编译做准备，你可以通过在 configure 后加上参数来对安装进行控制，比如代码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /usr/bin系统默认已加入环境变量，所以我们也直接把软件安装到这个目录</span></span><br><span class="line">./configure --prefix=/usr</span><br></pre></td></tr></table></figure>

<p>上面的意思是将该软件安装在 <code>/usr</code> 下面，执行文件就会安装在 <code>/usr/bin</code> （而不是默认的 <code>/usr/local/bin</code>)，资源文件就会安装在 <code>/usr/share</code>（而不是默认的<code>/usr/local/share</code>）。</p>
<p>同时一些软件的配置文件你可以通过指定 <code>--sys-config</code>= 参数进行设定。有一些软件还可以加上 <code>--with</code>、<code>--enable</code>、<code>--without</code>、<code>--disable</code> 等等参数对编译加以控制，你可以通过允许 <code>./configure --help</code> 察看详细的说明帮助。</p>
<h4 id="make"><a href="#make" class="headerlink" title="make"></a><code>make</code></h4><p>这一步就是编译，大多数的源代码包都经过这一步进行编译（当然有些<code>perl</code>或<code>python</code>编写的软件需要调用<code>perl</code>或<code>python</code>来进行编译）。</p>
<p>如果 在 <code>make</code> 过程中出现 <code>error</code> ，你就要记下错误代码（注意不仅仅是最后一行），然后你可以向开发者提交 <code>bugreport</code>（一般在 <code>INSTALL</code> 里有提交地址），或者你的系统少了一些依赖库等，这些需要自己仔细研究错误代码。</p>
<p><code>make</code> 的作用是开始进行源代码编译，以及一些功能的提供，这些功能由他的 <code>Makefile</code> 设置文件提供相关的功能，比如 make install 一般表示进行安装，<code>make uninstall</code> 是卸载，不加参数就是默认的进行源代码编译。</p>
<p><code>make</code> 是 <code>Linux</code> 开发套件里面自动化编译的一个控制程序，他通过借助 <code>Makefile</code> 里面编写的编译规范进行自动化的调用 <code>gcc</code>、<code>ld</code> 以及运行某些需要的程序进行编译的程序。一般情况下，他所使用的 <code>Makefile</code> 控制代码，由 <code>configure</code> 这个设置脚本根据给定的参数和系统环境生成。</p>
<h4 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a><code>make install</code></h4><p>这条命令来进行安装（当然有些软件需要先运行 <code>make check</code> 或 <code>make test</code>来进行一些测试），这一步一般需要你有 <code>root</code> 权限（因为要向系统写入文件）</p>
<p>注：也可以直接使用 <code>make &amp;&amp; make install</code>进行编译安装</p>
<h2 id="pip3安装"><a href="#pip3安装" class="headerlink" title="pip3安装"></a><code>pip3</code>安装</h2><p>开头说了，本人电脑没有安装<code>pip3</code>，同样的流程我们来安装下<code>pip3</code></p>
<h3 id="管理包安装"><a href="#管理包安装" class="headerlink" title="管理包安装"></a>管理包安装</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line"><span class="comment"># 使用sudo安装python3</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install python3<span class="literal">-pip</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装好看下自己的<code>python</code>包列表</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip3 list</span><br></pre></td></tr></table></figure>

<p><code>pip3</code>到此安装完成</p>
<h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><h4 id="下载安装包-1"><a href="#下载安装包-1" class="headerlink" title="下载安装包"></a>下载安装包</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://files.pythonhosted.org/packages/aa/<span class="number">1</span>a/<span class="number">62</span>fb0b95b1572c76dbc3cc31124a8b6866cbe9139eb7659ac7349457cf7c/pip<span class="literal">-19</span>.<span class="number">2.2</span>.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> pip<span class="literal">-19</span>.<span class="number">2.2</span>.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> pip<span class="literal">-19</span>.<span class="number">2.2</span></span><br><span class="line">python3 setup.py build</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">iZ11cz2tzxcZ</span> <span class="type">pip</span>-<span class="number">19.2</span><span class="type">.2</span>]<span class="comment"># pip3 -V</span></span><br><span class="line">pip <span class="number">19.2</span>.<span class="number">2</span> from /usr/local/lib/python3.<span class="number">6</span>/site<span class="literal">-packages</span>/pip<span class="literal">-19</span>.<span class="number">2.2</span><span class="literal">-py3</span>.<span class="number">6</span>.egg/pip (python <span class="number">3.6</span>)</span><br></pre></td></tr></table></figure>

<p>完成！！！1</p>
<h2 id="搭建Django项目"><a href="#搭建Django项目" class="headerlink" title="搭建Django项目"></a>搭建<code>Django</code>项目</h2><h3 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装<code>Django</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip3 install django</span><br></pre></td></tr></table></figure>

<p><code>pip3</code>默认安装新版本的<code>Django</code></p>
<h3 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建<code>Django</code>项目</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入网站目录</span></span><br><span class="line"><span class="built_in">cd</span> /media/tony/文档</span><br><span class="line"><span class="comment"># 创建django项目</span></span><br><span class="line">django<span class="literal">-admin</span> startproject mysite</span><br></pre></td></tr></table></figure>

<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入django项目</span></span><br><span class="line"><span class="built_in">cd</span> mysite</span><br><span class="line"><span class="comment"># 创建app01应用，下面两种创建方式都可以</span></span><br><span class="line">django startapp app01</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">python3 manage.py startapp app01</span><br></pre></td></tr></table></figure>

<h3 id="修改settings"><a href="#修改settings" class="headerlink" title="修改settings"></a>修改<code>settings</code></h3><p><code>ALLOWED_HOSTS</code> = [‘*’]</p>
<p><code>ALLOWED_HOSTS</code>的作用</p>
<ul>
<li><p><code>ALLOWED_HOSTS</code>是为了限定请求中的<code>host</code>值，以防止黑客构造包来发送请求。只有在列表中的<code>host</code>才能访问。</p>
</li>
<li><p><code>ALLOWED_HOSTS</code>后面所跟的属性值是一个字符串列表值，这个字符串列表值表示当下这个<code>Django</code>站点可以提供的<code>host/domain</code>(主机/域名)。这是一种安全措施，通过使用伪造的<code>HTTP</code>主机标头提交请求来防止攻击者中毒缓存并触发带有恶意主机链接的密码重置电子邮件，即使在许多看似安全的<code>Web</code>服务器配置下也是如此。</p>
</li>
</ul>
<p>前景：本人有两台电脑(统一局域网)，一台装的<code>deepin</code>，一台<code>windows</code>，本人要用<code>windows</code>访问<code>deepin</code>上搭建的<code>django</code>项目，所以需要设施<code>allowed_host</code>(使用虚拟机也要设置哟)。</p>
<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure>

<p>默认<code>django</code>运行的是<code>127.0.0.1:8000</code>，我这里使用<code>0.0.0.0</code>的作用是让我的<code>window</code>主机也可以使用<code>deepin</code>主机的<code>ip</code>进行来访问</p>
<p>访问项目</p>
<p>在<code>deepin</code>主机上访问项目地址：127.0.0.1:8000</p>
<p>在<code>window</code>主机上访问项目地址：<span class="exturl" data-url="aHR0cDovLzEwLjEwLjEwLjEyNTo4MDAwLw==">http://10.10.10.125:8000<i class="fa fa-external-link-alt"></i></span></p>
<p>都出现了</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190808140007.png"></p>
<p>完美！！！</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux安装python</tag>
        <tag>linux安装django</tag>
        <tag>linux安装pip3</tag>
        <tag>allow_host</tag>
        <tag>安装python</tag>
        <tag>安装django</tag>
        <tag>手动安装pip3</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装mysql-mariadb与主从复制</title>
    <url>/651a2e19.html</url>
    <content><![CDATA[<p><code>MariaDB</code>数据库管理系统是<code>MySQL</code>的一个分支，主要由开源社区在维护，采用<code>GPL</code>授权许可 <code>MariaDB</code>的目的是完全兼容<code>MySQL</code>，包括<code>API</code>和命令行，使之能轻松成为<code>MySQL</code>的代替品。在存储引擎方面，使用<code>XtraDB</code>（英语：<code>XtraDB</code>）来代替<code>MySQL</code>的<code>InnoDB</code>。 <code>MariaDB</code>由<code>MySQL</code>的创始人<code>Michael Widenius</code>（英语：<code>Michael Widenius</code>）主导开发，他早前曾以10亿美元的价格，将自己创建的公司<code>MySQL AB</code>卖给了<code>SUN</code>，此后，随着<code>SUN</code>被甲骨文收购，<code>MySQL</code>的所有权也落入<code>Oracle</code>的手中。<code>MariaDB</code>名称来自<code>Michael Widenius</code>的女儿<code>Maria</code>的名字。</p>
<p>开发这个分支的原因之一是：甲骨文公司收购了<code>MySQL</code>后，有将<code>MySQL</code>闭源的潜在风险，因此社区采用分支的方式来避开这个风险。<a id="more"></a></p>
<p><code>MariaDB</code>基于事务的Maria存储引擎，替换了<code>MySQL</code>的<code>MyISAM</code>存储引擎，它使用了<code>Percona</code>的 <code>XtraDB</code>，<code>InnoDB</code>的变体，分支的开发者希望提供访问即将到来的<code>MySQL 5.4 InnoDB</code>性能。这个版本还包括了 <code>PrimeBase XT (PBXT)</code> 和 <code>FederatedX</code>存储引擎。</p>
<h2 id="安装MariaDB"><a href="#安装MariaDB" class="headerlink" title="安装MariaDB"></a>安装<code>MariaDB</code></h2><p><code>linux</code>分为使用 <code>dpkg</code> 的 <code>debian</code> 阵营和使用 <code>rpm</code> 的 <code>redhat</code> 阵营，因为包管理器也不一样，大致使用方式相似。<code>debian</code>使用的是<code>apt-get</code>包管理器，<code>redhat</code>使用的则是<code>yum</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用yum安装mariadb</span></span><br><span class="line">sudo yum install MariaDB<span class="literal">-server</span> MariaDB<span class="literal">-client</span> <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用apt-get安装mariadb</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install MariaDB<span class="literal">-server</span> MariaDB<span class="literal">-client</span> <span class="literal">-y</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>mariaDB</code>常用的相关命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">start</span> mariadb  <span class="comment">#启动MariaDB</span></span><br><span class="line">systemctl stop mariadb  <span class="comment">#停止MariaDB</span></span><br><span class="line">systemctl restart mariadb  <span class="comment">#重启MariaDB</span></span><br><span class="line">systemctl enable mariadb  <span class="comment">#设置开机启动</span></span><br></pre></td></tr></table></figure>

<p>启动<code>mariaDB</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">start</span> mariadb</span><br></pre></td></tr></table></figure>

<h2 id="初始化mysql"><a href="#初始化mysql" class="headerlink" title="初始化mysql"></a>初始化<code>mysql</code></h2><p>在确认 <code>MariaDB</code> 数据库软件程序安装完毕并成功启动后请不要立即使用。为了确保数据 库的安全性和正常运转，需要先对数据库程序进行初始化操作。这个初始化操作涉及下面 5 个 步骤。</p>
<ul>
<li>设置 root 管理员在数据库中的密码值(注意，该密码并非 root 管理员在系统中的密 码，这里的密码值默认应该为空，可直接按回车键)。</li>
<li>设置 root 管理员在数据库中的专有密码。</li>
<li>随后删除匿名账户，并使用 root 管理员从远程登录数据库，以确保数据库上运行的业务的安全性。</li>
<li>删除默认的测试数据库，取消测试数据库的一系列访问权限。</li>
<li>刷新授权列表，让初始化的设定立即生效。</li>
</ul>
<p>初始化<code>mysql</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">Tony</span>-<span class="type">PC</span>: ~]<span class="comment"># mysql_secure_installation</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190812124824.png"></p>
<h3 id="mysql基本命令"><a href="#mysql基本命令" class="headerlink" title="mysql基本命令"></a><code>mysql</code>基本命令</h3><p>生产环境里不会死磕<code>root</code>用户，为了数据库的安全以及和其他用户协同管理数据库，就需要创建其他数据库账户，然后分配权限，满足工作需求。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改当前登录的mysql账户密码</span></span><br><span class="line">MariaDB [(<span class="type">none</span>)]&gt; <span class="built_in">set</span> password = PASSWORD(<span class="string">&#x27;diandian&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建tony用户，密码设为diandian，并在数据库查询该用户信息</span></span><br><span class="line">MariaDB [(<span class="type">none</span>)]&gt; create user tony<span class="string">@&#x27;127.0.0.1&#x27; identified by &#x27;diandian&#x27;;</span></span><br><span class="line"><span class="string">MariaDB [(none)]&gt; use mysql;</span></span><br><span class="line"><span class="string">MariaDB [mysql]&gt; select host,user,password from user where user=&#x27;tony&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 使用tony用户登录mysql</span></span><br><span class="line"><span class="string">[root@master ~]# mysql -utony -p -h 127.0.0.1</span></span><br><span class="line"><span class="string"># 查看数据库列表，发现看不到完整的数据库列表</span></span><br><span class="line"><span class="string">MariaDB [(none)]&gt; show databases;</span></span><br></pre></td></tr></table></figure>

<h3 id="mysql数据库权限"><a href="#mysql数据库权限" class="headerlink" title="mysql数据库权限"></a><code>mysql</code>数据库权限</h3><p><code>mysql</code>使用<code>grant</code>命令对账户进行授权，<code>grant</code>命令常见格式如下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">grant 权限 on 数据库.表名 to 账户<span class="selector-tag">@</span>主机名            对特定数据库中的特定表授权</span><br><span class="line">grant 权限 on 数据库.* to 账户<span class="selector-tag">@</span>主机名            　　对特定数据库中的所有表给与授权</span><br><span class="line">grant 权限<span class="number">1</span>,权限<span class="number">2</span>,权限<span class="number">3</span> on *.* to 账户<span class="selector-tag">@</span>主机名   　　 对所有库中的所有表给与多个授权</span><br><span class="line">grant all privileges on *.* to 账户<span class="selector-tag">@</span>主机名   　　 对所有库和所有表授权所有权限</span><br></pre></td></tr></table></figure>

<p>退出数据库，使用root登录，开始权限设置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># mysql -uroot -p</span></span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="type">none</span>)]&gt; use mysql;</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="type">none</span>)]&gt; grant all privileges on *.* to yuchao@<span class="number">127.0</span>.<span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="type">mysql</span>]&gt; show grants <span class="keyword">for</span> yuchao@<span class="number">127.0</span>.<span class="number">0.1</span>;</span><br></pre></td></tr></table></figure>

<p>移除权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="type">none</span>)]&gt; revoke all privileges on *.* from yuchao@<span class="number">127.0</span>.<span class="number">0.1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置<code>mysql</code></h3><p>本人安装的<code>mariaDB</code>发现配置文件不在<code>/etc/my.cnf</code>，而是放在了<code>/etc/mysql</code>，而且还是一个软连接，真实的文件位置指向了<code>/etc/alternatives/my.cnf</code>，打开该文件内容如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">client</span>-<span class="type">server</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import all .cnf files from configuration directory</span></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br><span class="line">!includedir /etc/mysql/mariadb.conf.d/</span><br></pre></td></tr></table></figure>

<p>导入了以上两个配置目录，继续追踪，发现实际的配置内容在<code>/etc/mysql/mariadb.conf.d/</code>中</p>
<p>打开客户端配置文件<code>/etc/mysql/mariadb.conf.d/50-client.cnf</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">default<span class="literal">-character</span><span class="literal">-set</span> = utf8mb4</span><br><span class="line"><span class="comment"># 默认编码已经是ut8了</span></span><br></pre></td></tr></table></figure>

<p>打开<code>mysql</code>配置<code>/etc/mysql/mariadb.conf.d/50-mysql-clients.cnf</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">default<span class="literal">-character</span><span class="literal">-set</span> = utf8mb4</span><br><span class="line"><span class="comment"># 默认编码也已经是ut8了</span></span><br></pre></td></tr></table></figure>

<p>打开<code>mysqld</code>配置<code>/etc/mysql/mariadb.conf.d/50-server.cnf</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">character<span class="literal">-set</span><span class="literal">-server</span>  = utf8mb4</span><br><span class="line">collation<span class="literal">-server</span>      = utf8mb4_general_ci</span><br><span class="line">log_error = /var/log/mysql/error.log</span><br><span class="line"><span class="comment"># 默认编码也默认是ut8了</span></span><br></pre></td></tr></table></figure>

<p>如果你的配置不一致，按照上述配置即可</p>
<h2 id="数据库备份与恢复"><a href="#数据库备份与恢复" class="headerlink" title="数据库备份与恢复"></a>数据库备份与恢复</h2><h3 id="备份导出数据库"><a href="#备份导出数据库" class="headerlink" title="备份导出数据库"></a>备份导出数据库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.导出所有数据库及数据</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># mysqldump -u root -p --all-databases &gt; /tmp/db.dump</span></span><br><span class="line"><span class="comment"># 2.导出db1、db2两个数据库的所有数据</span></span><br><span class="line">mysqldump <span class="literal">-uroot</span> <span class="literal">-proot</span> -<span class="literal">-databases</span> db1 db2 &gt;/tmp/user.sql</span><br></pre></td></tr></table></figure>

<h3 id="恢复还原导入数据库"><a href="#恢复还原导入数据库" class="headerlink" title="恢复还原导入数据库"></a>恢复还原导入数据库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用root登录删除一个数据库</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># mysql -uroot -p</span></span><br><span class="line">MariaDB [(<span class="type">none</span>)]&gt; drop database db1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从备份文件中恢复数据库</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># mysql -uroot -p &lt; /tmp/db.dump</span></span><br><span class="line">或</span><br><span class="line">[<span class="type">root</span>@<span class="type">Tony</span>-<span class="type">PC</span>:]<span class="comment"># mysql -u root -p </span></span><br><span class="line">MariaDB [(<span class="type">none</span>)]&gt; source /tmp/db.dump </span><br></pre></td></tr></table></figure>

<h2 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a><code>mysql</code>主从复制</h2><p><code>MySQL</code>数据库的主从复制方案，是其自带的功能，并且主从复制并不是复制磁盘上的数据库文件，而是通过<code>binlog</code>日志复制到需要同步的从服务器上。</p>
<p><code>MySQL</code>数据库支持单向、双向、链式级联，等不同业务场景的复制。在复制的过程中，一台服务器充当主服务器（<code>Master</code>），接收来自用户的内容更新，而一个或多个其他的服务器充当从服务器（<code>slave</code>），接收来自<code>Master</code>上<code>binlog</code>文件的日志内容，解析出<code>SQL</code>，重新更新到<code>Slave</code>，使得主从服务器数据达到一致。</p>
<p>主从复制的逻辑有以下几种</p>
<p>一主一从，单向主从同步模式，只能在<code>Master</code>端写入数据</p>
<p>一主多从</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190812141820.png"></p>
<p>双主主复制逻辑架构，此架构可以在<code>Master</code>或<code>Master2</code>进行数据写入，或者两端同事写入（特殊设置）</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190812141905.png"></p>
<p>在生产环境中，<code>MySQL</code>主从复制都是异步的复制方式，即不是严格的实时复制，但是给用户的体验都是实时的。<br><code>MySQL</code>主从复制集群功能使得<code>MySQL</code>数据库支持大规模高并发读写成为可能，且有效的保护了服务器宕机的数据备份。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>利用复制功能当<code>Master</code>服务器出现问题时，我们可以人工的切换到从服务器继续提供服务，此时服务器的数据和宕机时的数据几乎完全一致。<br>复制功能也可用作数据备份，但是如果人为的执行<code>drop</code>,<code>delete</code>等语句删除，那么从库的备份功能也就失效了.</p>
<h3 id="主从机制实现原理"><a href="#主从机制实现原理" class="headerlink" title="主从机制实现原理"></a>主从机制实现原理</h3><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190812142316.png"></p>
<ol>
<li><code>master</code>将改变记录到二进制日志(<code>binary log</code>)中（这些记录叫做二进制日志事件，<code>binary log events</code>）； </li>
<li><code>slave</code>将<code>master</code>的<code>binary log events</code>拷贝到它的中继日志(<code>relay log</code>)； </li>
<li><code>slave</code>重做中继日志中的事件，将改变反映它自己的数据。</li>
</ol>
<h3 id="master主库配置"><a href="#master主库配置" class="headerlink" title="master主库配置"></a>master主库配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看数据库状态</span><br><span class="line">systemctl status mariadb</span><br><span class="line">#停mariadb</span><br><span class="line">systemctl stop mariadb</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">#修改内容</span><br><span class="line">#解释：server-id服务的唯一标识（主从之间都必须不同）；log-bin启动二进制日志名称为mysql-bin </span><br><span class="line"></span><br><span class="line">　　[mysqld]</span><br><span class="line">　　server-id&#x3D;1</span><br><span class="line">　　log-bin&#x3D;mysql-bin</span><br><span class="line">#重启mariadb</span><br><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>

<h3 id="master主库添加从库账号"><a href="#master主库添加从库账号" class="headerlink" title="master主库添加从库账号"></a>master主库添加从库账号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.新建用于主从同步的用户chaoge,允许登录的从库是&#39;192.168.178.130&#39;</span><br><span class="line">create user &#39;chaoge&#39;@&#39;192.168.178.130&#39; identified by &#39;redhat&#39;;</span><br><span class="line"></span><br><span class="line">2.#题外话：如果提示密码太简单不复合策略加在前面加这句</span><br><span class="line">mysql&gt; set global validate_password_policy&#x3D;0;</span><br><span class="line"></span><br><span class="line">3.给从库账号授权,说明给chaoge从库复制的权限，在192.168.178.130机器上复制</span><br><span class="line">grant replication slave on *.* to &#39;chaoge&#39;@&#39;192.168.178.130&#39;;</span><br><span class="line">#检查主库创建的复制账号</span><br><span class="line">select user,host from mysql.user;</span><br><span class="line">#检查授权账号的权限</span><br><span class="line">show grants for chaoge@&#39;192.168.178.130&#39;;</span><br><span class="line"></span><br><span class="line">实现对主数据库锁表只读，防止数据写入，数据复制失败</span><br><span class="line">flush table with read lock;</span><br><span class="line"></span><br><span class="line">4.检查主库的状态</span><br><span class="line">MariaDB [(none)]&gt; show master status</span><br><span class="line">-&gt; ;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000001 | 575 | | |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">row in set (0.00 sec)</span><br><span class="line">File是二进制日志文件名，Position 是日志开始的位置。后面从库会用到 后面从库会用到 后面从库会用到！！！！！！</span><br><span class="line"> </span><br><span class="line">5.锁表后，一定要单独再打开一个SSH窗口，导出数据库的所有数据，</span><br><span class="line">[root@oldboy_python ~ 19:32:45]#mysqldump -uroot -p --all-databases &gt; &#x2F;data&#x2F;all.sql </span><br><span class="line">6.确保数据导出后，没有数据插入，完毕再查看主库状态</span><br><span class="line">show master status;</span><br><span class="line">7.导出数据完毕后，解锁主库，恢复可写；</span><br><span class="line">unlock tables;</span><br><span class="line">8.将备份导出的数据scp至Slave数据库</span><br><span class="line">scp &#x2F;data&#x2F;all.sql root@192.168.178.130:&#x2F;data&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="slave从库配置"><a href="#slave从库配置" class="headerlink" title="slave从库配置"></a>slave从库配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.设置server-id值并关闭binlog功能参数</span><br><span class="line">数据库的server-id在主从复制体系内是唯一的，Slave的server-id要与主库和其他从库不同，并且注释掉Slave的binlog参数。</span><br><span class="line">2.因此修改Slave的&#x2F;etc&#x2F;my.cnf，写入</span><br><span class="line">[mysqld]</span><br><span class="line">server-id&#x3D;3</span><br><span class="line">3.重启数据库</span><br><span class="line">systemctl restart mariadb</span><br><span class="line">4.检查Slava从数据库的各项参数</span><br><span class="line">show variables like &#39;log_bin&#39;;</span><br><span class="line">show variables like &#39;server_id&#39;;</span><br><span class="line">5.恢复主库Master的数据导入到Slave库</span><br><span class="line">导入数据（注意sql文件的路径）</span><br><span class="line">mysql&gt;source &#x2F;data&#x2F;all.sql;</span><br><span class="line">方法二：</span><br><span class="line">#mysql -uroot -p  &lt; abc.sql </span><br><span class="line">6.配置复制的参数，Slave从库连接Master主库的配置</span><br><span class="line">mysql &gt; change master to master_host&#x3D;&#39;192.168.178.129&#39;,</span><br><span class="line">master_user&#x3D;&#39;chaoge&#39;,</span><br><span class="line">master_password&#x3D;&#39;redhat&#39;,</span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000001&#39;,</span><br><span class="line">master_log_pos&#x3D;575;</span><br><span class="line">7.启动从库的同步开关，测试主从复制的情况</span><br><span class="line">start slave;</span><br><span class="line">8.查看复制状态</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>

<p> 检查主从复制是否成功的关键在于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.119.10</span><br><span class="line">                  Master_User: chaoge</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 1039</span><br><span class="line">               Relay_Log_File: slave-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 537</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>



<p>tip：</p>
<p>注意此处还未配置从库的只读模式，只需在slave服务器上配置<code>/etc/my.cnf</code>，加上以下配置，并且在<code>slave</code>上创建普通用户，使用普通用户主从同步即可达到只读的效果</p>
<p>如果用<code>root</code>用户，无法达到<code>readonly</code>，这是一个坑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">collation-server&#x3D;utf8_general_ci</span><br><span class="line">log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">server-id&#x3D;3</span><br><span class="line">read-only&#x3D;true</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>db</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql主从复制</tag>
        <tag>主从机制</tag>
        <tag>主从复制</tag>
        <tag>linux技巧</tag>
        <tag>mariadb</tag>
        <tag>mysql安装</tag>
        <tag>mariadb安装</tag>
      </tags>
  </entry>
  <entry>
    <title>linux搭建LNMP环境通用</title>
    <url>/c659d82f.html</url>
    <content><![CDATA[<p><strong>LNMP</strong>是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写。L指<code>Linux</code>，N指<code>Nginx</code>，M一般指<code>MySQL</code>，也可以指<code>MariaDB</code>，P一般指<code>PHP</code>，也可以指<code>Perl</code>或<code>Python</code>。</p>
<a id="more"></a>

<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a><strong>安装nginx</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>

<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a><strong>安装mysql</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>

<h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a><strong>安装php</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install php7.2-fpm php7.2-mysql php7.2-curl</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="备份默认配置文件"><a href="#备份默认配置文件" class="headerlink" title="备份默认配置文件"></a>备份默认配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak</span><br></pre></td></tr></table></figure>



<h4 id="修改默认配置文件，添加php支持"><a href="#修改默认配置文件，添加php支持" class="headerlink" title="修改默认配置文件，添加php支持"></a>修改默认配置文件，添加php支持</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>



<h4 id="修改为以下内容并保存"><a href="#修改为以下内容并保存" class="headerlink" title="修改为以下内容并保存"></a>修改为以下内容并保存</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.nginx-debian.html index.php;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.2-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart nginx.service</span><br></pre></td></tr></table></figure>

<h4 id="或重新加载配置文件"><a href="#或重新加载配置文件" class="headerlink" title="或重新加载配置文件"></a>或重新加载配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>

<h4 id="新建phpinfo，测试配置是否成功"><a href="#新建phpinfo，测试配置是否成功" class="headerlink" title="新建phpinfo，测试配置是否成功"></a>新建phpinfo，测试配置是否成功</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /var/www/html/phpinfo.php</span><br></pre></td></tr></table></figure>



<h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="保存配置访问-http-localhost-phpinfo-php-如果出现-phpinfo-页面，则大功告成。"><a href="#保存配置访问-http-localhost-phpinfo-php-如果出现-phpinfo-页面，则大功告成。" class="headerlink" title="保存配置访问 http://localhost/phpinfo.php , 如果出现 phpinfo 页面，则大功告成。"></a>保存配置访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdC9waHBpbmZvLnBocA==">http://localhost/phpinfo.php<i class="fa fa-external-link-alt"></i></span> , 如果出现 phpinfo 页面，则大功告成。</h4><h3 id="新建站点（虚拟主机）"><a href="#新建站点（虚拟主机）" class="headerlink" title="新建站点（虚拟主机）"></a>新建站点（虚拟主机）</h3><h4 id="创建站点根目录"><a href="#创建站点根目录" class="headerlink" title="创建站点根目录"></a>创建站点根目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /var/www/tony.test</span><br></pre></td></tr></table></figure>

<h4 id="配置站点文件"><a href="#配置站点文件" class="headerlink" title="配置站点文件"></a>配置站点文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/nginx/sites-available/default  /etc/nginx/sites-available/tony.test</span><br><span class="line">sudo vim /etc/nginx/sites-available/tony.test</span><br></pre></td></tr></table></figure>

<h4 id="配置文件如下："><a href="#配置文件如下：" class="headerlink" title="配置文件如下："></a>配置文件如下：</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> tony.test;</span><br><span class="line">    <span class="attribute">root</span> /var/www/tony.test;</span><br><span class="line">    <span class="attribute">index</span> index.html index.php;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.2-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="保存文件后，创建一个软链接到sites-enabled"><a href="#保存文件后，创建一个软链接到sites-enabled" class="headerlink" title="保存文件后，创建一个软链接到sites-enabled"></a>保存文件后，创建一个软链接到sites-enabled</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo ln <span class="literal">-s</span> /etc/nginx/sites<span class="literal">-available</span>/tony.test /etc/nginx/sites<span class="literal">-enabled</span>/tony.test</span><br></pre></td></tr></table></figure>

<h4 id="此时差一步，要修改hosts文件的"><a href="#此时差一步，要修改hosts文件的" class="headerlink" title="此时差一步，要修改hosts文件的"></a>此时差一步，要修改hosts文件的</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>

<h4 id="添加一行"><a href="#添加一行" class="headerlink" title="添加一行"></a>添加一行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1 tony.test</span><br></pre></td></tr></table></figure>

<h4 id="重新加载ngnix配置文件或重启nginx，即完成网站添加，浏览器访问tony-test试试。"><a href="#重新加载ngnix配置文件或重启nginx，即完成网站添加，浏览器访问tony-test试试。" class="headerlink" title="重新加载ngnix配置文件或重启nginx，即完成网站添加，浏览器访问tony.test试试。"></a>重新加载ngnix配置文件或重启nginx，即完成网站添加，浏览器访问tony.test试试。</h4>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>lnmp</tag>
        <tag>nginx</tag>
        <tag>php配置</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql创建数据库授权用户</title>
    <url>/33fcb92f.html</url>
    <content><![CDATA[<p><code>mysql</code>添加数据库和用户命令，常用的收集与此，持续更新</p>
<a id="more"></a>

<h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库列表"><a href="#查看数据库列表" class="headerlink" title="查看数据库列表"></a>查看数据库列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>使用数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use testDB;</span><br></pre></td></tr></table></figure>

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database dbname</span><br></pre></td></tr></table></figure>

<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p><code>username</code>： 你将创建的用户名,</p>
<p><code>host</code>： 指定该用户在哪个主机上可以登陆，此处的”<code>localhost</code>“，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”<code>localhost</code>“改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;0.0.0.0代表允许远程连接</p>
<p><code>password</code>： 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;tony&#39;@&#39;0.0.0.0&#39; identified by &#39;admin123&#39;</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user &#39;tony&#39;@&#39;localhost&#39;</span><br></pre></td></tr></table></figure>

<h3 id="授权指定数据库给用户"><a href="#授权指定数据库给用户" class="headerlink" title="授权指定数据库给用户"></a>授权指定数据库给用户</h3><h4 id="授权部分权限给用户"><a href="#授权部分权限给用户" class="headerlink" title="授权部分权限给用户"></a>授权部分权限给用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select,update, delete on testDB.* to tony@&#39;%&#39; identified by &#39;admin123&#39;</span><br></pre></td></tr></table></figure>

<h4 id="授权所有权限给用户"><a href="#授权所有权限给用户" class="headerlink" title="授权所有权限给用户"></a>授权所有权限给用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges on testDB.* to &#39;tony&#39;@&#39;%&#39; identified by &#39;admin123&#39;</span><br></pre></td></tr></table></figure>

<h3 id="刷新权限表"><a href="#刷新权限表" class="headerlink" title="刷新权限表"></a>刷新权限表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 修改完权限一定记得此操作哟</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>db</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql用户命令</tag>
        <tag>mysql操作用户</tag>
        <tag>mysql操作数据库</tag>
        <tag>mysql添加用户</tag>
        <tag>mysql添加权限</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql远程连接失败</title>
    <url>/d2451b26.html</url>
    <content><![CDATA[<p><code>mysql</code>运行环境，<code>VMware</code>虚拟机<code>Ubuntu20</code>，宿主机<code>win10</code>，使用<code>Navicat</code>连接该数据库，连接失败。</p>
<a id="more"></a>

<h3 id="配置文件取消本机绑定"><a href="#配置文件取消本机绑定" class="headerlink" title="配置文件取消本机绑定"></a>配置文件取消本机绑定</h3><p>本人<code>Ubuntu</code>的<code>mysql</code>配置文件路径:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line"># 找到绑定地址,将其注释</span><br><span class="line"># bind-address		&#x3D; 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>注释之后发现还是连接不了。</p>
<h3 id="修改用户表对应host"><a href="#修改用户表对应host" class="headerlink" title="修改用户表对应host"></a>修改用户表对应<code>host</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update user set host &#x3D; &quot;%&quot; where user&#x3D;&quot;tony&quot;;</span><br></pre></td></tr></table></figure>

<p>再次尝试进行连接，使用命令行可以正确连接，但是<code>Navicat</code>报错：“<code>Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded</code>”</p>
<h3 id="修改加密规则"><a href="#修改加密规则" class="headerlink" title="修改加密规则"></a>修改加密规则</h3><p>出现以上报错信息，原因是<code>mysql8</code> 之前的版本中加密规则是<code>mysql_native_password</code>,而在<code>mysql8</code>之后,加密规则是<code>caching_sha2_password</code>, 解决问题方法有两种,一种是升级<code>navicat</code>驱动,一种是把<code>mysql</code>用户登录密码加密规则还原成<code>mysql_native_password</code>.</p>
<p>升级<code>Navicat</code>没啥说的，直接说第二种：</p>
<h4 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录<code>mysql</code></h4><p>我这里直接使用<code>sudo</code>了，这样就不用数据用户名了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line"> 也可以mysql账户登录</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h4 id="更新加密规则"><a href="#更新加密规则" class="headerlink" title="更新加密规则"></a>更新加密规则</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改加密规则 </span><br><span class="line">mysql&gt;  ALTER USER &#39;tony&#39;@&#39;%&#39; IDENTIFIED BY &#39;646547989&#39; PASSWORD EXPIRE NEVER; </span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line"># 更新一下用户的密码 </span><br><span class="line">mysql&gt; ALTER USER &#39;tony&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;646547989&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h3 id="授权数据库"><a href="#授权数据库" class="headerlink" title="授权数据库"></a>授权数据库</h3><p><code>Navicat</code>已经成功连接了<code>mysql</code>，但是没有该用户下没有数据库，授权+刷新权限即可将所有数据库加到该用户下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to &#39;tony&#39;@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql远程连接失败</tag>
        <tag>mysql远程</tag>
        <tag>mysql远程连接</tag>
        <tag>mysql连接失败</tag>
        <tag>mysql无法连接</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx其他常用配置</title>
    <url>/dbeab76f.html</url>
    <content><![CDATA[<p>除了<a href="https://www.diandian100.cn/b5f2e1e2.html"><code>nginx</code>安装及配置多域名初体验</a>里的一些配置，这里详细说下几个常用的配置：状态信息、访问日志、限制访问、错误页面、<code>Nginx</code>代理等。</p>
<a id="more"></a>

<h2 id="Nginx状态信息（status）配置"><a href="#Nginx状态信息（status）配置" class="headerlink" title="Nginx状态信息（status）配置"></a><code>Nginx</code>状态信息（<code>status</code>）配置</h2><h3 id="Nginx状态信息（status）配置及信息详解"><a href="#Nginx状态信息（status）配置及信息详解" class="headerlink" title="Nginx状态信息（status）配置及信息详解"></a><code>Nginx</code>状态信息（<code>status</code>）配置及信息详解</h3><p>​    <code>nginx</code>与<code>php-fpm</code>一样内建了一个状态页，对于想了解<code>nginx</code>的状态以及监控<code>nginx</code>非常有帮助。为了后续的<code>zabbix</code>监控，我们需要先了解一下<code>nginx</code>的状态页。</p>
<h3 id="Nginx状态信息（status）介绍"><a href="#Nginx状态信息（status）介绍" class="headerlink" title="Nginx状态信息（status）介绍"></a><code>Nginx</code>状态信息（<code>status</code>）介绍</h3><p>​    <code>Nginx</code>软件在编译时又一个<code>with-http_stub_status_module</code>模块，这个模块功能是记录<code>Nginx</code>的基本访问状态信息，让使用者了解<code>Nginx</code>的工作状态。<br>要想使用状态模块，在编译时必须增加<code>--with-http_stub_status_module</code>参数。</p>
<h3 id="检测status模块"><a href="#检测status模块" class="headerlink" title="检测status模块"></a>检测status模块</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:~# nginx -V</span><br><span class="line">nginx version: nginx/1.13.12</span><br><span class="line">built with OpenSSL 1.1.0h  27 Mar 2018</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --with-cc-opt=&#x27;-g -O2 -fdebug-prefix-map=/build/nginx-THAKdv/nginx-1.13.12=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2&#x27; --with-ld-opt=&#x27;-Wl,-z,relro -Wl,-z,now -fPIC&#x27; --prefix=/usr/share/nginx --c</span><br><span class="line">onf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --modules-path=/usr/lib/nginx/modules --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-http_ssl_module --with-http_stub_status_module</span><br></pre></td></tr></table></figure>

<h3 id="通过ab压测命令检测"><a href="#通过ab压测命令检测" class="headerlink" title="通过ab压测命令检测"></a><strong>通过ab压测命令检测</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装测试工具</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ab -kc 1000 -n 100000 http://192.168.119.10/</span><br><span class="line"><span class="meta">#</span><span class="bash"> -n requests <span class="comment">#执行的请求数，即一共发起多少请求。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c concurrency <span class="comment">#请求并发数。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -k <span class="comment">#启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行测试</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816140444.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Active connections: 596 # 正在处理的活动连接数596个</span><br><span class="line">server accepts handled requests # 服务器接收的请求数</span><br><span class="line"> 2604 2604 3712 </span><br><span class="line"><span class="meta"> #</span><span class="bash"> nginx启动到现在共处理了2604个链接</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> nginx共成功创建2604次握手</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> handled requests表示处理了3712次请求</span></span><br><span class="line">Reading: 0 Writing: 1 Waiting: 595 </span><br><span class="line"><span class="meta">#</span><span class="bash"> Reading： nginx读取到的header信息数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Writing： nginx返回给客户端的header数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Waiting： 已处理完，等待下次请求的连接数</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx访问日志"><a href="#Nginx访问日志" class="headerlink" title="Nginx访问日志"></a><code>Nginx</code>访问日志</h2><p>日志功能对每个用户访问网站的日志信息记录到指定的日志文件里，开发运维人员可以分析用户的浏览器行为。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"><span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line"><span class="comment"># log_format    记录日志的格式，可定义多种格式</span></span><br><span class="line"><span class="comment"># accsss_log    指定日志文件的路径以及格式</span></span><br><span class="line"><span class="comment">#log_format是日志关键字参数，不能变;main是日志格式指定的标签，记录日志时通过main标签选择指定的格式。 </span></span><br></pre></td></tr></table></figure>

<p><code>log_format</code>参数：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$remote_addr    记录客户端ip</span><br><span class="line">$remote_user    远程用户，没有就是 “-”</span><br><span class="line">$time_local 　　 对应[14/Aug/2018:18:46:52 +0800]</span><br><span class="line">$request　　　 　对应请求信息&quot;GET /favicon.ico HTTP/1.1&quot;</span><br><span class="line">$status　　　  　状态码</span><br><span class="line">$body_bytes_sent　　571字节 请求体的大小</span><br><span class="line">$http_referer　　对应“-”　　由于是直接输入浏览器就是 -</span><br><span class="line">$http_user_agent　　客户端身份信息</span><br><span class="line">$http_x_forwarded_for　　记录客户端的来源真实ip 97.64.34.118</span><br></pre></td></tr></table></figure>

<p>日志效果：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">79</span><span class="variable">.107</span><span class="variable">.136</span><span class="variable">.94</span> - - [<span class="number">16</span>/Aug/<span class="number">2019</span>:<span class="number">14</span>:<span class="number">17</span>:<span class="number">44</span> +<span class="number">0800</span>] <span class="string">&quot;GET / HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">3706</span> <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.</span></span><br><span class="line"><span class="string">36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot;</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="限制访问"><a href="#限制访问" class="headerlink" title="限制访问"></a>限制访问</h2><p>如果哪天发现你的<code>nginx</code>很慢，或者检查<code>access.log</code>时候，有一个<code>some body</code>疯狂请求你的<code>nginx server</code>，那么可以禁止这个<code>IP</code>访问</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 限制ip或ip段访问；禁止访问/av/底下的资源</span></span><br><span class="line"><span class="attribute">location</span> /av &#123;</span><br><span class="line">    <span class="attribute">deny</span> <span class="number">122.71.240.254</span>;</span><br><span class="line">    <span class="comment">#alias /opt/nginx1-12/html/av;</span></span><br><span class="line">    <span class="attribute">allow</span> <span class="number">10.1.1.0</span>/<span class="number">16</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用浏览器访问，提示如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816142751.png"></p>
<p>且日志里自动写入了该条访问记录，状态码为：403</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">180.169.32.34 - - [16&#x2F;Aug&#x2F;2019:14:30:28 +0800] &quot;GET &#x2F;av HTTP&#x2F;1.1&quot; 403 169 &quot;-&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; Trident&#x2F;7.0; rv</span><br><span class="line">:11.0) like Gecko Core&#x2F;1.70.3722.400 QQBrowser&#x2F;10.5.3738.400&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>

<h2 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h2><p>在网站运行过程中，可能因为页面不存在等原因，导致网站无法正常响应请求，此时web服务会返回系统的错误码，但是默认的错误页面很不友好。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816143106.png">因此我们可以将404，403等页面的错误信息重定向到网站首页或者其他指定的页面，提升用户访问体验</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br></pre></td></tr></table></figure>

<p>修改404.html文件，重新访问一个不存在的页面提示如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816143516.png"></p>
<h2 id="Location语法"><a href="#Location语法" class="headerlink" title="Location语法"></a><code>Location</code>语法</h2><h3 id="location语法优先级"><a href="#location语法优先级" class="headerlink" title="location语法优先级"></a><code>location</code>语法优先级</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">匹配符	  匹配规则 					优先级</span><br><span class="line">=    	精确匹配    				 1</span><br><span class="line">^~    	以某个字符串开头    		  2</span><br><span class="line">~    	区分大小写的正则匹配    		 3</span><br><span class="line">~*    	不区分大小写的正则匹配    		4</span><br><span class="line">!~    	区分大小写不匹配的正则    		5</span><br><span class="line">!~*    	不区分大小写不匹配的正则        6</span><br><span class="line">/    	通用匹配，任何请求都会匹配到     7</span><br></pre></td></tr></table></figure>

<h3 id="nginx-conf配置文件实例"><a href="#nginx-conf配置文件实例" class="headerlink" title="nginx.conf配置文件实例"></a><code>nginx.conf</code>配置文件实例</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> pythonav.cn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#优先级1,精确匹配，根路径</span></span><br><span class="line">    <span class="attribute">location</span> =/ &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">400</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#优先级2,以某个字符串开头,以av开头的，优先匹配这里，区分大小写</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /av &#123;</span><br><span class="line">       <span class="attribute">root</span> /data/av/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#优先级3，区分大小写的正则匹配，匹配/media*****路径</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /media</span> &#123;</span><br><span class="line">          <span class="attribute">alias</span> /data/static/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#优先级4 ，不区分大小写的正则匹配，所有的****.jpg|gif|png 都走这里</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* .*\.(jpg|gif|png|js|css)$</span> &#123;</span><br><span class="line">       <span class="attribute">root</span>  /data/av/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#优先7，通用匹配</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="root和alias"><a href="#root和alias" class="headerlink" title="root和alias"></a><code>root</code>和<code>alias</code></h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">nginx指定文件路径有root和alias两种方法</span><br><span class="line">区别在方法和作用域：</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line">语法  root  路径;</span><br><span class="line">默认值 root   html;</span><br><span class="line">配置块  http&#123;&#125;   server &#123;&#125;   location&#123;&#125;</span><br><span class="line"></span><br><span class="line">alias</span><br><span class="line">语法： alias  路径</span><br><span class="line">配置块  location&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root和alias区别在nginx如何解释location后面的url，这会使得两者分别以不同的方式讲请求映射到服务器文件上</span><br><span class="line"></span><br><span class="line">root参数是root路径+location位置</span><br><span class="line"></span><br><span class="line">root实例：</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /av &#123;</span><br><span class="line">        root /data/av;   注意这里可有可无结尾的   /</span><br><span class="line">    &#125;</span><br><span class="line">请求url是pythonav.cn/av/index.html时</span><br><span class="line">web服务器会返回服务器上的/data/av/av/index.html</span><br><span class="line"></span><br><span class="line">root实例2：</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* .*\.(jpg|gif|png|js|css)$</span> &#123;</span><br><span class="line">       <span class="attribute">root</span>  /data/av/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">请求url是pythonav.cn/girl.gif时</span><br><span class="line">web服务器会返回服务器上的/data/static/girl.gif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alias实例：</span><br><span class="line">alias参数是使用alias路径替换location路径</span><br><span class="line">alias是一个目录的别名</span><br><span class="line">注意alias必须有 &quot;/&quot;  结束！</span><br><span class="line">alias只能位于location块中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请求url是pythonav.cn/av/index.html时</span><br><span class="line">web服务器会返回服务器上的/data/static/index.html</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /av &#123;</span><br><span class="line">    <span class="attribute">alias</span> /data/static/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Nginx代理"><a href="#Nginx代理" class="headerlink" title="Nginx代理"></a><code>Nginx</code>代理</h2><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816143745.png"></p>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>正向代理，也就是传说中的代理,他的工作原理就像一个跳板（<code>VPN</code>），简单的说：</p>
<p>我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，这个代理服务器呢，他能访问那个我不能访问的网站，于是我先连上代理服务器，告诉他我需要那个无法访问网站的内容，代理服务器去取回来，然后返回给我。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>对于客户端而言，代理服务器就像是原始服务器。</p>
<h3 id="模拟反向代理"><a href="#模拟反向代理" class="headerlink" title="模拟反向代理"></a>模拟反向代理</h3><p><code>nginx</code>实现负载均衡的组件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ngx_http_proxy_module</span>    <span class="comment">#proxy代理模块，用于把请求抛给服务器节点或者upstream服务器池</span></span><br></pre></td></tr></table></figure>

<h4 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.10.10.125 	master 	主负载</span><br><span class="line">111.231.99.120 	slave 	web服务器</span><br></pre></td></tr></table></figure>

<p>主负载配置文件内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.nginx-debian.html index.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /status &#123;</span><br><span class="line">        <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#反向代理</span></span><br><span class="line">    <span class="attribute">location</span> /agent &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://111.231.99.120/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/run/php/php7.2-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="重启主负载nginx"><a href="#重启主负载nginx" class="headerlink" title="重启主负载nginx"></a>重启主负载<code>nginx</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h4 id="访问http-10-10-10-125-agent"><a href="#访问http-10-10-10-125-agent" class="headerlink" title="访问http://10.10.10.125/agent"></a>访问<span class="exturl" data-url="aHR0cDovLzEwLjEwLjEwLjEyNS9hZ2VudA==">http://10.10.10.125/agent<i class="fa fa-external-link-alt"></i></span></h4><p>访问结果如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816145455.png">显示的内容是111.231.99.120的网站内容</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx配置</tag>
        <tag>状态信息</tag>
        <tag>访问日志</tag>
        <tag>限制访问</tag>
        <tag>错误页面</tag>
        <tag>Nginx代理</tag>
        <tag>反向代理</tag>
        <tag>location</tag>
        <tag>正向代理</tag>
        <tag>限制ip</tag>
        <tag>access_log</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx基于uwsgi部署Django</title>
    <url>/a39caea5.html</url>
    <content><![CDATA[<p>之前<a href="https://www.diandian100.cn/7c752308.html">uwsgi配置发布web服务器</a>已经讲了如何配置<code>python</code>环境，今天偶尔看到一个博客，照着做了下，感觉博客写的有点乱，这里来整理一下。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>因为也在熟练docker中，索性我们就以一个容器为例来进行今天的部署。</p>
<p>服务器：<code>centos7</code>；<code>ip：172.17.0.1</code></p>
<p>关于如何交互运行<code>docker</code>我这里不细说了，详情请看：<a href="https://www.diandian100.cn/cf791c57.html">Docker基础使用</a></p>
<h2 id="安装扩展包"><a href="#安装扩展包" class="headerlink" title="安装扩展包"></a>安装扩展包</h2><p>我们肯定使用<code>uwsgi</code>，所以先安装它及其所需要的扩展</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum groupinstall &quot;Development tools&quot;</span><br><span class="line">yum install zlib-devel bzip2-devel pcre-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel</span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>

<h2 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装<code>django</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;1.11</span><br></pre></td></tr></table></figure>

<h2 id="创建项目及应用"><a href="#创建项目及应用" class="headerlink" title="创建项目及应用"></a>创建项目及应用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /www</span><br><span class="line">django-admin startproject visasto</span><br><span class="line">django-admin startapp web</span><br></pre></td></tr></table></figure>

<h2 id="修改allowd-host"><a href="#修改allowd-host" class="headerlink" title="修改allowd_host"></a>修改<code>allowd_host</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS &#x3D; [&#39;*&#39;]</span><br></pre></td></tr></table></figure>

<h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><p>启动方式有3种。</p>
<h3 id="使用django自带wsgi启动"><a href="#使用django自带wsgi启动" class="headerlink" title="使用django自带wsgi启动"></a>使用<code>django</code>自带<code>wsgi</code>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<p>我们在172.17.0.1主机上使用浏览器访问：<span class="exturl" data-url="aHR0cDovLzE3Mi4xNy4wLjIs5q2j5bi46L+Q6KGMYGRqYW5nb2Av">http://172.17.0.2，正常运行`django`<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="使用uwsgi启动"><a href="#使用uwsgi启动" class="headerlink" title="使用uwsgi启动"></a>使用<code>uwsgi</code>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uwsgi --http :8000 --module visasto.wsgi</span><br></pre></td></tr></table></figure>

<p>我们在172.17.0.1主机上使用浏览器访问：<span class="exturl" data-url="aHR0cDovLzE3Mi4xNy4wLjIs5q2j5bi46L+Q6KGMYGRqYW5nb2Av">http://172.17.0.2，正常运行`django`<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="使用uwsgi配置文件启动"><a href="#使用uwsgi配置文件启动" class="headerlink" title="使用uwsgi配置文件启动"></a>使用<code>uwsgi</code>配置文件启动</h3><p>这次我们要结合<code>nginx</code>了，将<code>nginx</code>默认的80端口给转发到我们的<code>uwsgi</code>上</p>
<h4 id="创建uwsgi配置文件"><a href="#创建uwsgi配置文件" class="headerlink" title="创建uwsgi配置文件"></a>创建<code>uwsgi</code>配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;visasto</span><br><span class="line">vim uwsgi_visasto.ini</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件内容"><a href="#修改配置文件内容" class="headerlink" title="修改配置文件内容"></a>修改配置文件内容</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="attribute">socket</span> = <span class="number">0.0.0.0:8003</span></span><br><span class="line"><span class="comment">#the local unix socket file than commnuincate to Nginx</span></span><br><span class="line"><span class="comment">#socket = /www/visasto/visasto.socket</span></span><br><span class="line"><span class="comment"># the base directory (full path)</span></span><br><span class="line">chdir = /www/visasto</span><br><span class="line"><span class="comment"># Django&#x27;s wsgi file</span></span><br><span class="line">wsgi-file =visasto/wsgi.py</span><br><span class="line"><span class="comment"># maximum number of worker processes</span></span><br><span class="line">processes = <span class="number">4</span></span><br><span class="line"><span class="comment">#thread numbers startched in each worker process</span></span><br><span class="line">threads = <span class="number">2</span></span><br><span class="line"><span class="comment"># clear environment on exit</span></span><br><span class="line">vacuum          = <span class="literal">true</span></span><br><span class="line">daemonize = /www/visasto/uwsgi_visasto.log</span><br><span class="line">py-autoreload=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <code>ps</code>: <code>nginx</code> 连接<code>uwsgi</code>一共有三种方式 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方式一: </span><br><span class="line">uwsgi.ini 里面指定为http &#x3D; 127.0.0.1:8000</span><br><span class="line">nginx的配置文件里面需要写</span><br><span class="line">proxy_pass 127.0.0.1:8000;</span><br><span class="line">方式二:</span><br><span class="line">uwsgi.ini里面指定为socket &#x3D; 127.0.0.1:8000</span><br><span class="line">nginx的配置文件需要写 </span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;uwsgi.conf;</span><br><span class="line">uwsgi_pass 127.0.0.0:8000;</span><br><span class="line">方式三:</span><br><span class="line">uwsgi.ini里面指定为socket &#x3D; &#x2F;www&#x2F;visasto&#x2F;visasto.socket</span><br><span class="line">nginx的配置文件需要写 </span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;uwsgi.conf;</span><br><span class="line">uwsgi_pass unix:&#x2F;www&#x2F;visasto&#x2F;visasto.socket;</span><br></pre></td></tr></table></figure>

<h4 id="修改nginx"><a href="#修改nginx" class="headerlink" title="修改nginx"></a>修改<code>nginx</code></h4><p><code>/etc/nginx/uwsgi_params</code>文件已经默认生成好了</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vim</span> /etc/nginx/nginx.conf</span><br><span class="line"><span class="comment"># 内容修改为</span></span><br><span class="line"> server &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span>       [::]:<span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">server_name</span>  _;</span><br><span class="line">        <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/default.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">include</span> /etc/nginx/uwsgi_params;</span><br><span class="line">		<span class="attribute">uwsgi_pass</span> <span class="number">127.0.0.1:8003</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="启动uwsgi"><a href="#启动uwsgi" class="headerlink" title="启动uwsgi"></a>启动<code>uwsgi</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi_visasto.ini</span><br></pre></td></tr></table></figure>

<h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动<code>nginx</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>

<p>我们在172.17.0.1主机上使用浏览器访问：<span class="exturl" data-url="aHR0cDovLzE3Mi4xNy4wLjIs5q2j5bi46L+Q6KGMYGRqYW5nb2Av">http://172.17.0.2，正常运行`django`<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx基于uwsgi部署Django</tag>
        <tag>linux部署python</tag>
        <tag>linux部署Django</tag>
        <tag>linux部署uwsgi</tag>
        <tag>nginx结合uwsgi</tag>
        <tag>uwsgi部署</tag>
        <tag>python环境</tag>
        <tag>python环境安装</tag>
        <tag>python环境部署</tag>
        <tag>django环境安装</tag>
        <tag>django环境部署</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx负载均衡</title>
    <url>/1e121151.html</url>
    <content><![CDATA[<p>当我们的网站处于发展初期的时候，<code>nginx</code>只代理了后端一台服务器，但由于我们网站名气大涨访问的人越来越多一台服务器实在是顶不住，于是我们加了多台服务器，使用之前的服务器配置其<code>nginx</code>代理，指向多台服务器上的网站，以减轻一台服务器压力，这就是负载均衡。下面说下如何搭建<code>nginx</code>负载均衡。</p>
<a id="more"></a>

<h2 id="Nginx概述"><a href="#Nginx概述" class="headerlink" title="Nginx概述"></a><code>Nginx</code>概述</h2><p><code>Web</code>服务器，直接面向用户，往往要承载大量并发请求，单台服务器难以负荷，我使用多台WEB服务器组成集群，前端使用<code>Nginx</code>负载均衡，将请求分散的打到我们的后端服务器集群中，实现负载的分发。那么会大大提升系统的吞吐率、请求性能、高容灾。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816151407.png"></p>
<ul>
<li><code>Nginx</code>要实现负载均衡需要用到<code>proxy_pass</code>代理模块配置</li>
<li><code>Nginx</code>负载均衡与<code>Nginx</code>代理不同地方在于</li>
<li><code>Nginx</code>代理仅代理一台服务器，而<code>Nginx</code>负载均衡则是将客户端请求代理转发至一组<code>upstream</code>虚拟服务池</li>
<li><code>Nginx</code>可以配置代理多台服务器，当一台服务器宕机之后，仍能保持系统可用。</li>
</ul>
<h2 id="upstream配置"><a href="#upstream配置" class="headerlink" title="upstream配置"></a><code>upstream</code>配置</h2><p>在<code>nginx.conf &gt; http</code> 区域中</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> myslb &#123;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">10.0.0.10:8000</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">10.0.0.11:9000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>nginx.conf &gt; http</code> 区域 &gt;  <code>server</code>区域  &gt; <code>location</code>配置中</p>
<p>添加<code>proxy_pass</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://myslb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时初步负载均衡已经完成，<code>upstream</code>默认按照轮训方式负载，每个请求按时间顺序逐一分配到后端节点。</p>
<h2 id="upstream分配策略"><a href="#upstream分配策略" class="headerlink" title="upstream分配策略"></a><code>upstream</code>分配策略</h2><h3 id="weight-权重"><a href="#weight-权重" class="headerlink" title="weight 权重"></a><code>weight</code> 权重</h3><p>谁的权重大优先或访问谁的几率更大</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> myslb &#123;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">10.0.0.10:8000</span> weight=<span class="number">5</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">10.0.0.11:9000</span> weight=<span class="number">10</span>;<span class="comment">#这个节点访问比率是大于8000的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a><code>ip_hash</code></h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器</span></span><br><span class="line"><span class="attribute">upstream</span> myslb &#123;</span><br><span class="line">　　　　ip_hash;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">10.0.0.10:8000</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">10.0.0.11:9000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a><code>backup</code></h3><p>在非<code>backup</code>机器繁忙或者宕机时，请求<code>backup</code>机器，因此机器默认压力最小</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> myslb &#123;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">10.0.0.10:8000</span> weight=<span class="number">5</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">10.0.0.11:9000</span>;</span><br><span class="line">       <span class="attribute">server</span> node.oldboy.com:<span class="number">8080</span> backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡实例"><a href="#负载均衡实例" class="headerlink" title="负载均衡实例"></a>负载均衡实例</h2><h3 id="模拟环境"><a href="#模拟环境" class="headerlink" title="模拟环境"></a>模拟环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">角色					  ip				系统</span><br><span class="line">访问者					 10.10.10.11		win10</span><br><span class="line">负载服务器(master)		10.10.10.21		   linux</span><br><span class="line">服务器1				  10.10.10.22		linux</span><br><span class="line">服务器2				  10.10.10.23		linux</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -F</span><br><span class="line">sed  -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<h3 id="配置服务器1、2"><a href="#配置服务器1、2" class="headerlink" title="配置服务器1、2"></a>配置服务器1、2</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 10.10.10.22服务器配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">10.10.10.22</span>;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /node;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">mkdir</span> /node</span><br><span class="line">echo <span class="string">&#x27;i am web01&#x27;</span> &gt; /node/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#平滑重启nginx</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.10.10.23服务器配置</span></span><br><span class="line">server &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">10.10.10.23</span>;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /node;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">mkdir</span> /node</span><br><span class="line">echo <span class="string">&#x27;i am web02&#x27;</span> &gt; /node/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#平滑重启nginx</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="配置负载服务器"><a href="#配置负载服务器" class="headerlink" title="配置负载服务器"></a>配置负载服务器</h3><p>配置<code>nginx</code>配置文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">upstream</span> node &#123;</span><br><span class="line">    　　<span class="attribute">server</span> <span class="number">10.10.10.22:80</span>;</span><br><span class="line">    　　<span class="attribute">server</span> <span class="number">10.10.10.23:80</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> <span class="number">10.10.10.21</span>;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">        　　<span class="attribute">proxy_pass</span> http://node;</span><br><span class="line">        　　<span class="attribute">include</span> proxy_params;  <span class="comment">#需要手动创建，可以省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>手动创建<code>proxy_params</code>文件，文件中存放代理的请求头相关参数</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /opt/nginx/conf/proxy_params文件内容</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">30</span>;</span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">60</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">128k</span>;</span><br></pre></td></tr></table></figure>

<p>重启负载服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>在<code>10.10.10.11</code>电脑上使用浏览器刷新访问<code>10.10.10.21</code>，浏览器交替显示“<code>i am web01...</code>” 或 “<code>i am web02...</code>“。</p>
<h2 id="负载均衡调度算法"><a href="#负载均衡调度算法" class="headerlink" title="负载均衡调度算法"></a>负载均衡调度算法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">调度算法   　　 概述</span><br><span class="line">轮询    　　　　按时间顺序逐一分配到不同的后端服务器(默认)</span><br><span class="line">weight  　　   加权轮询,weight值越大,分配到的访问几率越高</span><br><span class="line">ip_hash   　　 每个请求按访问IP的hash结果分配,这样来自同一IP的固定访问一个后端服务器</span><br><span class="line">url_hash   　  按照访问URL的hash结果来分配请求,是每个URL定向到同一个后端服务器</span><br><span class="line">least_conn    最少链接数,那个机器链接数少就分发</span><br></pre></td></tr></table></figure>

<p>1.轮询(不做配置，默认轮询)</p>
<p>2.<code>weight</code>权重(优先级)</p>
<p>3.<code>ip_hash</code>配置，根据客户端<code>ip</code>哈希分配，不能和<code>weight</code>一起用</p>
<h2 id="动静分离负载均衡"><a href="#动静分离负载均衡" class="headerlink" title="动静分离负载均衡"></a>动静分离负载均衡</h2><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816165812.png"></p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">系统                 			服务                软件                ip地址</span><br><span class="line">centos7(lb01)                负载均衡            nginx proxy        192.168.119.10</span><br><span class="line">centos7(web01)                静态资源            nginx静态资源      192.168.119.11</span><br><span class="line">centos7(web02)                动态资源            flask            192.168.119.12</span><br></pre></td></tr></table></figure>

<h3 id="配置web01静态资源站"><a href="#配置web01静态资源站" class="headerlink" title="配置web01静态资源站"></a>配置<code>web01</code>静态资源站</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cat</span> nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">192.168.119.11</span>;</span><br><span class="line">        <span class="comment">#定义网页根目录</span></span><br><span class="line">         <span class="attribute">root</span> /code;</span><br><span class="line">        <span class="comment">#定义了静态资源</span></span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line"><span class="comment">#域名匹配，所有的png、jpg、gif请求资源，都去/root/code/images底下找</span></span><br><span class="line">         <span class="attribute">location</span> <span class="regexp">~* .*\.(png|jpg|gif)$</span> &#123;</span><br><span class="line">                <span class="attribute">root</span> /code/images;</span><br><span class="line">        &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">#重启nginx</span></span><br><span class="line">./sbin/nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建目录</span></span><br><span class="line"><span class="attribute">mkdir</span> -p /code/images</span><br><span class="line"><span class="comment">#准备首页文件</span></span><br><span class="line">[root<span class="variable">@web01</span>  /code]<span class="variable">$cat</span> index.html</span><br><span class="line">static files...</span><br><span class="line"><span class="comment">#准备静态文件，图片</span></span><br><span class="line">[root<span class="variable">@web01</span>  /code/images]<span class="variable">$wget</span> http://pythonav.cn/av/girlone.jpg</span><br><span class="line">[root<span class="variable">@web01</span>  /code/images]<span class="variable">$ls</span></span><br><span class="line">girlone.jpg</span><br></pre></td></tr></table></figure>

<h3 id="配置web02动态服务器"><a href="#配置web02动态服务器" class="headerlink" title="配置web02动态服务器"></a>配置<code>web02</code>动态服务器</h3><h4 id="准备flask应用"><a href="#准备flask应用" class="headerlink" title="准备flask应用"></a>准备<code>flask</code>应用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;i am flask....from nginx&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<h4 id="运行flask"><a href="#运行flask" class="headerlink" title="运行flask"></a>运行<code>flask</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python flask-web.py</span><br></pre></td></tr></table></figure>

<h3 id="配置lb01负载主服务器"><a href="#配置lb01负载主服务器" class="headerlink" title="配置lb01负载主服务器"></a>配置<code>lb01</code>负载主服务器</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cat</span>  nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#静态资源地址</span></span><br><span class="line">upstream static &#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.119.11:80</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#flask动态请求</span></span><br><span class="line"><span class="attribute">upstream</span> flask &#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.119.12:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">192.168.119.10</span>;</span><br><span class="line">　　　　　　<span class="comment">#当请求到达192.168.119.12:80/时，转发给flask的8080应用</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://flask;</span><br><span class="line">            <span class="attribute">include</span> proxy_params;</span><br><span class="line">        &#125;</span><br><span class="line">　　　　　　<span class="comment">#当判断资源请求是 192.168.119.12/girl.jpg时候，转发请求给static地址池的服务器192.168.119.11/</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.(png|jpg|gif)$</span> &#123;</span><br><span class="line">　　　　　　　　<span class="attribute">proxy_pass</span> http://static;</span><br><span class="line">			<span class="attribute">include</span> proxy_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>使用浏览器访问<code>192.168.119.10</code>，访问结果：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190816171150.png"></p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx负载均衡</tag>
        <tag>负载均衡</tag>
        <tag>代理</tag>
        <tag>nginx代理</tag>
        <tag>动静分离</tag>
        <tag>nginx动静分离</tag>
      </tags>
  </entry>
  <entry>
    <title>php: command not found 和php -v与phpinfo()打印的版本不一致</title>
    <url>/7522ff0e.html</url>
    <content><![CDATA[<p>1.在linux下执行php时无法执行，报错：php: command not found</p>
<a id="more"></a>

<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;www&#x2F;wdlinux&#x2F;phps&#x2F;71&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>路径在PHPinfo里找</p>
<p>完成后输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>

<p>会看到已经加进来了刚才的路径</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>command not found</tag>
        <tag>path</tag>
      </tags>
  </entry>
  <entry>
    <title>picgo配置</title>
    <url>/e1bf671b.html</url>
    <content><![CDATA[<p>之前没有接触图床，站点博客图片资源都是直接存在网站空间中，后面使用<code>github page</code>服务，每次文章上传图片总让人觉得很繁琐，知道了图床特别是<code>picgo</code>之后，感觉真是相见恨晚。</p>
<a id="more"></a>

<p><code>picgo</code>支持很多平台，本人作为一个小白肯定第一次使用的就是<code>github</code>的，使用一段时间基本没什么问题，只是访问时候觉得速度感觉不是那么快，而腾讯作为国内的大厂，放在其上肯定没有任何问题，本人之前测试也能很友好，无奈重做了一下系统后，忘记了如何配置，此处记录下。</p>
<p>对于国内我们日常使用来讲，以下几个平台的配置足以满足我们需求，故不太介绍其他平台配置方法。</p>
<h3 id="腾讯云COS"><a href="#腾讯云COS" class="headerlink" title="腾讯云COS"></a>腾讯云<code>COS</code></h3><p>配置项及说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;secretId&quot;: &quot;&quot;,</span><br><span class="line">  &quot;secretKey&quot;: &quot;&quot;,</span><br><span class="line">  &quot;bucket&quot;: &quot;&quot;, &#x2F;&#x2F; 存储桶名，v4和v5版本不一样</span><br><span class="line">  &quot;appId&quot;: &quot;&quot;,</span><br><span class="line">  &quot;area&quot;: &quot;&quot;, &#x2F;&#x2F; 存储区域，例如ap-beijing-1</span><br><span class="line">  &quot;path&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义存储路径，比如img&#x2F;</span><br><span class="line">  &quot;customUrl&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义域名，注意要加http:&#x2F;&#x2F;或者https:&#x2F;&#x2F;</span><br><span class="line">  &quot;version&quot;: &quot;v5&quot; | &quot;v4&quot; &#x2F;&#x2F; COS版本，v4或者v5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>腾讯云支持v4和v5，并不知道使用起来有何不同。</p>
<h4 id="V4版本说明"><a href="#V4版本说明" class="headerlink" title="V4版本说明"></a>V4版本说明</h4><p>v4版本是这个：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324103734.png" alt="img"></p>
<p>需要登录腾讯云控制台。打开密钥管理</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324103807.png" alt="img"></p>
<p>按照对应的提示找到自己的<code>APPID</code>、<code>SecretId</code>、<code>SecretKey</code>。</p>
<p>存储的空间名是你的bucket名字。</p>
<p>存储的区域需要额外注意，请到bucket列表里打开需要上传的bucket空间，然后如图可以看到对应的区域以及区域代码，比如我的是<code>tj</code>：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324103838.png" alt="img"></p>
<p>对应的区域代码如下：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324103901.png" alt="img"></p>
<p>如果你想把图片上传到你的bucket空间的某个文件夹下，则需要在PicGo里的<code>指定存储路径</code>里加上你的文件夹路径。比如<code>temp/</code>（注意一定要加<code>/</code>）</p>
<h4 id="V5版本说明"><a href="#V5版本说明" class="headerlink" title="V5版本说明"></a>V5版本说明</h4><p><strong>1.</strong> 获取你的APPID、SecretId和SecretKey</p>
<p>访问：<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmNsb3VkLnRlbmNlbnQuY29tL2NhbS9jYXBp">https://console.cloud.tencent.com/cam/capi<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324103946.png" alt="img"></p>
<p><strong>2.</strong> 获取bucket名以及存储区域代号</p>
<p>访问：<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmNsb3VkLnRlbmNlbnQuY29tL2NvczUvYnVja2V0">https://console.cloud.tencent.com/cos5/bucket<i class="fa fa-external-link-alt"></i></span></p>
<p>创建一个存储桶。然后找到你的存储桶名和存储区域代号：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104005.png" alt="img"></p>
<p>v5版本的存储桶名称格式是<code>bucket-appId</code>，类似于<code>xxxx-12312313</code>。存储区域代码和v4版本的也有所区别，v5版本的如我的是<code>ap-beijing</code>，别复制错了。</p>
<p><strong>3.</strong> 选择v5版本并点击确定</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104022.png" alt="img"></p>
<p>然后记得点击<code>设为默认图床</code>，这样上传才会默认走的是腾讯云COS。</p>
<h3 id="又拍云"><a href="#又拍云" class="headerlink" title="又拍云"></a>又拍云</h3><p>配置文件及说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;bucket&quot;: &quot;&quot;, &#x2F;&#x2F; 存储空间名，及你的服务名</span><br><span class="line">  &quot;operator&quot;: &quot;&quot;, &#x2F;&#x2F; 操作员</span><br><span class="line">  &quot;password&quot;: &quot;&quot;, &#x2F;&#x2F; 密码</span><br><span class="line">  &quot;options&quot;: &quot;&quot;, &#x2F;&#x2F; 针对图片的一些后缀处理参数</span><br><span class="line">  &quot;path&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义存储路径，比如img&#x2F;</span><br><span class="line">  &quot;url&quot;: &quot;&quot; &#x2F;&#x2F; 加速域名，注意要加http:&#x2F;&#x2F;或者https:&#x2F;&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104107.png" alt="img"></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104126.png" alt="img"></p>
<p>存储空间名即为你的服务名，加速域名即为你又拍云分配给你的域名或者是你自己绑定的域名。请注意，加速域名需要加<code>http://</code>或<code>https://</code>。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104153.png" alt="img"></p>
<p>操作员即为你自己为该存储空间设定的操作员名，密码即为对应的密码。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104211.png" alt="img"></p>
<p>网址后缀为你针对图片进行的一些处理参数。</p>
<p>由于又拍云官方没有对云存储有一个直观的控制面板，所以推荐可以采用第三方web面板来查看和操作：</p>
<p>又拍云存储Web版操作工具</p>
<h3 id="GitHub图床"><a href="#GitHub图床" class="headerlink" title="GitHub图床"></a>GitHub图床</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;repo&quot;: &quot;&quot;, &#x2F;&#x2F; 仓库名，格式是username&#x2F;reponame</span><br><span class="line">  &quot;token&quot;: &quot;&quot;, &#x2F;&#x2F; github token</span><br><span class="line">  &quot;path&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义存储路径，比如img&#x2F;</span><br><span class="line">  &quot;customUrl&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义域名，注意要加http:&#x2F;&#x2F;或者https:&#x2F;&#x2F;</span><br><span class="line">  &quot;branch&quot;: &quot;&quot; &#x2F;&#x2F; 分支名，默认是master</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.</strong> 首先你得有一个GitHub账号。注册GitHub就不用我多言。</p>
<p><strong>2.</strong> 新建一个仓库</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104249.png" alt="img"></p>
<p>把repo的勾打上即可。然后翻到页面最底部，点击<code>Generate token</code>的绿色按钮生成token。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104306.png" alt="img"></p>
<p><strong>注意：</strong>这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104324.png" alt="img"></p>
<p><strong>4.</strong> 配置PicGo</p>
<p><strong>注意：</strong>仓库名的格式是<code>用户名/仓库</code>，比如我创建了一个叫做<code>test</code>的仓库，在PicGo里我要设定的仓库名就是<code>Molunerfinn/test</code>。一般我们选择<code>master</code>分支即可。然后记得点击确定以生效，然后可以点击<code>设为默认图床</code>来确保上传的图床是GitHub。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104416.png" alt="img"></p>
<p>至此配置完毕，已经可以使用了。当你上传的时候，你会发现你的仓库里也会增加新的图片了：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104455.png" alt="img"></p>
<h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><p>配置项及说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;accessKeyId&quot;: &quot;&quot;,</span><br><span class="line">  &quot;accessKeySecret&quot;: &quot;&quot;,</span><br><span class="line">  &quot;bucket&quot;: &quot;&quot;, &#x2F;&#x2F; 存储空间名</span><br><span class="line">  &quot;area&quot;: &quot;&quot;, &#x2F;&#x2F; 存储区域代号</span><br><span class="line">  &quot;path&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义存储路径</span><br><span class="line">  &quot;customUrl&quot;: &quot;&quot; &#x2F;&#x2F; 自定义域名，注意要加http:&#x2F;&#x2F;或者https:&#x2F;&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104606.png" alt="img"></p>
<p>首先先在阿里云OSS的控制台里找到你的<code>accessKeyId</code>和<code>accessKeySecret</code>：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104625.png" alt="img"></p>
<p>创建一个<code>bucket</code>后，存储空间名即为<code>bucket</code>:</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104650.png" alt="img"></p>
<p>确认你的存储区域的代码：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104715.png" alt="img"></p>
<p>也可以在bucket页面找到：<img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324104731.png" alt="img"></p>
<p>如上图，存储区域就是<code>oss-cn-beijing</code></p>
<p>存储路径比如<code>img/</code>的话，上传的图片会默认放在<code>OSS</code>的<code>img</code>文件夹下。注意存储路径一定要以<code>/</code>结尾！存储路径是可选的，如果不需要请留空。</p>
<p>本文借鉴<code>picgo</code>官方文档，因官方文档配置图片加载慢甚至加载不出来的缘故，本人在此记录，如侵权请联系。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>picgo配置</tag>
        <tag>腾讯图床</tag>
        <tag>腾讯云cos</tag>
        <tag>阿里图床</tag>
        <tag>阿里oss</tag>
        <tag>github图床</tag>
        <tag>又拍云图床</tag>
        <tag>图床配置</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm常用快捷键收藏</title>
    <url>/58bfeecb.html</url>
    <content><![CDATA[<p>pycharm是我们日常开发<code>python</code>必不可少的<code>ide</code>，同类型的<code>ide</code>也都可以开发，用过之后还是觉得<code>pycharm</code>最好用，下面列举下该开发工具一些常用的快捷方式。</p>
<a id="more"></a>

<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Q</td>
<td>快速查看文档</td>
</tr>
<tr>
<td>Ctrl + F1</td>
<td>显示错误描述或警告信息</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>行注释（可选中多行）</td>
</tr>
<tr>
<td>Ctrl + Alt + L</td>
<td>代码格式化</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>自动导入</td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>自动缩进</td>
</tr>
<tr>
<td>Tab / Shift + Tab</td>
<td>缩进、不缩进当前行（可选中多行）</td>
</tr>
<tr>
<td>Ctrl+C/Ctrl+Insert</td>
<td>复制当前行或选定的代码块到剪贴板</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>复制选定的区域</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>换行（不用鼠标操作了）</td>
</tr>
<tr>
<td>Ctrl +J</td>
<td>插入模版</td>
</tr>
<tr>
<td>Ctrl + Shift ++/-</td>
<td>展开/折叠全部代码块</td>
</tr>
<tr>
<td>Ctrl + Numpad+</td>
<td>全部展开</td>
</tr>
<tr>
<td>Ctrl + Numpad-</td>
<td>全部折叠</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>删除到字符结束</td>
</tr>
<tr>
<td>Ctrl + BackSpace</td>
<td>删除到字符开始</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>将当前单词在整个文件中高亮，F3移动到下一个，Esc取消高亮。</td>
</tr>
<tr>
<td>Alt + up/down</td>
<td>方法上移或下移动</td>
</tr>
<tr>
<td>Alt + Shift + up/down</td>
<td>当前行上移或下移动</td>
</tr>
<tr>
<td>Ctrl + B/鼠标左键</td>
<td>转到方法定义处</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>选中增加的代码块</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>方法或变量重命名</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>最近访问的文件</td>
</tr>
<tr>
<td>Esc</td>
<td>从其他窗口回到编辑窗口</td>
</tr>
<tr>
<td>Shift + Esc</td>
<td>隐藏当前窗口，焦点到编辑窗口</td>
</tr>
<tr>
<td>F12</td>
<td>回到先前的工具窗口</td>
</tr>
</tbody></table>
<h2 id="全部快捷键"><a href="#全部快捷键" class="headerlink" title="全部快捷键"></a>全部快捷键</h2><h2 id="1、编辑（Editing）"><a href="#1、编辑（Editing）" class="headerlink" title="1、编辑（Editing）"></a>1、编辑（Editing）</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Space</td>
<td>基本的代码完成（类、方法、属性）</td>
</tr>
<tr>
<td>Ctrl + Alt + Space</td>
<td>快速导入任意类</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>语句完成</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>参数信息（在方法中调用参数）</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td>快速查看文档</td>
</tr>
<tr>
<td>Shift + F1</td>
<td>外部文档</td>
</tr>
<tr>
<td>Ctrl + 鼠标</td>
<td>简介</td>
</tr>
<tr>
<td>Ctrl + F1</td>
<td>显示错误描述或警告信息</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>自动生成代码</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>重新方法</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>选中</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>行注释</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>块注释</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>选中增加的代码块</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>回到之前状态</td>
</tr>
<tr>
<td>Ctrl + Shift + ]/[</td>
<td>选定代码块结束、开始</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>快速修正</td>
</tr>
<tr>
<td>Ctrl + Alt + L</td>
<td>代码格式化</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>自动导入</td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>自动缩进</td>
</tr>
<tr>
<td>Tab / Shift + Tab</td>
<td>缩进、不缩进当前行</td>
</tr>
<tr>
<td>Ctrl+X/Shift+Delete</td>
<td>剪切当前行或选定的代码块到剪贴板</td>
</tr>
<tr>
<td>Ctrl+C/Ctrl+Insert</td>
<td>复制当前行或选定的代码块到剪贴板</td>
</tr>
<tr>
<td>Ctrl+V/Shift+Insert</td>
<td>从剪贴板粘贴</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>从最近的缓冲区粘贴</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>复制选定的区域或行到后面或下一行</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>添加智能线</td>
</tr>
<tr>
<td>Ctrl + Enter</td>
<td>智能线切割</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>下一行另起一行</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>在选定的区域或代码块间切换</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>删除到字符结束</td>
</tr>
<tr>
<td>Ctrl + BackSpace</td>
<td>删除到字符开始</td>
</tr>
<tr>
<td>Ctrl + Numpad+/-</td>
<td>展开折叠代码块</td>
</tr>
<tr>
<td>Ctrl + Numpad+</td>
<td>全部展开</td>
</tr>
<tr>
<td>Ctrl + Numpad-</td>
<td>全部折叠</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td>关闭运行的选项卡</td>
</tr>
</tbody></table>
<h2 id="2、查找-替换-Search-Replace"><a href="#2、查找-替换-Search-Replace" class="headerlink" title="2、查找/替换(Search/Replace)"></a>2、查找/替换(Search/Replace)</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>F3</td>
<td>下一个</td>
</tr>
<tr>
<td>Shift + F3</td>
<td>前一个</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>替换</td>
</tr>
<tr>
<td>Ctrl + Shift + F</td>
<td>全局查找</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>全局替换</td>
</tr>
</tbody></table>
<h2 id="3、运行-Running"><a href="#3、运行-Running" class="headerlink" title="3、运行(Running)"></a>3、运行(Running)</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + Shift + F10</td>
<td>运行模式配置</td>
</tr>
<tr>
<td>Alt + Shift + F9</td>
<td>调试模式配置</td>
</tr>
<tr>
<td>Shift + F10</td>
<td>运行</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>调试</td>
</tr>
<tr>
<td>Ctrl + Shift + F10</td>
<td>运行编辑器配置</td>
</tr>
<tr>
<td>Ctrl + Alt + R</td>
<td>运行manage.py任务</td>
</tr>
</tbody></table>
<h2 id="4、调试-Debugging"><a href="#4、调试-Debugging" class="headerlink" title="4、调试(Debugging)"></a>4、调试(Debugging)</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>F8</td>
<td>跳过</td>
</tr>
<tr>
<td>F7</td>
<td>进入</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>退出</td>
</tr>
<tr>
<td>Alt + F9</td>
<td>运行游标</td>
</tr>
<tr>
<td>Alt + F8</td>
<td>验证表达式</td>
</tr>
<tr>
<td>Ctrl + Alt + F8</td>
<td>快速验证表达式</td>
</tr>
<tr>
<td>F9</td>
<td>恢复程序</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td>断点开关</td>
</tr>
<tr>
<td>Ctrl + Shift + F8</td>
<td>查看断点</td>
</tr>
</tbody></table>
<h2 id="5、导航-Navigation"><a href="#5、导航-Navigation" class="headerlink" title="5、导航(Navigation)"></a>5、导航(Navigation)</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + N</td>
<td>跳转到类</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>跳转到符号</td>
<td></td>
</tr>
<tr>
<td>Alt + Right/Left</td>
<td>跳转到下一个、前一个编辑的选项卡</td>
<td></td>
</tr>
<tr>
<td>F12</td>
<td>回到先前的工具窗口</td>
<td></td>
</tr>
<tr>
<td>Esc</td>
<td>从其他窗口回到编辑窗口</td>
<td></td>
</tr>
<tr>
<td>Shift + Esc</td>
<td>隐藏当前窗口，焦点到编辑窗口</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Shift + F4</td>
<td>关闭主动运行的选项卡</td>
<td></td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>查看当前行号、字符号</td>
<td></td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>最近访问的文件</td>
<td></td>
</tr>
<tr>
<td>Ctrl+Alt+Left/Right</td>
<td>后退、前进</td>
<td></td>
</tr>
<tr>
<td>Ctrl+Shift+BackSpace</td>
<td>导航到最近编辑区域</td>
<td></td>
</tr>
<tr>
<td>Alt + F1</td>
<td>查找当前文件或标识</td>
<td></td>
</tr>
<tr>
<td>Ctrl+B / Ctrl+Click</td>
<td>跳转到声明</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Alt + B</td>
<td>跳转到实现</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>查看快速定义</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>跳转到类型声明</td>
<td></td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>跳转到父方法、父类</td>
<td></td>
</tr>
<tr>
<td>Alt + up/down</td>
<td>跳转到上一个、下一个方法</td>
<td></td>
</tr>
<tr>
<td>Ctrl + ]/[</td>
<td>跳转到代码块结束、开始</td>
<td></td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>弹出文件结构</td>
<td></td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>类型层次结构</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>方法层次结构</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Alt + H</td>
<td>调用层次结构</td>
<td></td>
</tr>
<tr>
<td>F2 / Shift + F2</td>
<td>下一条、前一条高亮的错误</td>
<td></td>
</tr>
<tr>
<td>F4 / Ctrl + Enter</td>
<td>编辑资源、查看资源</td>
<td></td>
</tr>
<tr>
<td>Alt + Home</td>
<td>显示导航条F11书签开关</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Shift +F11</td>
<td>书签助记开关</td>
<td></td>
</tr>
<tr>
<td>Shift + F11</td>
<td>显示书签</td>
<td></td>
</tr>
</tbody></table>
<h2 id="6、搜索相关-Usage-Search"><a href="#6、搜索相关-Usage-Search" class="headerlink" title="6、搜索相关(Usage Search)"></a>6、搜索相关(Usage Search)</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + F7/Ctrl + F7</td>
<td>文件中查询用法</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>文件中用法高亮显示</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>显示用法</td>
</tr>
</tbody></table>
<h2 id="7、重构-Refactoring"><a href="#7、重构-Refactoring" class="headerlink" title="7、重构(Refactoring)"></a>7、重构(Refactoring)</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>F5</td>
<td>复制</td>
</tr>
<tr>
<td>F6</td>
<td>剪切</td>
</tr>
<tr>
<td>Alt + Delete</td>
<td>安全删除</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>方法或变量重命名</td>
</tr>
<tr>
<td>Ctrl + F6</td>
<td>更改签名</td>
</tr>
<tr>
<td>Ctrl + Alt + N</td>
<td>内联</td>
</tr>
<tr>
<td>Ctrl + Alt + M</td>
<td>提取方法</td>
</tr>
<tr>
<td>Ctrl + Alt + V</td>
<td>提取属性</td>
</tr>
<tr>
<td>Ctrl + Alt + F</td>
<td>提取字段</td>
</tr>
<tr>
<td>Ctrl + Alt + C</td>
<td>提取常量</td>
</tr>
<tr>
<td>Ctrl + Alt + P</td>
<td>提取参数</td>
</tr>
</tbody></table>
<h2 id="8、控制VCS-Local-History"><a href="#8、控制VCS-Local-History" class="headerlink" title="8、控制VCS/Local History"></a>8、控制VCS/Local History</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + K</td>
<td>提交项目</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>更新项目</td>
</tr>
<tr>
<td>Alt + Shift + C</td>
<td>查看最近的变化</td>
</tr>
<tr>
<td>Ctrl + Alt + J</td>
<td>当前行使用模版</td>
</tr>
</tbody></table>
<h2 id="9、模版-Live-Templates"><a href="#9、模版-Live-Templates" class="headerlink" title="9、模版(Live Templates)"></a>9、模版(Live Templates)</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + J</td>
<td>当前行使用模版</td>
</tr>
<tr>
<td>Ctrl +J</td>
<td>插入模版</td>
</tr>
</tbody></table>
<h2 id="10、基本-General"><a href="#10、基本-General" class="headerlink" title="10、基本(General)"></a>10、基本(General)</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + Y</td>
<td>同步</td>
</tr>
<tr>
<td>Ctrl + Shift + F12</td>
<td>最大化编辑开关</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>添加到最喜欢</td>
</tr>
<tr>
<td>Alt + Shift + I</td>
<td>根据配置检查当前文件</td>
</tr>
<tr>
<td>Ctrl + Alt + S</td>
<td>打开设置页</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>查找编辑器里所有的动作</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>在窗口间进行切换</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pycharm常用快捷键收藏</tag>
        <tag>pycharm快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm永久破解方法</title>
    <url>/c73e1c10.html</url>
    <content><![CDATA[<p><code>python</code>标配<code>ide</code>之前贪便宜淘宝买了个说是永久的，没用一年各种问题后面问客服竟然已经变成自动回复了，且回复内容竟然为老板侵权被抓了，好吧还是整个破解版的一劳永逸吧。</p>
<a id="more"></a>

<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><h3 id="pycharm安装包"><a href="#pycharm安装包" class="headerlink" title="pycharm安装包"></a><code>pycharm</code>安装包</h3><p>1、<strong>官网下载(下载2019.1.3版本)</strong></p>
<p>2、我在百度云存的<strong>2019.1.3</strong>：链接:<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVc1WXZQN3U1T1VJTHFVRlhQSUxpalElRTYlOEYlOTAlRTUlOEYlOTYlRTclQTAlODE=">https://pan.baidu.com/s/1W5YvP7u5OUILqUFXPILijQ提取码<i class="fa fa-external-link-alt"></i></span>: 8kjq</p>
<h3 id="破解补丁"><a href="#破解补丁" class="headerlink" title="破解补丁"></a>破解补丁</h3><p>(百度云：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXNCZzZJU2tDb0w2NlR2LWstbmxRYmc=">https://pan.baidu.com/s/1sBg6ISkCoL66Tv-k-nlQbg<i class="fa fa-external-link-alt"></i></span> 提取码：uapj)如果将来有一天补丁对于高版本失效了，可以去这里找：<span class="exturl" data-url="aHR0cHM6Ly9pYW1jcmFja2VyLmNvbS8=">https://iamcracker.com/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131410.png" alt="img"></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131429.png" alt="img"></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131439.png" alt="img"></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131454.png" alt="img"></p>
<p>finish后就安装完了，先不要急着打开pycharm</p>
<h2 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h2><p><strong>下载破解补丁：百度云：\</strong><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXNCZzZJU2tDb0w2NlR2LWstbmxRYmc=">https://pan.baidu.com/s/1sBg6ISkCoL66Tv-k-nlQbg<i class="fa fa-external-link-alt"></i></span> 提取码：uapj****</p>
<p><strong>解压后：(**其中jetbrains-agent.jar是激活补丁，ACTIVATION_CODE.txt是激活码</strong>)**</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131544.png" alt="img"></p>
<p><strong>将jetbrains-agent.jar放到pycharm安装路径下的bin文件夹里</strong></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131611.png" alt="img"></p>
<p>打开pycharm，先选择使用</p>
<p><img data-src="https://img2018.cnblogs.com/blog/1421063/202003/1421063-20200301113551501-338213365.png" alt="img"></p>
<p><img data-src="https://img2018.cnblogs.com/blog/1421063/202003/1421063-20200301113610667-970438393.png" alt="img"></p>
<p><strong>下一步，Configure -&gt; Edit Custom VM Options …</strong></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131716.png" alt="img"></p>
<p>最后一行加入 -javaagent:补丁的绝对路径</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131747.png" alt="img"></p>
<p><strong>下一步，重启pycharm。Configure -&gt; Manage License…</strong></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131820.png" alt="img"></p>
<p>输入激活码，激活码在<strong>ACTIVATION_CODE.txt</strong> 里面</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131848.png" alt="img"></p>
<h2 id="破解完成"><a href="#破解完成" class="headerlink" title="破解完成"></a>破解完成</h2><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200324131906.png" alt="img"></p>
<p>上述下载地址不可用的话可联系本人提供新的百度网盘下载链接</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>pycharm永久破解方法</tag>
        <tag>pycharm</tag>
        <tag>pycharm破解</tag>
      </tags>
  </entry>
  <entry>
    <title>pyqt5安装及使用</title>
    <url>/f0f8ad40.html</url>
    <content><![CDATA[<p>临时想做一个简单的桌面应用，搜索了<code>python gui</code>扩展包，大多都首推<code>tkinter</code>，直接官方内置了，使用起来也很简单，缺点也很明显，组件少且丑，另外一个大家呼声很高的<code>pyqt5</code>倒是很容易找到了一个类似我想要的界面<code>demo</code>，索性就用<code>pyqt5</code>了</p>
<a id="more"></a>

<h2 id="pycharm整合pyqt5"><a href="#pycharm整合pyqt5" class="headerlink" title="pycharm整合pyqt5"></a><code>pycharm</code>整合<code>pyqt5</code></h2><p><code>pycharm</code>里我们也很想想开发c#那样使用组件直接拖拽的方式，我们也可以用<code>pycharm+QT Designer+PyUIC</code>组合进行桌面开发</p>
<h3 id="安装pyqt5"><a href="#安装pyqt5" class="headerlink" title="安装pyqt5"></a>安装<code>pyqt5</code></h3><p><code>qt designer</code>就包含在<code>pyqt5</code>中，我们安装<code>pyqt5</code>就自动安装了<code>qt designer</code></p>
<p>安装<code>pyqt5</code>方式有两种，1使用<code>pycharm</code>自带的开发插件进行安装，2、使用<code>pip install</code>进行安装。两种方式随便选取一种，这一步基本不会有什么坑。需要安装两个<code>PyQt5</code>和<code>pyqt5-tools</code>。</p>
<h3 id="指定Qt-Designer-和PyUIC"><a href="#指定Qt-Designer-和PyUIC" class="headerlink" title="指定Qt Designer 和PyUIC"></a>指定<code>Qt Designer</code> 和<code>PyUIC</code></h3><p>打开设置-》外部工具-》+，本人<code>ide</code>汉化了，英文自己翻译找</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927150424.png"></p>
<p> <code>Name</code>–输入最后工具在菜单中的想呈现名称，比如我这里命名为<code>QTDesigner</code></p>
<p><code>Program--designer.exe</code>程序的位置，本人的位于<code>D:\Program Files\Python37\Lib\site-packages\pyqt5_tools\Qt\bin\designer.exe</code>，网上有的说在pyqt5_tools中，</p>
<p><code>Working directory--designer.exe</code>工作路径，设置为<code>$ProjectFileDir$</code></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927150645.png"></p>
<p>类似地添加<code>PyUIC</code>，</p>
<p><code>name</code>—-<code>PyUIC</code></p>
<p><code>Program</code>—-<code>PyUIC</code>位于当前解析器的<code>Scripts\pyuic5.exe</code></p>
<p><code>Arguments</code>—-<code>$FileName$ -o $FileNameWithoutExtension$.py</code></p>
<p><code>Working dirctory</code>—-<code>$ProjectFileDir$</code></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927151200.png"></p>
<p>以上设置保存之后点击菜单栏工具-》扩展工具可以看到我们刚才添加的两个工具</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927151223.png"></p>
<h3 id="使用qt-designer"><a href="#使用qt-designer" class="headerlink" title="使用qt designer"></a>使用<code>qt designer</code></h3><p>点击上图的 <code>QT Designer</code>选项</p>
<p>此时打开了该软件</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927151457.png"></p>
<p>如图所以点击创建，随便拖一个按钮 进入窗体</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927151603.png"></p>
<p>保存是一个<code>ui</code>后缀的文件</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927151633.png"></p>
<p>上述文件保存到了<code>pytcharm</code>项目中，我们在<code>pycharm</code>中可以看到该文件，右击文件，选择扩展工具中的<code>pyuic</code>，即可生成一个同名的<code>py</code>文件，运行该文件，即可看到刚才我们设计的窗体</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927151730.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于<code>pyqt5</code>的用法有很多，这里只是教你初步使用设计工具转为<code>py</code>文件，一下是本人看到的几个比较好的博客，需要者可自行学习</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tZS5jc2RuLm5ldC96aHVsb3ZlODY=">https://me.csdn.net/zhulove86<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2NvZGUucHk0MC5jb20vcHlxdDUv">http://code.py40.com/pyqt5/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyqt5安装</tag>
        <tag>pycharm使用pyqt5</tag>
        <tag>tiknter</tag>
        <tag>pyqt5</tag>
        <tag>pyqt5-tools</tag>
        <tag>pyuic</tag>
        <tag>qt designer</tag>
      </tags>
  </entry>
  <entry>
    <title>python 网络编程socketserver原理示例</title>
    <url>/b63f6362.html</url>
    <content><![CDATA[<p><strong>socketserver</strong>实现多客户端与服务端交互就是用到了多线程，<code>python</code>也帮我们提供了多线程模块<strong>threading，</strong>我们可以定义一个函数接收两个参数，一个与客户端的连接句柄，一个是客户端地址，函数内部执行与客户端的具体交互；外部使用<code>socket</code>正常逻辑，执行到<code>accept</code>时开启一个包含上述函数的线程，就是这么简单</p>
<a id="more"></a>

<h5 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现与客户端的具体交互</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interactives</span>(<span class="params">conn, addr</span>):</span></span><br><span class="line">    print(addr, <span class="string">&#x27;成功连接服务器-----&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ret = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            back_ret = ret + <span class="string">&#x27; Go Home&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            conn.send(back_ret)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(addr, <span class="string">&#x27;断开连接服务器-----&#x27;</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind(ip_port)</span><br><span class="line">server.listen(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    <span class="comment"># 实例化线程</span></span><br><span class="line">    t = threading.Thread(target=interactives, args=(conn, addr))</span><br><span class="line">    <span class="comment"># 开始线程</span></span><br><span class="line">    t.start()</span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure>

<h5 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect(ip_port)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    name = input(<span class="string">&#x27;输入姓名：&#x27;</span>).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    client.send(name)</span><br><span class="line">    ret = client.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    print(ret)</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>socketserver</tag>
        <tag>threading</tag>
        <tag>socket</tag>
        <tag>accept</tag>
        <tag>socketserver原理</tag>
      </tags>
  </entry>
  <entry>
    <title>python 网络编程socketserver示例（多用户ftp上传）</title>
    <url>/c9721447.html</url>
    <content><![CDATA[<p>之前用单用户<code>ftp</code>上传，服务器同时只能处理一个客户端的连接，要做到多客户端连接可以直接使用<code>python</code>帮我们封装好的<code>socketserver</code>模块。以下代码为多用户<code>ftp</code>上传示例，里面用到<code>md5</code>文件一致性校验，在一个<code>win</code>机器上同时扮演客户端和服务器没问题，但是当有一方使用了<code>linux</code>就出现问题了。运行代码测试发现；同样的文件内容，在<code>win</code>和<code>linux</code>是进行<code>md5</code>加密内容发现执行的结果不一样。没测试在两台<code>win</code>上是否一样，有其他人看到可以自己测试下。</p>
<a id="more"></a>

<h5 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">md5 = hashlib.md5(<span class="string">b&#x27;tony&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FtpServer</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.client_address, <span class="string">&#x27;已成功连接至服务器……&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 接收文件信息长度</span></span><br><span class="line">                file_info_len_struct = self.request.recv(<span class="number">4</span>)</span><br><span class="line">                <span class="comment"># linux客户端断开接受为0</span></span><br><span class="line">                <span class="keyword">if</span> file_info_len_struct == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 解析文件信息字节长度</span></span><br><span class="line">                file_info_len = struct.unpack(<span class="string">&#x27;i&#x27;</span>, file_info_len_struct)[<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># 根据获取的文件信息字节长度接收文件信息(pickle序列化字节)</span></span><br><span class="line">                file_info_pickle = self.request.recv(file_info_len)</span><br><span class="line">                <span class="comment"># 解析文件信息</span></span><br><span class="line">                file_info = pickle.loads(file_info_pickle)</span><br><span class="line">                file_path = file_info[<span class="string">&#x27;file_path&#x27;</span>]</span><br><span class="line">                file_size = file_info[<span class="string">&#x27;file_size&#x27;</span>]</span><br><span class="line">                file_name = os.path.basename(file_path)</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">&#x27;up/&#x27;</span>+file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="comment"># 累计接收量</span></span><br><span class="line">                    receive_lenth = <span class="number">0</span></span><br><span class="line">                    <span class="comment"># 未接收完则持续接收</span></span><br><span class="line">                    <span class="keyword">while</span> receive_lenth &lt; file_size:</span><br><span class="line">                        <span class="comment"># 每次接收1024</span></span><br><span class="line">                        data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                        <span class="comment"># 加密，后续做一致性校验</span></span><br><span class="line">                        md5.update(data)</span><br><span class="line">                        <span class="comment"># 累加到累计接收量</span></span><br><span class="line">                        receive_lenth += len(data)</span><br><span class="line">                        <span class="comment"># 写入文件</span></span><br><span class="line">                        f.write(data)</span><br><span class="line">                        print(<span class="string">&#x27;文件总大小：&#123;&#125;， 已接收：&#123;&#125;， 已接收百分比&#123;:.2f&#125;%&#x27;</span>.format(file_size, receive_lenth, receive_lenth/file_size*<span class="number">100</span>))</span><br><span class="line">                print(file_name+<span class="string">&#x27;文件上传成功&#x27;</span>)</span><br><span class="line">                print(md5.hexdigest())</span><br><span class="line">                self.request.send(md5.hexdigest().encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        print(self.client_address, <span class="string">&#x27;已断开连接……&#x27;</span>)</span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line">ftp = socketserver.ThreadingTCPServer(ip_port, FtpServer)</span><br><span class="line">ftp.serve_forever()</span><br></pre></td></tr></table></figure>

<h5 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5(<span class="string">b&#x27;tony&#x27;</span>)</span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">client = socket.socket()</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">client.connect(ip_port)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    file = input(<span class="string">&#x27;请选择您要上传的文件：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 判断用户输入空、exit或文件不存在直接停止</span></span><br><span class="line">    <span class="keyword">if</span> file == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> file == <span class="string">&#x27;exit&#x27;</span> <span class="keyword">or</span> <span class="keyword">not</span> os.path.exists(file):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 将文件信息封装到一个字典中</span></span><br><span class="line">    file_dic = &#123;</span><br><span class="line">        <span class="string">&#x27;file_path&#x27;</span> : file,</span><br><span class="line">        <span class="string">&#x27;file_size&#x27;</span> : os.path.getsize(file)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 将文件信息字典序列化为字节</span></span><br><span class="line">    file_dic_pickle = pickle.dumps(file_dic)</span><br><span class="line">    <span class="comment"># 取文件信息序列化字节的长度</span></span><br><span class="line">    file_dic_pickle_len = len(file_dic_pickle)</span><br><span class="line">    <span class="comment"># 将序列化为字节的文件信息长度格式化为一个4位的字节</span></span><br><span class="line">    file_dic_pickle_len_struct = struct.pack(<span class="string">&#x27;i&#x27;</span>, file_dic_pickle_len)</span><br><span class="line">    <span class="comment"># 发送文件信息长度(字节)</span></span><br><span class="line">    client.send(file_dic_pickle_len_struct)</span><br><span class="line">    <span class="comment"># 发送文件信息(字节)</span></span><br><span class="line">    client.send(file_dic_pickle)</span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            md5.update(line)</span><br><span class="line">            client.send(line)</span><br><span class="line">    <span class="comment"># 接收文件加密结果</span></span><br><span class="line">    ret = client.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    print(ret)</span><br><span class="line">    print(md5.hexdigest())</span><br><span class="line">    <span class="keyword">if</span> ret == md5.hexdigest():</span><br><span class="line">        print(<span class="string">&#x27;文件上传校验成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;文件上传校验失败&#x27;</span>)</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>socketserver</tag>
        <tag>ftp</tag>
        <tag>多用户ftp</tag>
        <tag>md5</tag>
      </tags>
  </entry>
  <entry>
    <title>python 网络编程socket示例（ftp上传）</title>
    <url>/8dd16c.html</url>
    <content><![CDATA[<p>我们知道上传一个文件的流程原理即将一个文件内容读取出来，在目标位置新建这个文件，再把内容写入进去。想想跟上篇文章 <a href="http://www.diandian100.cn/post/26.html"><strong>python 网络编程socket示例（远程ssh）</strong></a>类似，所不同的只是多了一个文件操作句柄，同样的也会出现黏包，使用<code>stuct</code>来解决黏包问题。因为代码中都写有注释，这里就不详细赘述了。</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">server = socket.socket()</span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9969</span>)</span><br><span class="line">server.bind(ip_port)</span><br><span class="line"><span class="comment"># 监听连接，最大等待数</span></span><br><span class="line">server.listen(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&#x27;服务器运行中………………&#x27;</span>)</span><br><span class="line"><span class="comment"># 接收客户端连接，保持服务器持续运行</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 接收客户端连接句柄、地址</span></span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    print(addr, <span class="string">&#x27;已成功连接至服务器&gt;&gt;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 保持客户端持久连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 使用异常捕获，作用是当客户端出现异常关闭等情况时，服务器自动与其断开连接</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 接收客户端传来的pickle序列化消息并使用pickle.loads解码</span></span><br><span class="line">            recive_data = pickle.loads(conn.recv(<span class="number">1024</span>))</span><br><span class="line">            <span class="comment"># 向客户端发送200的状态码</span></span><br><span class="line">            conn.send(<span class="string">b&#x27;200&#x27;</span>)</span><br><span class="line">            <span class="comment"># 在uploads中以写字节模式新建一个名称为客户端传来的文件名</span></span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">&#x27;uploads/&#x27;</span>+os.path.basename(recive_data[<span class="string">&#x27;file_name&#x27;</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="comment"># 累加每次接收客户端传来的内容长度</span></span><br><span class="line">                data_lens = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 判断内容是否接收完(累计接收长度是否小于文件总长度)</span></span><br><span class="line">                <span class="keyword">while</span> data_lens &lt; recive_data[<span class="string">&#x27;file_size&#x27;</span>] :</span><br><span class="line">                    <span class="comment"># 每次接收1024长度内容</span></span><br><span class="line">                    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">                    <span class="comment"># 累加每次接收的长度</span></span><br><span class="line">                    data_lens += len(data)</span><br><span class="line">                    <span class="comment"># 将每次接收的内容写入文件</span></span><br><span class="line">                    f.write(data)</span><br><span class="line">                    <span class="comment"># 累计接收的文件大小的百分比</span></span><br><span class="line">                    percentage = format(data_lens/recive_data[<span class="string">&#x27;file_size&#x27;</span>]*<span class="number">100</span>, <span class="string">&#x27;.2f&#x27;</span>)</span><br><span class="line">                    print(<span class="string">&#x27;文件总大小：&#123;&#125;，已上传：&#123;&#125;，百分比：&#123;&#125;%&#x27;</span>.format(recive_data[<span class="string">&#x27;file_size&#x27;</span>], data_lens, percentage))</span><br><span class="line">            print(os.path.basename(recive_data[<span class="string">&#x27;file_name&#x27;</span>]),<span class="string">&#x27;上传成功！！！&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(addr, <span class="string">&#x27;已断开连接服务器&gt;&gt;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    conn.close()</span><br><span class="line">server.close()</span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">client = socket.socket()</span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9969</span>)</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">client.connect(ip_port)</span><br><span class="line"><span class="comment"># 保持与服务器的持久连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 获取要上传的文件路径</span></span><br><span class="line">    file = input(<span class="string">&#x27;请输入您要上传的文件：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将文件与文件大小封装在一个字典中</span></span><br><span class="line">    file_info = &#123;<span class="string">&#x27;file_name&#x27;</span>:file, <span class="string">&#x27;file_size&#x27;</span>:os.path.getsize(file)&#125;</span><br><span class="line">    <span class="comment"># 使用pickle.dumps序列化文件信息字典</span></span><br><span class="line">    pickle_file = pickle.dumps(file_info)</span><br><span class="line">    <span class="comment"># 发送文件信息至服务器</span></span><br><span class="line">    client.send(pickle_file)</span><br><span class="line">    <span class="comment"># 接收服务器返回的消息</span></span><br><span class="line">    status_code = client.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 判断服务器返回的状态码是否为200</span></span><br><span class="line">    <span class="keyword">if</span> status_code == <span class="string">&#x27;200&#x27;</span>:</span><br><span class="line">        <span class="comment"># 以读字节模式打开文件</span></span><br><span class="line">        <span class="keyword">with</span> open(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 循环文件每一行并发送至服务器</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                client.send(line)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;上传失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>

<p>进阶：我们传输文件的流程是先把文件信息传送过去，再把文件内容传送过去，中间利用了<code>recv</code>接收服务端返回的状态码强制阻塞，分开了两次传输，name我们可不可以直接将文件信息和文件内容一起传过去呢？答案是肯定的。</p>
<p>因为我们可以获取文件信息这个字典的长度，把这个字典的长度也穿过去，大概传过去的数据包样式长这样：<code>【文件信息长度 | 文件信息 | 文件内容】</code>，看到这种形式其实就已经明白了。我们可以先接收文件信息长度，因为我们使用了<code>struct</code>，字节长度固定为4，转换后获取到了文件信息的长度，再利用这个文件信息长度，去接受文件信息这一块的内容。文件信息中可是包含文件内容长度的，利用这个长度又可以循环接收文件内容了，这样我们的目的不就达到了嘛：</p>
<p>上面的代码稍微改动即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">server = socket.socket()</span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9969</span>)</span><br><span class="line">server.bind(ip_port)</span><br><span class="line"><span class="comment"># 监听连接，最大等待数</span></span><br><span class="line">server.listen(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&#x27;服务器运行中………………&#x27;</span>)</span><br><span class="line"><span class="comment"># 接收客户端连接，保持服务器持续运行</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 接收客户端连接句柄、地址</span></span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    print(addr, <span class="string">&#x27;已成功连接至服务器&gt;&gt;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 保持客户端持久连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 使用异常捕获，作用是当客户端出现异常关闭等情况时，服务器自动与其断开连接</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 接收前4位字节并转为数字，即文件信息的长度</span></span><br><span class="line">            file_info_lens = struct.unpack(<span class="string">&#x27;i&#x27;</span>, conn.recv(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">            print(<span class="string">&#x27;文件信息长度：&#x27;</span>,file_info_lens)</span><br><span class="line">            <span class="comment"># 根据获取的文件信息长度来获取文件信息并解码</span></span><br><span class="line">            file_info = pickle.loads(conn.recv(file_info_lens))</span><br><span class="line">            print(<span class="string">&#x27;文件信息：&#x27;</span>, file_info)</span><br><span class="line">            <span class="comment"># 从文件信息中获取文件名称</span></span><br><span class="line">            file = os.path.basename(file_info[<span class="string">&#x27;file_name&#x27;</span>])</span><br><span class="line">            <span class="comment"># 从文件信息中获取文件大小</span></span><br><span class="line">            file_size = file_info[<span class="string">&#x27;file_size&#x27;</span>]</span><br><span class="line">            <span class="comment"># 在uploads中以写字节模式新建一个名称为客户端传来的文件名</span></span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">&#x27;uploads/&#x27;</span>+file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="comment"># 累加每次接收客户端传来的内容长度</span></span><br><span class="line">                data_lens = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 判断内容是否接收完(累计接收长度是否小于文件总长度)</span></span><br><span class="line">                <span class="keyword">while</span> data_lens &lt; file_size:</span><br><span class="line">                    <span class="comment"># 每次接收1024长度内容</span></span><br><span class="line">                    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">                    <span class="comment"># 累加每次接收的长度</span></span><br><span class="line">                    data_lens += len(data)</span><br><span class="line">                    <span class="comment"># 将每次接收的内容写入文件</span></span><br><span class="line">                    f.write(data)</span><br><span class="line">                    <span class="comment"># 累计接收的文件大小的百分比</span></span><br><span class="line">                    percentage = format(data_lens/file_size*<span class="number">100</span>, <span class="string">&#x27;.2f&#x27;</span>)</span><br><span class="line">                    print(<span class="string">&#x27;文件总大小：&#123;&#125;，已上传：&#123;&#125;，百分比：&#123;&#125;%&#x27;</span>.format(file_size, data_lens, percentage))</span><br><span class="line">            print(os.path.basename(file),<span class="string">&#x27;上传成功！！！&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(addr, <span class="string">&#x27;已断开连接服务器&gt;&gt;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    conn.close()</span><br><span class="line">server.close()</span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">client = socket.socket()</span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9969</span>)</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">client.connect(ip_port)</span><br><span class="line"><span class="comment"># 保持与服务器的持久连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 获取要上传的文件路径</span></span><br><span class="line">    file = input(<span class="string">&#x27;请输入您要上传的文件：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将文件与文件大小封装在一个字典中</span></span><br><span class="line">    file_info = &#123;<span class="string">&#x27;file_name&#x27;</span>:file, <span class="string">&#x27;file_size&#x27;</span>:os.path.getsize(file)&#125;</span><br><span class="line">    <span class="comment"># 使用pickle.dumps序列化文件信息字典为字节</span></span><br><span class="line">    pickle_file = pickle.dumps(file_info)</span><br><span class="line">    <span class="comment"># 获取文件信息字节长度</span></span><br><span class="line">    pickle_file_lens = struct.pack(<span class="string">&#x27;i&#x27;</span>, len(pickle_file))</span><br><span class="line">    <span class="comment"># 发送文件信息长度至服务器</span></span><br><span class="line">    client.send(pickle_file_lens)</span><br><span class="line">    <span class="comment"># 发送文件信息至服务器</span></span><br><span class="line">    client.send(pickle_file)</span><br><span class="line">    <span class="comment"># 以读字节模式打开文件</span></span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 循环文件每一行并发送至服务器</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            client.send(line)</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>

<p>总结：有些同学会用<code>json</code>来序列化字典，我们这里使用了<code>pickle</code>，因为网络通信传输的是字节，<code>json</code>把字典转成了字符串，你要多一步再转为字节，而利用<code>pickle</code>直接将字典转为了字节</p>
<p>再加一句：上传看自己是否要做一致性校验，原理就是客户端读取文件每行内容发送时顺便将该行文本追加加密，即<code>md5.update(第一行)</code>，<code>md5.update(第二行)</code>……，直至整个文件内容加密完成；服务端接收时也是一行一行的写入新文件，此时也是用<code>md5</code>进行加密，最后整个文件加密的结果发送给客户端，客户端用两个加密的结果进行比较，相等则代表校验成功</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>ssh</tag>
        <tag>stuct</tag>
        <tag>pack</tag>
        <tag>unpack</tag>
      </tags>
  </entry>
  <entry>
    <title>python 网络编程socket示例（远程ssh）</title>
    <url>/1db3b21b.html</url>
    <content><![CDATA[<p>模拟<code>ssh</code>需要返回<code>ssh</code>命令执行的结果，我们用【客户端连接.<code>recv</code>(字节长度)】来接收服务器传回的命令执行结果，但是这个字节长度我们无从得知，定义的如果太小则结果接收不完全，定义的太大，大的上限无法衡量不说还会浪费资源，这时候我们是否会考虑先把执行结果的长度传回给客户端，再把执行结果传回，这样就能很好的解决这个问题，但是我们要怎么操作呢？</p>
<a id="more"></a>



<h4 id="尝试一：服务器发送两次，客户端接收两次"><a href="#尝试一：服务器发送两次，客户端接收两次" class="headerlink" title="尝试一：服务器发送两次，客户端接收两次"></a>尝试一：服务器发送两次，客户端接收两次</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端</span></span><br><span class="line">conn.send(<span class="string">b&#x27;执行结果长度&#x27;</span>)</span><br><span class="line">conn.send（<span class="string">b&#x27;执行结果&#x27;</span>）</span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">conn.recv(接收长度)</span><br><span class="line">conn.recv(接收长度）</span><br></pre></td></tr></table></figure>

<p>从客户端的代码已经可以看出问题了，又引出接收的长度要定义多少了，不光有这个问题执行后我们可以发现，服务端紧挨的两次send发送，将发送结果合成了一个大的发送包，两个发送数据合在一起了，即：产生了<strong>黏包。</strong></p>
<p>这时候我们来看下面向流的通信特点</p>
<p><strong>TCP</strong>（<strong>transport control protocol</strong>，<strong>传输控制协议</strong>）是面向连接的，面向流的，提供高可靠性服务。</p>
<p>收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发到对方，使用了优化方法（<code>Nagle</code>算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。</p>
<p>这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。 </p>
<p>对于空消息：<code>tcp</code>是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机制，防止程序卡住，而<code>udp</code>是基于数据报的，即便是你输入的是空内容（直接回车），也可以被发送，<code>udp</code>协议会帮你封装上消息头发送过去。 </p>
<p>可靠黏包的<code>tcp</code>协议：<code>tcp</code>的协议数据不会丢，没有收完包，下次接收，会继续上次继续接收，己端总是在收到<code>ack</code>时才会清除缓冲区内容。数据是可靠的，但是会粘包。</p>
<h4 id="尝试二：通过延迟发送"><a href="#尝试二：通过延迟发送" class="headerlink" title="尝试二：通过延迟发送"></a>尝试二：通过延迟发送</h4><p>我们可以引入time包，利用sleep延迟两次发送间隔达到两次发送的效果，这种方法时可行的，但是一定程度上降低了程序的运行效率，比较低效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端</span></span><br><span class="line">conn.send(<span class="string">b&#x27;执行结果长度&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">conn.send（<span class="string">b&#x27;执行结果&#x27;</span>）</span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">conn.recv(接收长度)</span><br><span class="line">conn.recv(接收长度）</span><br></pre></td></tr></table></figure>



<h4 id="方法三：使用struct"><a href="#方法三：使用struct" class="headerlink" title="方法三：使用struct"></a>方法三：使用<code>struct</code></h4><p>​    <code>struct</code>模块中最主要的三个函数式<code>pack()</code>、<code>unpack()</code></p>
<p>​     <code>pack(fmt, v1)</code>  —— 根据所给的fmt描述的格式将值v1转换为一个字符串。</p>
<p>​     <code>unpack(fmt, bytes)</code>    —— 根据所给的fmt描述的格式将bytes反向解析出来，返回一个元组。</p>
<p>这里我们主要用到以上两个方法，这两个方法的格式化的模式很多种，我们这里只用一个“i”就够了，这个‘i’模式可以讲一个整数转换为一个长度为4的字节；反解即将一个4位字节转换为一个整数。着这样即使发生了<strong>黏包，</strong>我们依然可以提取前四位解码，来获得接收的长度，也就达到了我们的目的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端</span></span><br><span class="line">data_lens = struct.pack(<span class="string">&#x27;i&#x27;</span>, 执行结果长度)</span><br><span class="line">conn.send(data_lens)</span><br><span class="line">conn.send（<span class="string">b&#x27;执行结果&#x27;</span>）</span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">data_lens = struct.unpack(<span class="string">&#x27;i&#x27;</span>,conn.recv(<span class="number">4</span>))</span><br><span class="line">conn.recv(data_lens）</span><br></pre></td></tr></table></figure>

<h4 id="最后放一个模拟ssh的实例代码给大家，其中用到了struct防止黏包"><a href="#最后放一个模拟ssh的实例代码给大家，其中用到了struct防止黏包" class="headerlink" title="最后放一个模拟ssh的实例代码给大家，其中用到了struct防止黏包"></a>最后放一个模拟ssh的实例代码给大家，其中用到了<code>struct</code>防止黏包</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">server = socket.socket()</span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">server.bind(ip_port)</span><br><span class="line"><span class="comment"># 监听连接，最大等待数</span></span><br><span class="line">server.listen(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&#x27;服务器开始运行……&#x27;</span>)</span><br><span class="line"><span class="comment"># 接收客户端连接，保持服务器持续运行</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 接收客户端连接句柄、地址</span></span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    print(addr, <span class="string">&#x27;已成功连接----------------------&#x27;</span>)</span><br><span class="line">    <span class="comment"># 保持客户端连接交互</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 使用异常捕获，作用是当客户端出现异常关闭等情况时，服务器自动与其断开连接</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 接收客户端传来的命令并解码</span></span><br><span class="line">            cmd = conn.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="comment"># 执行客户端传来的命令，并将执行结果保存至res</span></span><br><span class="line">            res = subprocess.Popen(cmd,</span><br><span class="line">                                   shell=<span class="literal">True</span>,</span><br><span class="line">                                   stderr=subprocess.PIPE,</span><br><span class="line">                                   stdout=subprocess.PIPE)</span><br><span class="line">            <span class="comment"># 执行后的错误消息</span></span><br><span class="line">            err = res.stderr.read()</span><br><span class="line">            <span class="comment"># 执行后的结果</span></span><br><span class="line">            out = res.stdout.read()</span><br><span class="line">            <span class="comment"># 获取执行后的结果长度</span></span><br><span class="line">            out_lens = len(out)</span><br><span class="line">            <span class="comment"># 获取执行后的错误消息长度</span></span><br><span class="line">            err_lens = len(err)</span><br><span class="line">            <span class="comment"># 判断命令行是否有误</span></span><br><span class="line">            <span class="keyword">if</span> err:</span><br><span class="line">                <span class="comment"># 将错误消息的长度格式化为长度为4的字节</span></span><br><span class="line">                struct_data = struct.pack(<span class="string">&#x27;i&#x27;</span>, err_lens)</span><br><span class="line">                print(<span class="string">&#x27;服务器错误长度：&#x27;</span>, err_lens)</span><br><span class="line">                <span class="comment"># 发送错误消息长度</span></span><br><span class="line">                conn.send(struct_data)</span><br><span class="line">                <span class="comment"># 发送错误消息</span></span><br><span class="line">                conn.send(err)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 将执行结果的长度格式化为长度为4的字节</span></span><br><span class="line">                struct_data = struct.pack(<span class="string">&#x27;i&#x27;</span>, out_lens)</span><br><span class="line">                print(<span class="string">&#x27;服务器数据长度：&#x27;</span>, out_lens)</span><br><span class="line">                <span class="comment"># 发送执行结果的长度</span></span><br><span class="line">                conn.send(struct_data)</span><br><span class="line">                <span class="comment"># 发送执行结果</span></span><br><span class="line">                conn.send(out)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(addr, <span class="string">&#x27;已退出连接----------------------&#x27;</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">server.close()</span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment"># ip_port = (&#x27;10.10.10.97&#x27;, 3096)</span></span><br><span class="line">ip_port = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">client = socket.socket()</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">client.connect(ip_port)</span><br><span class="line"><span class="comment"># 与服务器保持持久连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 接收用户输入的命令</span></span><br><span class="line">    shell_str = input(<span class="string">&#x27;请输入您要执行的命令行：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 如果输入exit则断开与服务器的连接</span></span><br><span class="line">    <span class="keyword">if</span> shell_str == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 发送命令至服务器</span></span><br><span class="line">    client.send(shell_str.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 接收服务器返回的消息</span></span><br><span class="line">    <span class="comment"># 接收前4位字节,并将其解码(前四位即服务端传来的消息长度)，目的在于防止消息长度和消息内容混淆，即黏包</span></span><br><span class="line">    data_lens = struct.unpack(<span class="string">&#x27;i&#x27;</span>, client.recv(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 用来接收服务器传来的消息内容</span></span><br><span class="line">    recive_data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 用来保存累计接收的数据长度</span></span><br><span class="line">    total_data = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 累计接收的数据长度小于数据总长度意味着数据未接收完，则继续接收</span></span><br><span class="line">    <span class="keyword">while</span> total_data &lt; data_lens:</span><br><span class="line">        <span class="comment"># 每次以1024的长度接收服务器传回的消息</span></span><br><span class="line">        item_data = client.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># 拼接每次传回的消息</span></span><br><span class="line">        recive_data +=item_data</span><br><span class="line">        <span class="comment"># 累加每次传回的消息长度</span></span><br><span class="line">        total_data += len(item_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印服务器传来的消息总长度和接收的总长度</span></span><br><span class="line">    print(<span class="string">&#x27;客户端里接收你的长度为：&#x27;</span>, data_lens, total_data)</span><br><span class="line">    <span class="comment"># 打印服务器传来的字节类型的消息，并解码</span></span><br><span class="line">    print(recive_data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>tcp</tag>
        <tag>struct</tag>
      </tags>
  </entry>
  <entry>
    <title>python 网络编程一(为什么？)</title>
    <url>/290078f7.html</url>
    <content><![CDATA[<p>假设有两个python文件a.py和b.py，分别去运行，你就会发现，这两个python的文件分别运行的很好。但是如果这两个程序之间想要传递一个数据，你要怎么做呢？</p>
<a id="more"></a>

<p>这个问题以你现在的知识就可以解决了，我们可以创建一个文件，把a.py想要传递的内容写到文件中，然后b.py从这个文件中读取内容就可以了。</p>
<p><img data-src="/images/1555395547899374.png" alt="1555395547899374.png"></p>
<p>但是当你的a.py和b.py分别在不同电脑上的时候，你要怎么办呢？</p>
<p>类似的机制有计算机网盘，qq等等。我们可以在我们的电脑上和别人聊天，可以在自己的电脑上向网盘中上传、下载内容。这些都是两个程序在通信。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
        <tag>python网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python 网络编程三(网络基础)</title>
    <url>/aff6f399.html</url>
    <content><![CDATA[<p>首先，程序必须要启动，其次，必须有这台机器的地址，我们都知道我们人的地址大概就是国家\省\市\区\街道\楼\门牌号这样字。那么每一台联网的机器在网络上也有自己的地址，它的地址是怎么表示的呢？</p>
<p>就是使用一串数字来表示的，例如：<code>100.4.5.6</code></p>
<a id="more"></a>

<h3 id="1-一个程序如何在网络上找到另一个程序？"><a href="#1-一个程序如何在网络上找到另一个程序？" class="headerlink" title="1.一个程序如何在网络上找到另一个程序？"></a>1.一个程序如何在网络上找到另一个程序？</h3><p><strong>什么是IP地址</strong>？</p>
<p><code>IP</code>地址是指互联网协议地址（英语：<code>Internet Protocol Address</code>，又译为网际协议地址），是<code>IP Address</code>的缩写。<code>IP</code>地址是<code>IP</code>协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p>
<p><code>IP</code>地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）。<code>IP</code>地址通常用“点分十进制”表示成<code>（a.b.c.d）</code>的形式，其中，a,b,c,d都是0~255之间的十进制整数。例：点分十进<code>IP</code>地址<code>（100.4.5.6）</code>，实际上是32位二进制数<code>（01100100.00000100.00000101.00000110）</code>。</p>
<p><strong>什么是端口</strong></p>
<p>“端口”是英文<code>port</code>的意译，可以认为是设备与外界通讯交流的出口。</p>
<p><strong>在windows上查看端口占用的情况</strong></p>
<p><code>netstat -aon|findstr &quot;49157&quot;</code></p>
<p>因此<code>ip</code>地址精确到具体的一台电脑，而端口精确到具体的程序。</p>
<h3 id="2-osi七层模型"><a href="#2-osi七层模型" class="headerlink" title="2.osi七层模型"></a>2.osi七层模型</h3><h4 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h4><p>须知一个完整的计算机系统是由硬件、操作系统、应用软件三者组成，具备了这三个条件，一台计算机系统就可以自己跟自己玩了（打个单机游戏，玩个扫雷啥的）</p>
<p>如果你要跟别人一起玩，那你就需要上网了，什么是互联网？</p>
<p>互联网的核心就是由一堆协议组成，协议就是标准，比如全世界人通信的标准是英语，如果把计算机比作人，互联网协议就是计算机界的英语。所有的计算机都学会了互联网协议，那所有的计算机都就可以按照统一的标准去收发信息从而完成通信了。</p>
<h4 id="osi七层模型"><a href="#osi七层模型" class="headerlink" title="osi七层模型"></a>osi七层模型</h4><p>人们按照分工不同把互联网协议从逻辑上划分了层级：</p>
<p><img data-src="/images/1555396387183681.png" alt="1555396387183681.png"></p>
<h3 id="3-socket概念"><a href="#3-socket概念" class="headerlink" title="3.socket概念"></a>3.socket概念</h3><h4 id="socket层"><a href="#socket层" class="headerlink" title="socket层"></a>socket层</h4><p><img data-src="/images/1555396399809611.png" alt="1555396399809611.png"></p>
<h4 id="理解socket"><a href="#理解socket" class="headerlink" title="理解socket"></a>理解socket</h4><p><code>Socket</code>是应用层与<code>TCP/IP</code>协议族通信的中间软件抽象层，它是一组接口。在设计模式中，<code>Socket</code>其实就是一个门面模式，它把复杂的<code>TCP/IP</code>协议族隐藏在<code>Socket</code>接口后面，对用户来说，一组简单的接口就是全部，让<code>Socket</code>去组织数据，以符合指定的协议。</p>
<p>其实站在你的角度上看，<code>socket</code>就是一个模块。我们通过调用模块中已经实现的方法建立两个进程之间的连接和通信。</p>
<p>也有人将<code>socket</code>说成<code>ip+port</code>，因为<code>ip</code>是用来标识互联网中的一台主机的位置，而<code>port</code>是用来标识这台机器上的一个应用程序。</p>
<p>所以我们只要确立了<code>ip</code>和<code>port</code>就能找到一个应用程序，并且使用<code>socket</code>模块来与之通信。</p>
<h3 id="3-套接字（socket）的发展史"><a href="#3-套接字（socket）的发展史" class="headerlink" title="3.套接字（socket）的发展史"></a>3.套接字（socket）的发展史</h3><p>套接字起源于 20 世纪 70 年代加利福尼亚大学伯克利分校版本的 Unix,即人们所说的 <code>BSD Unix</code>。 因此，有时人们也把套接字称为“伯克利套接字”或“<code>BSD</code> 套接字”。一开始，套接字被设计用在同 一台主机上多个应用程序之间的通讯。这也被称进程间通讯，或 <code>IPC</code>。套接字有两种（或者称为有两个种族），分别是基于文件型的和基于网络型的。</p>
<h4 id="基于文件类型的套接字家族"><a href="#基于文件类型的套接字家族" class="headerlink" title="基于文件类型的套接字家族"></a>基于文件类型的套接字家族</h4><p>套接字家族的名字：<code>AF_UNIX</code></p>
<p><code>unix</code>一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信</p>
<h4 id="基于网络类型的套接字家族"><a href="#基于网络类型的套接字家族" class="headerlink" title="基于网络类型的套接字家族"></a>基于网络类型的套接字家族</h4><p>套接字家族的名字：<code>AF_INET</code></p>
<p>（还有<code>AF_INET6</code>被用于<code>ipv6</code>，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，<code>AF_INET</code>是使用最广泛的一个，<code>python</code>支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用<code>AF_INET</code>）</p>
<h3 id="4-tcp协议和udp协议"><a href="#4-tcp协议和udp协议" class="headerlink" title="4.tcp协议和udp协议"></a>4.tcp协议和udp协议</h3><p><strong>TCP</strong>（<code>Transmission Control Protocol</code>）可靠的、面向连接的协议（eg:打电话）、传输效率低全双工通信（发送缓存&amp;接收缓存）、面向字节流。使用TCP的应用：<code>Web</code>浏览器；电子邮件、文件传输程序。</p>
<p><strong>UDP</strong>（<code>User Datagram Protocol</code>）不可靠的、无连接的服务，传输效率高（发送前时延小），一对一、一对多、多对一、多对多、面向报文，尽最大努力服务，无拥塞控制。使用<code>UDP</code>的应用：域名系统 （<code>DNS</code>）；视频流；<code>IP</code>语音（<code>VoIP</code>）。</p>
<p><img data-src="/images/1555396644791237.jpg" alt="1555396644791237.jpg"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>tcp</tag>
        <tag>ip</tag>
        <tag>osi</tag>
        <tag>七层模型</tag>
        <tag>套接字</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>python 网络编程二(软件开发的架构)</title>
    <url>/d76507f7.html</url>
    <content><![CDATA[<p>我们了解的涉及到两个程序之间通讯的应用大致可以分为两种：</p>
<p>第一种是应用类：qq、微信、网盘、优酷这一类是属于需要安装的桌面应用</p>
<p>第二种是web类：比如百度、知乎、博客园等使用浏览器访问就可以直接使用的应用</p>
<p>这些应用的本质其实都是两个程序之间的通讯。而这两个分类又对应了两个软件开发的架构～</p>
<a id="more"></a>



<h3 id="1-C-S架构"><a href="#1-C-S架构" class="headerlink" title="1.C/S架构"></a>1.<strong><code>C/S</code>架构</strong></h3><p><code>C/S</code>即：<code>Client</code>与<code>Server</code> ，中文意思：客户端与服务器端架构，这种架构也是从用户层面（也可以是物理层面）来划分的。</p>
<p>这里的客户端一般泛指客户端应用程序<code>EXE</code>，程序需要先安装后，才能运行在用户的电脑上，对用户的电脑操作系统环境依赖较大。</p>
<p> <img data-src="/images/1555395656613849.png" alt="1555395656613849.png"></p>
<h3 id="2-B-S架构"><a href="#2-B-S架构" class="headerlink" title="2.B/S架构"></a>2.<code>B/S</code>架构</h3><p><code>B/S</code>即：<code>Browser</code>与<code>Server</code>,中文意思：浏览器端与服务器端架构，这种架构是从用户层面来划分的。</p>
<p><code>Browser</code>浏览器，其实也是一种<code>Client</code>客户端，只是这个客户端不需要大家去安装什么应用程序，只需在浏览器上通过<code>HTTP</code>请求服务器端相关的资源（网页资源），客户端<code>Browser</code>浏览器就能进行增删改查。</p>
<p><img data-src="/images/1555395662586508.png" alt="1555395662586508.png"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>应用类</tag>
        <tag>web类</tag>
        <tag>c/s</tag>
        <tag>c/s架构</tag>
        <tag>b/s</tag>
        <tag>b/s架构</tag>
        <tag>client</tag>
        <tag>browser</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>python 网络编程四(套接字（socket）初使用)</title>
    <url>/dd360d74.html</url>
    <content><![CDATA[<p>套接字（<code>socket</code>）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将<code>I/O</code>插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是<code>IP</code>地址与端口的组合。</p>
<a id="more"></a>

<h2 id="基于TCP协议的socket"><a href="#基于TCP协议的socket" class="headerlink" title="基于TCP协议的socket"></a>基于TCP协议的socket</h2><p><code>tcp</code>是基于链接的，必须先启动服务端，然后再启动客户端去链接服务端</p>
<p>实例来说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server服务器端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&#x27;192.168.0.2&#x27;</span>,<span class="number">8898</span>))  <span class="comment">#把地址绑定到套接字</span></span><br><span class="line">server.listen(<span class="number">3</span>)          <span class="comment">#监听链接</span></span><br><span class="line">conn,addr = server.accept() <span class="comment">#接受客户端链接</span></span><br><span class="line">ret = conn.recv(<span class="number">1024</span>)  <span class="comment">#接收客户端信息</span></span><br><span class="line">print(ret)       <span class="comment">#打印客户端信息</span></span><br><span class="line">conn.send(<span class="string">b&#x27;hi&#x27;</span>)        <span class="comment">#向客户端发送信息</span></span><br><span class="line">conn.close()       <span class="comment">#关闭客户端套接字</span></span><br><span class="line">server.close()        <span class="comment">#关闭服务器套接字(可选)</span></span><br><span class="line"><span class="comment"># client客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">client = socket.socket()           <span class="comment"># 创建客户套接字</span></span><br><span class="line">client.connect((<span class="string">&#x27;192.168.0.2&#x27;</span>,<span class="number">8898</span>))    <span class="comment"># 尝试连接服务器</span></span><br><span class="line">client.send(<span class="string">b&#x27;hello!&#x27;</span>)</span><br><span class="line">ret = client.recv(<span class="number">1024</span>)         <span class="comment"># 对话(发送/接收)</span></span><br><span class="line">print(ret)</span><br><span class="line">client.close()            <span class="comment"># 关闭客户套接字</span></span><br></pre></td></tr></table></figure>

<p>在重启服务端时可能会遇到：</p>
<p><img data-src="/images/1555397679780210.png" alt="1555397679780210.png"></p>
<p>解决方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加入一条socket配置，重用ip和端口</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> SOL_SOCKET,SO_REUSEADDR</span><br><span class="line">server = socket.socket()</span><br><span class="line">server.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>) <span class="comment">#就是它，在bind前加</span></span><br><span class="line">server.bind((<span class="string">&#x27;192.168.0.2&#x27;</span>,<span class="number">8898</span>))  <span class="comment">#把地址绑定到套接字</span></span><br><span class="line">server.listen()          <span class="comment">#监听链接</span></span><br><span class="line">conn,addr = server.accept() <span class="comment">#接受客户端链接</span></span><br><span class="line">ret = conn.recv(<span class="number">1024</span>)   <span class="comment">#接收客户端信息</span></span><br><span class="line">print(ret)              <span class="comment">#打印客户端信息</span></span><br><span class="line">conn.send(<span class="string">b&#x27;hi&#x27;</span>)        <span class="comment">#向客户端发送信息</span></span><br><span class="line">conn.close()       <span class="comment">#关闭客户端套接字</span></span><br><span class="line">server.close()        <span class="comment">#关闭服务器套接字(可选)</span></span><br></pre></td></tr></table></figure>

<h2 id="基于UDP协议的socket"><a href="#基于UDP协议的socket" class="headerlink" title="基于UDP协议的socket"></a>基于UDP协议的socket</h2><p><code>udp</code>是无链接的，启动服务之后可以直接接受消息，不需要提前建立链接</p>
<p>实例说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#server端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">udp_sk = socket.socket(type=socket.SOCK_DGRAM)   <span class="comment">#创建一个服务器的套接字</span></span><br><span class="line">udp_sk.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>))        <span class="comment">#绑定服务器套接字</span></span><br><span class="line">msg,addr = udp_sk.recvfrom(<span class="number">1024</span>)</span><br><span class="line">print(msg)</span><br><span class="line">udp_sk.sendto(<span class="string">b&#x27;hi&#x27;</span>,addr)                 <span class="comment"># 对话(接收与发送)</span></span><br><span class="line">udp_sk.close()                         <span class="comment"># 关闭服务器套接字</span></span><br><span class="line"><span class="comment">#client端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)</span><br><span class="line">udp_sk=socket.socket(type=socket.SOCK_DGRAM)</span><br><span class="line">udp_sk.sendto(<span class="string">b&#x27;hello&#x27;</span>,ip_port)</span><br><span class="line">back_msg,addr=udp_sk.recvfrom(<span class="number">1024</span>)</span><br><span class="line">print(back_msg.decode(<span class="string">&#x27;utf-8&#x27;</span>),addr)</span><br></pre></td></tr></table></figure>

<h2 id="socket参数的详解"><a href="#socket参数的详解" class="headerlink" title="socket参数的详解"></a>socket参数的详解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">socket.socket(family=AF_INET,type=SOCK_STREAM,proto=<span class="number">0</span>,fileno=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>创建<code>socket</code>对象的参数说明：</p>
<table>
<thead>
<tr>
<th><strong>family</strong></th>
<th>地址系列应为AF_INET(默认值),AF_INET6,AF_UNIX,AF_CAN或AF_RDS。（AF_UNIX 域实际上是使用本地 socket 文件来通信）</th>
</tr>
</thead>
<tbody><tr>
<td><strong>type</strong></td>
<td>套接字类型应为<code>SOCK_STREAM</code>(默认值),<code>SOCK_DGRAM</code>,<code>SOCK_RAW</code>或其他<code>SOCK_</code>常量之一。**<code>SOCK_STREAM</code>** 是基于<code>TCP</code>的，有保障的（即能保证数据正确传送到对方）面向连接的<code>SOCKET</code>，多用于资料传送。 <strong><code>SOCK_DGRAM</code></strong> 是基于<code>UDP</code>的，无保障的面向消息的<code>socket</code>，多用于在网络上发广播信息。</td>
</tr>
<tr>
<td><strong>proto</strong></td>
<td>协议号通常为零,可以省略,或者在地址族为<code>AF_CAN</code>的情况下,协议应为<code>CAN_RAW</code>或<code>CAN_BCM</code>之一。</td>
</tr>
<tr>
<td><strong>fileno</strong></td>
<td>如果指定了<code>fileno</code>,则其他参数将被忽略,导致带有指定文件描述符的套接字返回。与<code>socket.fromfd()</code>不同,<code>fileno</code>将返回相同的套接字,而不是重复的。这可能有助于使用<code>socket.close()</code>关闭一个独立的插座。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>tcp</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>python一个选课的小功能竟然捣鼓半天，有瑕疵，日后精简修复</title>
    <url>/69e0a2f7.html</url>
    <content><![CDATA[<p>尝试用python写的选课系统小功能，捣鼓了半天竟然，有瑕疵，日后留着精进修复，利用了反射，代码冗余，后期后期……</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">lessons = [<span class="string">&#x27;JAVA语言开发与设计&#x27;</span>, <span class="string">&#x27;C语言开发与设计&#x27;</span>, <span class="string">&#x27;C++语言开发与设计&#x27;</span>, <span class="string">&#x27;C#语言开发与设计&#x27;</span>, <span class="string">&#x27;PHP语言开发与设计&#x27;</span>, <span class="string">&#x27;MySql语言开发与设计&#x27;</span>, <span class="string">&#x27;PYTHON语言开发与设计&#x27;</span>, <span class="string">&#x27;JAVASCRIPT语言开发与设计&#x27;</span>, <span class="string">&#x27;GO语言开发与设计&#x27;</span>, <span class="string">&#x27;LINUX语言开发与设计&#x27;</span>]</span><br><span class="line">citys = [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;重庆&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;郑州&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>]</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span>:</span></span><br><span class="line">    <span class="comment"># 学生列表</span></span><br><span class="line">    stu_list = []</span><br><span class="line">    <span class="comment"># 所有课程</span></span><br><span class="line">    course_list = []</span><br><span class="line">    <span class="comment"># 已选课程-学生</span></span><br><span class="line">    selected_course_list = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_courses</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        查看所有课程</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        print(<span class="string">&#x27;&#123;&#125;  &#123;:20&#125; &#123;:11&#125; &#123;:4&#125;&#x27;</span>.format(<span class="string">&#x27;城市&#x27;</span>, <span class="string">&#x27;课程&#x27;</span>, <span class="string">&#x27;价格&#x27;</span>, <span class="string">&#x27;学期&#x27;</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.course_list:</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125;  &#123;:21&#125; &#123;:12&#125; &#123;:4&#125;&#x27;</span>.format(i.course_city, i.course_name, i.course_price, i.course_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Common</span>):</span></span><br><span class="line">    menu_list = [&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;查看所有课程&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;show_courses&#x27;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;选择课程&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;elective_course&#x27;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;查看所选课程&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;show_coursed&#x27;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;删除已选课程&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;del_course&#x27;</span>&#125;</span><br><span class="line">                 ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, u_name=None, u_account=None, u_pwd=None</span>):</span></span><br><span class="line">        self.u_name = u_name</span><br><span class="line">        self.u_account = u_account</span><br><span class="line">        self.u_pwd = u_pwd</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self, u_account, u_pwd</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        登录</span></span><br><span class="line"><span class="string">        :param u_account:账号</span></span><br><span class="line"><span class="string">        :param u_pwd:密码</span></span><br><span class="line"><span class="string">        :return:1成功，0失败</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> stu <span class="keyword">in</span> self.stu_list:</span><br><span class="line">             <span class="keyword">if</span> stu.u_account == u_account <span class="keyword">and</span> stu.u_pwd == u_pwd:</span><br><span class="line">                 self.u_name = stu.u_name</span><br><span class="line">                 self.u_account = u_account</span><br><span class="line">                 self.u_pwd = u_pwd</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_coursed</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        查看已选课程</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        selected_courses_data = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> stu, course <span class="keyword">in</span> self.selected_course_list.items():</span><br><span class="line">            <span class="keyword">if</span> self.u_account == stu.u_account:</span><br><span class="line">                selected_courses_data.append(course)</span><br><span class="line">                print(<span class="string">&#x27;&#123;&#125;  &#123;:21&#125; &#123;:12&#125; &#123;:4&#125;&#x27;</span>.format(course.course_city, course.course_name, course.course_price, course.course_time))</span><br><span class="line">        <span class="keyword">if</span> len(selected_courses_data) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> selected_courses_data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;抱歉，您还没有选修的课&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">elective_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        选择课程</span></span><br><span class="line"><span class="string">        :param course:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&#x27;&#123;:4&#125; &#123;&#125; &#123;:20&#125; &#123;:11&#125; &#123;:4&#125;&#x27;</span>.format(<span class="string">&#x27;编号&#x27;</span>, <span class="string">&#x27;城市&#x27;</span>, <span class="string">&#x27;课程                      &#x27;</span>, <span class="string">&#x27;价格&#x27;</span>, <span class="string">&#x27;学期&#x27;</span>))</span><br><span class="line">        <span class="keyword">for</span> index,course <span class="keyword">in</span> enumerate(self.course_list, <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">&#x27;&#123;:4&#125; &#123;&#125; &#123;:21&#125; &#123;:12&#125; &#123;:4&#125;&#x27;</span>.format(index, course.course_city, course.course_name, course.course_price, course.course_time))</span><br><span class="line">        course_id = int(input(<span class="string">&#x27;请选择您要学习的课程编号：&#x27;</span>))</span><br><span class="line">        self.selected_course_list[self] = self.course_list[course_id<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;【%s】成功选修【%s】成功&#x27;</span> % (self.u_name, self.course_list[course_id<span class="number">-1</span>].course_name))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        删除已选课程</span></span><br><span class="line"><span class="string">        :param course:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        selected_course_data = self.show_coursed()</span><br><span class="line">        <span class="keyword">if</span> selected_course_data == <span class="number">-1</span>:</span><br><span class="line">            print(<span class="string">&#x27;你还没有选择课程呢&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        print(<span class="string">&#x27;&#123;:4&#125; &#123;&#125; &#123;:20&#125; &#123;:11&#125; &#123;:4&#125;&#x27;</span>.format(<span class="string">&#x27;编号&#x27;</span>, <span class="string">&#x27;城市&#x27;</span>, <span class="string">&#x27;课程                      &#x27;</span>, <span class="string">&#x27;价格&#x27;</span>, <span class="string">&#x27;学期&#x27;</span>))</span><br><span class="line">        <span class="keyword">for</span> index,course <span class="keyword">in</span> enumerate(selected_course_data, <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">&#x27;&#123;:4&#125; &#123;&#125; &#123;:21&#125; &#123;:12&#125; &#123;:4&#125;&#x27;</span>.format(index, course.course_city, course.course_name, course.course_price,</span><br><span class="line">                                                    course.course_time))</span><br><span class="line">        course_id = int(input(<span class="string">&#x27;请选择您要放弃的课程：&#x27;</span>))</span><br><span class="line">        course_active = selected_course_data[course_id<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> stu, course <span class="keyword">in</span> self.selected_course_list.items():</span><br><span class="line">            <span class="keyword">if</span> stu.u_account == self.u_account <span class="keyword">and</span> course == course_active:</span><br><span class="line">                <span class="keyword">del</span> self.selected_course_list[stu]</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Administrator</span>(<span class="params">Common</span>):</span></span><br><span class="line">    menu_list = [&#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;创建课程&#x27;</span>, <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;create_course&#x27;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;创建学生账号&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;create_account&#x27;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;查看所有课程&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;show_courses&#x27;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;查看所有学生&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;show_stu&#x27;</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;查看所有学生的选课情况&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;show_stu_course&#x27;</span>&#125;</span><br><span class="line">                 ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self, u_account, u_pwd</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        登录</span></span><br><span class="line"><span class="string">        :param u_account:账号</span></span><br><span class="line"><span class="string">        :param u_pwd:密码</span></span><br><span class="line"><span class="string">        :return:1成功，0失败</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> == u_account <span class="keyword">and</span> <span class="string">&#x27;123&#x27;</span> == u_pwd:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        创建课程</span></span><br><span class="line"><span class="string">        :param course:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        course_name = random.sample(lessons, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">        course_city = random.sample(citys, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">        course_price = <span class="string">&#x27;￥&#x27;</span> + format(random.randrange(<span class="number">10000</span>, <span class="number">30000</span>), <span class="string">&#x27;,.2f&#x27;</span>)</span><br><span class="line">        course_time = <span class="string">&#x27;第&#x27;</span> + str(random.randrange(<span class="number">1</span>, <span class="number">5</span>)) + <span class="string">&#x27;期&#x27;</span></span><br><span class="line">        self.course_list.append(Course(course_name, course_city, course_price, course_time))</span><br><span class="line">        print(<span class="string">&#x27;课程【%s】创建成功&#x27;</span> % course_name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_account</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        创建学生账户</span></span><br><span class="line"><span class="string">        :param student:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        u_name = input(<span class="string">&#x27;请输入学员姓名：&#x27;</span>)</span><br><span class="line">        u_account = input(<span class="string">&#x27;请输入学员账户：&#x27;</span>)</span><br><span class="line">        u_pwd = input(<span class="string">&#x27;请输入学员密码：&#x27;</span>)</span><br><span class="line">        self.stu_list.append(Student(u_name, u_account, u_pwd))</span><br><span class="line">        print(<span class="string">&#x27;学员【&#x27;</span>+u_name+<span class="string">&#x27;】创建成功&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_stu</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        查看所有学员</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        print(<span class="string">&#x27;&#123;:5&#125; &#123;:15&#125; &#123;:6&#125;&#x27;</span>.format(<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;账户&#x27;</span>, <span class="string">&#x27;密码&#x27;</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.stu_list:</span><br><span class="line">            print(<span class="string">&#x27;&#123;:5&#125; &#123;:15&#125; &#123;:6&#125;&#x27;</span>.format(i.u_name, i.u_account, i.u_pwd))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_stu_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        查看所有学员选课情况</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> len(self.selected_course_list) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&#x27;你还没有选修任何课程&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> stu,course <span class="keyword">in</span> self.selected_course_list.items():</span><br><span class="line">            print(<span class="string">&#x27;&#123;:4&#125; &#123;&#125; &#123;:21&#125; &#123;:12&#125; &#123;:4&#125;&#x27;</span>.format(stu.u_name, course.course_city, course.course_name, course.course_price, course.course_time))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, course_name, course_city, course_price, course_time</span>):</span></span><br><span class="line">        self.course_name = course_name</span><br><span class="line">        self.course_city = course_city</span><br><span class="line">        self.course_price = course_price</span><br><span class="line">        self.course_time = course_time</span><br><span class="line"></span><br><span class="line">separator = <span class="string">&#x27;-&#x27;</span>*<span class="number">80</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;欢迎来到选课系统&#x27;</span>)</span><br><span class="line">    print(separator)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">&#x27;&#x27;&#x27;1 学员登录</span></span><br><span class="line"><span class="string">2 管理员登录&#x27;&#x27;&#x27;</span>)</span><br><span class="line">        print(separator)</span><br><span class="line">        login_type = input(<span class="string">&#x27;请选择登录类型编号：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> login_type == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            u_account = input(<span class="string">&#x27;请输入您的用户名：&#x27;</span>)</span><br><span class="line">            u_pwd = input(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line">            stu = Student()</span><br><span class="line">            <span class="keyword">if</span> stu.login(u_account, u_pwd) &gt; <span class="number">0</span>:</span><br><span class="line">                print(separator)</span><br><span class="line">                <span class="keyword">for</span> index, menu <span class="keyword">in</span> enumerate(stu.menu_list, <span class="number">1</span>):</span><br><span class="line">                    print(index, menu[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">                print(separator)</span><br><span class="line">                menu_type = int(input(<span class="string">&#x27;请选择您要操作的功能编号：&#x27;</span>))</span><br><span class="line">                menu_method = getattr(stu, stu.menu_list[menu_type - <span class="number">1</span>][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">                print(separator)</span><br><span class="line">                menu_method()</span><br><span class="line">                print(separator)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;账户密码有误，请重新选择&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> login_type == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            u_account = input(<span class="string">&#x27;请输入您的用户名：&#x27;</span>)</span><br><span class="line">            u_pwd     = input(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line">            admin = Administrator()</span><br><span class="line">            <span class="keyword">if</span> admin.login(u_account, u_pwd) &gt; <span class="number">0</span>:</span><br><span class="line">                print(separator)</span><br><span class="line">                <span class="keyword">for</span> index,menu <span class="keyword">in</span> enumerate(admin.menu_list, <span class="number">1</span>):</span><br><span class="line">                    print(index, menu[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">                print(separator)</span><br><span class="line">                menu_type = int(input(<span class="string">&#x27;请选择您要操作的功能编号：&#x27;</span>))</span><br><span class="line">                menu_method = getattr(admin, admin.menu_list[menu_type<span class="number">-1</span>][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">                print(separator)</span><br><span class="line">                menu_method()</span><br><span class="line">                print(separator)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;账户密码有误，请重新选择&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">run()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python选课</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的约束(抽象类、抽象方法)</title>
    <url>/92bc867c.html</url>
    <content><![CDATA[<p>其他语言中大部分都有接口，在<code>python</code>中是没有接口一说的，那么在<code>python</code>中，要怎么实现约束呢，方法有如下两种：</p>
<a id="more"></a>

<h5 id="方法一（不实现就是用直接抛异常）："><a href="#方法一（不实现就是用直接抛异常）：" class="headerlink" title="方法一（不实现就是用直接抛异常）："></a>方法一（不实现就是用直接抛异常）：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;send()方法必须在子类中重新定义&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>(<span class="params">Base</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Son()</span><br><span class="line">obj.send()</span><br></pre></td></tr></table></figure>

<p>异常如下：</p>
<p><code>NotImplementedError: send()</code>方法必须在子类中重新定义</p>
<h5 id="方法二（抽象类，抽象方法）："><a href="#方法二（抽象类，抽象方法）：" class="headerlink" title="方法二（抽象类，抽象方法）："></a>方法二（抽象类，抽象方法）：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>(<span class="params">metaclass=ABCMeta</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;send()方法必须在子类中重新定义&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>(<span class="params">Base</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Son()</span><br></pre></td></tr></table></figure>

<p>异常如下：</p>
<p><code>TypeError: Can&#39;t instantiate abstract class Son with abstract methods send</code></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>抽象类</tag>
        <tag>抽象方法</tag>
      </tags>
  </entry>
  <entry>
    <title>python之MongoDB常用操作</title>
    <url>/255f71f1.html</url>
    <content><![CDATA[<p><code>MongoDB</code> 是一个基于分布式文件存储的数据库。由 <code>C++</code> 语言编写。旨在为 <code>WEB</code> 应用提供可扩展的高性能数据存储解决方案。</p>
<p><code>MongoDB</code> 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<p>本文主要列举<code>python</code>至<code>MongoDB</code>的常用操作</p>
<a id="more"></a>

<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><p>本文默认你已经成功安装<code>mangodb</code>且已开启该服务。以下为我们准备的数据表内容，表名为<code>study</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1 createdAt:2019/10/9 下午1:43:34*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d738695d02910481b4c37&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;张妮&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">17</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 createdAt:2019/10/9 下午1:43:34*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d738695d02910481b4c36&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;范泽东&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">24</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3 createdAt:2019/10/9 下午1:41:42*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d7316d9cb8d5249552eb9&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;范泽熙&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">23</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4 createdAt:2019/10/9 上午11:27:58*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d53be8b8c5375d79fc163&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;haha&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">99</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c976d&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;光绪&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">95</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c976c&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;朱重八&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">205</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 7 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c976b&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;李世民&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">100</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 8 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c976a&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;哪吒&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">246</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 9 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c9769&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;沙悟净&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">238</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 10 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c9768&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;唐僧&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">244</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 11 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c9767&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">489</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 12 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c9766&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">489</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 13 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c9765&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;黎明&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">45</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 14 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c9764&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;郭富城&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">48</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 15 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c9763&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">50</span>,</span><br><span class="line">	<span class="attr">&quot;hobby&quot;</span> : [</span><br><span class="line">		<span class="string">&quot;唱歌&quot;</span>,</span><br><span class="line">		<span class="string">&quot;拍电影&quot;</span>,</span><br><span class="line">		<span class="string">&quot;吃饭&quot;</span>,</span><br><span class="line">		<span class="string">&quot;睡觉&quot;</span>,</span><br><span class="line">		<span class="string">&quot;耍帅&quot;</span>,</span><br><span class="line">		<span class="string">&quot;捐钱&quot;</span></span><br><span class="line">	]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 16 createdAt:2019/10/9 上午11:21:03*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d521fef094910187c9762&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;张学友&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">45</span>,</span><br><span class="line">	<span class="attr">&quot;hobby&quot;</span> : [</span><br><span class="line">		<span class="string">&quot;唱歌&quot;</span>,</span><br><span class="line">		<span class="string">&quot;拍电影&quot;</span>,</span><br><span class="line">		<span class="string">&quot;捐钱&quot;</span></span><br><span class="line">	]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 17 createdAt:2019/10/9 上午11:16:55*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d51278b8c5375d79fc162&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;tiny&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">17</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 18 createdAt:2019/10/9 上午11:15:51*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d9d50e78b8c5375d79fc161&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;tony&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="安装pymongo"><a href="#安装pymongo" class="headerlink" title="安装pymongo"></a>安装<code>pymongo</code></h2><p>要在<code>python</code>中使用<code>mongodb</code>需要先安装该库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure>

<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入mongo库</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> bson <span class="keyword">import</span> ObjectId</span><br><span class="line"><span class="comment"># 连接Mongo</span></span><br><span class="line">conn = pymongo.MongoClient(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">27017</span>)</span><br><span class="line"><span class="comment"># 选择数据库</span></span><br><span class="line">db = conn[<span class="string">&#x27;local&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p><code>python</code>中操作<code>mango</code>代码是非常简单的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line">res = db.study.find(&#123;&#125;)</span><br><span class="line"><span class="comment"># 查询所有，只显示name</span></span><br><span class="line">res = db.study.find(&#123;&#125;, &#123;<span class="string">&quot;_id&quot;</span>:<span class="number">0</span>, <span class="string">&quot;name&quot;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment"># 从第3条开始查询5条</span></span><br><span class="line">res = db.study.find().skip(<span class="number">2</span>).limit(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 按年龄降序</span></span><br><span class="line">res = db.study.find().sort(<span class="string">&quot;age&quot;</span>, pymongo.DESCENDING)</span><br><span class="line">res = db.study.find().sort(<span class="string">&quot;age&quot;</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment"># 按年龄升</span></span><br><span class="line">res = db.study.find().sort(<span class="string">&quot;age&quot;</span>, pymongo.ASCENDING)</span><br><span class="line">res = db.study.find().sort(<span class="string">&quot;age&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 查询姓名为张学友的</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;张学友&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 查询年龄大于100的</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&#x27;$gt&#x27;</span>:<span class="number">100</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询年龄小于100的</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&#x27;$lt&#x27;</span>:<span class="number">100</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询年龄大于等于100的</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&#x27;$gte&#x27;</span>:<span class="number">100</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询年龄小于等于100的</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&#x27;$lte&#x27;</span>:<span class="number">100</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询_id=5d9d521fef094910187c976b的数据</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;_id&quot;</span>:ObjectId(<span class="string">&quot;5d9d521fef094910187c976b&quot;</span>)&#125;)</span><br><span class="line"><span class="comment"># 查询年龄为17,45,50的数据</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&#x27;$in&#x27;</span>:(<span class="number">17</span>, <span class="number">45</span>, <span class="number">50</span>)&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询年龄为17或姓名等于黎明的</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;$or&quot;</span>:[&#123;<span class="string">&quot;age&quot;</span>:<span class="number">17</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;黎明&quot;</span>&#125;]&#125;)</span><br><span class="line"><span class="comment"># 查询爱好包含唱歌、拍电影睡觉的数据</span></span><br><span class="line">res = db.study.find(&#123;<span class="string">&quot;hobby&quot;</span>:&#123;<span class="string">&quot;$all&quot;</span>:[<span class="string">&quot;唱歌&quot;</span>, <span class="string">&#x27;拍电影&#x27;</span>, <span class="string">&quot;捐钱&quot;</span>]&#125;&#125;)</span><br><span class="line">print(list(res))</span><br></pre></td></tr></table></figure>

<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加一条</span></span><br><span class="line">res = db.study.insert_one(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;ddd&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">999</span>&#125;)</span><br><span class="line">print(res, type(res), res.inserted_id)</span><br><span class="line"><span class="comment"># 增加多条</span></span><br><span class="line">res = db.study.insert_many([&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;范泽东&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">23</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;张妮&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">22</span>&#125;])</span><br><span class="line">print(res, type(res), res.inserted_ids)</span><br></pre></td></tr></table></figure>

<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改来说操作相对多一点，牵涉到每条记录的属性修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改单条</span></span><br><span class="line">res = db.study.update_one(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张妮&quot;</span>&#125;, &#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;age&quot;</span>:<span class="number">16</span>&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br><span class="line"><span class="comment"># 修改多条</span></span><br><span class="line">res = db.study.update_many(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&quot;$gt&quot;</span>:<span class="number">400</span>&#125;&#125;, &#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;age&quot;</span>:<span class="number">499</span>&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br><span class="line"><span class="comment"># 年龄小于30岁的增加1岁</span></span><br><span class="line">res = db.study.update_many(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&quot;$lt&quot;</span>:<span class="number">30</span>&#125;&#125;, &#123;<span class="string">&quot;$inc&quot;</span>:&#123;<span class="string">&quot;age&quot;</span>:<span class="number">1</span>&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br><span class="line"><span class="comment"># 年龄大于100的减去10岁</span></span><br><span class="line">res = db.study.update_many(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&quot;$gt&quot;</span>:<span class="number">100</span>&#125;&#125;, &#123;<span class="string">&quot;$inc&quot;</span>:&#123;<span class="string">&quot;age&quot;</span>:<span class="number">-10</span>&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用$set，有该属性则修改，没有则添加</span></span><br><span class="line"><span class="comment"># 为张学友设置爱好属性</span></span><br><span class="line">res = db.study.update_one(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张学友&quot;</span>&#125;, &#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;hobby&quot;</span>:<span class="string">&#x27;唱歌&#x27;</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 为刘德华设置多个爱好</span></span><br><span class="line">res = db.study.update_one(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;刘德华&quot;</span>&#125;, &#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;hobby&quot;</span>:[<span class="string">&quot;唱歌&quot;</span>, <span class="string">&quot;拍电影&quot;</span>, <span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;耍帅&quot;</span>, <span class="string">&quot;捐钱&quot;</span>]&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用$push为已有属性多添加一项内容</span></span><br><span class="line"><span class="comment"># 为刘德华多添加一个爱好</span></span><br><span class="line">res = db.study.update_one(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;刘德华&quot;</span>&#125;, &#123;<span class="string">&quot;$push&quot;</span>:&#123;<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;耍帅&quot;</span>&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用$pull删除已有属性中的某项内容</span></span><br><span class="line"><span class="comment"># 删除一个爱好</span></span><br><span class="line">res = db.study.update_one(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;刘德华&quot;</span>&#125;, &#123;<span class="string">&quot;$pull&quot;</span>:&#123;<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;吃饭&quot;</span>&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用$pop删除已有属性中首个或最后一项内容</span></span><br><span class="line"><span class="comment"># 删除第一个爱好</span></span><br><span class="line">res = db.study.update_many(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;刘德华&quot;</span>&#125;, &#123;<span class="string">&quot;$pop&quot;</span>:&#123;<span class="string">&quot;hobby&quot;</span>:<span class="number">-1</span>&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br><span class="line"><span class="comment"># 删除最后一个爱好</span></span><br><span class="line">res = db.study.update_many(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;刘德华&quot;</span>&#125;, &#123;<span class="string">&quot;$pop&quot;</span>:&#123;<span class="string">&quot;hobby&quot;</span>:<span class="number">1</span>&#125;&#125;)</span><br><span class="line">print(res, dir(res), res.raw_result, res.upserted_id)</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除单条</span></span><br><span class="line">res = db.study.delete_one(&#123;<span class="string">&quot;age&quot;</span>:<span class="number">998</span>&#125;)</span><br><span class="line">print(res, dir(res), res.deleted_count, res.raw_result)</span><br><span class="line"><span class="comment"># 删除多条</span></span><br><span class="line">res = db.study.delete_many(&#123;<span class="string">&quot;age&quot;</span>:<span class="number">999</span>&#125;)</span><br><span class="line">print(res, dir(res), res.deleted_count, res.raw_result)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>db</category>
        <category>mongo</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>pymongo</tag>
        <tag>delete_one</tag>
        <tag>delete_many</tag>
        <tag>update_many</tag>
        <tag>update_one</tag>
        <tag>$set</tag>
        <tag>$push</tag>
        <tag>$pull</tag>
        <tag>$pop</tag>
        <tag>$in</tag>
        <tag>$or</tag>
        <tag>$all</tag>
        <tag>$gt</tag>
        <tag>$lt</tag>
        <tag>$gte</tag>
        <tag>$lte</tag>
        <tag>MongoClient</tag>
      </tags>
  </entry>
  <entry>
    <title>python之web自动化测试工具Selenium</title>
    <url>/aeca702.html</url>
    <content><![CDATA[<p><code>Selenium</code>是针对<code>Web</code>应用的开源自动化测试工具，通过编写模拟用户操作的脚本，它会打开浏览器Web应用进行黑盒测试。可以方便的用于功能测试、兼容性测试、 稳定性测试及并发测试。目前已被主流浏览器厂商广泛支持，同时也是很多其它自动化测试工具(比如，<code>RobotFramework</code>)的底层核心技术。</p>
<a id="more"></a>
<p>前面我们使用爬虫<code>requests</code>库来爬取数据，但是爬取的数据是目标服务器响应给我们的，跟真正用浏览器访问页面得到的代码是不一致的。比如我们访问一些懒加载的网站，内容通过滚动条滚动或者是点击更多加载出来的，如果通过<code>requests</code>直接获取该页面地址，是拿不到该数据的，<code>Selenium</code>帮助我们解决了这个问题。</p>
<p>我么这里不详细解释该模块的用法，通过两个示例来了解一下它的功能作用，具体更详细的用法可以到官网进行学习：<span class="exturl" data-url="aHR0cDovL3d3dy5zZWxlbml1bS5vcmcuY24v">http://www.selenium.org.cn/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>

<h3 id="下载浏览器引擎"><a href="#下载浏览器引擎" class="headerlink" title="下载浏览器引擎"></a>下载浏览器引擎</h3><p>我们这里以谷歌浏览器为例，就放出来谷歌浏览器引擎的地址</p>
<p><span class="exturl" data-url="aHR0cDovL2Nocm9tZWRyaXZlci5zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2luZGV4Lmh0bWw=">http://chromedriver.storage.googleapis.com/index.html<i class="fa fa-external-link-alt"></i></span></p>
<p>同时可以参考<code>chromedriver</code>与支持<code>chrome</code>版本的映射关系</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1aWxhbl9zYW1lL2FydGljbGUvZGV0YWlscy81MTg5NjY3Mg==">https://blog.csdn.net/huilan_same/article/details/51896672<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="模拟百度搜索"><a href="#模拟百度搜索" class="headerlink" title="模拟百度搜索"></a>模拟百度搜索</h2><p>运行以上代码可以看到程序为我们打开了谷歌浏览器，访问百度，并搜索爬虫学习，控制台打印搜索结果页面源码，然后关闭浏览器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之前下载的浏览器引擎地址</span></span><br><span class="line">brower = webdriver.Chrome(executable_path=<span class="string">r&#x27;E:\site\python\爬虫\chromedriver.exe&#x27;</span>)</span><br><span class="line"><span class="comment"># 浏览器访问百度</span></span><br><span class="line">brower.get(url=<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取搜索框</span></span><br><span class="line">search_input = brower.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line"><span class="comment"># 搜索框输入关键词</span></span><br><span class="line">search_input.send_keys(<span class="string">&#x27;爬虫学习&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">brower.find_element_by_id(<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 获取搜索结果的源码</span></span><br><span class="line">print(brower.page_source)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">brower.quit()</span><br></pre></td></tr></table></figure>

<h2 id="模拟豆瓣电影懒加载"><a href="#模拟豆瓣电影懒加载" class="headerlink" title="模拟豆瓣电影懒加载"></a>模拟豆瓣电影懒加载</h2><p>豆瓣之前电影是通过滚动条来触发显示更多电影的，今天测试发现改成了“更多电影”按钮来点击触发显示更多。我们这里连续触发了3次加载更多，最后将该页面下载，然后关闭浏览器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器引擎</span></span><br><span class="line">brower = webdriver.Chrome(executable_path=<span class="string">r&#x27;E:\site\python\爬虫\chromedriver.exe&#x27;</span>)</span><br><span class="line"><span class="comment"># 浏览器访问百度</span></span><br><span class="line">brower.get(url=<span class="string">&#x27;https://movie.douban.com/tv/&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取更多按钮</span></span><br><span class="line">search_input = brower.find_element_by_class_name(<span class="string">&#x27;more&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">search_input.click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">search_input.click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">search_input.click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 获取搜索结果的源码</span></span><br><span class="line"><span class="comment"># print(brower.page_source)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;doubanm.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(brower.page_source)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">brower.quit()</span><br></pre></td></tr></table></figure>

<p>如果牵涉到滚动条触发的，我们可以使用<code>js</code>代码来实现控制滚动条条滚动,滚动条滚动一屏的高度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">brower.execute_script(<span class="string">&#x27;window.scrollTo(0, document.body.scrollHeight)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以上两个源码获取到你就可以使用<code>xpath</code>或者<code>bs4</code>去解析你想要的结果了</p>
<h2 id="下载豆瓣电影不显示浏览器"><a href="#下载豆瓣电影不显示浏览器" class="headerlink" title="下载豆瓣电影不显示浏览器"></a>下载豆瓣电影不显示浏览器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器引擎</span></span><br><span class="line">brower = webdriver.Chrome(executable_path=<span class="string">r&#x27;E:\site\python\爬虫\chromedriver.exe&#x27;</span>, chrome_options=chrome_options)</span><br><span class="line"><span class="comment"># 浏览器访问百度</span></span><br><span class="line">brower.get(url=<span class="string">&#x27;https://movie.douban.com/tv/&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取更多按钮</span></span><br><span class="line">search_input = brower.find_element_by_class_name(<span class="string">&#x27;more&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">search_input.click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">search_input.click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 获取搜索结果的源码</span></span><br><span class="line"><span class="comment"># print(brower.page_source)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;doubanm.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(brower.page_source)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">brower.quit()</span><br></pre></td></tr></table></figure>

<h2 id="登录qq空间"><a href="#登录qq空间" class="headerlink" title="登录qq空间"></a>登录<code>qq</code>空间</h2><p>登录<code>qq</code>空间稍有不同，我么这里使用账号密码登录，页面中的登录表单使用的一个<code>ifame</code>，如果直接操控指定元素，控制台会报错，打印元素不存在，这就需要我们先切换到该<code>iframe</code>才可以操控指定元素。另我这里登录没有出现拖动验证码，这个问题后续解决。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器引擎</span></span><br><span class="line">brower = webdriver.Chrome(executable_path=<span class="string">r&#x27;E:\site\python\爬虫\chromedriver.exe&#x27;</span>)</span><br><span class="line"><span class="comment"># 浏览器访问百度</span></span><br><span class="line">brower.get(url=<span class="string">&#x27;https://i.qq.com/&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 切换到登录框所在的ifame，及id为login_frame的iframe</span></span><br><span class="line">brower.switch_to.frame(<span class="string">&#x27;login_frame&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击账号密码登录按钮</span></span><br><span class="line">brower.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入账号密码</span></span><br><span class="line">brower.find_element_by_id(<span class="string">&#x27;u&#x27;</span>).send_keys(<span class="string">&#x27;你的qq号&#x27;</span>)</span><br><span class="line">brower.find_element_by_id(<span class="string">&#x27;p&#x27;</span>).send_keys(<span class="string">&#x27;你的qq密码&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 点击登录按钮</span></span><br><span class="line">brower.find_element_by_id(<span class="string">&#x27;login_button&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取搜索结果的源码</span></span><br><span class="line"><span class="comment"># print(brower.page_source)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;qqi.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(brower.page_source)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">brower.quit()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python之web自动化测试工具Selenium</tag>
        <tag>selenium</tag>
        <tag>python自动化</tag>
        <tag>selenium自动化</tag>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python之二分法排序附送第三种最快排序法</title>
    <url>/1262a029.html</url>
    <content><![CDATA[<p>每次能够排除掉一半的数据. 查找的效率非常高. 但是局限性比较大. 必须是有序序列才可以使用二分查找</p>
<p>要求: 查找的序列必须是有序序列.</p>
<a id="more"></a>

<h4 id="例1、正常二分查找法"><a href="#例1、正常二分查找法" class="headerlink" title="例1、正常二分查找法"></a>例1、正常二分查找法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># num为用户要查找的数字</span></span><br><span class="line">num =<span class="number">8</span></span><br><span class="line"><span class="comment"># lis为用户查找的范围有序list</span></span><br><span class="line">lis = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># 初始左边界为0</span></span><br><span class="line">left = <span class="number">0</span></span><br><span class="line"><span class="comment"># 初始右边界为最后列表最后一个元素的索引</span></span><br><span class="line">right = len(lis)<span class="number">-1</span></span><br><span class="line"><span class="comment"># 左边界小于或者等于右边界意味着查找中</span></span><br><span class="line"><span class="keyword">while</span> left &lt;= right:</span><br><span class="line">    <span class="comment"># 取列表中间元素的索引(索引只能为整数)</span></span><br><span class="line">    middle = (left + right) // <span class="number">2</span></span><br><span class="line">    <span class="comment"># 用户查找的值小于中间值，意味着用户要查找的值在左半边，右边边界就可以缩小到中间元素索引的前一位</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; lis[middle]:</span><br><span class="line">        right = middle - <span class="number">1</span></span><br><span class="line">    <span class="comment"># 用户查找的值大于中间值，意味着用户要查找的值在右半边，左边边界就可以缩小到中间元素索引的后一位</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; lis[middle]:</span><br><span class="line">        left = middle + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 用户查找的值等于中间值，意味着找到了该数字</span></span><br><span class="line">    <span class="keyword">if</span> num == lis[middle]:</span><br><span class="line">        print(<span class="string">&#x27;找到了&#x27;</span>, middle)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;未找到&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="例2、递归二分查找法"><a href="#例2、递归二分查找法" class="headerlink" title="例2、递归二分查找法"></a>例2、递归二分查找法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找数字</span></span><br><span class="line"><span class="comment"># num 要查找的数字</span></span><br><span class="line"><span class="comment"># lis 查找的范围</span></span><br><span class="line"><span class="comment"># left 查找的左边界</span></span><br><span class="line"><span class="comment"># right 查找的右边界</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num, lis, left, right</span>):</span></span><br><span class="line">    <span class="comment"># 左边界小于或者等于右边界意味着查找中</span></span><br><span class="line">    <span class="keyword">if</span> left &lt;= right:</span><br><span class="line">        <span class="comment"># 取列表中间元素的索引(索引只能为整数)</span></span><br><span class="line">        middle = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 用户查找的值小于中间值，意味着用户要查找的值在左半边，右边边界就可以缩小到中间元素索引的前一位</span></span><br><span class="line">        <span class="keyword">if</span> num &lt; lis[middle]:</span><br><span class="line">            right = middle - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> func(num, lis, left, right) <span class="comment">#此处return必须添加，否则数据返回不到上一层，最终结果就会拿不到</span></span><br><span class="line">        <span class="comment"># 用户查找的值大于中间值，意味着用户要查找的值在右半边，左边边界就可以缩小到中间元素索引的后一位</span></span><br><span class="line">        <span class="keyword">if</span> num &gt; lis[middle]:</span><br><span class="line">            left = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> func(num, lis, left, right) <span class="comment">#此处return必须添加，否则数据返回不到上一层，最终结果就会拿不到</span></span><br><span class="line">        <span class="comment"># 用户查找的值等于中间值，意味着找到了该数字</span></span><br><span class="line">        <span class="keyword">if</span> num == lis[middle]:</span><br><span class="line">            <span class="keyword">return</span> middle</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">lis = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">ret = func(<span class="number">9</span>, lis, <span class="number">0</span>, len(lis)<span class="number">-1</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<h4 id="例3、切片二分查找法-优点：代码少；缺点：获取不到查找结果的索引"><a href="#例3、切片二分查找法-优点：代码少；缺点：获取不到查找结果的索引" class="headerlink" title="例3、切片二分查找法(优点：代码少；缺点：获取不到查找结果的索引)"></a>例3、切片二分查找法(优点：代码少；缺点：获取不到查找结果的索引)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找数字</span></span><br><span class="line"><span class="comment"># n 要查找的数字</span></span><br><span class="line"><span class="comment"># lis 查找的范围</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">lis, n</span>):</span></span><br><span class="line">    <span class="comment"># # 初始左边界为0</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    <span class="comment"># # 初始右边界为最后列表最后一个元素的索引</span></span><br><span class="line">    right = len(lis) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> left &lt;= right:</span><br><span class="line">        <span class="comment"># 取列表中间元素的索引(索引只能为整数)</span></span><br><span class="line">        middle = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 用户查找的值小于中间值，意味着用户要查找的值在左半边，直接使用切片将左半边列表作为一个新的列表传入下次递归</span></span><br><span class="line">        <span class="keyword">if</span> num &lt; lis[middle]:</span><br><span class="line">            <span class="keyword">return</span> func(lis[:middle<span class="number">-1</span>], n)</span><br><span class="line">        <span class="comment"># 用户查找的值大于中间值，意味着用户要查找的值在右半边，直接使用切片将右半边列表作为一个新的列表传入下次递归</span></span><br><span class="line">        <span class="keyword">elif</span> num &gt; lis[middle]:</span><br><span class="line">            <span class="keyword">return</span> func(lis[middle+<span class="number">1</span>:], n)</span><br><span class="line">        <span class="comment"># 用户查找的值等于中间值，意味着找到了该数字</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">num = <span class="number">7</span></span><br><span class="line">lis = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">ret = func(lis, num)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<h4 id="最后附送一个面试查找算法，时间空间都最优的写法-直接取值"><a href="#最后附送一个面试查找算法，时间空间都最优的写法-直接取值" class="headerlink" title="最后附送一个面试查找算法，时间空间都最优的写法(直接取值)"></a>最后附送一个面试查找算法，时间空间都最优的写法(直接取值)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找数字</span></span><br><span class="line"><span class="comment"># n 要查找的数字</span></span><br><span class="line"><span class="comment"># lis 查找的范围</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">lis, n</span>):</span></span><br><span class="line">    <span class="comment"># 此处我们定义一个索引列表，长度为lis最后一个元素值大小，并将每项都赋值为0</span></span><br><span class="line">    indexList = [<span class="number">0</span> <span class="keyword">for</span> item <span class="keyword">in</span> range(lis[<span class="number">-1</span>]+<span class="number">1</span>)]</span><br><span class="line">    <span class="comment"># 循环将要查找到范围写入到索引列表index，范围元素对应的索引列表元素值为1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">        indexList[i] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 如果要查找的数字在范围内，并且其作为索引对应的值为1，代表勋在</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; len(indexList) <span class="keyword">and</span> indexList[n] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">lis = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">ret = func(lis, <span class="number">15</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>二分法</tag>
        <tag>递归二分法</tag>
        <tag>切片二分法</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>python之冒泡排序</title>
    <url>/bb89f5e0.html</url>
    <content><![CDATA[<p>排序算法是每个编程语言通用的，只是语法不通，之前一直没有下仔细了解过，今天有空刚好看了下，思路很简单，但是很聪明：</p>
<a id="more"></a>

<p>首先排序算法的原理就是第一个数依次跟后面的数字比较，大于就交换，否则不交换，每次完成一个数字的排序，有多少字就要循环多少次</p>
<p>如：一组数[9, 2, 7, 5, 4],第一次循环比较，第一个数开始依次向后比较，9最大换到了最右边；第二次2在第一位了，开始依次向后比较，7最大换到了最右边，整过个程下来比较了5x4次，我们来用python的语法写一次，python语法可以省略一个中间变量，使得代码量又减小了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里先写下内层循环，就是第一个数依次向后比较的轮次</span></span><br><span class="line">lis = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>]    </span><br><span class="line"><span class="comment">#5个数字比较4次即可得出最大值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(lis)<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">if</span> lis[i] &gt; lis[i+<span class="number">1</span>]:</span><br><span class="line">        lis[i], lis[i+<span class="number">1</span>] = lis[i+<span class="number">1</span>], lis[i]</span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#至此9换到了最右边</span></span><br></pre></td></tr></table></figure>

<p>第二轮开始比较从2开始比较，后面依次比较的写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#外层循环，控制依次每个数字比较的轮次，这个次数用数字的数量和数字数量减去1都是一样的，因为最后依次不用比较了，都跟最后一个数比较过了，所以我们这里少循环一次</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(len(lis)<span class="number">-1</span>):    </span><br><span class="line">    <span class="comment">#5个数字比较4次即可得出最大值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lis)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> lis[i] &gt; lis[i+<span class="number">1</span>]:</span><br><span class="line">            lis[i], lis[i+<span class="number">1</span>] = lis[i+<span class="number">1</span>], lis[i]</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<p>结果已经使我们需要的了。仔细看结果我们其实可以考虑一下，我们似乎还是可以优化下代码的。</p>
<p>如，第一个数字9依次比较之后，已经放在了最右边；第二个数开始比较最大值，其实没必要跟最后一个9比较了，9已经是最大了；第2个最大数选择好之后，第3个数依次比较也没必要跟最右侧两个数字比较了，总结一下，每次比较出一个大数字之后，后面数字再比较，循环轮次应该相应减去1。</p>
<p>优化后代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#外层循环，控制依次每个数字比较的轮次，这个次数用数字的数量和数字数量减去1都是一样的，因为最后依次不用比较了，都跟最后一个数比较过了，所以我们这里少循环一次</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(len(lis)<span class="number">-1</span>):    </span><br><span class="line">    <span class="comment">#5个数字比较4次即可得出最大值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lis)<span class="number">-1</span>-item):</span><br><span class="line">        <span class="keyword">if</span> lis[i] &gt; lis[i+<span class="number">1</span>]:</span><br><span class="line">            lis[i], lis[i+<span class="number">1</span>] = lis[i+<span class="number">1</span>], lis[i]</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<p>总后我们计算下两种方法总共循环次数：</p>
<p>第一种方法最后内循环次数可以看到是4X4=16次</p>
<p>第二种方法最后内循环次数为4+3+2+1=10次</p>
<p>比较的数字越大，这种循环的次数就会差的更多！！！</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>冒泡排序</tag>
        <tag>排序</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>python之常见算法系列</title>
    <url>/7e7085e3.html</url>
    <content><![CDATA[<p>算法（<code>Algorithm</code>）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。这里介绍几种常见的算法，后续跟进。</p>
<a id="more"></a>

<p><a href="https://www.diandian100.cn/d062aff8.html">python之斐波那契数列算法</a></p>
<p><a href="https://www.diandian100.cn/1262a029.html">python之二分法排序附送第三种最快排序法</a></p>
<p><a href="https://www.diandian100.cn/bb89f5e0.html">python之冒泡排序</a></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>二分法</tag>
        <tag>算法</tag>
        <tag>冒泡排序</tag>
        <tag>python之常见算法系列</tag>
        <tag>常用算法</tag>
        <tag>斐波那契</tag>
        <tag>斐波那契算法</tag>
        <tag>递归算法</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>python之异常处理实例及加密</title>
    <url>/d4857d76.html</url>
    <content><![CDATA[<p>python异常处理实例记录，简单一个例子来说明异常处理的使用方式，简单做下笔记</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileNotFoundException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.code   = <span class="number">1001</span></span><br><span class="line">        self.msg    = <span class="string">&#x27;文件不存在&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentNotFoundException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.code   = <span class="number">1002</span></span><br><span class="line">        self.msg    = <span class="string">&#x27;查询结果为空&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyEmptyException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.code   = <span class="number">1003</span></span><br><span class="line">        self.msg    = <span class="string">&#x27;关键词不能为空&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_str</span>(<span class="params">file, key</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file):</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundException()</span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">raise</span> KeyEmptyException()</span><br><span class="line">        <span class="keyword">with</span> open(file, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                <span class="keyword">if</span> line.startswith(key):</span><br><span class="line">                    print(<span class="string">&#x27;找到了，&#x27;</span>,line)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ContentNotFoundException()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundException <span class="keyword">as</span> e:</span><br><span class="line">        print(e.code, e.msg)</span><br><span class="line">    <span class="keyword">except</span> ContentNotFoundException <span class="keyword">as</span> e:</span><br><span class="line">        print(e.code, e.msg)</span><br><span class="line">    <span class="keyword">except</span> KeyEmptyException <span class="keyword">as</span> e:</span><br><span class="line">        print(e.code, e.msg)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">search_str(<span class="string">&#x27;aaa.text&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>python MD5加密：</p>
<p>python中md5加密需要引入一个模块hashlib</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hashlib</span><br><span class="line">obj = hashlib.md5()</span><br><span class="line">obj.update(.encode())</span><br><span class="line">v = obj.hexdigest()</span><br><span class="line"></span><br><span class="line">(objv)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python异常处理</tag>
        <tag>python加密</tag>
      </tags>
  </entry>
  <entry>
    <title>python之推导式and生成器表达器笔记及面试坑</title>
    <url>/6830aab5.html</url>
    <content><![CDATA[<p>推导式是从一个或多个迭代器快速简洁的创建数据结构的一种办法，它可以将循环和条件判断结合，从而可以避免语法冗长的代码。</p>
<a id="more"></a>

<h4 id="推导式：一行代码生成一个列表-字典、集合"><a href="#推导式：一行代码生成一个列表-字典、集合" class="headerlink" title="推导式：一行代码生成一个列表(字典、集合)"></a>推导式：一行代码生成一个列表(字典、集合)</h4><p>注意：元组没有推导式</p>
<p>基本语法：[结果 for循环 条件判断(可选)]</p>
<h4 id="列表习题"><a href="#列表习题" class="headerlink" title="列表习题"></a>列表习题</h4><p>例1：创建一个1到10的列表</p>
<p>解答：</p>
<p>(1)循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    lis.append(i)</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<p>(2)列表推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<p>例2:20以内的基数创建一个列表</p>
<p>解答：</p>
<ul>
<li><p>取余判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [ i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>range步长</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>,<span class="number">2</span>)]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>例3：100以内被3整除的数的平方组成一个新的列表</p>
<ol>
<li><p>使用range步长实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">100</span>, <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用判断表达式实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [ i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> i%<span class="number">3</span>==<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>例4：列表中包含两个e的名字组成一个新的列表返回</p>
<ol>
<li><p>使用for循环实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [[<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;billy&#x27;</span>, <span class="string">&#x27;jeffer&#x27;</span>, <span class="string">&#x27;andrew&#x27;</span>, <span class="string">&#x27;wesley&#x27;</span>, <span class="string">&#x27;steven&#x27;</span>], [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;jill&#x27;</span>, <span class="string">&#x27;ada&#x27;</span>, <span class="string">&#x27;eveal&#x27;</span>, <span class="string">&#x27;eva&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>]]</span><br><span class="line"> lis = []</span><br><span class="line"> <span class="keyword">for</span> line <span class="keyword">in</span> names:</span><br><span class="line">  <span class="keyword">for</span> name <span class="keyword">in</span> line:</span><br><span class="line">   <span class="keyword">if</span> name.count(<span class="string">&#x27;e&#x27;</span>) == <span class="number">2</span>:</span><br><span class="line">    lis.append(name)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用列表推导式实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [[<span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;billy&#x27;</span>, <span class="string">&#x27;jeffer&#x27;</span>, <span class="string">&#x27;andrew&#x27;</span>, <span class="string">&#x27;wesley&#x27;</span>, <span class="string">&#x27;steven&#x27;</span>], [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;jill&#x27;</span>, <span class="string">&#x27;ada&#x27;</span>, <span class="string">&#x27;eveal&#x27;</span>, <span class="string">&#x27;eva&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>]]</span><br><span class="line">lis = [name <span class="keyword">for</span> line <span class="keyword">in</span> names <span class="keyword">for</span> name <span class="keyword">in</span> line <span class="keyword">if</span> name.count(<span class="string">&#x27;e&#x27;</span>) == <span class="number">2</span>]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="字典推导式习题"><a href="#字典推导式习题" class="headerlink" title="字典推导式习题"></a>字典推导式习题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：&#123;key:value <span class="keyword">for</span>循环 条件判断(可选)&#125;</span><br></pre></td></tr></table></figure>

<p>例1：使用字典推导式将[‘a’, ‘b’, ‘c’, ‘d’] 转换为 {0:’a’, 1:’b’, 2:’c’, 3:’d’}</p>
<ol>
<li><p>推导式使用range</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">dic = &#123;i:lis[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lis))&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>推导式使用enumerate</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">dic = &#123;i:j <span class="keyword">for</span> i, j <span class="keyword">in</span> enumerate(lis)&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>例2：将{‘jj’:’林俊杰’, ‘jay’:’周杰伦’, ‘jolin’:’蔡依林’}键与值对调形成新的字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;jj&#x27;</span>:<span class="string">&#x27;林俊杰&#x27;</span>, <span class="string">&#x27;jay&#x27;</span>:<span class="string">&#x27;周杰伦&#x27;</span>, <span class="string">&#x27;jolin&#x27;</span>:<span class="string">&#x27;蔡依林&#x27;</span>&#125; res = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items()&#125; print(res)</span><br></pre></td></tr></table></figure>



<h4 id="集合推导式习题"><a href="#集合推导式习题" class="headerlink" title="集合推导式习题"></a>集合推导式习题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">集合：不可重复、可哈希</span><br></pre></td></tr></table></figure>

<p>例：将以下列表去重[1, 3, 5, 3, 66, 4, 3, 5, 7]</p>
<ol>
<li><p>使用集合转换去重</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">s = set(lis)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用推导式去重</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">s = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> lis&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="生成器表达式和列表推导式的区别"><a href="#生成器表达式和列表推导式的区别" class="headerlink" title="生成器表达式和列表推导式的区别:"></a>生成器表达式和列表推导式的区别:</h3><ol>
<li><p>列表推导式比较耗内存. 一次性加载. 生成器表达式几乎不占用内存. 使用的时候才分 配和使用内存</p>
</li>
<li><p>得到的值不一样. 列列表推导式得到的是一个列表. 生成器表达式获取的是一个生成器.</p>
<hr>
</li>
</ol>
<p><strong>生成器表达式: (结果 for 变量 in 可迭代对象 if 条件筛选)</strong></p>
<p><strong>生成器表达式可以直接获取到生成器对象. 生成器对象可以直接进行for循环. 生成器具有惰性机制.</strong></p>
<p><strong>生成器的惰性机制: 生成器只有在访问的时候才取值. 说白了. 你找他要他才给你值. 不找他要. 他是不会执行的.</strong></p>
<p>下面放两个带坑面试题</p>
<p>1、以下代码运行结果是什么？(先不要看解释哟)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line">g = func() <span class="comment"># 生成器g</span></span><br><span class="line">g1 = (i <span class="keyword">for</span> i <span class="keyword">in</span> g) <span class="comment"># 生成器g1. 但是g1的数据来源于g</span></span><br><span class="line">g2 = (i <span class="keyword">for</span> i <span class="keyword">in</span> g1) <span class="comment"># 生成器g2. 来源g1</span></span><br><span class="line">print(list(g)) <span class="comment"># 获取g中的数据. 这时func()才会被执行. 打印111.获取到222. g完毕.</span></span><br><span class="line">print(list(g1)) <span class="comment"># 获取g1中的数据. g1的数据来源是g. 但是g已经取完了. g1 也就没有数据</span></span><br><span class="line">了</span><br><span class="line">print(list(g2)) <span class="comment"># 和g1同理</span></span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[222]</span><br><span class="line">[]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<p>2、以下代码运行结果是什么？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line">g = test()</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">5</span>, <span class="number">10</span>]:</span><br><span class="line">    g = (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g)</span><br><span class="line">print(list(g))</span><br></pre></td></tr></table></figure>

<p>答案：[20, 21, 22, 23]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">以上代码分析：</span><br><span class="line">首行add函数只是一个用来求和的迷惑函数</span><br><span class="line">向下看</span><br><span class="line">test()函数是一个生成器函数，可以看到它的值循坏下来为：<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">g = test()这行代码才开始获取生成器，然后继续向下看</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">5</span>, <span class="number">10</span>]:</span><br><span class="line">    g = (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g)</span><br><span class="line">这段代码我们来进行拆分一下变为：</span><br><span class="line"></span><br><span class="line">n=<span class="number">5</span></span><br><span class="line">g = (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g)</span><br><span class="line"></span><br><span class="line">n=<span class="number">10</span></span><br><span class="line">g = (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g)</span><br><span class="line"></span><br><span class="line">print(list(g))</span><br><span class="line">以上代码可以看出，n=<span class="number">5</span>以后，我们并没有取生成器的值，所以<span class="number">5</span>不会带进生成器表达式，只是执行了下一行代码g = (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g)，</span><br><span class="line">所以此时我们可以将代码再进行拼接下将n=<span class="number">10</span>后的生成器表达式后面的g给替换为(add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g)</span><br><span class="line">n=<span class="number">10</span></span><br><span class="line">g = (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> (add(n, i) <span class="keyword">for</span> i <span class="keyword">in</span> g))</span><br><span class="line"></span><br><span class="line">print(list(g))</span><br><span class="line">此时我们才取值</span><br><span class="line">所以可以把n等于<span class="number">10</span>带进去</span><br><span class="line">代码变为一下，为了区分循环变量i,我们将替换g表达式中的i改为index</span><br><span class="line">g = (add(<span class="number">10</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> (add(<span class="number">10</span>, index) <span class="keyword">for</span> index <span class="keyword">in</span> g))</span><br><span class="line">接下来我们一步一步开始走</span><br><span class="line">g = (add(<span class="number">10</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> (add(<span class="number">10</span>, index) <span class="keyword">for</span> index <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">继续</span><br><span class="line">g = (add(<span class="number">10</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>])</span><br><span class="line">继续g的值已经是<span class="number">20</span>,<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span></span><br><span class="line">print(list(g))</span><br><span class="line">最后转为列表，结果当然就是[<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>推导式</tag>
        <tag>列表推导式</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title>python之日志处理</title>
    <url>/e175f112.html</url>
    <content><![CDATA[<p>python记录日志非常简单，单文件日志3行代码即可完成写入日志</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;log.log&#x27;</span>,</span><br><span class="line">                    format=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">                    level=<span class="number">10</span>)</span><br><span class="line">logging.debug(<span class="string">&#x27;详细错误：debug&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;详细错误：info&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;详细错误：warning&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;详细错误：error&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;详细错误：critical&#x27;</span>)</span><br><span class="line">logging.log(<span class="number">11</span>,<span class="string">&#x27;详细错误：自定义的log&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码即可写入到log.log文件中</p>
<p>写入结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">34</span>:<span class="number">13</span> AM - root - DEBUG -日志:  详细错误：debug</span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">34</span>:<span class="number">13</span> AM - root - INFO -日志:  详细错误：info</span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">34</span>:<span class="number">13</span> AM - root - WARNING -日志:  详细错误：warning</span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">34</span>:<span class="number">13</span> AM - root - ERROR -日志:  详细错误：error</span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">34</span>:<span class="number">13</span> AM - root - CRITICAL -日志:  详细错误：critical</span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">34</span>:<span class="number">13</span> AM - root - Level <span class="number">11</span> -日志:  详细错误：自定义的log</span><br></pre></td></tr></table></figure>

<p>这种写入方式弊端很大，其一中文编码有问题，我在pycharm中测试时gbk写入的，直接乱码另外logging.basicConfig只有这一句配置代码，并无编码的参数；其二我们有时候不可能只有一个日志文件，可能根据功能，根据用户角色拥有不同的日志文件，这种方法就不可行了，接下来直接上第二种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">handle = logging.FileHandler(filename=<span class="string">&#x27;log1.log&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">fmt = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(module)s：%(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">handle.setFormatter(fmt)</span><br><span class="line"></span><br><span class="line">log1 = logging.Logger(<span class="string">&#x27;s1&#x27;</span>, level=<span class="number">10</span>)</span><br><span class="line">log1.addHandler(handle)</span><br><span class="line"></span><br><span class="line">log1.error(<span class="string">&#x27;我是自定义的错误&#x27;</span>)</span><br><span class="line">log1.log(<span class="number">12</span>, <span class="string">&#x27;我才是的呢啊哈哈哈哈&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>写入日志如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">56</span>,<span class="number">530</span> - s1 - ERROR - <span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">56</span>,<span class="number">530</span> - s1 - Level <span class="number">12</span> -</span><br></pre></td></tr></table></figure>

<p>此种方法既解决了中文乱码的问题，又解决了多日志文件的问题。</p>
<p>其实在此基础上我们可以扩展下日志内容，毕竟直接写入错误内容，分析日志的时候并不能很直观的知道哪个文件，甚至哪行代码出现了错误，此时我们可以借助traceback模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">traceback</span><br><span class="line">handle2 = logging.FileHandler(===)</span><br><span class="line">fmt = logging.Formatter()</span><br><span class="line">handle2.setFormatter(fmt)</span><br><span class="line"></span><br><span class="line">log2 = logging.Logger(=)</span><br><span class="line">log2.addHandler(handle2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    name</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    error_info = traceback.format_exc()</span><br><span class="line">    log2.error(error_info)</span><br></pre></td></tr></table></figure>

<p>写入日志内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-12</span> <span class="number">10</span>:<span class="number">43</span>:<span class="number">50</span>,<span class="number">477</span> - s2 - ERROR - Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;E:/site/python/.py&quot;</span>, line <span class="number">46</span>, <span class="keyword">in</span>     name</span><br><span class="line">NameError: name <span class="string">&#x27;name&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>

<p>这样很详细的将错误行也给写入到了日志中，选择哪种方法还是要看自己需求</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python日志处理</tag>
        <tag>logging</tag>
      </tags>
  </entry>
  <entry>
    <title>python判断模块(类、对象)是否有该成员or获取模块成员(反射实例)</title>
    <url>/b71974aa.html</url>
    <content><![CDATA[<p>引入模块，获取该模块成员，如果是变量则打印变量，如果是函数则执行函数</p>
<p>**<code>hasattr(module, member)</code>**：判断<code>module</code>模块中是否包含<code>member</code>成员</p>
<p>**<code>getattr(module, member)</code>**：获取<code>module</code>模块中的<code>member</code>成员</p>
<p>**<code>setattr(module, member, value)</code>**：在<code>module</code>模块中设置<code>member</code>成员并将赋值为<code>value</code>(<code>value</code>可为函数)</p>
<p>**<code>delattr(module, member)</code>**：删除<code>module</code>模块中的<code>member</code>成员</p>
<p>**<code>isinstance(func, FuncionType)</code>**：判断<code>func</code>是否是一个函数，<code>FunctionType</code>需要引入该模块</p>
<a id="more"></a>

<p>模块<code>my_module</code>文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;Tony&#x27;</span></span><br><span class="line">city = <span class="string">&#x27;中国 - 上海&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;跑的好快啊！！！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;工作好累啊！！！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;玩的开心啊！！！&#x27;</span></span><br></pre></td></tr></table></figure>

<p>引入模块代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> my_moudle <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> FunctionType</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    handle = input(<span class="string">&#x27;请输入您要的操作：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 判断该模块是否有该成员</span></span><br><span class="line">    <span class="keyword">if</span>(hasattr(m, handle)):</span><br><span class="line">        <span class="comment"># 获取该成员</span></span><br><span class="line">        member = getattr(m, handle)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否是一个函数</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(member, FunctionType):</span><br><span class="line">            print(member())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(member)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;没有您要的操作&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>面向对象反射实例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;托尼&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;成员方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">v1 = getattr(Obj, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">print(v1)</span><br><span class="line">v2 = getattr(Obj, <span class="string">&#x27;func&#x27;</span>)</span><br><span class="line">v2(self)</span><br><span class="line"></span><br><span class="line">o = Obj()</span><br><span class="line">v3 = getattr(o, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">print(v3)</span><br><span class="line">v4 = getattr(o, <span class="string">&#x27;func&#x27;</span>)</span><br><span class="line">v4()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础使用示例</title>
    <url>/ccde56eb.html</url>
    <content><![CDATA[<p>重温一些常用的<code>python</code>使用基础，示例简单明了。</p>
<a id="more"></a>

<h2 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a><code>python</code>基础</h2><p><code>Python</code> 基础主要总结<code>Python</code> 常用内置函数；<code>Python</code> 独有的语法特性、关键词<br><code>nonlocal</code>, <code>global</code> 等；内置数据结构包括：列表(<code>list</code>), 字典(<code>dict</code>), 集合(<code>set</code>), 元组(<code>tuple</code>)<br>以及相关的高级模块<code>collections</code> 中的<code>Counter</code>, <code>namedtuple</code>, <code>defaultdict</code>，<br><code>heapq</code> 模块。</p>
<h4 id="求绝对值"><a href="#求绝对值" class="headerlink" title="求绝对值"></a>求绝对值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abs(<span class="number">-996.25</span>)</span><br><span class="line"><span class="number">996.25</span></span><br></pre></td></tr></table></figure>

<h4 id="元素都为真"><a href="#元素都为真" class="headerlink" title="元素都为真"></a>元素都为真</h4><p>接受一个迭代器，如果迭代器的所有元素都为真，那么返回True，否则返回False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">all([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">all([<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="元素至少一个为真"><a href="#元素至少一个为真" class="headerlink" title="元素至少一个为真"></a>元素至少一个为真</h4><p>接受一个迭代器，如果迭代器里至少有一个元素为真，那么返回True，否则返回False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">any([<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, [], ()])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">any([<span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>, [], ()])</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十进制转二进制</span></span><br><span class="line">bin(<span class="number">1000</span>)</span><br><span class="line"><span class="string">&#x27;0b1111101000&#x27;</span></span><br><span class="line"><span class="comment"># 十进制转八进制</span></span><br><span class="line">oct(<span class="number">1000</span>)</span><br><span class="line"><span class="string">&#x27;0o1750&#x27;</span></span><br><span class="line"><span class="comment"># 十进制转十六进制</span></span><br><span class="line">hex(<span class="number">1000</span>)</span><br><span class="line"><span class="string">&#x27;0x3e8&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="判断真假"><a href="#判断真假" class="headerlink" title="判断真假"></a>判断真假</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bool([[]])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">bool(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">bool(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">bool([<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串转字节"><a href="#字符串转字节" class="headerlink" title="字符串转字节"></a>字符串转字节</h4><p>将一个字符串转换成字节类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello中国world&#x27;</span></span><br><span class="line">bytes(s, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;hello\xe4\xb8\xad\xe5\x9b\xbdworld&#x27;</span></span><br><span class="line">s.encode(encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;hello\xe4\xb8\xad\xe5\x9b\xbdworld&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Asall与十进制转换"><a href="#Asall与十进制转换" class="headerlink" title="Asall与十进制转换"></a><code>Asall</code>与十进制转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看十进制整数对应的ASCII 字符</span></span><br><span class="line">chr(<span class="number">90</span>)</span><br><span class="line"><span class="string">&#x27;Z&#x27;</span></span><br><span class="line"><span class="comment"># 查看某个ASCII 字符对应的十进制数</span></span><br><span class="line">ord(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"><span class="number">89</span></span><br></pre></td></tr></table></figure>

<h4 id="转字典"><a href="#转字典" class="headerlink" title="转字典"></a>转字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict(a=<span class="string">&#x27;A&#x27;</span>, b=<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line">dict()</span><br><span class="line">&#123;&#125;</span><br><span class="line">dict(a=<span class="string">&#x27;A&#x27;</span>, b=<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line">dict(zip([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]))</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br><span class="line">dict([(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;B&#x27;</span>)])</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看对象所有方法"><a href="#查看对象所有方法" class="headerlink" title="查看对象所有方法"></a>查看对象所有方法</h4><p>不带参数时返回当前范围内的变量、方法和定义的类型列表；带参数时返回参数的属性，<br>方法列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">            self.name = name</span><br><span class="line">            self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;姓名：%s，年龄：%s&#x27;</span> % (self.name, self.age)</span><br><span class="line">...</span><br><span class="line">obj = Stu(<span class="string">&#x27;张宝民&#x27;</span>, <span class="number">68</span>)</span><br><span class="line">print(obj)</span><br><span class="line">姓名：张宝民，年龄：<span class="number">68</span></span><br><span class="line">dir(obj)</span><br><span class="line">[<span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="取商和余数"><a href="#取商和余数" class="headerlink" title="取商和余数"></a>取商和余数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">divmod(<span class="number">86</span>, <span class="number">15</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="number">11</span>)</span><br></pre></td></tr></table></figure>

<h4 id="计算表达式"><a href="#计算表达式" class="headerlink" title="计算表达式"></a>计算表达式</h4><p>将字符串<code>str</code> 当成有效的表达式来求值并返回计算结果取出字符串中内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eval(<span class="string">&#x27;2+5-3*8&#x27;</span>)</span><br><span class="line"><span class="number">-17</span></span><br></pre></td></tr></table></figure>

<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>在函数中设定过滤条件，迭代元素，保留返回值为True 的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = filter(<span class="keyword">lambda</span> x:x&gt;<span class="number">5</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>])</span><br><span class="line">print(lis)</span><br><span class="line">&lt;filter object at <span class="number">0x0000028CDCB8E9C8</span>&gt;</span><br><span class="line">list(lis)</span><br><span class="line">[<span class="number">8</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>格式化输出字符串，<code>format(value, formatspec)</code> 实质上是调用了<code>value</code> 的*``format(<br>formatspec)` 方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;我叫:&#123;0&#125;， 今年：&#123;1&#125;岁&#x27;</span>.format(<span class="string">&#x27;鱼大仙&#x27;</span>, <span class="number">16</span>))</span><br><span class="line">我叫:鱼大仙， 今年：<span class="number">16</span>岁</span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt;<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.format(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)    <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.format(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.format(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">&#x27;world hello world&#x27;</span></span><br><span class="line">print(<span class="string">&quot;姓名：&#123;name&#125;, 年龄 &#123;age&#125;&quot;</span>.format(name=<span class="string">&quot;张三&quot;</span>, age=<span class="number">20</span>))</span><br><span class="line">姓名：张三, 年龄 <span class="number">20</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># 通过字典设置参数</span></span><br><span class="line">site = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;</span><br><span class="line">print(<span class="string">&quot;姓名：&#123;name&#125;, 年龄 &#123;age&#125;&quot;</span>.format(**site))</span><br><span class="line">姓名：张三, 年龄 <span class="number">20</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># 通过列表索引设置参数</span></span><br><span class="line">my_list = [<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>]</span><br><span class="line">print(<span class="string">&quot;姓名：&#123;0[0]&#125;, 年龄 &#123;0[1]&#125;&quot;</span>.format(my_list))  <span class="comment"># &quot;0&quot; 是必须的</span></span><br><span class="line">姓名：张三, 年龄 <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#传入对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssignValue</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line">...</span><br><span class="line">my_value = AssignValue(<span class="number">6</span>)</span><br><span class="line">print(<span class="string">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.format(my_value))  <span class="comment"># &quot;0&quot; 是可选的</span></span><br><span class="line">value 为: <span class="number">6</span></span><br><span class="line"><span class="comment"># 数字格式化</span></span><br><span class="line">print(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.format(<span class="number">3.1415926</span>));</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>数字</th>
<th>格式</th>
<th>输出</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>3.1415926</td>
<td>{:.2f}</td>
<td>3.14</td>
<td>保留小数点后两位</td>
</tr>
<tr>
<td>3.1415926</td>
<td>{:+.2f}</td>
<td>+3.14</td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td>-1</td>
<td>{:+.2f}</td>
<td>-1.00</td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td>2.71828</td>
<td>{:.0f}</td>
<td>3</td>
<td>不带小数</td>
</tr>
<tr>
<td>5</td>
<td>{:0&gt;2d}</td>
<td>05</td>
<td>数字补零 (填充左边, 宽度为2)</td>
</tr>
<tr>
<td>5</td>
<td>{:x&lt;4d}</td>
<td>5xxx</td>
<td>数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td>10</td>
<td>{:x&lt;4d}</td>
<td>10xx</td>
<td>数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td>1000000</td>
<td>{:,}</td>
<td>1,000,000</td>
<td>以逗号分隔的数字格式</td>
</tr>
<tr>
<td>0.25</td>
<td>{:.2%}</td>
<td>25.00%</td>
<td>百分比格式</td>
</tr>
<tr>
<td>1000000000</td>
<td>{:.2e}</td>
<td>1.00e+09</td>
<td>指数记法</td>
</tr>
<tr>
<td>13</td>
<td>{:&gt;10d}</td>
<td>13</td>
<td>右对齐 (默认, 宽度为10)</td>
</tr>
<tr>
<td>13</td>
<td>{:&lt;10d}</td>
<td>13</td>
<td>左对齐 (宽度为10)</td>
</tr>
<tr>
<td>13</td>
<td>{:^10d}</td>
<td>13</td>
<td>中间对齐 (宽度为10)</td>
</tr>
<tr>
<td>11</td>
<td>‘{:b}’.format(11) ‘{:d}’.format(11) ‘{:o}’.format(11) ‘{:x}’.format(11) ‘{:#x}’.format(11) ‘{:#X}’.format(11)</td>
<td>1011 11 13 b 0xb 0XB</td>
<td>进制</td>
</tr>
</tbody></table>
<p><strong>^</strong>, <strong>&lt;**, **&gt;</strong> 分别是居中、左对齐、右对齐，后面带宽度， <strong>:</strong> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p>
<p><strong>+</strong> 表示在正数前显示 **+**，负数前显示 **-**； （空格）表示在正数前加空格</p>
<p>b、d、o、x 分别是二进制、十进制、八进制、十六进制。</p>
<p>此外我们可以使用大括号 <strong>{}</strong> 来转义大括号，如下实例：</p>
<h4 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(obj)</span><br><span class="line"><span class="number">2804021782472</span></span><br></pre></td></tr></table></figure>

<h4 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a><code>isinstance</code></h4><p>判断<code>object</code> 是否为类<code>classinfo</code> 的实例，是返回<code>true</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(obj, Stu)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基础使用示例</tag>
        <tag>python求绝对值</tag>
        <tag>python判断元素都为真</tag>
        <tag>python进制转换</tag>
        <tag>python字符串字节转换</tag>
      </tags>
  </entry>
  <entry>
    <title>python处理excel之第三方库openpyxl</title>
    <url>/b964d625.html</url>
    <content><![CDATA[<p>openpyxl模块是一个读写Excel 2010文档的Python库，如果要处理更早格式的Excel文档，需要用到额外的库，openpyxl是一个比较综合的工具，能够同时读取和修改Excel文档。其他很多的与Excel相关的项目基本只支持读或者写Excel一种功能。</p>
<a id="more"></a>

<p>python 读写 excel 有好多选择，但是，方便操作的库不多，在我尝试了几个库之后，我觉得两个比较方便的库分别是 xlrd/xlwt、openpyxl。</p>
<p>之所以推荐两个库是因为这两个库分别操作的是不同版本的 excel，xlrd 操作的是 xls/xlxs 格式的 excel，而 openpyxl 只支持 xlxs 格式的excel，openpyxl 使用起来会更方便一些，所以如果你只操作 xlxs 文件的话，那么可以优先选择 openpyxl，如果要兼容 xls 的话，那就用 xlrd/xlwt 吧。<br>本处使用openpyxl来实现</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure>

<p>如果excel里面有图片(jpeg, png, bmp,…),需要安装图片处理模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure>

<h2 id="excel写"><a href="#excel写" class="headerlink" title="excel写"></a>excel写</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line">wb = Workbook()</span><br></pre></td></tr></table></figure>

<h3 id="创建一个新的工作薄"><a href="#创建一个新的工作薄" class="headerlink" title="创建一个新的工作薄"></a>创建一个新的工作薄</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ws1 = wb.create_sheet(<span class="string">&quot;Mysheet&quot;</span>)  <span class="comment">#默认最后一个</span></span><br><span class="line">ws2 = wb.create_sheet(<span class="string">&quot;Mysheet&quot;</span>, <span class="number">0</span>) <span class="comment">#第一个</span></span><br></pre></td></tr></table></figure>

<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wb.save(&#39;balances.xlsx&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="修改工作薄的名称"><a href="#修改工作薄的名称" class="headerlink" title="修改工作薄的名称"></a>修改工作薄的名称</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ws.title &#x3D; &quot;New Title&quot;</span><br></pre></td></tr></table></figure>

<h2 id="excel-写数据"><a href="#excel-写数据" class="headerlink" title="excel 写数据"></a>excel 写数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ws[<span class="string">&#x27;A4&#x27;</span>]=<span class="number">4</span> <span class="comment">#这将返回A4处的单元格，如果尚不存在，则创建一个单元格。值可以直接分配</span></span><br><span class="line">ws.cell(row=<span class="number">4</span>, column=<span class="number">2</span>, value=<span class="number">10</span>) <span class="comment"># 也可以通过cell来进行写入，通过行数和列数来找到单元格所在的位置，通过value来赋值</span></span><br></pre></td></tr></table></figure>

<h3 id="append函数"><a href="#append函数" class="headerlink" title="append函数"></a>append函数</h3><p>可以一次添加多行数据，从第一行空白行开始（下面都是空白行）写入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一行</span></span><br><span class="line">row = [<span class="number">1</span> ,<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">sheet.append(row)</span><br><span class="line"><span class="comment">## execl读</span></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook  <span class="comment">#导入模块</span></span><br><span class="line">wb = load_workbook(filename = <span class="string">&#x27;balances.xlsx&#x27;</span>) <span class="comment">#打开文件,默认可读写，若有需要可以指定write_only和read_only为True</span></span><br><span class="line">sheet = wb[<span class="string">&#x27;test2&#x27;</span>] <span class="comment">#找到工作表</span></span><br><span class="line">print(sheet[<span class="string">&#x27;B4&#x27;</span>].value) <span class="comment">#输出内容</span></span><br><span class="line"><span class="comment"># B9处写入平均值</span></span><br><span class="line">sheet[<span class="string">&#x27;B9&#x27;</span>] = <span class="string">&#x27;=AVERAGE(B2:B8)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>但是如果是读取的时候需要加上data_only=True这样读到B9返回的就是数字，如果不加这个参数，返回的将是公式本身’=AVERAGE(B2:B8)’</p>
<h3 id="获取所有的工作薄名称"><a href="#获取所有的工作薄名称" class="headerlink" title="获取所有的工作薄名称"></a>获取所有的工作薄名称</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(wb.sheetnames)</span><br></pre></td></tr></table></figure>

<h3 id="获取其中一个工作薄名称"><a href="#获取其中一个工作薄名称" class="headerlink" title="获取其中一个工作薄名称"></a>获取其中一个工作薄名称</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> wb:</span><br><span class="line">    print(sheet)</span><br><span class="line">wb[<span class="string">&quot;New Title&quot;</span>]  <span class="comment">#直接获取名称为New Title的工作薄</span></span><br></pre></td></tr></table></figure>

<h3 id="获得最大行和最大列"><a href="#获得最大行和最大列" class="headerlink" title="获得最大行和最大列"></a>获得最大行和最大列</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(sheet.max_row)</span><br><span class="line">print(sheet.max_column)</span><br></pre></td></tr></table></figure>

<h3 id="获取行和列"><a href="#获取行和列" class="headerlink" title="获取行和列"></a>获取行和列</h3><p>sheet.rows为生成器, 里面是每一行的数据，每一行又由一个tuple包裹。<br>sheet.columns类似，不过里面是每个tuple是每一列的单元格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因为按行，所以返回A1, B1, C1这样的顺序</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">        print(cell.value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A1, A2, A3这样的顺序</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> sheet.columns:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> column:</span><br><span class="line">        print(cell.value)</span><br></pre></td></tr></table></figure>

<p>上面的代码就可以获得所有单元格的数据。如果要获得某行的数据呢？给其一个索引就行了，因为sheet.rows是生成器类型，不能使用索引，转换成list之后再使用索引，list(sheet.rows)[2]这样就获取到第三行的tuple对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> list(sheet.rows)[<span class="number">2</span>]:</span><br><span class="line">    print(cell.value)</span><br></pre></td></tr></table></figure>

<p>如何获得任意区间的单元格？</p>
<p>可以使用range函数，下面的写法，获得了以A1为左上角，B3为右下角矩形区域的所有单元格。注意range从1开始的，因为在openpyxl中为了和Excel中的表达方式一致，并不和编程语言的习惯以0表示第一个值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        print(sheet.cell(row=i, column=j).value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># out</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>还可以像使用切片那样使用。sheet[‘A1’:’B3’]返回一个tuple，该元组内部还是元组，由每行的单元格构成一个元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> row_cell <span class="keyword">in</span> sheet_ranges[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;B3&#x27;</span>]:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row_cell:</span><br><span class="line">        print(cell)</span><br></pre></td></tr></table></figure>

<h2 id="设置单元格风格–Style"><a href="#设置单元格风格–Style" class="headerlink" title="设置单元格风格–Style"></a>设置单元格风格–Style</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">先导入需要的类<span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, colors, Alignment</span><br></pre></td></tr></table></figure>

<p>分别可指定字体相关，颜色，和对齐方式。</p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bold_itatic_24_font = Font(name=<span class="string">&#x27;等线&#x27;</span>, size=<span class="number">24</span>, italic=<span class="literal">True</span>, color=colors.RED, bold=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sheet[<span class="string">&#x27;A1&#x27;</span>].font = bold_itatic_24_font</span><br></pre></td></tr></table></figure>

<h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p>也是直接使用cell的属性aligment，这里指定垂直居中和水平居中。除了center，还可以使用right、left等等参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置B1中的数据垂直居中和水平居中</span></span><br><span class="line">sheet[<span class="string">&#x27;B1&#x27;</span>].alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>设置行高和列宽<br>有时候数据太长显示不完，就需要拉长拉高单元格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第2行行高</span></span><br><span class="line">sheet.row_dimensions[<span class="number">2</span>].height = <span class="number">40</span></span><br><span class="line"><span class="comment"># C列列宽</span></span><br><span class="line">sheet.column_dimensions[<span class="string">&#x27;C&#x27;</span>].width = <span class="number">30</span></span><br></pre></td></tr></table></figure>

<h3 id="合并和拆分单元格"><a href="#合并和拆分单元格" class="headerlink" title="合并和拆分单元格"></a>合并和拆分单元格</h3><p>所谓合并单元格，即以合并区域的左上角的那个单元格为基准，覆盖其他单元格使之称为一个大的单元格。<br>相反，拆分单元格后将这个大单元格的值返回到原来的左上角位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并单元格， 往左上角写入数据即可</span></span><br><span class="line">sheet.merge_cells(<span class="string">&#x27;B1:G1&#x27;</span>) <span class="comment"># 合并一行中的几个单元格</span></span><br><span class="line">sheet.merge_cells(<span class="string">&#x27;A1:C3&#x27;</span>) <span class="comment"># 合并一个矩形区域中的单元格</span></span><br></pre></td></tr></table></figure>

<p>合并后只可以往左上角写入数据，也就是区间中:左边的坐标。<br>如果这些要合并的单元格都有数据，只会保留左上角的数据，其他则丢弃。换句话说若合并前不是在左上角写入数据，合并后单元格中不会有数据。<br>以下是拆分单元格的代码。拆分后，值回到A1位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sheet.unmerge_cells(<span class="string">&#x27;A1:C3&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python处理excel之第三方库openpyxl</tag>
        <tag>openpyxl</tag>
        <tag>excel处理</tag>
        <tag>python操作excel</tag>
      </tags>
  </entry>
  <entry>
    <title>python多人登录上传下载其他功能后续加入</title>
    <url>/4c46dfcd.html</url>
    <content><![CDATA[<p>这我们来一起做一个简单的<code>ftp</code>系统，功能要求如下：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <em>1、多用户同时登陆</em></li>
<li><input checked="" disabled="" type="checkbox"> <em>2、用户登录，加密认证</em></li>
<li><input checked="" disabled="" type="checkbox"> <em>3、上传、下载文件，保证文件一致性</em></li>
<li><input checked="" disabled="" type="checkbox"> <em>4、传输过程中实现进度条</em></li>
<li><input disabled="" type="checkbox"> <em>5、不同用户目录不同，且只能访问用户自己目录</em></li>
<li><input disabled="" type="checkbox"> <em>6、对用户进行磁盘调配、不同用户调配可以不同</em></li>
<li><input disabled="" type="checkbox"> <em>7、用户登录server后可在其权限目录下子目录切换</em></li>
<li><input disabled="" type="checkbox"> <em>8、查看当前用户目录下文件，新建文件夹</em></li>
<li><input disabled="" type="checkbox"> <em>9、删除文件和空文件夹</em></li>
<li><input checked="" disabled="" type="checkbox"> <em>10、充分使用面向对象知识</em></li>
<li><input checked="" disabled="" type="checkbox"> <em>11、支持断点续传</em></li>
</ul>
<a id="more"></a>

<p>其中5/6、7/8/9暂时缺失，用户登录没有做验证，后面做验证</p>
<p>系统结构如下：</p>
<p><img data-src="/images/1556154382789804.png" alt="image.png"></p>
<p><code>bin-》index</code>为入口文件</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> core.handle <span class="keyword">import</span> run</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>

<p><code>config</code>存放配置文件，基本上暂时用到很少，<code>sys</code>内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IP_PORT = (<span class="string">&#x27;10.10.10.103&#x27;</span>, <span class="number">9998</span>)</span><br><span class="line">UPLOAD_PATH = <span class="string">&#x27;../uploads&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>core</code>中存放核心文件，代码量较少，都放到了<code>handle</code>中，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">功能列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, conn</span>):</span></span><br><span class="line">        <span class="comment"># 客户端连接句柄</span></span><br><span class="line">        self.conn = conn</span><br><span class="line">        self.username = <span class="literal">None</span></span><br><span class="line">        self.pwd = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self, username, pwd</span>):</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.pwd = pwd</span><br><span class="line"></span><br><span class="line">    <span class="comment"># md5加密文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_md5</span>(<span class="params">self, file_path</span>):</span></span><br><span class="line">        md5 = hashlib.md5(<span class="string">b&#x27;tony&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> open(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                md5.update(line)</span><br><span class="line">        <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">self, file_info</span>):</span></span><br><span class="line">        <span class="comment"># 文件上传目录</span></span><br><span class="line">        file_dir = os.path.join(sys.UPLOAD_PATH, self.username)</span><br><span class="line">        <span class="comment"># 文件名称</span></span><br><span class="line">        file_name = os.path.basename(file_info[<span class="string">&#x27;file_path&#x27;</span>])</span><br><span class="line">        <span class="comment"># 已上传文件路径</span></span><br><span class="line">        file_md5_path = os.path.join(file_dir, file_info[<span class="string">&#x27;file_md5&#x27;</span>])</span><br><span class="line">        print(file_info, file_dir, <span class="string">&#x27;执行了服务器上传&#x27;</span>)</span><br><span class="line">        <span class="comment"># 用户目录不存在则创建用户目录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_dir):</span><br><span class="line">            os.makedirs(file_dir)</span><br><span class="line">        <span class="comment"># 获取已上传的文件大小，如果没有上传则已上传大小为0</span></span><br><span class="line">        exists_size = os.path.getsize(file_md5_path) <span class="keyword">if</span> os.path.exists(file_md5_path) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 发送已上传文件大小</span></span><br><span class="line">        self.conn.send(struct.pack(<span class="string">&#x27;i&#x27;</span>, exists_size))</span><br><span class="line">        <span class="keyword">with</span> open(file_md5_path, <span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> exists_size &lt; file_info[<span class="string">&#x27;file_size&#x27;</span>]:</span><br><span class="line">                data = self.conn.recv(<span class="number">1024</span>)</span><br><span class="line">                exists_size += len(data)</span><br><span class="line">                f.write(data)</span><br><span class="line">        os.rename(file_md5_path, os.path.join(file_dir, file_name))</span><br><span class="line">    <span class="comment"># 下载文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self, cmd_info</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件下载目录</span></span><br><span class="line">        file_dir = os.path.join(sys.UPLOAD_PATH, self.username)</span><br><span class="line">        <span class="comment"># 获取下载文件路径</span></span><br><span class="line">        file = os.path.join(file_dir, cmd_info[<span class="string">&#x27;file_path&#x27;</span>])</span><br><span class="line">        print(cmd_info, file_dir, file, os.path.exists(file))</span><br><span class="line">        <span class="comment"># 判断要下载的文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file):</span><br><span class="line">            self.conn.send(pickle.dumps(&#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">1004</span>, <span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;您要下载的文件不存在&#x27;</span>&#125;))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_size = os.path.getsize(file)</span><br><span class="line">            print(file_size)</span><br><span class="line">            <span class="comment"># 发送给客户端下载文件信息，用来获取文件已下载大小</span></span><br><span class="line">            self.conn.send(pickle.dumps(&#123;<span class="string">&#x27;file_size&#x27;</span>:file_size, <span class="string">&#x27;file_md5&#x27;</span>:self.file_md5(file)&#125;))</span><br><span class="line">            <span class="comment"># 接收客户端发来的文件已下载大小</span></span><br><span class="line">            exists_size = struct.unpack(<span class="string">&#x27;i&#x27;</span>, self.conn.recv(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 发送文件</span></span><br><span class="line">            <span class="keyword">with</span> open(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="comment"># 移动文件指针至已下载过的位置</span></span><br><span class="line">                f.seek(exists_size)</span><br><span class="line">                <span class="keyword">while</span> exists_size &lt; file_size:</span><br><span class="line">                    <span class="comment"># 每次读取1024大小</span></span><br><span class="line">                    data = f.read(<span class="number">1024</span>)</span><br><span class="line">                    <span class="comment"># 累加到已下载大小</span></span><br><span class="line">                    exists_size += len(data)</span><br><span class="line">                    <span class="comment"># 发送当次读取数据</span></span><br><span class="line">                    self.conn.send(data)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">主程序</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.client_address, <span class="string">&#x27;已经成功连接至服务器……&#x27;</span>)</span><br><span class="line">        action = Action(self.request)</span><br><span class="line">        <span class="keyword">if</span> action.username:</span><br><span class="line">            self.request.send(pickle.dumps(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;您已登录，请输入您要执行的命令：&#x27;</span>&#125;))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.request.send(pickle.dumps(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1001</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;请输入用户名和密码：&#x27;</span>&#125;))</span><br><span class="line">            pickle_user = pickle.loads(self.request.recv(<span class="number">1024</span>))</span><br><span class="line">            action.login(pickle_user[<span class="string">&#x27;username&#x27;</span>], pickle_user[<span class="string">&#x27;pwd&#x27;</span>])</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cmd_info = pickle.loads(self.request.recv(<span class="number">1024</span>))</span><br><span class="line">                <span class="keyword">if</span> hasattr(action, cmd_info[<span class="string">&#x27;cmd&#x27;</span>]):</span><br><span class="line">                    getattr(action, cmd_info[<span class="string">&#x27;cmd&#x27;</span>])(cmd_info)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line">        print(self.client_address, <span class="string">&#x27;已经断开服务器……&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    server = socketserver.ThreadingTCPServer(sys.IP_PORT, Server)</span><br><span class="line">    server.serve_forever()</span><br><span class="line">    print(<span class="string">&#x27;系统开始运行……&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>log</code>日志目录暂时没写入，<code>uploads</code>为上传文件夹根目录，里面存放各用户上传的数据。</p>
<p>临时客户端代码直接写到了<code>client</code>文件中，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> sys</span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect(sys.IP_PORT)</span><br><span class="line"><span class="comment"># md5加密文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_md5</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    md5 = hashlib.md5(<span class="string">b&#x27;tony&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            md5.update(line)</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传进度条</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_progress</span>(<span class="params">current_size, total_size</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;\r总大小：&#123;&#125;【&#123;:50&#125;】已上传：&#123;:.2f&#125;%&#x27;</span>.format(total_size, <span class="string">&#x27;=&#x27;</span> * (current_size * <span class="number">50</span> // total_size), current_size/total_size*<span class="number">100</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 发送文件内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span>(<span class="params">file_path, exists_size = <span class="number">0</span></span>):</span></span><br><span class="line">    <span class="comment"># 获取文件大小</span></span><br><span class="line">    file_size = os.path.getsize(file_path)</span><br><span class="line">    <span class="comment"># 读取文件</span></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 指针移动到已经上传大小的位置</span></span><br><span class="line">        f.seek(exists_size)</span><br><span class="line">        <span class="keyword">while</span> exists_size &lt; file_size:</span><br><span class="line">            <span class="comment"># 每次读取1024</span></span><br><span class="line">            data = f.read(<span class="number">1024</span>)</span><br><span class="line">            <span class="comment"># 累计读取的大小</span></span><br><span class="line">            exists_size += len(data)</span><br><span class="line">            <span class="comment"># 发送当次循环数据</span></span><br><span class="line">            client.send(data)</span><br><span class="line">            <span class="comment"># 显示进度条</span></span><br><span class="line">            upload_progress(exists_size, file_size)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    <span class="comment"># 封装文件信息</span></span><br><span class="line">    cmd_info = &#123;<span class="string">&#x27;cmd&#x27;</span> : <span class="string">&#x27;upload&#x27;</span>, <span class="string">&#x27;file_path&#x27;</span>:file_path, <span class="string">&#x27;file_size&#x27;</span>:os.path.getsize(file_path), <span class="string">&#x27;file_md5&#x27;</span>:file_md5(file_path)&#125;</span><br><span class="line">    print(cmd_info)</span><br><span class="line">    <span class="comment"># 序列化文件信息</span></span><br><span class="line">    cmd_info_picle = pickle.dumps(cmd_info)</span><br><span class="line">    <span class="comment"># 发送文件信息</span></span><br><span class="line">    client.send(cmd_info_picle)</span><br><span class="line">    <span class="comment"># 接收已上传大小</span></span><br><span class="line">    exists_size = struct.unpack(<span class="string">&#x27;i&#x27;</span>, client.recv(<span class="number">1024</span>))[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 发送文件</span></span><br><span class="line">    send_file(file_path, exists_size)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    <span class="comment"># 封装下载信息</span></span><br><span class="line">    cmd_info = &#123;<span class="string">&#x27;cmd&#x27;</span>: <span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;file_path&#x27;</span>: file_path&#125;</span><br><span class="line">    <span class="comment"># 序列化下载信息</span></span><br><span class="line">    cmd_info_picle = pickle.dumps(cmd_info)</span><br><span class="line">    <span class="comment"># 发送下载信息</span></span><br><span class="line">    client.send(cmd_info_picle)</span><br><span class="line">    <span class="comment"># 接收服务器返回响应</span></span><br><span class="line">    responses = pickle.loads(client.recv(<span class="number">1024</span>))</span><br><span class="line">    print(responses)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;code&#x27;</span> <span class="keyword">in</span> responses <span class="keyword">and</span> responses[<span class="string">&#x27;code&#x27;</span>] == <span class="number">1004</span>:</span><br><span class="line">        print(responses[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exists_size = os.path.getsize(responses[<span class="string">&#x27;file_md5&#x27;</span>]) <span class="keyword">if</span> os.path.exists(responses[<span class="string">&#x27;file_md5&#x27;</span>]) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        client.send(struct.pack(<span class="string">&#x27;i&#x27;</span>, exists_size))</span><br><span class="line">        <span class="comment"># 接收文件</span></span><br><span class="line">        <span class="keyword">with</span> open(responses[<span class="string">&#x27;file_md5&#x27;</span>], <span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> exists_size &lt; responses[<span class="string">&#x27;file_size&#x27;</span>]:</span><br><span class="line">                <span class="comment"># 每次接收的数据</span></span><br><span class="line">                data = client.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="comment"># 累加到总接收大小</span></span><br><span class="line">                exists_size += len(data)</span><br><span class="line">                <span class="comment"># 写入文件</span></span><br><span class="line">                f.write(data)</span><br><span class="line">                upload_progress(exists_size, responses[<span class="string">&#x27;file_size&#x27;</span>])</span><br><span class="line">        os.rename(responses[<span class="string">&#x27;file_md5&#x27;</span>], cmd_info[<span class="string">&#x27;file_path&#x27;</span>])</span><br><span class="line">ret = pickle.loads(client.recv(<span class="number">1024</span>))</span><br><span class="line">print(ret)</span><br><span class="line"><span class="keyword">if</span> ret[<span class="string">&#x27;code&#x27;</span>] == <span class="number">1001</span>:</span><br><span class="line">    username = input(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">    pwd     = input(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">    client.send(pickle.dumps(&#123;<span class="string">&#x27;username&#x27;</span>:username, <span class="string">&#x27;pwd&#x27;</span>:pwd&#125;))</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">&#x27;----------------------------------&#x27;</span>)</span><br><span class="line">    handle, file_path = input(<span class="string">&#x27;请输入您要执行的命令：&#x27;</span>).split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> handle == <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        upload(file_path)</span><br><span class="line">    <span class="keyword">if</span> handle == <span class="string">&#x27;download&#x27;</span>:</span><br><span class="line">        download(file_path)</span><br><span class="line"></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>

<p>后期整理以上代码</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>断点续传</tag>
      </tags>
  </entry>
  <entry>
    <title>python开发代码规范</title>
    <url>/b192cb91.html</url>
    <content><![CDATA[<p>任何语言的程序员，编写出符合规范的代码，是开始程序生涯的第一步，<code>python</code>同样有自己的代码规范。</p>
<a id="more"></a>

<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>首先放上<code>Python</code>之父<code>Guido</code>推荐的命名规范:</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>公有</th>
<th>内部</th>
</tr>
</thead>
<tbody><tr>
<td>模块/<code>Modules</code></td>
<td><code>lower_with_under</code></td>
<td><code>_lower_with_under</code></td>
</tr>
<tr>
<td>包/<code>Packages</code></td>
<td><code>lower_with_under</code></td>
<td></td>
</tr>
<tr>
<td>类/<code>Classes</code></td>
<td><code>CapWords</code></td>
<td><code>_CapWords</code></td>
</tr>
<tr>
<td>异常/<code>Exceptions</code></td>
<td><code>CapWords</code></td>
<td></td>
</tr>
<tr>
<td>函数/<code>Functions</code></td>
<td><code>lower_with_under()</code></td>
<td><code>_lower_with_under()</code></td>
</tr>
<tr>
<td>常量/<code>Global</code>/<code>Class Constants</code></td>
<td><code>CAPS_WITH_UNDER</code></td>
<td><code>_CAPS_WITH_UNDER</code></td>
</tr>
<tr>
<td>变量/<code>Global</code>/<code>Class Variables</code></td>
<td><code>lower_with_under</code></td>
<td><code>_lower_with_under</code></td>
</tr>
<tr>
<td>内部变量/<code>Instance Variables</code></td>
<td><code>lower_with_under</code></td>
<td><code>_lower_with_under</code> (<code>protected</code>) or <code>__lower_with_under</code> (<code>private</code>)</td>
</tr>
<tr>
<td>方法名/<code>Method Names</code></td>
<td><code>lower_with_under()</code></td>
<td><code>_lower_with_under()</code> (<code>protected</code>) or <code>__lower_with_under()</code> (<code>private</code>)</td>
</tr>
<tr>
<td>形参/<code>Function</code>/<code>Method Parameters</code></td>
<td><code>lower_with_under</code></td>
<td></td>
</tr>
<tr>
<td>局部变量/<code>Local Variables</code></td>
<td>~</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>简单总结就是：</p>
<ul>
<li>类和异常使用驼峰命名法</li>
<li>常量由以下划线<code>_</code>隔开的全大写单词组成</li>
<li>其它由以下划线<code>_</code>隔开的全小写单词组成</li>
<li><code>Python</code>默认类型为<code>public</code></li>
<li><code>protected</code>类型以单下划线<code>_</code>开头</li>
<li><code>private</code>类型以双下划线<code>__</code>开头</li>
</ul>
</blockquote>
<h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><ol>
<li>所谓”<code>内部(Internal)</code>”表示仅模块内可用, 或者, 在类内是保护或私有的.</li>
<li>用单下划线(<code>_</code>)开头表示模块变量或函数是<code>protected</code>的(使用<code>import * from</code>时不会包含).</li>
<li>用双下划线(<code>__</code>)开头的实例变量或方法表示类内私有.</li>
<li>将相关的类和顶级函数放在同一个模块里. 不像<code>Java</code>, 没必要限制一个类一个模块.</li>
<li>对类名使用大写字母开头的单词(如<code>CapWords</code>, 即<code>Pascal风格</code>), 但是模块名应该用小写加下划线的方式(如<code>lower_with_under.py</code>).</li>
</ol>
<h3 id="应该避免的名称"><a href="#应该避免的名称" class="headerlink" title="应该避免的名称"></a>应该避免的名称</h3><ol>
<li>单字符名称</li>
<li>包/模块名中使用连字符(<code>-</code>)而不使用下划线(<code>_</code>)</li>
<li>双下划线开头并结尾的名称（如<code>__init__</code>）</li>
</ol>
<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><p><code>Python</code>使用文档字符串作为注释方式: 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的<strong>doc</strong>成员被自动提取, 并且被<code>pydoc</code>所用. 我们对文档字符串的惯例是使用三重双引号”“”( <code>PEP-257</code> ).</p>
<p>一个文档字符串应该这样组织:<br>\1. 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行.<br>\2. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;A user-created :class:`Response &lt;Response&gt;` object.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Used to xxx a :class: `JsonResponse &lt;JsonResponse&gt;`, which is xxx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:param data: response data</span></span><br><span class="line"><span class="string">:param file: response files</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">Usage::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import api</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rep = api.Response(url=&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="行内注释-PEP8"><a href="#行内注释-PEP8" class="headerlink" title="行内注释(PEP8)"></a>行内注释(PEP8)</h3><p>行内注释是与代码语句同行的注释<br>\1. 行内注释和代码至少要有两个空格分隔<br>\2. 注释由#和一个空格开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = x + <span class="number">1</span>                 <span class="comment"># Compensate for border</span></span><br></pre></td></tr></table></figure>

<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># (C) JiaaoCap, Inc. 2017-2018</span></span><br><span class="line"><span class="comment"># All rights reserved</span></span><br><span class="line"><span class="comment"># Licensed under Simplified BSD License (see LICENSE)</span></span><br></pre></td></tr></table></figure>

<h3 id="函数和方法"><a href="#函数和方法" class="headerlink" title="函数和方法"></a>函数和方法</h3><p>一个函数必须要有文档字符串, 除非它满足以下条件:</p>
<ol>
<li>外部不可见</li>
<li>非常短小</li>
<li>简单明了</li>
</ol>
<p>文档字符串应该包含函数做什么, 以及输入和输出的详细描述<br>文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了<br>对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_func</span>(<span class="params">method, timeout</span>)</span></span><br><span class="line"><span class="function">    &quot;&quot;&quot;<span class="title">Constructs</span> <span class="title">and</span> <span class="title">sends</span> <span class="title">a</span> :</span><span class="class"><span class="keyword">class</span>:</span>`Request &lt;Request&gt;`.</span><br><span class="line">    </span><br><span class="line">    :param method: method <span class="keyword">for</span> the new :<span class="class"><span class="keyword">class</span>:</span>`Request` object.</span><br><span class="line">    :param timeout: (optional) How many seconds to wait <span class="keyword">for</span> the server to send data</span><br><span class="line">        before giving up, <span class="keyword">as</span> a float, <span class="keyword">or</span> a :ref:`(connect timeout, read</span><br><span class="line">        timeout) &lt;timeouts&gt;` tuple.</span><br><span class="line">    :type timeout: float <span class="keyword">or</span> tuple</span><br><span class="line">    :<span class="keyword">return</span>: :<span class="class"><span class="keyword">class</span>:</span>`Response &lt;Response&gt;` object</span><br><span class="line">    :rtype: requests.Response</span><br><span class="line">    </span><br><span class="line">    Usage::</span><br><span class="line">    </span><br><span class="line">      &gt;&gt;&gt; <span class="keyword">import</span> requests</span><br><span class="line">      &gt;&gt;&gt; req = requests.request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">      &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPAdapter</span>(<span class="params">BaseAdapter</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The built-in HTTP Adapter for urllib3.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Provides a general-case interface for Requests sessions to contact HTTP and</span></span><br><span class="line"><span class="string">    HTTPS urls by implementing the Transport Adapter interface.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param pool_connections: The number of urllib3 connection pools to cache.</span></span><br><span class="line"><span class="string">    :param max_retries: The maximum number of retries each connection</span></span><br><span class="line"><span class="string">        should attempt.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Usage::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &gt;&gt;&gt; import requests</span></span><br><span class="line"><span class="string">      &gt;&gt;&gt; s = requests.Session()</span></span><br><span class="line"><span class="string">      &gt;&gt;&gt; a = requests.adapters.HTTPAdapter(max_retries=3)</span></span><br><span class="line"><span class="string">      &gt;&gt;&gt; s.mount(&#x27;http://&#x27;, a)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, pool_connections, max_retries</span>):</span></span><br><span class="line">        self.pool_connections = pool_connections</span><br><span class="line">        self.max_retries = max_retries</span><br></pre></td></tr></table></figure>

<h3 id="块注释和行注释"><a href="#块注释和行注释" class="headerlink" title="块注释和行注释"></a>块注释和行注释</h3><p>对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We use a weighted dictionary search to find out where i is in</span></span><br><span class="line"><span class="comment"># the array.  We extrapolate position based on the largest num</span></span><br><span class="line"><span class="comment"># in the array and the array size and then do binary search to</span></span><br><span class="line"><span class="comment"># get the exact number.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &amp; (i<span class="number">-1</span>) == <span class="number">0</span>:        <span class="comment"># true iff i is a power of 2</span></span><br></pre></td></tr></table></figure>

<h2 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h2><ol>
<li>每行不超过80个字符</li>
<li>不要使用反斜杠连接行</li>
<li>Python会将 圆括号, 中括号和花括号中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NO:</span><br><span class="line">query_sql = <span class="string">&quot;SELECT image_id, image_o, image_width, image_height &quot;</span>\</span><br><span class="line">            <span class="string">&quot;FROM active_image_tbl &quot;</span>\</span><br><span class="line">            <span class="string">&quot;WHERE auction_id=:auction_id AND status=1 &quot;</span> \</span><br><span class="line">            <span class="string">&quot;ORDER BY image_id DESC&quot;</span></span><br><span class="line">   </span><br><span class="line">YES:         </span><br><span class="line">agent_sql = (<span class="string">&quot;CREATE TABLE IF NOT EXISTS db_agent (&quot;</span></span><br><span class="line">             <span class="string">&quot;id INTEGER PRIMARY KEY AUTOINCREMENT, &quot;</span></span><br><span class="line">             <span class="string">&quot;device_id VARCHAR(128) DEFAULT &#x27;&#x27;, &quot;</span></span><br><span class="line">             <span class="string">&quot;status INTEGER DEFAULT 1, &quot;</span></span><br><span class="line">             <span class="string">&quot;updated_time TIMESTAMP  DEFAULT CURRENT_TIMESTAMP, &quot;</span></span><br><span class="line">             <span class="string">&quot;created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP)&quot;</span>)</span><br><span class="line"></span><br><span class="line">在注释中，如果必要，将长的URL放在一行上。</span><br><span class="line">Yes: </span><br><span class="line"><span class="comment"># See details at</span></span><br><span class="line"><span class="comment"># http://www.example.com/us/developer/documentation/api/content/v2.0/fication.html</span></span><br></pre></td></tr></table></figure>

<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ol>
<li>使用4个空格来缩进代码</li>
<li>对于行连接的情况, 你应该要么垂直对齐换行的元素, 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 垂直对齐换行的元素</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">                         var_three, var_four)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4空格的悬挂式缩进(这时第一行不应该有参数)</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">    var_one, var_two, var_three,</span><br><span class="line">    var_four)</span><br></pre></td></tr></table></figure>

<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ol>
<li>括号内不要有空格</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">YES:</span><br><span class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;, [])                 <span class="comment"># 注意标点两边的空格</span></span><br><span class="line"></span><br><span class="line">NO:</span><br><span class="line">spam( ham[ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125;, [ ] )</span><br></pre></td></tr></table></figure>

<ol>
<li>不要在逗号，分号，冒号前面加空格，而应该在它们的后面加</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">YES:</span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">print</span> x, y</span><br><span class="line">x, y = y, x </span><br><span class="line"></span><br><span class="line">NO:</span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span> :</span><br><span class="line">   <span class="keyword">print</span> x , y</span><br><span class="line">x , y = y , x</span><br></pre></td></tr></table></figure>

<ol>
<li>二元操作符两边都要加上一个空格（=， ==，&lt;, &gt;, !=, in, not …）</li>
<li>当’=’用于指示关键字参数或默认参数值时</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span>(<span class="params">real, imag=<span class="number">0.0</span></span>):</span> </span><br><span class="line">    <span class="keyword">return</span> magic(r=real, i=imag)</span><br></pre></td></tr></table></figure>

<ol>
<li>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">YES:</span><br><span class="line">foo = <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">long_name = <span class="number">2</span>  <span class="comment"># comment that should not be aligned</span></span><br><span class="line"></span><br><span class="line">NO:</span><br><span class="line">foo       = <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">long_name = <span class="number">2</span>     <span class="comment"># comment that should not be aligned</span></span><br></pre></td></tr></table></figure>

<h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><ol>
<li>每个导入应该独占一行</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">YES:</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE      <span class="comment"># PEP8</span></span><br><span class="line"></span><br><span class="line">NO:</span><br><span class="line"><span class="keyword">import</span> sys, os</span><br></pre></td></tr></table></figure>

<ol>
<li>模块导入顺序<ol>
<li>标注库导入</li>
<li>第三方库导入</li>
<li>应用程序指定导入</li>
</ol>
</li>
<li>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> bar</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> baz</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> Quux</span><br><span class="line"><span class="keyword">from</span> Foob <span class="keyword">import</span> ar</span><br></pre></td></tr></table></figure>

<h2 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a><code>TODO</code>注释</h2><ol>
<li><code>TODO</code>注释应该在所有开头处包含”<code>TODO</code>”字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么</li>
<li>如果你的<code>TODO</code>是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TODO(kl@gmail.com): Use a &quot;*&quot; here for string repetition.</span></span><br><span class="line"><span class="comment"># TODO(Zeke) Change this to use relations.</span></span><br></pre></td></tr></table></figure>

<h2 id="二元运算符换行-PEP8"><a href="#二元运算符换行-PEP8" class="headerlink" title="二元运算符换行(PEP8)"></a>二元运算符换行(<code>PEP8</code>)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不推荐: 操作符离操作数太远</span></span><br><span class="line">income = (gross_wages +</span><br><span class="line">          taxable_interest +</span><br><span class="line">          (dividends - qualified_dividends) -</span><br><span class="line">          ira_deduction -</span><br><span class="line">          student_loan_interest)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐：运算符和操作数很容易进行匹配</span></span><br><span class="line">income = (gross_wages</span><br><span class="line">          + taxable_interest</span><br><span class="line">          + (dividends - qualified_dividends)</span><br><span class="line">          - ira_deduction</span><br><span class="line">          - student_loan_interest)</span><br></pre></td></tr></table></figure>

<h2 id="其它规范"><a href="#其它规范" class="headerlink" title="其它规范"></a>其它规范</h2><ol>
<li>不要在行尾加分号, 也不要用分号将两条命令放在同一行.</li>
<li>除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.</li>
<li>顶级定义之间空两行, 方法定义之间空一行</li>
</ol>
<h2 id="Pandas使用规范"><a href="#Pandas使用规范" class="headerlink" title="Pandas使用规范"></a>Pandas使用规范</h2><ol>
<li><code>pandas</code>数据结构命名 <code>df</code>_、<code>se_</code></li>
<li><code>df</code>取一列，禁止使用<code>df.列名</code>，可以使用<code>df[&#39;列名&#39;]</code>, 建议使用<code>df.loc[:, &#39;列名&#39;]</code></li>
<li>禁止使用<code>df.ix</code></li>
</ol>
<h2 id="目录结构示例"><a href="#目录结构示例" class="headerlink" title="目录结构示例"></a>目录结构示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|--docs</span><br><span class="line">|--requests</span><br><span class="line">|    |--__init__.py</span><br><span class="line">|    |--_internal_utils.py</span><br><span class="line">|    |--utils.py</span><br><span class="line">|    |--api.py</span><br><span class="line">|--tests</span><br><span class="line">|--setup.py</span><br><span class="line">|--README.rst</span><br><span class="line">|--LICENSE</span><br></pre></td></tr></table></figure>

<h2 id="Class结构示例"><a href="#Class结构示例" class="headerlink" title="Class结构示例"></a>Class结构示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># (C) JiaaoCap, Inc. 2017-2018</span></span><br><span class="line"><span class="comment"># All rights reserved</span></span><br><span class="line"><span class="comment"># Licensed under Simplified BSD License (see LICENSE)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">requests.api</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module contains xxx. </span></span><br><span class="line"><span class="string">This module is designed to xxx.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stdlib</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3p</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> psutil</span><br><span class="line">exception ImportError:</span><br><span class="line">    psutil = <span class="literal">None</span></span><br><span class="line"><span class="keyword">import</span> simplejson <span class="keyword">as</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># project</span></span><br><span class="line"><span class="keyword">from</span> .utils <span class="keyword">import</span> current_time</span><br><span class="line"><span class="keyword">from</span> ._internal_utils <span class="keyword">import</span> internal_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A user-created :class:`Response &lt;Response&gt;` object.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Used to xxx a :class: `JsonResponse &lt;JsonResponse&gt;`, which is xxx</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param data: response data</span></span><br><span class="line"><span class="string">    :param file: response files</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Usage::</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; import api</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; rep = api.Response(url=&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data, files, json, url</span>)</span></span><br><span class="line">        self.data = data</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sort_params</span>(<span class="params">params</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;This is a private static method&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> params   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_json</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;The fully method blala bian shen,</span></span><br><span class="line"><span class="string">        xxx sent to the server.</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Usage::</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">            &gt;&gt;&gt; import api</span></span><br><span class="line"><span class="string">            &gt;&gt;&gt; rep = api.Response(url=&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="string">            &gt;&gt;&gt; rep.to_json()</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.url == <span class="string">&quot;www&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><p>Google开源项目风格指南: <span class="exturl" data-url="aHR0cHM6Ly96aC1nb29nbGUtc3R5bGVndWlkZS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3Qv">https://zh-google-styleguide.readthedocs.io/en/latest/<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li></li>
<li><p>PEP 8 – Style Guide for Python Code: <span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDAwOC8=">https://www.python.org/dev/peps/pep-0008/<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>Python PEP8 编码规范中文版: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JhdHNuaXBlci9hcnRpY2xlL2RldGFpbHMvNzg5NTQ4NTI=">https://blog.csdn.net/ratsniper/article/details/78954852<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python开发代码规范</tag>
        <tag>开发规范</tag>
        <tag>python代码规范</tag>
        <tag>python命名约定</tag>
        <tag>python模块导入</tag>
        <tag>python开发规范</tag>
      </tags>
  </entry>
  <entry>
    <title>python开发的桌面程序代码详解</title>
    <url>/ea027572.html</url>
    <content><![CDATA[<p>上篇文章展示了这个简单的桌面程序，功能虽然很简单，开发过程还是遇到了很多坑，用了两天时间基本把坑给填了，其中两个主要影响的坑，<code>python</code>开发<code>gui</code>的的扩展库选择和<code>python gui</code>程序打包出现的问题，这两个问题我觉得也有必要单独说下，这里就只说代码。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>你永远不可能知道我要写这个小程序的初衷，你不会知道我原本的打算是要写一个<code>h5</code>专题生成系统（本人之前使用<code>php</code>写过），想到需要用到切割图片就看了一下<code>python</code>关于图片的处理库<code>PIL</code>，后来想到切割数量较多的时候客户等待体验非常不好，就又关注了下<code>RabbitMQ</code>消息队列的使用；考虑到<code>h5</code>专题系统稍微复杂点先写个自己日常会使用的图片切割桌面<code>app</code>；奈何本人没有桌面应用开发的经验，只知道<code>python</code>有这么方面的扩展包，先找了<code>tkinter</code>，发现能实现的界面实在是太简单了发现了<code>pyqt5</code>；功能实现后又要用到打包成<code>exe</code>，又找到了打包的扩展包<code>pyinstaller</code>，打包过程的坑上面讲了后面会说。</p>
<p>总结以上来说我们用到的扩展包有：<code>sys</code>、<code>os</code>、<code>PyQt5</code>、<code>PIL</code>、<code>pyinstaller</code></p>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>代码中一些地方我已经加过了注释，故本人觉得没必要在一行行解释，后面我会贴上关于<code>pyqt5</code>可参考：<a href="https://www.diandian100.cn/f0f8ad40.html"><code>pyqt5</code>安装及使用</a></p>
<h3 id="功能代码win-py"><a href="#功能代码win-py" class="headerlink" title="功能代码win.py"></a>功能代码<code>win.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication, QGroupBox, QPushButton, QLabel, QHBoxLayout, QVBoxLayout, QGridLayout, QFormLayout, QLineEdit, QTextEdit, QInputDialog, QFileDialog, QMessageBox, QDesktopWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIntValidator, QDoubleValidator, QRegExpValidator, QTextCursor, QIcon, QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QRegExp</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgCut</span>(<span class="params">QWidget</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super(ImgCut, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.file_label = QLabel(<span class="string">&#x27;选择图片：&#x27;</span>)</span><br><span class="line">        self.file_text = QLineEdit()</span><br><span class="line">        self.file_text.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        self.file_btn = QPushButton(<span class="string">&#x27;选择文件…&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 头部</span></span><br><span class="line">        self.head_label = QLabel(<span class="string">&#x27;切除头部：&#x27;</span>)</span><br><span class="line">        self.head_text = QLineEdit()</span><br><span class="line">        self.head_text.setPlaceholderText(<span class="string">&#x27;要丢弃的顶部高度&#x27;</span>)</span><br><span class="line">        <span class="comment"># self.head_text.setInputMask(&#x27;99&#x27;)</span></span><br><span class="line">        <span class="comment"># 验证带范围的正整数</span></span><br><span class="line">        self.head_text.setValidator(QIntValidator(<span class="number">0</span>, <span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 底部</span></span><br><span class="line">        self.foot_label = QLabel(<span class="string">&#x27;切除底部：&#x27;</span>)</span><br><span class="line">        self.foot_text = QLineEdit()</span><br><span class="line">        self.foot_text.setPlaceholderText(<span class="string">&#x27;要丢弃的底部高度&#x27;</span>)</span><br><span class="line">        <span class="comment"># 验证带范围的正整数</span></span><br><span class="line">        self.foot_text.setValidator(QIntValidator(<span class="number">0</span>, <span class="number">500</span>))</span><br><span class="line">        <span class="comment"># 切割份数</span></span><br><span class="line">        self.nums_label = QLabel(<span class="string">&#x27;切割份数：&#x27;</span>)</span><br><span class="line">        self.nums_text = QLineEdit()</span><br><span class="line">        self.nums_text.setPlaceholderText(<span class="string">&#x27;要剪切的份数&#x27;</span>)</span><br><span class="line">        <span class="comment"># 验证带范围的正整数</span></span><br><span class="line">        self.nums_text.setValidator(QIntValidator(<span class="number">2</span>, <span class="number">50</span>))</span><br><span class="line">        <span class="comment"># 文件名前缀</span></span><br><span class="line">        self.pre_label = QLabel(<span class="string">&#x27;图片前缀：&#x27;</span>)</span><br><span class="line">        self.pre_text = QLineEdit()</span><br><span class="line">        self.pre_text.setPlaceholderText(<span class="string">&#x27;要保存的图片名前缀&#x27;</span>)</span><br><span class="line">        reg = QRegExp(<span class="string">&#x27;[a-zA-Z0-9]&#123;1,15&#125;$&#x27;</span>)</span><br><span class="line">        <span class="comment"># 自定义文本验证器</span></span><br><span class="line">        pValidator = QRegExpValidator(self)</span><br><span class="line">        <span class="comment"># 设置属性</span></span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.pre_text.setValidator(pValidator)</span><br><span class="line">        <span class="comment"># 存储位置</span></span><br><span class="line">        self.forder_label = QLabel(<span class="string">&#x27;存储位置：&#x27;</span>)</span><br><span class="line">        self.forder_text = QLineEdit()</span><br><span class="line">        self.forder_text.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        self.forder_btn = QPushButton(<span class="string">&#x27;选择存储位置…&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确认按钮</span></span><br><span class="line">        self.submit_btn = QPushButton(<span class="string">&#x27;开始切割&#x27;</span>)</span><br><span class="line">        self.submit_btn.setStyleSheet(<span class="string">&quot;QPushButton&#123;padding:20px 4px&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 图片label</span></span><br><span class="line">        self.img_label = QLabel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 复制按钮</span></span><br><span class="line">        self.copy_btn = QPushButton(<span class="string">&#x27;复制代码&#x27;</span>)</span><br><span class="line">        self.copy_btn.setStyleSheet(<span class="string">&quot;QPushButton&#123;padding:20px 4px&#125;&quot;</span>)</span><br><span class="line">        <span class="comment"># 显示生成的文件html</span></span><br><span class="line">        self.res_teatarea = QTextEdit()</span><br><span class="line"></span><br><span class="line">        self.initUi()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUi</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.createGridGroupBox()</span><br><span class="line">        self.creatVboxGroupBox()</span><br><span class="line">        self.creatFormGroupBox()</span><br><span class="line">        mainLayout = QVBoxLayout()</span><br><span class="line">        hboxLayout = QHBoxLayout()</span><br><span class="line">        <span class="comment"># hboxLayout.addStretch()</span></span><br><span class="line">        hboxLayout.addWidget(self.gridGroupBox)</span><br><span class="line">        hboxLayout.addWidget(self.vboxGroupBox)</span><br><span class="line">        mainLayout.addLayout(hboxLayout)</span><br><span class="line">        mainLayout.addWidget(self.formGroupBox)</span><br><span class="line">        self.setLayout(mainLayout)</span><br><span class="line">        <span class="comment"># 禁止最大化</span></span><br><span class="line">        <span class="comment"># self.setFixedSize(self.width(), self.height())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数区域</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createGridGroupBox</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.gridGroupBox = QGroupBox(<span class="string">&quot;基本参数&quot;</span>)</span><br><span class="line">        layout = QGridLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 点击选择文件按钮</span></span><br><span class="line">        self.file_btn.clicked.connect(self.selectImg)</span><br><span class="line">        <span class="comment"># 点击选择保存路径按钮</span></span><br><span class="line">        self.forder_btn.clicked.connect(self.savePath)</span><br><span class="line">        <span class="comment"># 点击提交按钮</span></span><br><span class="line">        self.submit_btn.clicked.connect(self.submit)</span><br><span class="line">        layout.setSpacing(<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 网格布局</span></span><br><span class="line">        layout.addWidget(self.file_label, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.file_text, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        layout.addWidget(self.file_btn, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.head_label, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.head_text, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.foot_label, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.foot_text, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.nums_label, <span class="number">4</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.nums_text, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.pre_label, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.pre_text, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.forder_label, <span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.forder_text, <span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line">        layout.addWidget(self.forder_btn, <span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.submit_btn, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        layout.setColumnStretch(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        self.gridGroupBox.setLayout(layout)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;图片切割&#x27;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">r&#x27;E:\site\python\cutimg\favicon.ico&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片预览区域</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">creatVboxGroupBox</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.vboxGroupBox = QGroupBox(<span class="string">&quot;图片预览&quot;</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        pixmap = QPixmap(<span class="string">r&quot;E:\site\python\cutimg\default.jpg&quot;</span>).scaled(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        self.img_label.setPixmap(pixmap)  <span class="comment"># 在label上显示图片</span></span><br><span class="line">        layout.addWidget(self.img_label)</span><br><span class="line">        self.vboxGroupBox.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 代码区域</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">creatFormGroupBox</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.formGroupBox = QGroupBox(<span class="string">&quot;代码生成&quot;</span>)</span><br><span class="line">        layout = QGridLayout()</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.res_teatarea, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.copy_btn, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 点击选择保存路径按钮</span></span><br><span class="line">        self.copy_btn.clicked.connect(self.copyText)</span><br><span class="line"></span><br><span class="line">        self.formGroupBox.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示消息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showMsg</span>(<span class="params">self, tit, content, icon=<span class="number">3</span></span>):</span></span><br><span class="line">        box = QMessageBox(QMessageBox.Question, tit, content)</span><br><span class="line">        <span class="comment"># 设置左上角消息框图标</span></span><br><span class="line">        box.setWindowIcon(QIcon(<span class="string">r&#x27;E:\site\python\cutimg\favicon.ico&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加按钮，可用中文</span></span><br><span class="line">        yes = box.addButton(<span class="string">&#x27;确定&#x27;</span>, QMessageBox.YesRole)</span><br><span class="line">        <span class="comment"># 设置消息框中内容前面的图标</span></span><br><span class="line">        box.setIcon(icon)</span><br><span class="line">        <span class="comment"># 显示该问答框</span></span><br><span class="line">        box.exec()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectImg</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取文件路径和图片类型</span></span><br><span class="line">        imgName, imgType = QFileDialog.getOpenFileName(self, <span class="string">&quot;请选择您要切割的图片&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;*.jpg;;*.png;;All Files(*)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断选择的文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(imgName):</span><br><span class="line">            <span class="comment"># 将文件url放入路径文本框中</span></span><br><span class="line">            self.file_text.setText(imgName)</span><br><span class="line">            <span class="comment"># 缩放图片，放入右侧label，缩放为300</span></span><br><span class="line">            pixmap = QPixmap(imgName).scaled(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">            self.img_label.setPixmap(pixmap)  <span class="comment"># 在label上显示图片</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;您选择的文件不存在，请重新选择！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择保存文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savePath</span>(<span class="params">self</span>):</span></span><br><span class="line">        path = QFileDialog.getExistingDirectory(self, <span class="string">&quot;请选择您要保存的位置&quot;</span>)</span><br><span class="line">        <span class="comment"># 判断选择的文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">            <span class="comment"># 将保存url放入路径文本框中</span></span><br><span class="line">            self.forder_text.setText(path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;您选择的保存路径不存在，请重新选择！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交切割</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 判断是否上传文件和选择保存目录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.file_text.text():</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;您还没有上传文件&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.forder_text.text():</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;您还没有选择保存目录&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 获取分割份数</span></span><br><span class="line">        nums = self.nums_text.text()</span><br><span class="line">        <span class="comment"># 判断是否填写分割份数</span></span><br><span class="line">        <span class="keyword">if</span> nums:</span><br><span class="line">            <span class="comment"># 获取文件路径</span></span><br><span class="line">            file = self.file_text.text()</span><br><span class="line">            <span class="comment"># 获取要切除的头部高度，未填写则为0</span></span><br><span class="line">            head = int(self.head_text.text()) <span class="keyword">if</span> self.head_text.text() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="comment"># 获取要切除的底部高度，未填写则为0</span></span><br><span class="line">            foot = int(self.foot_text.text()) <span class="keyword">if</span> self.foot_text.text() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="comment"># 获取要保存的文件名前缀，默认为“image_”</span></span><br><span class="line">            pre = self.pre_text.text() + <span class="string">&#x27;_&#x27;</span> <span class="keyword">if</span> self.pre_text.text() <span class="keyword">else</span> <span class="string">&#x27;image_&#x27;</span></span><br><span class="line">            <span class="comment"># 获取保存路径</span></span><br><span class="line">            forder = self.forder_text.text()</span><br><span class="line">            <span class="comment"># 执行切割</span></span><br><span class="line">            self.cutImg(file, head, foot, pre, forder, int(nums))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;必须填写要切割的份数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复制代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyText</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取代码框内容</span></span><br><span class="line">        data = self.res_teatarea.toPlainText()</span><br><span class="line">        <span class="comment"># 判断代码框是否有内容</span></span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="comment"># 如果有内容将内容添加至剪贴板</span></span><br><span class="line">            clipboard = QApplication.clipboard()</span><br><span class="line">            clipboard.setText(data)</span><br><span class="line">            self.showMsg(<span class="string">&#x27;信息&#x27;</span>, <span class="string">&#x27;内容以成功复制到剪贴板&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;代码为空，没有代码可以复制&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cutImg</span>(<span class="params">self, file, head, foot, pre, forder, nums</span>):</span></span><br><span class="line">        <span class="comment"># 打开图片</span></span><br><span class="line">        img = Image.open(file)</span><br><span class="line">        <span class="comment"># 图片宽度/高度</span></span><br><span class="line">        width, height = img.size</span><br><span class="line">        <span class="comment"># 每份高度（减去废弃的头部和底部高度）</span></span><br><span class="line">        item_height = (height - head - foot) / nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(nums):</span><br><span class="line">            <span class="comment"># crop参数：剪切起始点x坐标，起始点y坐标，终点x坐标，终点y坐标</span></span><br><span class="line">            croped = img.crop((<span class="number">0</span>, (head + i * item_height), width, (i + <span class="number">1</span>) * item_height + head))</span><br><span class="line">            <span class="comment"># 图片名称从1开始</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 格式化图片名称，图片名称两位数，不足两位前面补0</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">                i = <span class="string">&#x27;0&#123;&#125;&#x27;</span>.format(i)</span><br><span class="line">            <span class="comment"># 格式化图片名称，添加图片名前缀</span></span><br><span class="line">            imgName = <span class="string">&#x27;&#123;&#125;&#123;&#125;.jpg&#x27;</span>.format(pre, i)</span><br><span class="line">            <span class="comment"># 代码框光标移动至末尾</span></span><br><span class="line">            self.res_teatarea.moveCursor(QTextCursor.End)</span><br><span class="line">            <span class="comment"># 每次打印的图片标签</span></span><br><span class="line">            shtml = <span class="string">&#x27;&lt;img src=&quot;&#123;&#125;&quot; /&gt;\n&#x27;</span>.format(imgName)</span><br><span class="line">            <span class="comment"># 将代码粘贴至代码框光标位置</span></span><br><span class="line">            self.res_teatarea.insertPlainText(shtml)</span><br><span class="line">            <span class="comment"># 连接保存路径和图片名</span></span><br><span class="line">            files = os.path.join(forder, imgName)</span><br><span class="line">            <span class="comment"># 保存图片</span></span><br><span class="line">            croped.save(files)</span><br><span class="line">        <span class="comment"># 切割完成提示</span></span><br><span class="line">        self.showMsg(<span class="string">&#x27;成功&#x27;</span>, <span class="string">&#x27;图片切割完成，请到目标文件夹查看吧&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = ImgCut()</span><br><span class="line">    ex.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="入口代码main-py"><a href="#入口代码main-py" class="headerlink" title="入口代码main.py"></a>入口代码<code>main.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hasattr(sys, <span class="string">&#x27;frozen&#x27;</span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;PATH&#x27;</span>] = sys._MEIPASS + <span class="string">&quot;;&quot;</span> + os.environ[<span class="string">&#x27;PATH&#x27;</span>]</span><br><span class="line"><span class="keyword">import</span> win</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    MainWindow = QMainWindow()</span><br><span class="line">    ui = win.ImgCut()</span><br><span class="line">    ui.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>关于打包，这里是有一下坑的，安装<code>pyinstaller</code>扩展包可以用来打包成<code>exe</code>文件，本人打包命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyinstaller.exe -F -w -i tony1.ico --version-file&#x3D;file_version_info.txt E:\site\python\cutimg\main.py</span><br></pre></td></tr></table></figure>

<p>更多关于<code>pyinstaller</code>的使用请参考：<a href="https://www.diandian100.cn/95897e4c.html"><code>python</code>打包文件之<code>pyinstaller</code></a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是此程序的所有代码200行左右，代码写的有点乱，如用到自己整理。后面打包有坑，另开文章说。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927134237.png"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyqt5</tag>
        <tag>python桌面程序</tag>
        <tag>python gui</tag>
        <tag>python tkinter</tag>
        <tag>python pyqt5</tag>
        <tag>tkinter</tag>
        <tag>pyinstaller</tag>
        <tag>python打包</tag>
        <tag>python图片切割</tag>
        <tag>pil</tag>
      </tags>
  </entry>
  <entry>
    <title>python开发的第一个桌面程序</title>
    <url>/8442d131.html</url>
    <content><![CDATA[<p>公司经常制作<code>h5</code>都是展示型的，所以一般直接用图片切成多份儿写入到<code>html</code>即可，我这边每次都有美工发过来的图片，然后自己动手使用<code>ps</code>切片切割图片，真心感觉繁琐，用<code>web</code>写了一个切割图片的方法感觉用起来还是不过瘾，每次都要打开网站，要么打开<code>python</code>执行，想来想去本人决定做一个桌面小应用，方便自己使用，先展示下本人最后的成品：</p>
<a id="more"></a>

<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927134237.png"></p>
<h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><p>怎么样还不错吧？荣小弟展示下功能吧？注切除头部切除底部是因为自己需求，美工每次发来的<code>h5</code>图片底部有时候带有按钮，需要用代码实现，真正切图的时候用不到这个，索性这里可以直接填写这个区域的高度，剪切的时候自动忽略这一区域了，废话不说，展示功能</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927134820.png"></p>
<p>切割份数肯定必须填写，不填写开这个软件干什么？同样未选择图片未选择保存为止也会提示错误信息，头部和底部可以为空，图片前缀默认为<code>image_</code>，也可以不填写，另外当你选择图片后，右侧的图片预览区域已经显示你要切割的图片了（图片变形就不要找我了），接下来展示一下代码复制</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927135035.png"></p>
<p>代码为空，你要复制个啥，错误我们看完了，接下来正确的执行</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927135835.png"></p>
<p>如图可以看到图片成功切割完成，并存放在了指定的位置，代码区域也生成了<code>img</code>标签代码(这个代码根据自己需求写，本人只是简单示例)，然后我们看下复制能否使用</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927140116.png"></p>
<p>经测试复制功能也没问题，这个小软件已经达到了我的基本需求接下来就是实现过程了，感觉要说的东西太多，具体实现看<a href="https://www.diandian100.cn/ea027572.html">python开发的桌面程序代码详解</a></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyqt5</tag>
        <tag>python桌面程序</tag>
        <tag>python gui</tag>
        <tag>python tkinter</tag>
        <tag>python pyqt5</tag>
        <tag>tkinter</tag>
        <tag>pyinstaller</tag>
        <tag>python打包</tag>
        <tag>python图片切割</tag>
      </tags>
  </entry>
  <entry>
    <title>python引入包模块</title>
    <url>/e0d9d20c.html</url>
    <content><![CDATA[<p><strong>包：实在文件夹的基础上另外多包含了一个叫<strong>init</strong>.py的文件，它是几个模块的集合</strong></p>
<a id="more"></a>

<p>假设我们实例的模块或者说文件目录结构如图，模块目录下除<strong>init</strong>.py文件外的其他py文件中都包含一个echo方法，打印自己的方法名。</p>
<p>如果我们要导入one01.py这个模块，name我们有以下三种写法：</p>
<p>方法一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> my_moudles.one.one01</span><br><span class="line">my_moudles.one.one01.echo()</span><br></pre></td></tr></table></figure>

<p>这样写导入包模块太长，我们可以简化用别名调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> my_moudles.one.one01 <span class="keyword">as</span> one01</span><br><span class="line">one01.echo()</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_moudles.one <span class="keyword">import</span> one01</span><br><span class="line">one01.echo()</span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_moudles.one.one01 <span class="keyword">import</span> echo</span><br><span class="line">echo()</span><br></pre></td></tr></table></figure>

<p>下面说下只导入包，去使用包下面的模块。我们知道，包下面有很多模块，我们如果要调用所有其下的模块不可能一一写出来，这样太麻烦了。其实一开始我们注意到每个包中都包含一个叫<strong>init</strong>.py文件，我们直接调用包会发现，直接执行了其下的<strong>init</strong>.py文件由此我们想到是否可以在这个init文件上做文章。通过引入包的测试我们能得到以下结论：</p>
<p># 直接导入包 ,需要通过设计init文件,来完成导入包之后的操作</p>
<blockquote>
<p># 导入一个包</p>
<p>​    # 不意味着这个包下面的所有内容都是可以被使用的</p>
<p>​    # 导入一个包到底发生什么了?</p>
<p>​        # 相当于执行了这个包下面的<strong>init</strong>.py文件</p>
</blockquote>
<p>导入包类似路径引入路径，可分为<strong>绝对导入</strong>和<strong>相对导入</strong></p>
<p><strong>绝对导入：</strong></p>
<p># 在执行一个py脚本的时候,这个脚本以及和这个脚本同级的模块中只能用绝对导入</p>
<p># 缺点</p>
<p># 所有的导入都要从一个根目录下往后解释文件夹之间的关系</p>
<p># 如果当前导入包的文件和被导入的包的位置关系发生了变化,那么所有的init文件都要做相应的调整</p>
<p>这里我们使用绝对导入来使用包下的模块—–</p>
<p>首先修改my_modules下的init文件如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_moudles <span class="keyword">import</span> one,two,three</span><br></pre></td></tr></table></figure>

<p>这样等于又引入了三个模块包，其次呢我们依次需要在one、two、three中修改其下的init文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_moudles.one <span class="keyword">import</span> one01,one02</span><br><span class="line"><span class="keyword">from</span> my_moudles.two <span class="keyword">import</span> two <span class="number">01</span>,two <span class="number">02</span></span><br><span class="line"><span class="keyword">from</span> my_moudles.three <span class="keyword">import</span> three01,three02</span><br></pre></td></tr></table></figure>

<p><strong>这样我们就可以使用my_modules下的所有模块了</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_moudles</span><br><span class="line">my_moudles.one.one01.echo()</span><br><span class="line">my_moudles.one.one02.echo()</span><br><span class="line">my_moudles.two.two01.echo()</span><br><span class="line">my_moudles.two.two02.echo()</span><br><span class="line">my_moudles.three.three01.echo()</span><br><span class="line">my_moudles.three.three02.echo()</span><br></pre></td></tr></table></figure>



<p><strong>相对导入：</strong></p>
<p># 不需要去反复的修改路径</p>
<p> # 只要一个包中的所有文件夹和文件的相对位置不发生改变</p>
<p># 也不需要去关心当前这个包和被执行的文件之间的层级关系</p>
<p># 缺点</p>
<p># 含有相对导入的py文件不能被直接执行</p>
<p># 必须放在包中被导入的调用才能正常的使用</p>
<p>这里我们使用相对导入来使用包下的模块—–</p>
<p>.跟我们路径中使用方式一样，.代表当前目录；..代表当前目录的上一层</p>
<p>首先修改my_modules下的init文件如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> one,two,three</span><br></pre></td></tr></table></figure>

<p>这样等于又引入了三个模块包，其次呢我们依次需要在one、two、three中修改其下的init文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> one01,one02</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> two <span class="number">01</span>,two <span class="number">02</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> three01,three02</span><br></pre></td></tr></table></figure>

<p><strong>这样我们就可以使用my_modules下的所有模块了</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_moudles</span><br><span class="line">my_moudles.one.one01.echo()</span><br><span class="line">my_moudles.one.one02.echo()</span><br><span class="line">my_moudles.two.two01.echo()</span><br><span class="line">my_moudles.two.two02.echo()</span><br><span class="line">my_moudles.three.three01.echo()</span><br><span class="line">my_moudles.three.three02.echo()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>模块</tag>
        <tag>包</tag>
        <tag>导入模块</tag>
        <tag>导入包</tag>
      </tags>
  </entry>
  <entry>
    <title>python打包文件之pyinstaller</title>
    <url>/95897e4c.html</url>
    <content><![CDATA[<p>桌面应用想要使用就要先进行打包，<code>python</code>扩展包<code>pyinstaller</code>帮我们提供了打包功能，使用过程中你会发现很多坑，后面解释。</p>
<a id="more"></a>

<h2 id="pyinstaller常用参数"><a href="#pyinstaller常用参数" class="headerlink" title="pyinstaller常用参数"></a><code>pyinstaller</code>常用参数</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>以下介绍假设用户脚本为<code>main.py</code>，生成结果为<code>main.exe</code>。<br>有些参数实在很少用到，只列出简单介绍，具体请参阅原文。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以下介绍假设用户脚本为main.py，生成结果为main.exe。</span><br><span class="line">有些参数实在很少用到，只列出简单介绍，具体请参阅原文。</span><br><span class="line">原文(英文): https:&#x2F;&#x2F;pyinstaller.readthedocs.io&#x2F;en&#x2F;v3.3.1&#x2F;usage.html</span><br></pre></td></tr></table></figure>

<h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><table>
<thead>
<tr>
<th align="center">参数名</th>
<th>描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>-h</code></td>
<td>显示帮助</td>
<td>无</td>
</tr>
<tr>
<td align="center"><code>-v</code></td>
<td>显示版本号</td>
<td>无</td>
</tr>
<tr>
<td align="center"><code>–distpath</code></td>
<td>生成文件放在哪里</td>
<td>默认：当前目录的<code>dist</code>文件夹内</td>
</tr>
<tr>
<td align="center"><code>–workpath</code></td>
<td>生成过程中的中间文件放在哪里</td>
<td>默认：当前目录的<code>build</code>文件夹内</td>
</tr>
<tr>
<td align="center"><code>-y</code></td>
<td>如果<code>dist</code>文件夹内已经存在生成文件，则不询问用户，直接覆盖</td>
<td>默认：询问是否覆盖</td>
</tr>
<tr>
<td align="center"><code>–upx-dir UPX_DIR</code></td>
<td>指定<code>upx</code>工具的目录</td>
<td>默认：<code>execution path</code></td>
</tr>
<tr>
<td align="center"><code>-a</code></td>
<td>不包含<code>unicode</code>支持</td>
<td>默认：尽可能支持<code>unicode</code></td>
</tr>
<tr>
<td align="center"><code>–clean</code></td>
<td>在本次编译开始时，清空上一次编译生成的各种文件</td>
<td>默认：不清除</td>
</tr>
<tr>
<td align="center"><code>–log-level LEVEL</code></td>
<td>控制编译时<code>pyi</code>打印的信息</td>
<td>一共有6个等级，由低到高分别为<code>TRACE DEBUG INFO</code>(默认) <code>WARN ERROR CRITICAL</code>。也就是默认清空下，不打印<code>TRACE</code>和<code>DEBUG</code>信息</td>
</tr>
</tbody></table>
<h3 id="与生成结果有关的参数"><a href="#与生成结果有关的参数" class="headerlink" title="与生成结果有关的参数"></a>与生成结果有关的参数</h3><table>
<thead>
<tr>
<th align="center"><strong>参数名</strong></th>
<th><strong>描述</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>-D</code></td>
<td>生成<code>one-folder</code>的程序（默认）</td>
<td>生成结果是一个目录，各种第三方依赖、资源和<code>exe</code>同时存储在该目录</td>
</tr>
<tr>
<td align="center"><code>-F</code></td>
<td>生成<code>one-file</code>的程序</td>
<td>生成结果是一个<code>exe</code>文件，所有的第三方依赖、资源和代码均被打包进该<code>exe</code>内</td>
</tr>
<tr>
<td align="center"><code>–specpath</code></td>
<td>指定<code>.spec</code>文件的存储路径</td>
<td>默认：当前目录</td>
</tr>
<tr>
<td align="center"><code>-n</code></td>
<td>生成的<code>.exe</code>文件和<code>.spec</code>的文件名</td>
<td>默认：用户脚本的名称，即<code>main.py</code>和<code>main.spec</code></td>
</tr>
</tbody></table>
<h3 id="指定打包哪些资源、代码"><a href="#指定打包哪些资源、代码" class="headerlink" title="指定打包哪些资源、代码"></a>指定打包哪些资源、代码</h3><table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th><strong>描述</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>–add-data</code></td>
<td>打包额外资源</td>
<td>用法：<code>pyinstaller main.py --add-data=src;dest</code>。<code>windows</code>以;分割，<code>linux</code>以:分割</td>
</tr>
<tr>
<td><code>–add-binary</code></td>
<td>打包额外的代码</td>
<td>用法：同–add-data。与<code>–add-data</code>不同的是，用<code>binary</code>添加的文件，<code>pyi</code>会分析它引用的文件并把它们一同添加进来</td>
</tr>
<tr>
<td><code>-p</code></td>
<td>指定额外的<code>import</code>路径，类似于使用<code>PYTHONPATH</code></td>
<td>参见<code>PYTHONPATH</code></td>
</tr>
<tr>
<td><code>–hidden-import</code></td>
<td>打包额外<code>py</code>库</td>
<td><code>pyi</code>在分析过程中，有些<code>import</code>没有正确分析出来，运行时会报<code>import error</code>，这时可以使用该参数</td>
</tr>
<tr>
<td><code>–additional-hooks-dir</code></td>
<td>指定用户的<code>hook</code>目录</td>
<td><code>hook</code>用法参见其他，系统<code>hook</code>在<code>PyInstaller\hooks</code>目录下</td>
</tr>
<tr>
<td><code>–runtime-hook</code></td>
<td>指定用户<code>runtime-hook</code></td>
<td>如果设置了此参数，则<code>runtime-hook</code>会在运行<code>main.py</code>之前被运行</td>
</tr>
<tr>
<td><code>–exclude-module</code></td>
<td>需要排除的<code>module</code></td>
<td><code>pyi</code>会分析出很多相互关联的库，但是某些库对用户来说是没用的，可以用这个参数排除这些库，有助于减少生成文件的大小</td>
</tr>
<tr>
<td><code>–key</code></td>
<td><code>pyi</code>会存储字节码，指定加密字节码的<code>key</code></td>
<td><code>16</code>位的字符串</td>
</tr>
</tbody></table>
<h3 id="生成参数"><a href="#生成参数" class="headerlink" title="生成参数"></a>生成参数</h3><table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th><strong>描述</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>-d</code></td>
<td>执行生成的<code>main.exe</code>时，会输出<code>py</code>i的一些<code>log</code>，有助于查错</td>
<td>默认：不输出<code>pyi</code>的<code>log</code></td>
</tr>
<tr>
<td><code>-s</code></td>
<td>优化符号表</td>
<td>原文明确表示不建议在<code>windows</code>上使用</td>
</tr>
<tr>
<td><code>–noupx</code></td>
<td>强制不使用<code>upx</code></td>
<td>默认：尽可能使用。</td>
</tr>
</tbody></table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th><strong>描述</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>–runtime-tmpdir</code></td>
<td>指定运行时的临时目录</td>
<td>默认：使用系统临时目录</td>
</tr>
</tbody></table>
<h3 id="Windows和Mac特有的参数"><a href="#Windows和Mac特有的参数" class="headerlink" title="Windows和Mac特有的参数"></a>Windows和Mac特有的参数</h3><table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th><strong>描述</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>-c</code></td>
<td>显示命令行窗口</td>
<td>与-w相反，默认含有此参数</td>
</tr>
<tr>
<td><code>-w</code></td>
<td>不显示命令行窗口</td>
<td>编写GUI程序时使用此参数有用。</td>
</tr>
<tr>
<td><code>-i</code></td>
<td>为<code>main.exe</code>指定图标</td>
<td><code>pyinstaller -i beauty.ico main.py</code></td>
</tr>
</tbody></table>
<h3 id="Windows特有的参数"><a href="#Windows特有的参数" class="headerlink" title="Windows特有的参数"></a>Windows特有的参数</h3><table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th><strong>描述</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>–version-file</code></td>
<td>添加版本信息文件</td>
<td><code>pyinstaller --version-file ver.txt</code></td>
</tr>
<tr>
<td><code>-m, --manifest</code></td>
<td>添加manifest文件</td>
<td><code>pyinstaller -m main.manifest</code></td>
</tr>
<tr>
<td><code>-r RESOURCE</code></td>
<td>请参考原文</td>
<td></td>
</tr>
<tr>
<td><code>–uac-admin</code></td>
<td>请参考原文</td>
<td></td>
</tr>
<tr>
<td><code>–uac-uiaccess</code></td>
<td>请参考原文</td>
<td></td>
</tr>
</tbody></table>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Failed-to-execute-script-main"><a href="#Failed-to-execute-script-main" class="headerlink" title="Failed to execute script main"></a><code>Failed to execute script main</code></h3><p>这个问题解决这个问题的方法很多，主要看你对应的报错信息，本人报错提示为：<code>ImportError: unable to find Qt5Core.dll on PATH</code>。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTY5NDkyOTcvaG93LXRvLWZpeC1pbXBvcnRlcnJvci11bmFibGUtdG8tZmluZC1xdDVjb3JlLWRsbC1vbi1wYXRoLWFmdGVyLXB5aW5zdGFsbGVyLWI=">https://stackoverflow.com/questions/56949297/how-to-fix-importerror-unable-to-find-qt5core-dll-on-path-after-pyinstaller-b<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B5aW5zdGFsbGVyL3B5aW5zdGFsbGVyL2lzc3Vlcy80Mjkz">https://github.com/pyinstaller/pyinstaller/issues/4293<i class="fa fa-external-link-alt"></i></span></p>
<p>里面描述的比较详细，具体就不详说了。总的来说呢，就是有的版本<code>pyqt5</code>库对系统变量的加载存在<code>bug</code>，具体原因只有官方才能解释了，咱也没法管了，对有<code>bug</code>的版本库提供一种办法就是，在主程序中<code>pyqt5</code>库<code>import</code>之前就对系统变量进行手动设置，<code>import</code>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line"><span class="keyword">if</span> hasattr(sys, <span class="string">&#x27;frozen&#x27;</span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;PATH&#x27;</span>] = sys._MEIPASS + <span class="string">&quot;;&quot;</span> + os.environ[<span class="string">&#x27;PATH&#x27;</span>]</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtWidgets, QtGui</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> untitled <span class="keyword">import</span> Ui_MainWindow</span><br></pre></td></tr></table></figure>

<p>这样就解决了该问题。</p>
<h3 id="加入打包文件信息"><a href="#加入打包文件信息" class="headerlink" title="加入打包文件信息"></a>加入打包文件信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyinstaller -w -D --icon&#x3D;icon.ico --version-file&#x3D;file_version_info.txt main.py</span><br></pre></td></tr></table></figure>

<p><code>file_version_info.txt</code>保存的是文件信息</p>
<p>其格式大概如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># UTF-8</span><br><span class="line">#</span><br><span class="line"># For more details about fixed file info &#39;ffi&#39; see:</span><br><span class="line"># http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;ms646997.aspx</span><br><span class="line">VSVersionInfo(</span><br><span class="line">  ffi&#x3D;FixedFileInfo(</span><br><span class="line">    # filevers and prodvers should be always a tuple with four items: (1, 2, 3, 4)</span><br><span class="line">    # Set not needed items to zero 0.</span><br><span class="line">    filevers&#x3D;(10, 5, 3819, 400),</span><br><span class="line">    prodvers&#x3D;(10, 5, 3819, 400),</span><br><span class="line">    # Contains a bitmask that specifies the valid bits &#39;flags&#39;r</span><br><span class="line">    mask&#x3D;0x17,</span><br><span class="line">    # Contains a bitmask that specifies the Boolean attributes of the file.</span><br><span class="line">    flags&#x3D;0x0,</span><br><span class="line">    # The operating system for which this file was designed.</span><br><span class="line">    # 0x4 - NT and there is no need to change it.</span><br><span class="line">    OS&#x3D;0x4,</span><br><span class="line">    # The general type of file.</span><br><span class="line">    # 0x1 - the file is an application.</span><br><span class="line">    fileType&#x3D;0x1,</span><br><span class="line">    # The function of the file.</span><br><span class="line">    # 0x0 - the function is not defined for this fileType</span><br><span class="line">    subtype&#x3D;0x0,</span><br><span class="line">    # Creation date and time stamp.</span><br><span class="line">    date&#x3D;(0, 0)</span><br><span class="line">    ),</span><br><span class="line">  kids&#x3D;[</span><br><span class="line">    StringFileInfo(</span><br><span class="line">      [</span><br><span class="line">      StringTable(</span><br><span class="line">        u&#39;040904b0&#39;,</span><br><span class="line">        [StringStruct(u&#39;CompanyName&#39;, u&#39;Tony&#39;),</span><br><span class="line">        StringStruct(u&#39;FileDescription&#39;, u&#39;作者托小尼646547989@qq.com&#39;),</span><br><span class="line">        StringStruct(u&#39;FileVersion&#39;, u&#39;1.0&#39;),</span><br><span class="line">        StringStruct(u&#39;InternalName&#39;, u&#39;cutImg&#39;),</span><br><span class="line">        StringStruct(u&#39;LegalCopyright&#39;, u&#39;Copyright 2019 Tony. All rights reserved.&#39;),</span><br><span class="line">        StringStruct(u&#39;OriginalFilename&#39;, u&#39;cutimg.exe&#39;),</span><br><span class="line">        StringStruct(u&#39;ProductName&#39;, u&#39;图片剪切&#39;),</span><br><span class="line">        StringStruct(u&#39;ProductVersion&#39;, u&#39;1.0&#39;),</span><br><span class="line">        StringStruct(u&#39;CompanyShortName&#39;, u&#39;Tony&#39;),</span><br><span class="line">        StringStruct(u&#39;ProductShortName&#39;, u&#39;图片剪切&#39;),</span><br><span class="line">        StringStruct(u&#39;LastChange&#39;, u&#39;b4ce371876a3dcbfef2affeee4ea9c9163d4628c-refs&#x2F;branch-heads&#x2F;3538@&#123;#516&#125;&#39;),</span><br><span class="line">        StringStruct(u&#39;Official Build&#39;, u&#39;1&#39;),</span><br><span class="line">        StringStruct(u&#39;SpecialBuild&#39;, u&#39;1023&#39;),</span><br><span class="line">        StringStruct(u&#39;PrivateBuild&#39;, u&#39;10016&#39;),</span><br><span class="line">        StringStruct(u&#39;KernelBuild&#39;, u&#39;129&#39;),</span><br><span class="line">        StringStruct(u&#39;ExpressBuild&#39;, u&#39;1&#39;),</span><br><span class="line">        StringStruct(u&#39;KernelVersion&#39;, u&#39;70.0.3538.25&#39;)])</span><br><span class="line">      ]), </span><br><span class="line">    VarFileInfo([VarStruct(u&#39;Translation&#39;, [1033, 1200])])</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用时可以复制以上代码，也可以参考别的<code>exe</code>文件生成一份</p>
<p>若之後版本更新不能使用的話</p>
<ol>
<li>打開<code>CMD</code>，<code>CD</code>到<code>Python</code>安裝目錄下<code>cd Lib/site-packages/PyInstaller-3.3.1-py3.6.egg/PyInstaller/utils/cliutils/</code></li>
<li>輸入<code>python grab_version.py &#123;拖曳任一安裝或免安裝的exe檔到CMD&#125;</code></li>
<li>按下<code>ENTER</code>，會自動產生<code>file_version_info.txt</code>，再將內容修改成自己要的資訊就可以使用了！</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190927160623.png"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyinstaller</tag>
        <tag>python打包</tag>
        <tag>打包文件信息</tag>
        <tag>Failed to execute script main</tag>
        <tag>[object Object]</tag>
      </tags>
  </entry>
  <entry>
    <title>python批量修改文件内容</title>
    <url>/93269144.html</url>
    <content><![CDATA[<p>最近技术群里一位群成员分享了两个工作编程笔记包，群里一片感谢，自己作为一个伸手党也跟着下载了一份。打开就一阵熟悉感，这不看云文档吗，一毛一样的界面，突然目录里瞥见了之前想了解的一个技术点笔记，点开又是一阵惊喜。</p>
<a id="more"></a>

<p>这哥们只放出了几行代码，类似看云上的收费文档，要看更多代码点击“查看更多吧”，又是惊喜，扫描二维码获取验证码才可继续查看，我岂能如你愿，不就一<code>js</code>判断，只要你内容在文件中，我还怕你这种小伎俩。</p>
<p>分析代码发现后面引用了一个<code>js</code>阻碍了我学习的脚步，删除了瞬时一片太平。看看其他技术点，好家伙，全部有这些代码，带着学习的态度重温下python的文件操作吧。我们将其批量修改下，基本代码每行我都做了注释，故也没什么可解释的了，都是基础代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020&#x2F;7&#x2F;2 11:04</span><br><span class="line"># @Author  : Tony Yu</span><br><span class="line"># @Author URI: https:&#x2F;&#x2F;www.diandian100.cn</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def batch_up_files(path, old, new, suffix&#x3D;&#39;.html&#39;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    批量替换文件内容</span><br><span class="line">    :param path: 文件所在的路径</span><br><span class="line">    :param old: 要替换的字符串</span><br><span class="line">    :param new: 替换后的字符串</span><br><span class="line">    :param suffix: 要替换的文件后缀</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 所有要修改的文件路径列表</span><br><span class="line">    files &#x3D; []</span><br><span class="line">    # 循环根目录下的所有文件夹，输出文件夹路径, 文件夹名字, 文件名</span><br><span class="line">    for dirpath, dirnames, filenames in os.walk(path):</span><br><span class="line">        for file in filenames:</span><br><span class="line">            # 只操作用户传进来的后缀文件</span><br><span class="line">            if file.endswith(suffix):</span><br><span class="line">                # 将要操作的文件路径添加至列表</span><br><span class="line">                files.append(os.path.join(dirpath, file))</span><br><span class="line"></span><br><span class="line">    # 开始循环操作列表中的文件</span><br><span class="line">    for file in files:</span><br><span class="line">        with open(str(file), &#39;r&#39;, encoding&#x3D;&quot;utf8&quot;, errors&#x3D;&#39;ignore&#39;) as f:</span><br><span class="line">            # 读取文件内容</span><br><span class="line">            contents &#x3D; f.read()</span><br><span class="line">            # 判断要替换的字符串是否在当前文件中，在就处理</span><br><span class="line">            if old in contents:</span><br><span class="line">                # 文件读取指针移动到开头</span><br><span class="line">                f.seek(0)</span><br><span class="line">                # 替换内容</span><br><span class="line">                contents &#x3D; contents.replace(old, new)</span><br><span class="line">        # 再次打开该文件，将新内容写入</span><br><span class="line">        with open(str(file), &#39;w&#39;, encoding&#x3D;&quot;utf8&quot;, errors&#x3D;&#39;ignore&#39;) as f:</span><br><span class="line">            f.write(contents)</span><br><span class="line">        print(file, &#39;已修改完毕……&#39;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    s &#x3D;&quot;&lt;script src&#x3D;\&quot;https:&#x2F;&#x2F;my.openwrite.cn&#x2F;js&#x2F;readmore.js\&quot; type&#x3D;\&quot;text&#x2F;javascript\&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;const btw &#x3D; new BTWPlugin();btw.init(&#123;id: &#39;main&#39;, blogId: &#39;123456789&#39;, name: &#39;tonyu&#39;, qrcode: &#39;公众号地址&#39;, keyword: &#39;验证码&#39;,&#125;);&lt;&#x2F;script&gt;&quot;</span><br><span class="line">    batch_up_files(&#39;.&#x2F;&#39;, s, &#39;&#39;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python批量修改文件内容</tag>
        <tag>python批量修改</tag>
        <tag>Python批量操作</tag>
      </tags>
  </entry>
  <entry>
    <title>python批量替换多个word文档内容</title>
    <url>/785b4585.html</url>
    <content><![CDATA[<p>之前博客里写过一个简单的切割图片的桌面小应用：<a href="https://www.diandian100.cn/ea027572.html">python开发的桌面程序代码详解</a>，今天同事有需求想批量修改一批word文档中包含的指定关键词，索性以练手的心态把这个东西给做了。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><code>pyqt5</code>、<code>docx</code>两个必须的扩展包</p>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>代码中几乎完券参考了上述中的代码，功能修改为了替换，且代码中含有注释，所这里直接上代码(注：代码中有很多废弃代码，大家自由删除，我直接复制过来的，懒了)：</p>
<h3 id="win-py"><a href="#win-py" class="headerlink" title="win.py"></a><code>win.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication, QGroupBox, QPushButton, QLabel, QHBoxLayout, QVBoxLayout, QGridLayout, QFormLayout, QLineEdit, QTextEdit, QInputDialog, QFileDialog, QMessageBox, QDesktopWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIntValidator, QDoubleValidator, QRegExpValidator, QTextCursor, QIcon, QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QRegExp</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgCut</span>(<span class="params">QWidget</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        super(ImgCut, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存储位置</span></span><br><span class="line">        self.forder_label = QLabel(<span class="string">&#x27;文档位置：&#x27;</span>)</span><br><span class="line">        self.forder_text = QLineEdit()</span><br><span class="line">        self.forder_text.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        self.forder_btn = QPushButton(<span class="string">&#x27;选择文档位置…&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 要替换的关键词</span></span><br><span class="line">        self.foot_label = QLabel(<span class="string">&#x27;关键词：&#x27;</span>)</span><br><span class="line">        self.foot_text = QLineEdit()</span><br><span class="line">        self.foot_text.setPlaceholderText(<span class="string">&#x27;多个关键词之间使用英文半角,分割&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 替换后的关键词</span></span><br><span class="line">        self.nums_label = QLabel(<span class="string">&#x27;替换后：&#x27;</span>)</span><br><span class="line">        self.nums_text = QLineEdit()</span><br><span class="line">        self.nums_text.setPlaceholderText(<span class="string">&#x27;与关键词一致，一一对应&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确认按钮</span></span><br><span class="line">        self.submit_btn = QPushButton(<span class="string">&#x27;开始替换&#x27;</span>)</span><br><span class="line">        self.submit_btn.setStyleSheet(<span class="string">&quot;QPushButton&#123;padding:20px 4px&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 图片label</span></span><br><span class="line">        self.img_label = QLabel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 复制按钮</span></span><br><span class="line">        self.copy_btn = QPushButton(<span class="string">&#x27;复制代码&#x27;</span>)</span><br><span class="line">        self.copy_btn.setStyleSheet(<span class="string">&quot;QPushButton&#123;padding:20px 4px&#125;&quot;</span>)</span><br><span class="line">        <span class="comment"># 显示生成的文件html</span></span><br><span class="line">        self.res_teatarea = QTextEdit()</span><br><span class="line"></span><br><span class="line">        self.initUi()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUi</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.createGridGroupBox()</span><br><span class="line">        <span class="comment"># self.creatVboxGroupBox()</span></span><br><span class="line">        self.creatFormGroupBox()</span><br><span class="line">        mainLayout = QVBoxLayout()</span><br><span class="line">        hboxLayout = QHBoxLayout()</span><br><span class="line">        <span class="comment"># hboxLayout.addStretch()</span></span><br><span class="line">        hboxLayout.addWidget(self.gridGroupBox)</span><br><span class="line">        <span class="comment"># hboxLayout.addWidget(self.vboxGroupBox)</span></span><br><span class="line">        mainLayout.addLayout(hboxLayout)</span><br><span class="line">        mainLayout.addWidget(self.formGroupBox)</span><br><span class="line">        self.setLayout(mainLayout)</span><br><span class="line">        <span class="comment"># 禁止最大化</span></span><br><span class="line">        <span class="comment"># self.setFixedSize(self.width(), self.height())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数区域</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createGridGroupBox</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.gridGroupBox = QGroupBox(<span class="string">&quot;基本参数&quot;</span>)</span><br><span class="line">        layout = QGridLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 点击选择保存路径按钮</span></span><br><span class="line">        self.forder_btn.clicked.connect(self.savePath)</span><br><span class="line">        <span class="comment"># 点击提交按钮</span></span><br><span class="line">        self.submit_btn.clicked.connect(self.submit)</span><br><span class="line">        layout.setSpacing(<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 网格布局</span></span><br><span class="line">        layout.addWidget(self.forder_label, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.forder_text, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        layout.addWidget(self.forder_btn, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.foot_label, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.foot_text, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.nums_label, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.nums_text, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.submit_btn, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        layout.setColumnStretch(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        self.gridGroupBox.setLayout(layout)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;word替换_Anthor By Tony Yu&#x27;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">r&#x27;E:\site\python\cutimg\favicon.ico&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片预览区域，已废弃</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">creatVboxGroupBox</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.vboxGroupBox = QGroupBox(<span class="string">&quot;图片预览&quot;</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        pixmap = QPixmap(<span class="string">r&quot;E:\site\python\cutimg\default.jpg&quot;</span>).scaled(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        self.img_label.setPixmap(pixmap)  <span class="comment"># 在label上显示图片</span></span><br><span class="line">        layout.addWidget(self.img_label)</span><br><span class="line">        self.vboxGroupBox.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 代码区域</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">creatFormGroupBox</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.formGroupBox = QGroupBox(<span class="string">&quot;替换结果&quot;</span>)</span><br><span class="line">        layout = QGridLayout()</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.res_teatarea, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># layout.addWidget(self.copy_btn, 2, 0)</span></span><br><span class="line">        <span class="comment"># 点击选择保存路径按钮</span></span><br><span class="line">        self.copy_btn.clicked.connect(self.copyText)</span><br><span class="line"></span><br><span class="line">        self.formGroupBox.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示消息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showMsg</span>(<span class="params">self, tit, content, icon=<span class="number">3</span></span>):</span></span><br><span class="line">        box = QMessageBox(QMessageBox.Question, tit, content)</span><br><span class="line">        <span class="comment"># 设置左上角消息框图标</span></span><br><span class="line">        box.setWindowIcon(QIcon(<span class="string">r&#x27;E:\site\python\cutimg\favicon.ico&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加按钮，可用中文</span></span><br><span class="line">        yes = box.addButton(<span class="string">&#x27;确定&#x27;</span>, QMessageBox.YesRole)</span><br><span class="line">        <span class="comment"># 设置消息框中内容前面的图标</span></span><br><span class="line">        box.setIcon(icon)</span><br><span class="line">        <span class="comment"># 显示该问答框</span></span><br><span class="line">        box.exec()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择保存文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savePath</span>(<span class="params">self</span>):</span></span><br><span class="line">        path = QFileDialog.getExistingDirectory(self, <span class="string">&quot;请选择您要保存的位置&quot;</span>)</span><br><span class="line">        <span class="comment"># 判断选择的文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">            <span class="comment"># 将保存url放入路径文本框中</span></span><br><span class="line">            self.forder_text.setText(path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;您选择的保存路径不存在，请重新选择！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交替换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        forder = self.forder_text.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> forder:</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;您还没有选择文档所在目录&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取要替换的关键词</span></span><br><span class="line">        before_words = self.foot_text.text()</span><br><span class="line">        <span class="comment"># 判断是否填写要替换的关键词</span></span><br><span class="line">        <span class="keyword">if</span> before_words:</span><br><span class="line">            before_words = before_words.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;请填写要替换的关键词&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取替换后的词</span></span><br><span class="line">        after_words = self.nums_text.text().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取文件列表</span></span><br><span class="line">        files = self.get_files(forder)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line"></span><br><span class="line">            doc = docx.Document(file)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断替换前后关键词长度是否一致(一致就按位置替换关键词，否则使用第一个被替换的额关键词进行替换)</span></span><br><span class="line">            <span class="keyword">if</span> len(before_words) == len(after_words):</span><br><span class="line">                <span class="keyword">for</span> index, word <span class="keyword">in</span> enumerate(before_words):</span><br><span class="line">                    self.replace_word(doc, word, after_words[index])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> word <span class="keyword">in</span> before_words:</span><br><span class="line">                    self.replace_word(doc, word, after_words[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># 保存word</span></span><br><span class="line">            doc.save(<span class="string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>.format(forder, file.split(<span class="string">&quot;/&quot;</span>)[<span class="number">-1</span>]))</span><br><span class="line">            <span class="comment"># 代码框光标移动至末尾</span></span><br><span class="line">            self.res_teatarea.moveCursor(QTextCursor.End)</span><br><span class="line">            <span class="comment"># 每次打印的替换结果</span></span><br><span class="line">            shtml = <span class="string">&quot;&#123;&#125;替换完成\n&quot;</span>.format(file)</span><br><span class="line">            <span class="comment"># 将代码粘贴至代码框光标位置</span></span><br><span class="line">            self.res_teatarea.insertPlainText(shtml)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 获取docx文件列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_files</span>(<span class="params">self, forder</span>):</span></span><br><span class="line">        files = []</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(forder):</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&quot;.docx&quot;</span>): <span class="comment">#排除文件夹内的其它干扰文件，只获取word文件</span></span><br><span class="line">                files.append(forder+<span class="string">&#x27;/&#x27;</span>+file)</span><br><span class="line">        <span class="keyword">return</span> files</span><br><span class="line">    <span class="comment"># 替换文档关键词</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replace_word</span>(<span class="params">self, doc, before_words, after_words</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;此函数用于批量替换合同中需要替换的信息</span></span><br><span class="line"><span class="string">        doc:文件</span></span><br><span class="line"><span class="string">        old_info和new_info：原文字和需要替换的新文字</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 读取段落中的所有run，找到需替换的信息进行替换</span></span><br><span class="line">        <span class="keyword">for</span> para <span class="keyword">in</span> doc.paragraphs:  <span class="comment">#</span></span><br><span class="line">            <span class="keyword">for</span> run <span class="keyword">in</span> para.runs:</span><br><span class="line">                run.text = run.text.replace(before_words, after_words)  <span class="comment"># 替换信息</span></span><br><span class="line">        <span class="comment"># 读取表格中的所有单元格，找到需替换的信息进行替换</span></span><br><span class="line">        <span class="keyword">for</span> table <span class="keyword">in</span> doc.tables:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> table.rows:</span><br><span class="line">                <span class="keyword">for</span> cell <span class="keyword">in</span> row.cells:</span><br><span class="line">                    cell.text = cell.text.replace(before_words, after_words)  <span class="comment"># 替换信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复制代码，已废弃</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyText</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取代码框内容</span></span><br><span class="line">        data = self.res_teatarea.toPlainText()</span><br><span class="line">        <span class="comment"># 判断代码框是否有内容</span></span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="comment"># 如果有内容将内容添加至剪贴板</span></span><br><span class="line">            clipboard = QApplication.clipboard()</span><br><span class="line">            clipboard.setText(data)</span><br><span class="line">            self.showMsg(<span class="string">&#x27;信息&#x27;</span>, <span class="string">&#x27;内容以成功复制到剪贴板&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.showMsg(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;代码为空，没有代码可以复制&#x27;</span>)</span><br><span class="line">	<span class="comment"># 废弃代码，自由删除</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cutImg</span>(<span class="params">self, file, head, foot, pre, forder, nums</span>):</span></span><br><span class="line">        <span class="comment"># 打开图片</span></span><br><span class="line">        img = Image.open(file)</span><br><span class="line">        <span class="comment"># 图片宽度/高度</span></span><br><span class="line">        width, height = img.size</span><br><span class="line">        <span class="comment"># 每份高度（减去废弃的头部和底部高度）</span></span><br><span class="line">        item_height = (height - head - foot) / nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(nums):</span><br><span class="line">            <span class="comment"># crop参数：剪切起始点x坐标，起始点y坐标，终点x坐标，终点y坐标</span></span><br><span class="line">            croped = img.crop((<span class="number">0</span>, (head + i * item_height), width, (i + <span class="number">1</span>) * item_height + head))</span><br><span class="line">            <span class="comment"># 图片名称从1开始</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 格式化图片名称，图片名称两位数，不足两位前面补0</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">                i = <span class="string">&#x27;0&#123;&#125;&#x27;</span>.format(i)</span><br><span class="line">            <span class="comment"># 格式化图片名称，添加图片名前缀</span></span><br><span class="line">            imgName = <span class="string">&#x27;&#123;&#125;&#123;&#125;.jpg&#x27;</span>.format(pre, i)</span><br><span class="line">            <span class="comment"># 代码框光标移动至末尾</span></span><br><span class="line">            self.res_teatarea.moveCursor(QTextCursor.End)</span><br><span class="line">            <span class="comment"># 每次打印的图片标签</span></span><br><span class="line">            shtml = <span class="string">&#x27;&lt;img src=&quot;&#123;&#125;&quot; /&gt;\n&#x27;</span>.format(imgName)</span><br><span class="line">            <span class="comment"># 将代码粘贴至代码框光标位置</span></span><br><span class="line">            self.res_teatarea.insertPlainText(shtml)</span><br><span class="line">            <span class="comment"># 连接保存路径和图片名</span></span><br><span class="line">            files = os.path.join(forder, imgName)</span><br><span class="line">            <span class="comment"># 保存图片</span></span><br><span class="line">            croped.save(files)</span><br><span class="line">        <span class="comment"># 切割完成提示</span></span><br><span class="line">        self.showMsg(<span class="string">&#x27;成功&#x27;</span>, <span class="string">&#x27;图片切割完成，请到目标文件夹查看吧&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = ImgCut()</span><br><span class="line">    ex.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p>我这里要生成<code>exe</code>的，所以我这里准备了一个入口文件</p>
<h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a><code>main.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hasattr(sys, <span class="string">&#x27;frozen&#x27;</span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;PATH&#x27;</span>] = sys._MEIPASS + <span class="string">&quot;;&quot;</span> + os.environ[<span class="string">&#x27;PATH&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> win</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    MainWindow = QMainWindow()</span><br><span class="line">    ui = win.ImgCut()</span><br><span class="line">    ui.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<h2 id="打包exe"><a href="#打包exe" class="headerlink" title="打包exe"></a>打包<code>exe</code></h2><p>文件夹原有文件为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_version_info.txt #exe打包描述文件，程序属性</span><br><span class="line">main.py # 打包入口文件</span><br><span class="line">tony.ico # exe软件图标</span><br><span class="line">win.py # 主功能文件</span><br></pre></td></tr></table></figure>

<p><code>file_version_info.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># UTF-8</span><br><span class="line">#</span><br><span class="line"># For more details about fixed file info &#39;ffi&#39; see:</span><br><span class="line"># http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;ms646997.aspx</span><br><span class="line">VSVersionInfo(</span><br><span class="line">  ffi&#x3D;FixedFileInfo(</span><br><span class="line">    # filevers and prodvers should be always a tuple with four items: (1, 2, 3, 4)</span><br><span class="line">    # Set not needed items to zero 0.</span><br><span class="line">    filevers&#x3D;(10, 5, 3819, 400),</span><br><span class="line">    prodvers&#x3D;(10, 5, 3819, 400),</span><br><span class="line">    # Contains a bitmask that specifies the valid bits &#39;flags&#39;r</span><br><span class="line">    mask&#x3D;0x17,</span><br><span class="line">    # Contains a bitmask that specifies the Boolean attributes of the file.</span><br><span class="line">    flags&#x3D;0x0,</span><br><span class="line">    # The operating system for which this file was designed.</span><br><span class="line">    # 0x4 - NT and there is no need to change it.</span><br><span class="line">    OS&#x3D;0x4,</span><br><span class="line">    # The general type of file.</span><br><span class="line">    # 0x1 - the file is an application.</span><br><span class="line">    fileType&#x3D;0x1,</span><br><span class="line">    # The function of the file.</span><br><span class="line">    # 0x0 - the function is not defined for this fileType</span><br><span class="line">    subtype&#x3D;0x0,</span><br><span class="line">    # Creation date and time stamp.</span><br><span class="line">    date&#x3D;(0, 0)</span><br><span class="line">    ),</span><br><span class="line">  kids&#x3D;[</span><br><span class="line">    StringFileInfo(</span><br><span class="line">      [</span><br><span class="line">      StringTable(</span><br><span class="line">        u&#39;040904b0&#39;,</span><br><span class="line">        [StringStruct(u&#39;CompanyName&#39;, u&#39;Tony&#39;),</span><br><span class="line">        StringStruct(u&#39;FileDescription&#39;, u&#39;作者托小尼646547989@qq.com&#39;),</span><br><span class="line">        StringStruct(u&#39;FileVersion&#39;, u&#39;1.0&#39;),</span><br><span class="line">        StringStruct(u&#39;InternalName&#39;, u&#39;Replace Word&#39;),</span><br><span class="line">        StringStruct(u&#39;LegalCopyright&#39;, u&#39;Copyright 2019 Tony. All rights reserved.&#39;),</span><br><span class="line">        StringStruct(u&#39;OriginalFilename&#39;, u&#39;replace_word.exe&#39;),</span><br><span class="line">        StringStruct(u&#39;ProductName&#39;, u&#39;Word批量替换&#39;),</span><br><span class="line">        StringStruct(u&#39;ProductVersion&#39;, u&#39;1.0&#39;),</span><br><span class="line">        StringStruct(u&#39;CompanyShortName&#39;, u&#39;Tony&#39;),</span><br><span class="line">        StringStruct(u&#39;ProductShortName&#39;, u&#39;Word批量替换&#39;),</span><br><span class="line">        StringStruct(u&#39;LastChange&#39;, u&#39;b4ce371876a3dcbfef2affeee4ea9c9163d4628c-refs&#x2F;branch-heads&#x2F;3538@&#123;#516&#125;&#39;),</span><br><span class="line">        StringStruct(u&#39;Official Build&#39;, u&#39;1&#39;),</span><br><span class="line">        StringStruct(u&#39;SpecialBuild&#39;, u&#39;1023&#39;),</span><br><span class="line">        StringStruct(u&#39;PrivateBuild&#39;, u&#39;10016&#39;),</span><br><span class="line">        StringStruct(u&#39;KernelBuild&#39;, u&#39;129&#39;),</span><br><span class="line">        StringStruct(u&#39;ExpressBuild&#39;, u&#39;1&#39;),</span><br><span class="line">        StringStruct(u&#39;KernelVersion&#39;, u&#39;70.0.3538.25&#39;)])</span><br><span class="line">      ]), </span><br><span class="line">    VarFileInfo([VarStruct(u&#39;Translation&#39;, [1033, 1200])])</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="执行打包"><a href="#执行打包" class="headerlink" title="执行打包"></a>执行打包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyinstaller -F -w -i tony.ico --version-file&#x3D;file_version_info.txt E:\site\python\docx_exc\main.py</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>生成后的文件夹里多了一个dist目录，其中有一个<code>main.exe</code>可执行文件，我么执行下测试下</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191127111907.png"></p>
<p>经测试，正常可以批量替换，关于打包详细使用，可参考另一个文章：<a href="https://www.diandian100.cn/95897e4c.html">python打包文件之pyinstaller</a></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>word批量替换</tag>
        <tag>批量替换word</tag>
        <tag>批量替换文档</tag>
        <tag>python替换word</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据分析之第三方模块NumPy</title>
    <url>/75e57c9c.html</url>
    <content><![CDATA[<p> <code>NumPy</code>(<code>Numerical Python</code>) 是 <code>Python</code> 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。 </p>
<a id="more"></a>

<p> 数据分析三剑客：<code>Numpy</code>，<code>Pandas</code>，<code>Matplotlib</code>；<code>Numpy</code>与<code>Padas</code>是数据结构、<code>Matplotlib</code>绘图使用 。</p>
<p>后续代码示例都默认引入了<code>NumPy</code>包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h3 id="array"><a href="#array" class="headerlink" title="array"></a><code>array</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(object, dtype = <span class="literal">None</span>, copy = <span class="literal">True</span>, order = <span class="literal">None</span>, subok = <span class="literal">False</span>, ndmin = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>object</code></td>
<td align="left">数组或嵌套的数列</td>
</tr>
<tr>
<td align="left"><code>dtype</code></td>
<td align="left">数组元素的数据类型，可选</td>
</tr>
<tr>
<td align="left"><code>copy</code></td>
<td align="left">对象是否需要复制，可选</td>
</tr>
<tr>
<td align="left"><code>order</code></td>
<td align="left">创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td>
</tr>
<tr>
<td align="left"><code>subok</code></td>
<td align="left">默认返回一个与基类类型一致的数组</td>
</tr>
<tr>
<td align="left"><code>ndmin</code></td>
<td align="left">指定生成数组的最小维度</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line">print(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">4</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h4 id="设定维度"><a href="#设定维度" class="headerlink" title="设定维度"></a>设定维度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>], ndmin=<span class="number">3</span>)</span><br><span class="line">print(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[[<span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">4</span> <span class="number">3</span>]]]</span><br></pre></td></tr></table></figure>

<h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([[<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">9</span>]])</span><br><span class="line">print(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[list([<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>]) list([<span class="number">5</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">9</span>])]</span><br></pre></td></tr></table></figure>

<h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a><code>empty</code></h3><p>empty 方法用来创建一个指定形状（<code>shape</code>）、数据类型（<code>dtype</code>）且未初始化的数组 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.empty(shape, dtype = float, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>shape</code></td>
<td align="left">数组形状</td>
</tr>
<tr>
<td align="left"><code>dtype</code></td>
<td align="left">数据类型，可选</td>
</tr>
<tr>
<td align="left"><code>order</code></td>
<td align="left">有”C”和”F”两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。</td>
</tr>
</tbody></table>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.empty([<span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">print(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[<span class="number">6.23042070e-307</span> <span class="number">1.69118108e-306</span>]</span><br><span class="line"> [<span class="number">6.23054972e-307</span> <span class="number">1.06811422e-306</span>]</span><br><span class="line"> [<span class="number">1.33510679e-306</span> <span class="number">2.22522597e-306</span>]]</span><br></pre></td></tr></table></figure>

<h3 id="zeros"><a href="#zeros" class="headerlink" title="zeros"></a><code>zeros</code></h3><p>创建指定大小的数组，数组元素以 0 来填充，且默认为浮点型</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros(shape, dtype = float, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>shape</code></td>
<td align="left">数组形状</td>
</tr>
<tr>
<td align="left"><code>dtype</code></td>
<td align="left">数据类型，可选</td>
</tr>
<tr>
<td align="left"><code>order</code></td>
<td align="left">‘C’ 用于 C 的行数组，或者 ‘F’ 用于 FORTRAN 的列数组</td>
</tr>
</tbody></table>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><h5 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.zeros([<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br></pre></td></tr></table></figure>

<h5 id="设置类型"><a href="#设置类型" class="headerlink" title="设置类型"></a>设置类型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.zeros([<span class="number">3</span>,], dtype=np.int)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="ones"><a href="#ones" class="headerlink" title="ones"></a><code>ones</code></h3><p>创建指定形状的数组，数组元素以 1 来填充，默认为浮点型</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.ones(shape, dtype &#x3D; None, order &#x3D; &#39;C&#39;)</span><br></pre></td></tr></table></figure>

<h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>shape</code></td>
<td align="left">数组形状</td>
</tr>
<tr>
<td align="left"><code>dtype</code></td>
<td align="left">数据类型，可选</td>
</tr>
<tr>
<td align="left"><code>order</code></td>
<td align="left">‘C’ 用于 C 的行数组，或者 ‘F’ 用于 FORTRAN 的列数组</td>
</tr>
</tbody></table>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><h5 id="二维数组-1"><a href="#二维数组-1" class="headerlink" title="二维数组"></a>二维数组</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.ones([<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br></pre></td></tr></table></figure>

<h5 id="设置类型-1"><a href="#设置类型-1" class="headerlink" title="设置类型"></a>设置类型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.ones([<span class="number">3</span>,], dtype=np.int)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="random"><a href="#random" class="headerlink" title="random"></a><code>random</code></h3><p>随机数生成</p>
<h4 id="seed"><a href="#seed" class="headerlink" title="seed"></a><code>seed</code></h4><p><code>seed( )</code> 用于指定随机数生成时所用算法开始的整数值。</p>
<p>1.如果使用相同的<code>seed( )</code>值，则每次生成的随即数都相同；</p>
<p>2.如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同。</p>
<p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用随机数种子，使得每次生成的随机数相同</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">arr = np.random.rand(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果每次随机的矩阵及元素都相同</span></span><br><span class="line">[[<span class="number">0.47130726</span> <span class="number">0.74036282</span>]</span><br><span class="line"> [<span class="number">0.80323113</span> <span class="number">0.93100884</span>]</span><br><span class="line"> [<span class="number">0.39053087</span> <span class="number">0.34556671</span>]]</span><br></pre></td></tr></table></figure>



<h4 id="rand"><a href="#rand" class="headerlink" title="rand"></a><code>rand</code></h4><p>生成指定维度的的**[0,1)范围**之间的随机数，输入参数为维度 </p>
<h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.rand(d1, d2, ……dn)</span><br></pre></td></tr></table></figure>

<h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.rand(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[<span class="number">0.47130726</span> <span class="number">0.74036282</span>]</span><br><span class="line"> [<span class="number">0.80323113</span> <span class="number">0.93100884</span>]</span><br><span class="line"> [<span class="number">0.39053087</span> <span class="number">0.34556671</span>]]</span><br></pre></td></tr></table></figure>

<h4 id="random-1"><a href="#random-1" class="headerlink" title="random"></a><code>random</code></h4><p>生成指定维度的的**[0,1)范围**之间的随机数，输入参数为维度 </p>
<h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.random(size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">size</td>
<td align="left">数组形状，int或int元组，可选</td>
</tr>
</tbody></table>
<h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="number">0.21946016191071327</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.random(size=(<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[<span class="number">0.93875635</span> <span class="number">0.8774334</span> ]</span><br><span class="line"> [<span class="number">0.35932992</span> <span class="number">0.50240798</span>]</span><br><span class="line"> [<span class="number">0.01817927</span> <span class="number">0.84576939</span>]]</span><br></pre></td></tr></table></figure>

<h4 id="randint"><a href="#randint" class="headerlink" title="randint"></a><code>randint</code></h4><p> 返回随机数或者随机数组成的array </p>
<h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.randint(low, high = <span class="literal">None</span>, size = <span class="literal">None</span>,dtype = <span class="string">&#x27;l&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>low</code>、<code>high</code></td>
<td align="left">数字范围区间，high必须大于low</td>
</tr>
<tr>
<td align="left"><code>size</code></td>
<td align="left">数组形状，int或int元组，可选</td>
</tr>
<tr>
<td align="left"><code>dtype</code></td>
<td align="left">数据类型，可选，默认int</td>
</tr>
</tbody></table>
<h5 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机生成一个2行3列且元素为5到10的数组矩阵</span></span><br><span class="line">arr = np.random.randint(low=<span class="number">5</span>, high=<span class="number">10</span>, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 简写方式</span></span><br><span class="line">arr = np.random.randint(<span class="number">5</span>, <span class="number">10</span>, size=(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[<span class="number">6</span> <span class="number">7</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h2><p><code>NumPy</code> 数组的维数称为秩（<code>rank</code>），一维数组的秩为 1，二维数组的秩为 2，以此类推。</p>
<p>在 <code>NumPy</code>中，每一个线性的数组称为是一个轴（axis），也就是维度（dimensions）。比如说，二维数组相当于是两个一维数组，其中第一个一维数组中每个元素又是一个一维数组。所以一维数组就是 ·中的轴（axis），第一个轴相当于是底层数组，第二个轴是底层数组里的数组。而轴的数量——秩，就是数组的维数。</p>
<p>很多时候可以声明 axis。axis=0，表示沿着第 0 轴进行操作，即对每一列进行操作；axis=1，表示沿着第1轴进行操作，即对每一行进行操作。</p>
<p><code>NumPy</code> 的数组中比较重要 <code>ndarray</code> 对象属性有</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>ndarray.ndim</code></td>
<td align="left">秩，即轴的数量或维度的数量</td>
</tr>
<tr>
<td align="left"><code>ndarray.shape</code></td>
<td align="left">数组的维度，对于矩阵，n 行 m 列</td>
</tr>
<tr>
<td align="left"><code>ndarray.size</code></td>
<td align="left">数组元素的总个数，相当于 .shape 中 n*m 的值</td>
</tr>
<tr>
<td align="left"><code>ndarray.dtype</code></td>
<td align="left"><code>ndarray</code> 对象的元素类型</td>
</tr>
<tr>
<td align="left"><code>ndarray.itemsize</code></td>
<td align="left"><code>ndarray</code> 对象中每个元素的大小，以字节为单位</td>
</tr>
<tr>
<td align="left"><code>ndarray.flags</code></td>
<td align="left"><code>ndarray</code> 对象的内存信息</td>
</tr>
<tr>
<td align="left"><code>ndarray.real</code></td>
<td align="left"><code>ndarray</code>元素的实部</td>
</tr>
<tr>
<td align="left"><code>ndarray.imag</code></td>
<td align="left"><code>ndarray</code> 元素的虚部</td>
</tr>
<tr>
<td align="left"><code>ndarray.data</code></td>
<td align="left">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td>
</tr>
</tbody></table>
<h3 id="ndarray-ndim"><a href="#ndarray-ndim" class="headerlink" title="ndarray.ndim"></a><code>ndarray.ndim</code></h3><p><code>ndarray.ndim</code> 用于返回数组的维数，等于秩。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">24</span>)  </span><br><span class="line"><span class="keyword">print</span> (a.ndim)             <span class="comment"># a 现只有一个维度</span></span><br><span class="line"><span class="comment"># 现在调整其大小</span></span><br><span class="line">b = a.reshape(<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>)  <span class="comment"># b 现在拥有三个维度</span></span><br><span class="line"><span class="keyword">print</span> (b.ndim)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="ndarray-shape"><a href="#ndarray-shape" class="headerlink" title="ndarray.shape"></a><code>ndarray.shape</code></h3><p><code>ndarray.shape</code> 表示数组的维度，返回一个元组，这个元组的长度就是维度的数目，即 ndim 属性(秩)。比如，一个二维数组，其维度表示”行数”和”列数”。</p>
<p><code>ndarray.shape</code> 也可以用于调整数组大小。</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line"> </span><br><span class="line">a &#x3D; np.array([[1,2,3],[4,5,6]])  </span><br><span class="line">print (a.shape)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(2, 3)</span><br></pre></td></tr></table></figure>

<p>调整数组大小。</p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line"> </span><br><span class="line">a &#x3D; np.array([[1,2,3],[4,5,6]]) </span><br><span class="line">a.shape &#x3D;  (3,2)  </span><br><span class="line">print (a)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br></pre></td></tr></table></figure>

<p><code>NumPy</code> 也提供了 reshape 函数来调整数组大小。</p>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line"> </span><br><span class="line">a &#x3D; np.array([[1,2,3],[4,5,6]]) </span><br><span class="line">b &#x3D; a.reshape(3,2)  </span><br><span class="line">print (b)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[1, 2] </span><br><span class="line"> [3, 4] </span><br><span class="line"> [5, 6]]</span><br></pre></td></tr></table></figure>

<h3 id="ndarray-itemsize"><a href="#ndarray-itemsize" class="headerlink" title="ndarray.itemsize"></a><code>ndarray.itemsize</code></h3><p><code>ndarray.itemsize</code> 以字节的形式返回数组中每一个元素的大小。</p>
<p>例如，一个元素类型为 <code>float64</code> 的数组 <code>itemsiz</code> 属性值为 8(<code>float64</code> 占用 64 个 bits，每个字节长度为 8，所以 64/8，占用 8 个字节），又如，一个元素类型为 <code>complex32</code> 的数组 item 属性为 4（32/8）。</p>
<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line"> </span><br><span class="line"># 数组的 dtype 为 int8（一个字节）  </span><br><span class="line">x &#x3D; np.array([1,2,3,4,5], dtype &#x3D; np.int8)  </span><br><span class="line">print (x.itemsize)</span><br><span class="line"> </span><br><span class="line"># 数组的 dtype 现在为 float64（八个字节） </span><br><span class="line">y &#x3D; np.array([1,2,3,4,5], dtype &#x3D; np.float64)  </span><br><span class="line">print (y.itemsize)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">8</span><br></pre></td></tr></table></figure>

<h3 id="ndarray-flags"><a href="#ndarray-flags" class="headerlink" title="ndarray.flags"></a><code>ndarray.flags</code></h3><p><code>ndarray.flags</code> 返回 <code>ndarray</code> 对象的内存信息，包含以下属性：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>C_CONTIGUOUS (C)</code></td>
<td align="left">数据是在一个单一的C风格的连续段中</td>
</tr>
<tr>
<td align="left"><code>F_CONTIGUOUS (F)</code></td>
<td align="left">数据是在一个单一的Fortran风格的连续段中</td>
</tr>
<tr>
<td align="left"><code>OWNDATA (O)</code></td>
<td align="left">数组拥有它所使用的内存或从另一个对象中借用它</td>
</tr>
<tr>
<td align="left"><code>WRITEABLE (W)</code></td>
<td align="left">数据区域可以被写入，将该值设置为 False，则数据为只读</td>
</tr>
<tr>
<td align="left"><code>ALIGNED (A)</code></td>
<td align="left">数据和所有元素都适当地对齐到硬件上</td>
</tr>
<tr>
<td align="left"><code>UPDATEIFCOPY (U)</code></td>
<td align="left">这个数组是其它数组的一个副本，当这个数组被释放时，原数组的内容将被更新</td>
</tr>
</tbody></table>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line"> </span><br><span class="line">x &#x3D; np.array([1,2,3,4,5])  </span><br><span class="line">print (x.flags)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C_CONTIGUOUS : True</span><br><span class="line">F_CONTIGUOUS : True</span><br><span class="line">OWNDATA : True</span><br><span class="line">WRITEABLE : True</span><br><span class="line">ALIGNED : True</span><br><span class="line">WRITEBACKIFCOPY : False</span><br><span class="line">UPDATEIFCOPY : False</span><br></pre></td></tr></table></figure>

<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p><code>ndarray</code>对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。</p>
<p><code>ndarray</code> 数组可以基于 0 - n 的下标进行索引，切片对象可以通过内置的 slice 函数，并设置 start, stop 及 step 参数进行，从原数组中切割出一个新数组。</p>
<p>示例</p>
<p>一维数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">s = slice(<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>)   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为2</span></span><br><span class="line"><span class="keyword">print</span> (a[s])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<p> 我们也可以通过冒号分隔切片参数 <code>start:stop:step</code> 来进行切片操作： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>)  </span><br><span class="line">b = a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为 2</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<p> 冒号 <strong>:</strong> 的解释：如果只放置一个参数，如 **[2]**，将返回与该索引相对应的单个元素。如果为 **[2:]**，表示从该索引开始以后的所有项都将被提取。如果使用了两个参数，如 <code>[2:7]</code>，那么则提取两个索引(不包括停止索引)之间的项。 </p>
<p>多维数组</p>
<p> 多维数组同样适用上述索引提取方法 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 从某个索引处开始切割</span></span><br><span class="line">print(<span class="string">&#x27;从数组索引 a[1:] 处开始切割&#x27;</span>)</span><br><span class="line">print(a[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">从数组索引 a[<span class="number">1</span>:] 处开始切割</span><br><span class="line">[[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br></pre></td></tr></table></figure>

<p> 切片还可以包括省略号 <strong>…</strong>，来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的 <code>ndarray</code>。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">&#x27;第2列元素&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (a[...,<span class="number">1</span>])   <span class="comment"># 第2列元素</span></span><br><span class="line">print(<span class="string">&#x27;第2行元素&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (a[<span class="number">1</span>,...])   <span class="comment"># 第2行元素</span></span><br><span class="line">print(<span class="string">&#x27;第2列及剩下的所有元素&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (a[...,<span class="number">1</span>:])  <span class="comment"># 第2列及剩下的所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">第<span class="number">2</span>列元素</span><br><span class="line">[<span class="number">2</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">第<span class="number">2</span>行元素</span><br><span class="line">[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">第<span class="number">2</span>列及剩下的所有元素</span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>NumPy 提供了多种排序的方法。 这些排序函数实现不同的排序算法，每个排序算法的特征在于执行速度，最坏情况性能，所需的工作空间和算法的稳定性。 下表显示了三种排序算法的比较。</p>
<table>
<thead>
<tr>
<th align="left">种类</th>
<th align="left">速度</th>
<th align="left">最坏情况</th>
<th align="left">工作空间</th>
<th align="left">稳定性</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&#39;quicksort&#39;</code>（快速排序）</td>
<td align="left">1</td>
<td align="left"><code>O(n^2)</code></td>
<td align="left">0</td>
<td align="left">否</td>
</tr>
<tr>
<td align="left"><code>&#39;mergesort&#39;</code>（归并排序）</td>
<td align="left">2</td>
<td align="left"><code>O(n*log(n))</code></td>
<td align="left">~n/2</td>
<td align="left">是</td>
</tr>
<tr>
<td align="left"><code>&#39;heapsort&#39;</code>（堆排序）</td>
<td align="left">3</td>
<td align="left"><code>O(n*log(n))</code></td>
<td align="left">0</td>
<td align="left">否</td>
</tr>
</tbody></table>
<h3 id="numpy-sort"><a href="#numpy-sort" class="headerlink" title="numpy.sort()"></a>numpy.sort()</h3><p>numpy.sort() 函数返回输入数组的排序副本。函数格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numpy.sort(a, axis, kind, order)</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>a: 要排序的数组</li>
<li>axis: 沿着它排序数组的轴，如果没有数组会被展开，沿着最后的轴排序， axis=0 按列排序，axis=1 按行排序</li>
<li>kind: 默认为’quicksort’（快速排序）</li>
<li>order: 如果数组包含字段，则是要排序的字段</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">1</span>]])  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;调用 sort() 函数：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (np.sort(a))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;按列排序：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (np.sort(a, axis =  <span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 在 sort 函数中排序字段 </span></span><br><span class="line">dt = np.dtype([(<span class="string">&#x27;name&#x27;</span>,  <span class="string">&#x27;S10&#x27;</span>),(<span class="string">&#x27;age&#x27;</span>,  int)]) </span><br><span class="line">a = np.array([(<span class="string">&quot;raju&quot;</span>,<span class="number">21</span>),(<span class="string">&quot;anil&quot;</span>,<span class="number">25</span>),(<span class="string">&quot;ravi&quot;</span>,  <span class="number">17</span>),  (<span class="string">&quot;amar&quot;</span>,<span class="number">27</span>)], dtype = dt)  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;按 name 排序：&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> (np.sort(a, order =  <span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">我们的数组是：</span><br><span class="line">[[<span class="number">3</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用 sort() 函数：</span><br><span class="line">[[<span class="number">3</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">按列排序：</span><br><span class="line">[[<span class="number">3</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">7</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们的数组是：</span><br><span class="line">[(<span class="string">b&#x27;raju&#x27;</span>, <span class="number">21</span>) (<span class="string">b&#x27;anil&#x27;</span>, <span class="number">25</span>) (<span class="string">b&#x27;ravi&#x27;</span>, <span class="number">17</span>) (<span class="string">b&#x27;amar&#x27;</span>, <span class="number">27</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">按 name 排序：</span><br><span class="line">[(<span class="string">b&#x27;amar&#x27;</span>, <span class="number">27</span>) (<span class="string">b&#x27;anil&#x27;</span>, <span class="number">25</span>) (<span class="string">b&#x27;raju&#x27;</span>, <span class="number">21</span>) (<span class="string">b&#x27;ravi&#x27;</span>, <span class="number">17</span>)]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title>python装饰器详解</title>
    <url>/59ee5def.html</url>
    <content><![CDATA[<p>装饰器(<code>Decorators</code>)是 <code>Python</code> 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更<code>Pythonic</code>（<code>Python</code>范儿）。</p>
<p>其主要作用就是在不改变原有函数代码的前提下，给该函数添加新的功能</p>
<a id="more"></a>

<h2 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h2><p>原始要求就是一台电脑，功能是可以播放音乐，如果我们在不改变<code>computer</code>函数原有代码的情况下让电脑有其他功能该如何操作？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;我可以播放音乐&#x27;</span>)</span><br><span class="line"><span class="comment"># 运行电脑</span></span><br><span class="line">computer()</span><br></pre></td></tr></table></figure>

<h2 id="使用其他函数调用"><a href="#使用其他函数调用" class="headerlink" title="使用其他函数调用"></a>使用其他函数调用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;我可以播放音乐&#x27;</span>)</span><br><span class="line"><span class="comment"># 电脑扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">    computer()</span><br><span class="line"><span class="comment"># 运行扩展</span></span><br><span class="line">extend()</span><br></pre></td></tr></table></figure>

<p>该方式确实没有改变原有函数代码，但是却改变了直接运行的函数，在一个项目中我们可能有很多地方要调用<code>computer</code>，如果这样改写势必要将之前所有调用<code>computer</code>的地方都要改成<code>extend</code></p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>我们是否可以定义一个叫<code>computer</code>的变量来接收<code>extend</code>，然后在执行<code>computer</code>，被调用的地方不是就不用修改了？我们尝试下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;我可以播放音乐&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">    <span class="comment"># 运行电脑原有功能</span></span><br><span class="line">    computer()</span><br><span class="line"><span class="comment"># 将扩展功能赋值给computer</span></span><br><span class="line">computer = extend</span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">computer()</span><br></pre></td></tr></table></figure>

<p>执行代码我们看下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">我可以编写代码</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;E:&#x2F;test.py&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    computer()</span><br><span class="line">  File &quot;E:&#x2F;test.py&quot;, line 7, in extend</span><br><span class="line">    computer()</span><br><span class="line">  File &quot;E:&#x2F;test.py&quot;, line 7, in extend</span><br><span class="line">    computer()</span><br><span class="line">  File &quot;E:&#x2F;test.py&quot;, line 7, in extend</span><br><span class="line">    computer()</span><br><span class="line">  [Previous line repeated 993 more times]</span><br><span class="line">  File &quot;E:&#x2F;test.py&quot;, line 6, in extend</span><br><span class="line">    print(&#39;我可以编写代码&#39;)</span><br><span class="line">RecursionError: maximum recursion depth exceeded while calling a Python object</span><br></pre></td></tr></table></figure>

<p>很显然这样是有问题的，<code>computer</code>的值是<code>extend</code>，<code>extend</code>内部又运行了一个<code>computer</code>，等于运行了<code>extend</code>，自己运行自己，死循环了。</p>
<h2 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;我可以播放音乐&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>():</span></span><br><span class="line">        <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">        print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行原有函数</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> method</span><br><span class="line"><span class="comment"># 将扩展功能赋值给computer</span></span><br><span class="line">computer = extend(computer)</span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">computer()</span><br></pre></td></tr></table></figure>

<h2 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h2><p>如果原函数是需要传递参数该如何处理呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>(<span class="params">name, something</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>可以<span class="subst">&#123;something&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>():</span></span><br><span class="line">        <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">        print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行原有函数</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> method</span><br><span class="line"><span class="comment"># 将扩展功能赋值给computer</span></span><br><span class="line">computer = extend(computer)</span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">computer(<span class="string">&#x27;银河1号&#x27;</span>, <span class="string">&#x27;播放音乐&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>method没有接受参数，但是你却给了我两个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;E:&#x2F;test.py&quot;, line 16, in &lt;module&gt;</span><br><span class="line">    computer(&#39;银河1号&#39;, &#39;播放音乐&#39;)</span><br><span class="line">TypeError: method() takes 0 positional arguments but 2 were given</span><br></pre></td></tr></table></figure>

<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>(<span class="params">name, something</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>可以<span class="subst">&#123;something&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">        print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行原有函数</span></span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> method</span><br><span class="line"><span class="comment"># 将扩展功能赋值给computer</span></span><br><span class="line">computer = extend(computer)</span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">computer(<span class="string">&#x27;银河1号&#x27;</span>, <span class="string">&#x27;播放音乐&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如此我们即完成了对原有函数功能的扩展，又使其能正确的使用参数</p>
<h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><p>上述代码如果我们要获取computer的返回值，该如何处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>(<span class="params">name, something</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>可以<span class="subst">&#123;something&#125;</span>&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;我是computer原有代码的返回结果&#x27;</span></span><br><span class="line"><span class="comment"># 扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">        print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行原有函数</span></span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> method</span><br><span class="line"><span class="comment"># 将扩展功能赋值给computer</span></span><br><span class="line">computer = extend(computer)</span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">res = computer(<span class="string">&#x27;银河1号&#x27;</span>, <span class="string">&#x27;播放音乐&#x27;</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<p>运行发现最后返回的是None，因为原有扩展功能函数中method中执行了原有的computer函数，但是却没有返回该函数的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>(<span class="params">name, something</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>可以<span class="subst">&#123;something&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是computer原有代码的返回结果&#x27;</span></span><br><span class="line"><span class="comment"># 扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">        print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行原有函数并返回其运行后的结果</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> method</span><br><span class="line"><span class="comment"># 将扩展功能赋值给computer</span></span><br><span class="line">computer = extend(computer)</span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">res = computer(<span class="string">&#x27;银河1号&#x27;</span>, <span class="string">&#x27;播放音乐&#x27;</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="使用装饰器语法糖"><a href="#使用装饰器语法糖" class="headerlink" title="使用装饰器语法糖"></a>使用装饰器语法糖</h2><p>使用语法糖其实就是省略了上述代码中的15行，简写后的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">        print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行原有函数</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="meta">@extend</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>(<span class="params">name, something</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>可以<span class="subst">&#123;something&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是computer原有代码的返回结果&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">res = computer(<span class="string">&#x27;银河1号&#x27;</span>, <span class="string">&#x27;播放音乐&#x27;</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="自定义装饰器规则"><a href="#自定义装饰器规则" class="headerlink" title="自定义装饰器规则"></a>自定义装饰器规则</h2><p>适用场景，上例中我们的<code>computer</code>有时让其拥有功能A，有时需要拥有功能B，甚至有时候我们只要其原有功能。简单来说就是想要看电影就给装一个电影播放器，想要写代码就给你装一个<code>IDE</code>，或者我什么都不想要了，就想要初始化的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扩展功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wraper</span>(<span class="params">flag</span>):</span></span><br><span class="line">    <span class="comment"># func为目标函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="comment"># *args与**kwargs为目标函数的参数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="comment"># 判断wraper传递的参数，来决定扩展目标函数的哪种功能</span></span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">                print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">                <span class="comment"># 执行原有函数</span></span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">elif</span> flag == <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">                print(<span class="string">&#x27;我可以上网冲浪&#x27;</span>)</span><br><span class="line">                <span class="comment"># 执行原有函数</span></span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> method</span><br><span class="line">    <span class="keyword">return</span> extend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="comment"># @wraper(3)等同于@extend，waraper(3)执行后返回了一个extend，所以实际上还是使用了extend来装饰目标函数</span></span><br><span class="line"><span class="meta">@wraper(3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>(<span class="params">name, something</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>，我的原始功能可以<span class="subst">&#123;something&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是computer原有代码的返回结果&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">res = computer(<span class="string">&#x27;银河1号&#x27;</span>, <span class="string">&#x27;播放音乐&#x27;</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扩展功能1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">        print(<span class="string">&#x27;我可以编写代码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行原有函数</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> method</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展功能2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend2</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 原有函数前扩展其功能</span></span><br><span class="line">        print(<span class="string">&#x27;我可以哈哈哈笑一整天的功能&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行原有函数</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 电脑原有功能</span></span><br><span class="line"><span class="meta">@extend</span></span><br><span class="line"><span class="meta">@extend2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computer</span>(<span class="params">name, something</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;我叫<span class="subst">&#123;name&#125;</span>可以<span class="subst">&#123;something&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是computer原有代码的返回结果&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行computer</span></span><br><span class="line">res = computer(<span class="string">&#x27;银河1号&#x27;</span>, <span class="string">&#x27;播放音乐&#x27;</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我可以编写代码</span><br><span class="line">我可以哈哈哈笑一整天的功能</span><br><span class="line">我叫银河1号可以播放音乐</span><br><span class="line">我是computer原有代码的返回结果</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python装饰器</tag>
        <tag>装饰器</tag>
        <tag>带参装饰器</tag>
        <tag>多个装饰器</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>redis主从同步/复制</title>
    <url>/535f1967.html</url>
    <content><![CDATA[<p><code>Redis</code>主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得<code>Redis</code>可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布 记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p>
<a id="more"></a>

<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><code>Redis</code>的主从结构可以采用一主多从或者级联结构，<code>Redis</code>主从复制可以根据是否是全量分为全量同步和增量同步。</p>
<h4 id="全量同步"><a href="#全量同步" class="headerlink" title="全量同步"></a>全量同步</h4><p>　　<code>Redis</code>全量复制一般发生在<code>Slave</code>初始化阶段，这时<code>Slave</code>需要将<code>Master</code>上的所有数据都复制一份。具体步骤如下： </p>
<p>　　1）从服务器连接主服务器，发送<code>SYNC</code>命令； </p>
<p>　　2）主服务器接收到SYNC命名后，开始执行<code>BGSAVE</code>命令生成<code>RDB</code>文件并使用缓冲区记录此后执行的所有写命令； </p>
<p>　　3）主服务器<code>BGSAVE</code>执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令； </p>
<p>　　4）从服务器收到快照文件后丢弃所有旧数据，载入收到的快照； </p>
<p>　　5）主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； </p>
<p>　　6）从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令； </p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814152230.png"></p>
<p>完成上面几个步骤后就完成了从服务器数据初始化的所有操作，从服务器此时可以接收来自用户的读请求。</p>
<h4 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a>增量同步</h4><p>　　<code>Redis</code>增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。 </p>
<p>增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</p>
<h4 id="Redis主从同步策略"><a href="#Redis主从同步策略" class="headerlink" title="Redis主从同步策略"></a><code>Redis</code>主从同步策略</h4><p>　　主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，<code>slave</code> 在任何时候都可以发起全量同步。<code>redis</code> 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>如果多个<code>Slave</code>断线了，需要重启的时候，因为只要<code>Slave</code>启动，就会发送<code>sync</code>请求和主机全量同步，当多个同时出现的时候，可能会导致<code>Master IO</code>剧增宕机。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">server1:<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">6379</span>	redis<span class="literal">-master</span></span><br><span class="line">server2:<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">6380</span>	redis<span class="literal">-slave</span></span><br><span class="line">server3:<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">6381</span>	redis<span class="literal">-slave</span></span><br></pre></td></tr></table></figure>

<p><strong>6379配置文件</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># cat 6379.conf</span></span><br><span class="line">daemonize yes</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">pidfile /tmp/redis<span class="literal">-config</span>/<span class="number">6379</span>/<span class="number">6379</span>.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/<span class="number">6379</span>/<span class="number">6379</span>.log</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span></span><br><span class="line">dbfilename <span class="number">6379</span>.rdb </span><br></pre></td></tr></table></figure>

<p><strong>6380配置文件：</strong></p>
<p>使用<code>sed</code>命令，将<code>6379.conf</code>中的的6379替换为6380，替换后的结果写入到<code>6380.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp&#x2F;redis-config&#x2F;6379# sed &quot;s&#x2F;6379&#x2F;6380&#x2F;g&quot; redis-6379.conf &gt; ..&#x2F;6380&#x2F;6380.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># cat ../6380/6380.conf</span></span><br><span class="line">daemonize yes</span><br><span class="line">port <span class="number">6380</span></span><br><span class="line">pidfile /tmp/redis<span class="literal">-config</span>/<span class="number">6380</span>/<span class="number">6380</span>.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/<span class="number">6380</span>/<span class="number">6380</span>.log</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span></span><br><span class="line">dbfilename <span class="number">6380</span>.rdb  </span><br><span class="line">slaveof <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span>	<span class="comment"># 指明主的地址</span></span><br></pre></td></tr></table></figure>
<p><strong>6381配置文件：</strong></p>
<p>使用<code>sed</code>命令，将<code>6379.conf</code>中的的6379替换为6381，替换后的结果写入到<code>6381.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp&#x2F;redis-config&#x2F;6379# sed &quot;s&#x2F;6379&#x2F;6381&#x2F;g&quot; redis-6379.conf &gt; ..&#x2F;6381&#x2F;6381.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># cat ../6381/6381.conf</span></span><br><span class="line">daemonize yes</span><br><span class="line">port <span class="number">6381</span></span><br><span class="line">pidfile /tmp/redis<span class="literal">-config</span>/<span class="number">6381</span>/<span class="number">6381</span>.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/<span class="number">6381</span>/<span class="number">6381</span>.log</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span></span><br><span class="line">dbfilename <span class="number">6381</span>.rdb  </span><br><span class="line">slaveof <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span>	<span class="comment"># 指明主的地址</span></span><br></pre></td></tr></table></figure>

<h4 id="启动redis3个服务"><a href="#启动redis3个服务" class="headerlink" title="启动redis3个服务"></a>启动<code>redis</code>3个服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-server 6379.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-server ../6380/6380.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-server ../6381/6381.conf</span></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      <span class="number">5570</span>  <span class="number">5546</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">54</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> vim /etc/redis/redis.conf</span><br><span class="line">tony      <span class="number">5782</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span><span class="literal">-pkexec</span> file:///var/log/redis</span><br><span class="line">root      <span class="number">5784</span>  <span class="number">5782</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">43</span> /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span> file:///var/log/redis <span class="literal">-w</span> /home/tony</span><br><span class="line">root     <span class="number">14081</span>  <span class="number">7206</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">45</span> pts/<span class="number">4</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span></span><br><span class="line">root     <span class="number">16443</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">48</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6379</span></span><br><span class="line">root     <span class="number">16448</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">48</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6380</span></span><br><span class="line">root     <span class="number">16454</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">49</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6381</span></span><br><span class="line">root     <span class="number">16464</span>  <span class="number">7362</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">49</span> pts/<span class="number">5</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep redis</span><br></pre></td></tr></table></figure>

<h4 id="查看主从状态"><a href="#查看主从状态" class="headerlink" title="查看主从状态"></a>查看主从状态</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:~<span class="comment"># redis-cli</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">2</span></span><br><span class="line">slave0:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">6380</span>,state=online,offset=<span class="number">252</span>,lag=<span class="number">1</span></span><br><span class="line">slave1:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">6381</span>,state=online,offset=<span class="number">252</span>,lag=<span class="number">1</span></span><br><span class="line">master_replid:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">252</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">252</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli -p 6380</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">6</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">266</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">266</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">266</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli -p 6381</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">3</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">280</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">280</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">15</span></span><br><span class="line">repl_backlog_histlen:<span class="number">266</span></span><br></pre></td></tr></table></figure>

<h4 id="测试同步"><a href="#测试同步" class="headerlink" title="测试同步"></a>测试同步</h4><p>执行代码发现<code>redis-slave</code>能同步读取<code>redis-master</code>上的信息，且只有<code>redis-master</code>允许写入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> country china</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;country&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get country</span><br><span class="line"><span class="string">&quot;china&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; <span class="built_in">set</span> name tony</span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only slave.</span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; keys *</span></span><br><span class="line"><span class="string">1) &quot;country&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; get country</span></span><br><span class="line"><span class="string">&quot;china&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; get country</span></span><br><span class="line"><span class="string">&quot;china&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; set name aaa</span></span><br><span class="line"><span class="string">(error) READONLY You can&#x27;</span>t <span class="built_in">write</span> against a read only slave.</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;country&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="主库故障切换主从库"><a href="#主库故障切换主从库" class="headerlink" title="主库故障切换主从库"></a>主库故障切换主从库</h2><h3 id="关闭主库"><a href="#关闭主库" class="headerlink" title="关闭主库"></a>关闭主库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; shutdown</span><br><span class="line">not connected&gt; </span><br></pre></td></tr></table></figure>

<h3 id="查看从库状态"><a href="#查看从库状态" class="headerlink" title="查看从库状态"></a>查看从库状态</h3><p>检查从库主从信息，此时<code>master_link_status:down</code> </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:down</span><br><span class="line">master_last_io_seconds_ago:<span class="literal">-1</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">1782</span></span><br><span class="line">master_link_down_since_seconds:<span class="number">13</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1782</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">1782</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:down</span><br><span class="line">master_last_io_seconds_ago:<span class="literal">-1</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">1782</span></span><br><span class="line">master_link_down_since_seconds:<span class="number">20</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1782</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">15</span></span><br><span class="line">repl_backlog_histlen:<span class="number">1768</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="重新设置主从库"><a href="#重新设置主从库" class="headerlink" title="重新设置主从库"></a>重新设置主从库</h3><p>将6380设为主库，6381设为6380的从库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; SLAVEOF no one</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">----------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span>&gt; SLAVEOF no one</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span>&gt; SLAVEOF <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span></span><br><span class="line">OK</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看更新后的主从库状态"><a href="#查看更新后的主从库状态" class="headerlink" title="查看更新后的主从库状态"></a>查看更新后的主从库状态</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">1</span></span><br><span class="line">slave0:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">6381</span>,state=online,offset=<span class="number">2034</span>,lag=<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">7851</span>d7e67129a0483b2925d7ac06dda221123cbe</span><br><span class="line">master_replid2:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_repl_offset:<span class="number">2034</span></span><br><span class="line">second_repl_offset:<span class="number">1783</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">2034</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">6380</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">2</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">1852</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">7851</span>d7e67129a0483b2925d7ac06dda221123cbe</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1852</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1783</span></span><br><span class="line">repl_backlog_histlen:<span class="number">70</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>db</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>主从复制</tag>
        <tag>redis主从同步</tag>
        <tag>redis主从复制</tag>
        <tag>主从同步</tag>
        <tag>数据库主从同步</tag>
        <tag>数据库主从复制</tag>
        <tag>主从切换</tag>
        <tag>主库切换</tag>
        <tag>主库故障</tag>
      </tags>
  </entry>
  <entry>
    <title>redis发布订阅</title>
    <url>/5199e590.html</url>
    <content><![CDATA[<p><code>Redis</code> 发布订阅(<code>pub/sub</code>)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>
<p><code>Redis</code> 客户端可以订阅任意数量的频道。</p>
<a id="more"></a>

<p>从Pub/Sub的机制来看，它更像是一个广播系统，多个<code>Subsoribel</code>可以订阅多个<code>Channel</code>， 多个<code>Publisher</code>可以往多个<code>Channel</code>中发布消息。可以理解为：</p>
<ul>
<li><p><code>Subscribel</code>：收音机， 可以收到多个频道，并以队列方式显示</p>
</li>
<li><p><code>Publisher</code>：电台，可以往不同的FM频道中发消息</p>
</li>
<li><p><code>Channel</code>：不同频率的FM频道</p>
</li>
</ul>
<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814111743.png"></p>
<p>当有新消息通过 <code>PUBLISH</code> 命令发送给频道 <code>channel1</code> 时， 这个消息就会被发送给订阅它的三个客户端：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814111750.png"></p>
<p>一个<code>Publisher</code>，多个<code>Subscriber</code>模型</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814112405.png"></p>
<h1 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PUBLISH channel msg</span><br><span class="line">    将信息 message 发送到指定的频道 channel</span><br><span class="line"></span><br><span class="line">SUBSCRIBE channel [<span class="type">channel</span> <span class="type">...</span>]</span><br><span class="line">    订阅频道，可以同时订阅多个频道</span><br><span class="line"></span><br><span class="line">UNSUBSCRIBE [<span class="type">channel</span> <span class="type">...</span>]</span><br><span class="line">    取消订阅指定的频道, 如果不指定频道，则会取消订阅所有频道</span><br><span class="line">PSUBSCRIBE pattern [<span class="type">pattern</span> <span class="type">...</span>]</span><br><span class="line">    订阅一个或多个符合给定模式的频道，每个模式以 * 作为匹配符，比如 it* 匹配所    有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)， news.* 匹配所有    以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类</span><br><span class="line">PUNSUBSCRIBE [<span class="type">pattern</span> [<span class="type">pattern</span> <span class="type">...</span>]]</span><br><span class="line">    退订指定的规则, 如果没有参数则会退订所有规则</span><br><span class="line">PUBSUB subcommand [<span class="type">argument</span> [<span class="type">argument</span> <span class="type">...</span>]]</span><br><span class="line">    查看订阅与发布系统状态</span><br><span class="line">注意：使用发布订阅模式实现的消息队列，当有客户端订阅channel后只能收到后续发布到该频道的消息，之前发送的不会缓存，必须Provider和Consumer同时在线。</span><br></pre></td></tr></table></figure>

<h3 id="订阅指定频道"><a href="#订阅指定频道" class="headerlink" title="订阅指定频道"></a>订阅指定频道</h3><p>启动两个<code>redis-cli</code>窗口，均订阅<code>music</code>频道（<code>channel</code>）</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814113100.png"></p>
<p>在启动一个窗口，启动发布者向频道 <code>music</code>发送消息</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814113242.png"></p>
<p>两个订阅该频道的人同时受到了消息，效果如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814113950.png"></p>
<h3 id="订阅模糊匹配频道"><a href="#订阅模糊匹配频道" class="headerlink" title="订阅模糊匹配频道"></a>订阅模糊匹配频道</h3><p>启动两个<code>redis-cli</code>窗口，均订阅 <code>python</code>*频道（<code>channel</code>）</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814113920.png"></p>
]]></content>
      <categories>
        <category>db</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis发布</tag>
        <tag>redis订阅</tag>
        <tag>redis pub</tag>
        <tag>redis sub</tag>
        <tag>redis channel</tag>
      </tags>
  </entry>
  <entry>
    <title>redis哨兵集群</title>
    <url>/bc0caee0.html</url>
    <content><![CDATA[<p><code>Sentinel</code>(哨兵)进程是用于监控<code>redis</code>集群中<code>Master</code>主服务器工作的状态，在Master主服务器发生故障的时候，可以实现<code>Master</code>和<code>Slave</code>服务器的切换，保证系统的高可用，其已经被集成在<code>redis2.6+</code>的版本中，<code>Redis</code>的哨兵模式到了2.8版本之后就稳定了下来。一般在生产环境也建议使用<code>Redis</code>的2.8版本的以后版本。</p>
<p>哨兵(<code>Sentinel</code>) 是一个分布式系统，你可以在一个架构中运行多个哨兵(<code>sentinel</code>) 进程，这些进程使用流言协议(<code>gossipprotocols</code>)来接收关于<code>Master</code>主服务器是否下线的信息，并使用投票协议(<code>Agreement Protocols</code>)来决定是否执行自动故障迁移,以及选择哪个<code>Slave</code>作为新的<code>Master</code>。</p>
<p>每个哨兵(<code>Sentinel</code>)进程会向其它哨兵(<code>Sentinel</code>)、<code>Master</code>、<code>Slave</code>定时发送消息，以确认对方是否”活”着，如果发现对方在指定配置时间(可配置的)内未得到回应，则暂时认为对方已掉线，也就是所谓的”主观认为宕机” ，英文名称：<code>Subjective Down</code>，简称<code>SDOWN</code>。有主观宕机，肯定就有客观宕机。</p>
<p>当“哨兵群”中的多数<code>Sentinel</code>进程在对<code>Master</code>主服务器做出 <code>SDOWN</code> 的判断，并且通过 <code>SENTINEL is-master-down-by-addr</code> 命令互相交流之后，得出的<code>Master Server</code>下线判断，这种方式就是“客观宕机”，英文名称是：<code>Objectively Down</code>， 简称 <code>ODOWN</code>。通过一定的<code>vote</code>算法，从剩下的slave从服务器节点中，选一台提升为Master服务器节点，然后自动修改相关配置，并开启故障转移（<code>failover</code>）。</p>
<a id="more"></a>

<h2 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis-Sentinel"></a><code>Redis-Sentinel</code></h2><p><code>Redis-Sentinel</code>是<code>redis</code>官方推荐的高可用性解决方案，当用<code>redis</code>作<code>master-slave</code>的高可用时，如果<code>master</code>本身宕机，<code>redis</code>本身或者客户端都没有实现主从切换的功能。</p>
<p>而<code>redis-sentinel</code>就是一个独立运行的进程，用于监控多个<code>master-slave</code>集群，自动发现<code>master</code>宕机，进行自动切换<code>slave &gt; master</code>。</p>
<p><code>sentinel</code>主要功能如下：</p>
<ul>
<li>不时的监控<code>redis</code>是否良好运行，如果节点不可达就会对节点进行下线标识</li>
<li>如果被标识的是主节点，<code>sentinel</code>就会和其他的<code>sentinel</code>节点“协商”，如果其他节点也人为主节点不可达，就会选举一个<code>sentinel</code>节点来完成自动故障转义</li>
<li>在<code>master-slave</code>进行切换后，<code>master_redis.conf</code>、<code>slave_redis.conf</code>和<code>sentinel.conf</code>的内容都会发生改变，即<code>master_redis.conf</code>中会多一行<code>slaveof</code>的配置，<code>sentinel.conf</code>的监控目标会随之调换</li>
</ul>
<h3 id="redis主从复制背景问题"><a href="#redis主从复制背景问题" class="headerlink" title="redis主从复制背景问题"></a><code>redis</code>主从复制背景问题</h3><p><code>Redis</code>主从复制可将主节点数据同步给从节点，从节点此时有两个作用：</p>
<ul>
<li>一旦主节点宕机，从节点作为主节点的备份可以随时顶上来。</li>
<li>扩展主节点的读能力，分担主节点读压力。</li>
</ul>
<p>但是问题是：</p>
<ul>
<li>一旦主节点宕机，从节点上位，那么需要人为修改所有应用方的主节点地址（改为新的<code>master</code>地址），还需要命令所有从节点复制新的主节点</li>
</ul>
<p>那么这个问题，<code>redis-sentinel</code>就可以解决了</p>
<h3 id="主从复制架构"><a href="#主从复制架构" class="headerlink" title="主从复制架构"></a>主从复制架构</h3><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814163450.png"></p>
<h3 id="Redis-Sentinel架构"><a href="#Redis-Sentinel架构" class="headerlink" title="Redis Sentinel架构"></a><code>Redis Sentinel</code>架构</h3><p><code>sentinel</code>是<code>redis</code>的一个进程，但是不存储数据，只用来监控<code>redis</code>。</p>
<p><code>sentinel</code>会通过命令连接向被监视的主从服务器发送“hello”信息，该消息包含<code>sentinel</code>的<code>ip</code>、端口号、id等内容，以此来向其他<code>sentinel</code>宣告自己存在。与此同时<code>sentinel</code>会通过订阅连接接收其他<code>sentinel</code>的“hello”信息，以此来发现监视同一个主服务器的其他<code>sentinel</code>。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814163933.png"></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814163956.png"></p>
<h3 id="redis哨兵相关命令"><a href="#redis哨兵相关命令" class="headerlink" title="redis哨兵相关命令"></a><code>redis</code>哨兵相关命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">redis<span class="literal">-cli</span> info <span class="comment">#查看redis数据库信息</span></span><br><span class="line">redis<span class="literal">-cli</span> info replication <span class="comment">#查看redis的复制授权信息</span></span><br><span class="line">redis<span class="literal">-cli</span> info sentinel   <span class="comment">#查看redis的哨兵信息</span></span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 6379 主库master</span><br><span class="line">127.0.0.1 6380 从库slave</span><br><span class="line">127.0.0.1 6381 从库slave</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>6379配置文件</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># cat 6379.conf</span></span><br><span class="line">daemonize yes</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">pidfile /tmp/redis<span class="literal">-config</span>/<span class="number">6379</span>/<span class="number">6379</span>.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/<span class="number">6379</span>/<span class="number">6379</span>.log</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span></span><br><span class="line">dbfilename <span class="number">6379</span>.rdb </span><br></pre></td></tr></table></figure>

<p><strong>6380配置文件：</strong></p>
<p>使用<code>sed</code>命令，将<code>6379.conf</code>中的的6379替换为6380，替换后的结果写入到<code>6380.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp&#x2F;redis-config&#x2F;6379# sed &quot;s&#x2F;6379&#x2F;6380&#x2F;g&quot; redis-6379.conf &gt; ..&#x2F;6380&#x2F;6380.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># cat ../6380/6380.conf</span></span><br><span class="line">daemonize yes</span><br><span class="line">port <span class="number">6380</span></span><br><span class="line">pidfile /tmp/redis<span class="literal">-config</span>/<span class="number">6380</span>/<span class="number">6380</span>.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/<span class="number">6380</span>/<span class="number">6380</span>.log</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span></span><br><span class="line">dbfilename <span class="number">6380</span>.rdb  </span><br><span class="line">slaveof <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span>	<span class="comment"># 指明主的地址</span></span><br></pre></td></tr></table></figure>
<p><strong>6381配置文件：</strong></p>
<p>使用<code>sed</code>命令，将<code>6379.conf</code>中的的6379替换为6381，替换后的结果写入到<code>6381.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp&#x2F;redis-config&#x2F;6379# sed &quot;s&#x2F;6379&#x2F;6381&#x2F;g&quot; redis-6379.conf &gt; ..&#x2F;6381&#x2F;6381.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># cat ../6381/6381.conf</span></span><br><span class="line">daemonize yes</span><br><span class="line">port <span class="number">6381</span></span><br><span class="line">pidfile /tmp/redis<span class="literal">-config</span>/<span class="number">6381</span>/<span class="number">6381</span>.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/<span class="number">6381</span>/<span class="number">6381</span>.log</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span></span><br><span class="line">dbfilename <span class="number">6381</span>.rdb  </span><br><span class="line">slaveof <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span>	<span class="comment"># 指明主的地址</span></span><br></pre></td></tr></table></figure>

<h3 id="启动redis3个服务"><a href="#启动redis3个服务" class="headerlink" title="启动redis3个服务"></a>启动<code>redis</code>3个服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-server 6379.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-server ../6380/6380.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-server ../6381/6381.conf</span></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      <span class="number">5570</span>  <span class="number">5546</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">54</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> vim /etc/redis/redis.conf</span><br><span class="line">tony      <span class="number">5782</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span><span class="literal">-pkexec</span> file:///var/log/redis</span><br><span class="line">root      <span class="number">5784</span>  <span class="number">5782</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">43</span> /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span> file:///var/log/redis <span class="literal">-w</span> /home/tony</span><br><span class="line">root     <span class="number">14081</span>  <span class="number">7206</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">45</span> pts/<span class="number">4</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span></span><br><span class="line">root     <span class="number">16443</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">48</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6379</span></span><br><span class="line">root     <span class="number">16448</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">48</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6380</span></span><br><span class="line">root     <span class="number">16454</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">49</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6381</span></span><br><span class="line">root     <span class="number">16464</span>  <span class="number">7362</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">49</span> pts/<span class="number">5</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep redis</span><br></pre></td></tr></table></figure>

<h3 id="查看主从状态"><a href="#查看主从状态" class="headerlink" title="查看主从状态"></a>查看主从状态</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:~<span class="comment"># redis-cli</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">2</span></span><br><span class="line">slave0:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">6380</span>,state=online,offset=<span class="number">252</span>,lag=<span class="number">1</span></span><br><span class="line">slave1:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">6381</span>,state=online,offset=<span class="number">252</span>,lag=<span class="number">1</span></span><br><span class="line">master_replid:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">252</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">252</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli -p 6380</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">6</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">266</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">266</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">266</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli -p 6381</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">3</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">280</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:b8566352985ea4d4dd23a1d2a6f333f02c1d5c0c</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">280</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">15</span></span><br><span class="line">repl_backlog_histlen:<span class="number">266</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Sentinel"><a href="#配置Sentinel" class="headerlink" title="配置Sentinel"></a>配置<code>Sentinel</code></h3><p><code>sentinel-26379.conf</code>文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">// Sentinel节点的端口</span><br><span class="line">port <span class="number">26379</span>  </span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span>/<span class="number">6379</span>/</span><br><span class="line">logfile <span class="string">&quot;26379.log&quot;</span></span><br><span class="line"></span><br><span class="line">// 当前Sentinel节点监控 <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span> 这个主节点</span><br><span class="line">// <span class="number">2</span>代表判断主节点失败至少需要<span class="number">2</span>个Sentinel节点节点同意</span><br><span class="line">// mymaster是主节点的别名</span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">//每个Sentinel节点都要定期PING命令来判断Redis数据节点和其余Sentinel节点是否可达，如果超过<span class="number">30000</span>毫秒<span class="number">30</span>s且没有回复，则判定不可达</span><br><span class="line">sentinel down<span class="literal">-after</span><span class="literal">-milliseconds</span> mymaster <span class="number">30000</span></span><br><span class="line"></span><br><span class="line">//当Sentinel节点集合对主节点故障判定达成一致时，Sentinel领导者节点会做故障转移操作，选出新的主节点，</span><br><span class="line">原来的从节点会向新的主节点发起复制操作，限制每次向新的主节点发起复制操作的从节点个数为<span class="number">1</span></span><br><span class="line">sentinel parallel<span class="literal">-syncs</span> mymaster <span class="number">1</span></span><br><span class="line"></span><br><span class="line">//故障转移超时时间为<span class="number">180000</span>毫秒</span><br><span class="line">sentinel failover<span class="literal">-timeout</span> mymaster <span class="number">180000</span></span><br></pre></td></tr></table></figure>
<p><code>sentinel-26380.conf</code>文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">port <span class="number">26380</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> <span class="string">&quot;/tmp/redis-config/6380&quot;</span></span><br><span class="line">logfile <span class="string">&quot;26380.log&quot;</span></span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel down<span class="literal">-after</span><span class="literal">-milliseconds</span> mymaster <span class="number">30000</span></span><br><span class="line">sentinel parallel<span class="literal">-syncs</span> mymaster <span class="number">1</span></span><br><span class="line">sentinel failover<span class="literal">-timeout</span> mymaster <span class="number">180000</span></span><br></pre></td></tr></table></figure>
<p><code>sentinel-26381.conf</code>文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">port <span class="number">26381</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> <span class="string">&quot;/tmp/redis-config/6381&quot;</span></span><br><span class="line">logfile <span class="string">&quot;26381.log&quot;</span></span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel down<span class="literal">-after</span><span class="literal">-milliseconds</span> mymaster <span class="number">30000</span></span><br><span class="line">sentinel parallel<span class="literal">-syncs</span> mymaster <span class="number">1</span></span><br><span class="line">sentinel failover<span class="literal">-timeout</span> mymaster <span class="number">180000</span></span><br></pre></td></tr></table></figure>

<h3 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-sentinel sentinel-26379.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-sentinel ../6380/sentinel-26380.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># redis-sentinel ../6381/sentinel-26381.conf</span></span><br></pre></td></tr></table></figure>

<h3 id="查看哨兵状态"><a href="#查看哨兵状态" class="headerlink" title="查看哨兵状态"></a>查看哨兵状态</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:~<span class="comment"># redis-cli -p 26379</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">26379</span>&gt; info sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:<span class="number">1</span></span><br><span class="line">sentinel_tilt:<span class="number">0</span></span><br><span class="line">sentinel_running_scripts:<span class="number">0</span></span><br><span class="line">sentinel_scripts_queue_length:<span class="number">0</span></span><br><span class="line">sentinel_simulate_failure_flags:<span class="number">0</span></span><br><span class="line">master0:name=mymaster,status=ok,address=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span></span><br><span class="line">,slaves=<span class="number">2</span>,sentinels=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli -p 26380</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">26380</span>&gt; info sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:<span class="number">1</span></span><br><span class="line">sentinel_tilt:<span class="number">0</span></span><br><span class="line">sentinel_running_scripts:<span class="number">0</span></span><br><span class="line">sentinel_scripts_queue_length:<span class="number">0</span></span><br><span class="line">sentinel_simulate_failure_flags:<span class="number">0</span></span><br><span class="line">master0:name=mymaster,status=ok,address=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>,slaves=<span class="number">2</span>,senti</span><br><span class="line">nels=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli -p 26381</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">26381</span>&gt; info sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:<span class="number">1</span></span><br><span class="line">sentinel_tilt:<span class="number">0</span></span><br><span class="line">sentinel_running_scripts:<span class="number">0</span></span><br><span class="line">sentinel_scripts_queue_length:<span class="number">0</span></span><br><span class="line">sentinel_simulate_failure_flags:<span class="number">0</span></span><br><span class="line">master0:name=mymaster,status=ok,address=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>,slaves=<span class="number">2</span>,senti</span><br><span class="line">nels=<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>看到最后一条信息正确即成功了哨兵，哨兵主节点名字叫做<code>mymaster</code>，状态<code>ok</code>，监控地址是<code>127.0.0.1:6379</code>，有两个从节点，3个哨兵</p>
<h3 id="杀掉主库"><a href="#杀掉主库" class="headerlink" title="杀掉主库"></a>杀掉主库</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      <span class="number">5570</span>  <span class="number">5546</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">54</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> vim /etc/redis/redis.conf</span><br><span class="line">tony      <span class="number">5782</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span><span class="literal">-pkexec</span> file:///var/log/redis</span><br><span class="line">root      <span class="number">5784</span>  <span class="number">5782</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">05</span> /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span> file:///var/log/redis <span class="literal">-w</span> /home/tony</span><br><span class="line">root     <span class="number">17517</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">14</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">10</span> /opt/sublime_text_3/sublime_text -<span class="literal">-class</span>=sublime<span class="literal">-text</span><span class="literal">-dev</span> /tmp/redis</span><br><span class="line"><span class="literal">-config</span>/<span class="number">6381</span>/<span class="number">6381</span>.confroot     <span class="number">20047</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">21</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">07</span> /usr/share/code/code -<span class="literal">-unity</span><span class="literal">-launch</span> /tmp/redis<span class="literal">-config</span>/<span class="number">6381</span>/sentinel-</span><br><span class="line"><span class="number">26381</span>.confredis    <span class="number">22074</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">35</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /usr/bin/redis<span class="literal">-sentinel</span> *:<span class="number">26379</span> [<span class="type">sentinel</span>]</span><br><span class="line">root     <span class="number">22515</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">36</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6379</span></span><br><span class="line">root     <span class="number">22522</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">36</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6380</span></span><br><span class="line">root     <span class="number">22528</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">36</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6381</span></span><br><span class="line">root     <span class="number">22610</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">38</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-sentinel</span> *:<span class="number">26380</span> [<span class="type">sentinel</span>]</span><br><span class="line">root     <span class="number">22615</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">38</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-sentinel</span> *:<span class="number">26381</span> [<span class="type">sentinel</span>]</span><br><span class="line">root     <span class="number">22897</span>  <span class="number">5000</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">43</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span></span><br><span class="line">root     <span class="number">22898</span>  <span class="number">7206</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">43</span> pts/<span class="number">4</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">6380</span></span><br><span class="line">root     <span class="number">22899</span> <span class="number">16613</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">44</span> pts/<span class="number">6</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">6381</span></span><br><span class="line">root     <span class="number">22971</span>  <span class="number">7362</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">45</span> pts/<span class="number">5</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># kill -9 22515</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      <span class="number">5570</span>  <span class="number">5546</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">54</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> vim /etc/redis/redis.conf</span><br><span class="line">tony      <span class="number">5782</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span><span class="literal">-pkexec</span> file:///var/log/redis</span><br><span class="line">root      <span class="number">5784</span>  <span class="number">5782</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">05</span> /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span> file:///var/log/redis <span class="literal">-w</span> /home/tony</span><br><span class="line">root     <span class="number">17517</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">14</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">10</span> /opt/sublime_text_3/sublime_text -<span class="literal">-class</span>=sublime<span class="literal">-text</span><span class="literal">-dev</span> /tmp/redis</span><br><span class="line"><span class="literal">-config</span>/<span class="number">6381</span>/<span class="number">6381</span>.confroot     <span class="number">20047</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">21</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">07</span> /usr/share/code/code -<span class="literal">-unity</span><span class="literal">-launch</span> /tmp/redis<span class="literal">-config</span>/<span class="number">6381</span>/sentinel-</span><br><span class="line"><span class="number">26381</span>.confredis    <span class="number">22074</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">35</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /usr/bin/redis<span class="literal">-sentinel</span> *:<span class="number">26379</span> [<span class="type">sentinel</span>]</span><br><span class="line">root     <span class="number">22522</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">36</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6380</span></span><br><span class="line">root     <span class="number">22528</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">36</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6381</span></span><br><span class="line">root     <span class="number">22610</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">38</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-sentinel</span> *:<span class="number">26380</span> [<span class="type">sentinel</span>]</span><br><span class="line">root     <span class="number">22615</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">38</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-sentinel</span> *:<span class="number">26381</span> [<span class="type">sentinel</span>]</span><br><span class="line">root     <span class="number">22897</span>  <span class="number">5000</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">43</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span></span><br><span class="line">root     <span class="number">22898</span>  <span class="number">7206</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">43</span> pts/<span class="number">4</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">6380</span></span><br><span class="line">root     <span class="number">22899</span> <span class="number">16613</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">44</span> pts/<span class="number">6</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">6381</span></span><br><span class="line">root     <span class="number">22981</span>  <span class="number">7362</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">45</span> pts/<span class="number">5</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep redis</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看从库状态"><a href="#查看从库状态" class="headerlink" title="查看从库状态"></a>查看从库状态</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">1</span></span><br><span class="line">slave0:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">6381</span>,state=online,offset=<span class="number">92232</span>,lag=<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">4378</span>f66f92d63d4bebaccd054f9fdc2fb874e9a7</span><br><span class="line">master_replid2:<span class="number">313</span>b7f50e569c4d17cacaefbf869b105bd6a92c0</span><br><span class="line">master_repl_offset:<span class="number">92498</span></span><br><span class="line">second_repl_offset:<span class="number">90348</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">92498</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">6380</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">0</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">95319</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">4378</span>f66f92d63d4bebaccd054f9fdc2fb874e9a7</span><br><span class="line">master_replid2:<span class="number">313</span>b7f50e569c4d17cacaefbf869b105bd6a92c0</span><br><span class="line">master_repl_offset:<span class="number">95319</span></span><br><span class="line">second_repl_offset:<span class="number">90348</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">437</span></span><br><span class="line">repl_backlog_histlen:<span class="number">94883</span></span><br></pre></td></tr></table></figure>

<p>以上可以看到主库已有6379变为了6380，证明哨兵设置成功</p>
<p><em>注：本人使用<code>apt-get</code>安装的<code>redis</code>，发现没有把<code>redis-sentinel</code>上去，使用<code>apt-get install redis-sentinel</code> 单独安装下就可以了</em></p>
]]></content>
      <categories>
        <category>db</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>apt-get</tag>
        <tag>主从复制</tag>
        <tag>主从同步</tag>
        <tag>哨兵集群</tag>
        <tag>Redis-Sentinel</tag>
        <tag>Sentinel</tag>
        <tag>哨兵</tag>
        <tag>master</tag>
        <tag>slave</tag>
        <tag>6379</tag>
        <tag>26379</tag>
        <tag>6380</tag>
        <tag>26380</tag>
        <tag>6381</tag>
        <tag>26381</tag>
      </tags>
  </entry>
  <entry>
    <title>redis持久化</title>
    <url>/dcfaa904.html</url>
    <content><![CDATA[<p><code>Redis</code>是一种内存型数据库，一旦服务器进程退出，数据库的数据就会丢失，为了解决这个问题，<code>Redis</code>提供了两种持久化的方案，将内存中的数据保存到磁盘中，避免数据的丢失。</p>
<a id="more"></a>

<h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a><code>RDB</code>持久化</h2><p><code>redis</code>提供了<code>RDB持久化</code>的功能，这个功能可以将<code>redis</code>在内存中的的状态保存到硬盘中，它可以<strong>手动执行。</strong></p>
<p>也可以再<code>redis.conf</code>中配置，<strong>定期执行</strong>。</p>
<p><code>RDB</code>持久化产生的<code>RDB</code>文件是一个<strong>经过压缩</strong>的<strong>二进制文件</strong>，这个文件被保存在硬盘中，<code>redis</code>可以通过这个文件还原数据库当时的状态。</p>
<p>内存数据保存到磁盘，在指定的时间间隔内生成数据集的时间点快照（<code>point-in-time snapshot</code>）<br>优点：速度快，适合做备份，主从复制就是基于<code>RDB</code>持久化功能实现<br><code>rdb</code>通过再<code>redis</code>中使用<code>save</code>命令触发 <code>rdb</code></p>
<h3 id="rdb持久化示例"><a href="#rdb持久化示例" class="headerlink" title="rdb持久化示例"></a><code>rdb</code>持久化示例</h3><h4 id="1-创建redis服务配置文件"><a href="#1-创建redis服务配置文件" class="headerlink" title="1. 创建redis服务配置文件"></a>1. 创建<code>redis</code>服务配置文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">touch /tmp/redis<span class="literal">-config</span>/redis<span class="literal">-rdb</span>.conf</span><br><span class="line"><span class="built_in">cd</span> /tmp/redis<span class="literal">-config</span>/</span><br><span class="line">vim redis<span class="literal">-rdb</span>.conf</span><br></pre></td></tr></table></figure>

<h4 id="2-配置redis服务项并保存"><a href="#2-配置redis服务项并保存" class="headerlink" title="2. 配置redis服务项并保存"></a>2. 配置<code>redis</code>服务项并保存</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">daemonize yes 								<span class="comment">#开启守护进程</span></span><br><span class="line">port <span class="number">6379</span>									<span class="comment">#redis服务端口</span></span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/<span class="number">6379</span><span class="literal">-redis</span>.log	<span class="comment">#redis日志文件</span></span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span>						<span class="comment">#定义持久化文件存储位置</span></span><br><span class="line">dbfilename dbmp.rdb							<span class="comment">#rdb持久化文件</span></span><br><span class="line">bind <span class="number">0.0</span>.<span class="number">0.0</span>								<span class="comment">#redis绑定地址</span></span><br><span class="line">save <span class="number">900</span> <span class="number">1</span>                    				<span class="comment">#rdb机制 每900秒 有1个修改记录</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span>                    				<span class="comment">#每300秒        10个修改记录</span></span><br><span class="line">save <span class="number">60</span>  <span class="number">10000</span>                				<span class="comment">#每60秒内        10000修改记录</span></span><br></pre></td></tr></table></figure>

<h4 id="3-停止redis服务"><a href="#3-停止redis服务" class="headerlink" title="3. 停止redis服务"></a>3. 停止<code>redis</code>服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      <span class="number">5570</span>  <span class="number">5546</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">54</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> vim /etc/redis/redis.conf</span><br><span class="line">tony      <span class="number">5782</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span><span class="literal">-pkexec</span> file:///var/log/redis</span><br><span class="line">root      <span class="number">5784</span>  <span class="number">5782</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">25</span> /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span> file:///var/log/redis <span class="literal">-w</span> /home/tony</span><br><span class="line">root      <span class="number">5846</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">27</span> /opt/sublime_text_3/sublime_text -<span class="literal">-class</span>=sublime<span class="literal">-text</span><span class="literal">-dev</span> /var/log/redis/redis<span class="literal">-s</span></span><br><span class="line">erver.logroot     <span class="number">11820</span>  <span class="number">5000</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">41</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span></span><br><span class="line">root     <span class="number">11821</span>  <span class="number">7206</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">41</span> pts/<span class="number">4</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span></span><br><span class="line">root     <span class="number">11983</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">46</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">6379</span></span><br><span class="line">root     <span class="number">11989</span>  <span class="number">7362</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">46</span> pts/<span class="number">5</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep redis</span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># kill -9 11983</span></span><br></pre></td></tr></table></figure>

<h4 id="4-使用指定配置文件启动redis"><a href="#4-使用指定配置文件启动redis" class="headerlink" title="4. 使用指定配置文件启动redis"></a>4. 使用指定配置文件启动<code>redis</code></h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-server redis-rdb.conf</span></span><br></pre></td></tr></table></figure>

<h4 id="5-启动redis-cli"><a href="#5-启动redis-cli" class="headerlink" title="5. 启动redis-cli"></a>5. 启动<code>redis-cli</code></h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli</span></span><br></pre></td></tr></table></figure>

<h4 id="6-设置键值并保存"><a href="#6-设置键值并保存" class="headerlink" title="6. 设置键值并保存"></a>6. 设置键值并保存</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name tony</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">80</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h4 id="7-停止redis服务"><a href="#7-停止redis服务" class="headerlink" title="7. 停止redis服务"></a>7. 停止<code>redis</code>服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      <span class="number">5570</span>  <span class="number">5546</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">54</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> vim /etc/redis/redis.conf</span><br><span class="line">tony      <span class="number">5782</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span><span class="literal">-pkexec</span> file:///var/log/redis</span><br><span class="line">root      <span class="number">5784</span>  <span class="number">5782</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">25</span> /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span> file:///var/log/redis <span class="literal">-w</span> /home/tony</span><br><span class="line">root      <span class="number">5846</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">27</span> /opt/sublime_text_3/sublime_text -<span class="literal">-class</span>=sublime<span class="literal">-text</span><span class="literal">-dev</span> /var/log/redis/redis<span class="literal">-s</span></span><br><span class="line">erver.logroot     <span class="number">11820</span>  <span class="number">5000</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">41</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span></span><br><span class="line">root     <span class="number">11821</span>  <span class="number">7206</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">41</span> pts/<span class="number">4</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span></span><br><span class="line">root     <span class="number">11983</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">46</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">6379</span></span><br><span class="line">root     <span class="number">11989</span>  <span class="number">7362</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">46</span> pts/<span class="number">5</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep redis</span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># kill -9 11983</span></span><br></pre></td></tr></table></figure>

<h4 id="8-启动redis服务"><a href="#8-启动redis服务" class="headerlink" title="8. 启动redis服务"></a>8. 启动<code>redis</code>服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-server redis-rdb.conf</span></span><br></pre></td></tr></table></figure>

<h4 id="9-启动redis-cli"><a href="#9-启动redis-cli" class="headerlink" title="9. 启动redis-cli"></a>9. 启动<code>redis-cli</code></h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli</span></span><br></pre></td></tr></table></figure>

<h4 id="10-测试键值是否存在"><a href="#10-测试键值是否存在" class="headerlink" title="10. 测试键值是否存在"></a>10. 测试键值是否存在</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get age</span><br><span class="line"><span class="string">&quot;80&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;tony&quot;</span></span><br></pre></td></tr></table></figure>

<p>生成的文件列表：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># ls -l</span></span><br><span class="line">总用量 <span class="number">16</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">4188</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">13</span>:<span class="number">46</span> <span class="number">6379</span><span class="literal">-redis</span>.log</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">115</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">13</span>:<span class="number">45</span> dbmp.rdb</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">157</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">13</span>:<span class="number">34</span> redis<span class="literal">-rdb</span>.conf</span><br></pre></td></tr></table></figure>

<h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a><code>AOF</code>持久化</h2><p><code>AOF</code>（append-only log file）<br>记录服务器执行的所有变更操作命令（例如<code>set del</code>等），并在服务器启动时，通过重新执行这些命令来还原数据集<br><code>AOF</code> 文件中的命令全部以<code>redis</code>协议的格式保存，新命令追加到文件末尾。<br>优点：最大程序保证数据不丢<br>缺点：日志记录非常大</p>
<p><strong>配置参数</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">AOF持久化配置，两条参数</span><br><span class="line"></span><br><span class="line">appendonly		yes</span><br><span class="line">appendfsync		always    总是修改类的操作</span><br><span class="line">             	everysec   每秒做一次持久化</span><br><span class="line">             	no     依赖于系统自带的缓存大小机制</span><br></pre></td></tr></table></figure>

<h3 id="aof持久化示例"><a href="#aof持久化示例" class="headerlink" title="aof持久化示例"></a><code>aof</code>持久化示例</h3><h4 id="1-创建redis服务配置文件-1"><a href="#1-创建redis服务配置文件-1" class="headerlink" title="1. 创建redis服务配置文件"></a>1. 创建<code>redis</code>服务配置文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># touch redis-aof.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># vim redis-aof.conf</span></span><br></pre></td></tr></table></figure>

<h4 id="2-配置redis服务项并保存-1"><a href="#2-配置redis服务项并保存-1" class="headerlink" title="2. 配置redis服务项并保存"></a>2. 配置<code>redis</code>服务项并保存</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">post <span class="number">6380</span></span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/<span class="number">6380</span><span class="literal">-redis</span>.log</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span></span><br><span class="line">dbfilename <span class="number">6380</span>.rdb</span><br><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure>

<h4 id="3-使用配置文件启动redis服务"><a href="#3-使用配置文件启动redis服务" class="headerlink" title="3. 使用配置文件启动redis服务"></a>3. 使用配置文件启动<code>redis</code>服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-server redis-aof.conf</span></span><br></pre></td></tr></table></figure>



<h4 id="4-启动redis-cli"><a href="#4-启动redis-cli" class="headerlink" title="4. 启动redis-cli"></a>4. 启动<code>redis-cli</code></h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:~<span class="comment"># redis-cli -p 6380</span></span><br></pre></td></tr></table></figure>



<h4 id="5-设置键并实时检测aof文件"><a href="#5-设置键并实时检测aof文件" class="headerlink" title="5. 设置键并实时检测aof文件"></a>5. 设置键并实时检测<code>aof</code>文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; <span class="built_in">set</span> name google</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; <span class="built_in">set</span> age <span class="number">100</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># tail -f appendonly.aof</span></span><br><span class="line">*<span class="number">2</span></span><br><span class="line"><span class="variable">$6</span></span><br><span class="line"><span class="built_in">SELECT</span></span><br><span class="line"><span class="variable">$1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">*<span class="number">3</span></span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$4</span></span><br><span class="line">name</span><br><span class="line"><span class="variable">$6</span></span><br><span class="line">google</span><br><span class="line">*<span class="number">3</span></span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="variable">$3</span></span><br><span class="line">age</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>



<h4 id="6-关闭redis服务"><a href="#6-关闭redis服务" class="headerlink" title="6. 关闭redis服务"></a>6. 关闭<code>redis</code>服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      <span class="number">5570</span>  <span class="number">5546</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">54</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> vim /etc/redis/redis.conf</span><br><span class="line">tony      <span class="number">5782</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span><span class="literal">-pkexec</span> file:///var/log/redis</span><br><span class="line">root      <span class="number">5784</span>  <span class="number">5782</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">30</span> /usr/bin/dde<span class="operator">-file</span><span class="literal">-manager</span> file:///var/log/redis <span class="literal">-w</span> /home/tony</span><br><span class="line">root      <span class="number">5846</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">28</span> /opt/sublime_text_3/sublime_text -<span class="literal">-class</span>=sublime<span class="literal">-text</span><span class="literal">-dev</span> /var/log/redis/redis<span class="literal">-s</span></span><br><span class="line">erver.logroot     <span class="number">11983</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">46</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">6379</span></span><br><span class="line">root     <span class="number">12932</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">13</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">6380</span></span><br><span class="line">root     <span class="number">13018</span>  <span class="number">5000</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">17</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">6380</span></span><br><span class="line">root     <span class="number">13094</span>  <span class="number">7362</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">17</span> pts/<span class="number">5</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep redis</span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># kill -9 12932</span></span><br></pre></td></tr></table></figure>



<h4 id="7-使用配置文件启动redis服务"><a href="#7-使用配置文件启动redis服务" class="headerlink" title="7. 使用配置文件启动redis服务"></a>7. 使用配置文件启动<code>redis</code>服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-server redis-aof.conf</span></span><br></pre></td></tr></table></figure>



<h4 id="8-启动redis-cli并测试键值是否存在"><a href="#8-启动redis-cli并测试键值是否存在" class="headerlink" title="8. 启动redis-cli并测试键值是否存在"></a>8. 启动<code>redis-cli</code>并测试键值是否存在</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:~<span class="comment"># redis-cli -p 6380</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span>&gt; get age</span><br><span class="line"><span class="string">&quot;100&quot;</span></span><br></pre></td></tr></table></figure>

<p>生成的文件列表：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># ls -l</span></span><br><span class="line">总用量 <span class="number">28</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">4188</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">13</span>:<span class="number">46</span> <span class="number">6379</span><span class="literal">-redis</span>.log</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">2487</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">18</span> <span class="number">6380</span><span class="literal">-redis</span>.log</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">147</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">19</span> appendonly.aof</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">115</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">13</span>:<span class="number">45</span> dbmp.rdb</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">180</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">13</span> redis<span class="literal">-aof</span>.conf</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">157</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">13</span>:<span class="number">34</span> redis<span class="literal">-rdb</span>.conf</span><br></pre></td></tr></table></figure>

<h2 id="redis-持久化方式的区别"><a href="#redis-持久化方式的区别" class="headerlink" title="redis 持久化方式的区别"></a><strong><code>redis</code> 持久化方式的区别</strong></h2><p><strong><code>rdb</code>：基于快照的持久化，速度更快，一般用作备份，主从复制也是依赖于<code>rdb</code>持久化功能</strong></p>
<p><strong><code>aof</code>：以追加的方式记录<code>redis</code>操作日志的文件。可以最大程度的保证<code>redis</code>数据安全，类似于<code>mysql</code>的<code>binlog</code></strong></p>
<h2 id="RDB备份平滑切换到AOF备份"><a href="#RDB备份平滑切换到AOF备份" class="headerlink" title="RDB备份平滑切换到AOF备份"></a><code>RDB</code>备份平滑切换到<code>AOF</code>备份</h2><h3 id="确保redis版本在2-2以上"><a href="#确保redis版本在2-2以上" class="headerlink" title="确保redis版本在2.2以上"></a>确保<code>redis</code>版本在2.2以上</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-server -v</span></span><br><span class="line">Redis server v=<span class="number">4.0</span>.<span class="number">9</span> sha=<span class="number">00000000</span>:<span class="number">0</span> malloc=jemalloc<span class="literal">-3</span>.<span class="number">6.0</span> bits=<span class="number">64</span> build=<span class="number">41979</span>e41b911ab84</span><br></pre></td></tr></table></figure>

<p>前提：我们配置好了使用<code>rdb</code>配置<code>redis</code>服务</p>
<h3 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动<code>redis</code>服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/rdb<span class="comment"># redis-server redis-rdb.conf</span></span><br></pre></td></tr></table></figure>

<h3 id="启动redis-cli并写入数据"><a href="#启动redis-cli并写入数据" class="headerlink" title="启动redis-cli并写入数据"></a>启动<code>redis-cli</code>并写入数据</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">oot@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span><span class="comment"># redis-cli</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> country china</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">5000</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;country&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;age&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="查看目录文件"><a href="#查看目录文件" class="headerlink" title="查看目录文件"></a>查看目录文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/rdb<span class="comment"># ls -l</span></span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">5178</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">45</span> <span class="number">6379</span><span class="literal">-redis</span>.log</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">120</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">41</span> rdb.rdb</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">164</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">37</span> redis<span class="literal">-rdb</span>.conf</span><br></pre></td></tr></table></figure>

<h3 id="临时开启aof持久化"><a href="#临时开启aof持久化" class="headerlink" title="临时开启aof持久化"></a>临时开启<code>aof</code>持久化</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; CONFIG <span class="built_in">set</span> appendonly yes</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; CONFIG <span class="built_in">set</span> save <span class="string">&quot;&quot;</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h3 id="查看数据并写入新数据"><a href="#查看数据并写入新数据" class="headerlink" title="查看数据并写入新数据"></a>查看数据并写入新数据</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;country&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get country</span><br><span class="line"><span class="string">&quot;china&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> city shanghai</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h3 id="查看目录文件-1"><a href="#查看目录文件-1" class="headerlink" title="查看目录文件"></a>查看目录文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/redis<span class="literal">-config</span>/rdb<span class="comment"># ls -l</span></span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">5178</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">45</span> <span class="number">6379</span><span class="literal">-redis</span>.log</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">152</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">44</span> appendonly.aof</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">120</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">41</span> rdb.rdb</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root  <span class="number">164</span> <span class="number">8</span>月  <span class="number">14</span> <span class="number">14</span>:<span class="number">37</span> redis<span class="literal">-rdb</span>.conf</span><br></pre></td></tr></table></figure>

<h3 id="写入配置文件永久生效"><a href="#写入配置文件永久生效" class="headerlink" title="写入配置文件永久生效"></a>写入配置文件永久生效</h3><p>将<code>aof</code>操作，写入到配置文件，永久生效，下次重启后生效    </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">logfile /tmp/redis<span class="literal">-config</span>/rdb/<span class="number">6379</span><span class="literal">-redis</span>.log</span><br><span class="line"><span class="built_in">dir</span> /tmp/redis<span class="literal">-config</span>/rdb</span><br><span class="line"><span class="comment">#dbfilename   rdb.rdb</span></span><br><span class="line"><span class="comment">#save 900 1  </span></span><br><span class="line"><span class="comment">#save 300 10 </span></span><br><span class="line"><span class="comment">#save 60  10000 </span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>db</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis持久化</tag>
        <tag>RDB</tag>
        <tag>AOF</tag>
        <tag>RDB持久化</tag>
        <tag>AOF持久化</tag>
        <tag>appendonly</tag>
        <tag>save</tag>
        <tag>appendfsync</tag>
        <tag>rdb切换aof</tag>
      </tags>
  </entry>
  <entry>
    <title>rich-text、uparse、v-html的区别</title>
    <url>/ee09918d.html</url>
    <content><![CDATA[<p>图文混排的界面，常见于新闻、帖子的详情页渲染。 由于小程序端的限制，<code>uni-app</code>的富文本的处理与普通网页不同。 有<code>rich-text</code>组件、<code>v-html</code>、和<code>uParse</code>三类方案。</p>
<a id="more"></a>

<h2 id="rich-text"><a href="#rich-text" class="headerlink" title="rich-text"></a><code>rich-text</code></h2><p><code>rich-text</code>是<code>uni-app</code>的内置组件，提供了高性能的富文本渲染模式。<br><code>API</code>参考<span class="exturl" data-url="aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2NvbXBvbmVudC9yaWNoLXRleHQ=">https://uniapp.dcloud.io/component/rich-text<i class="fa fa-external-link-alt"></i></span><br><code>rich-text</code>的优势是全端支持、高性能。有个缺陷是只能整体设点击事情，无法对富文本中的图片、超链接单独设点击事件。<br>如果是图片，可以把内容拆成多个<code>rich-text</code>解决。<code>rich-text</code>不支持内嵌视频也可以通过拆分多个<code>rich-text</code>，中间插入<code>video</code>来实现。<br>注：<code>h5</code>和<code>app-nvue</code>无此限制，支持链接等单独点击。</p>
<h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><code>v-html</code></h2><p><code>v-html</code>指令，是<code>web</code>开发中很常用的。可惜由于小程序不支持<code>html</code>，使用场景受限。<br>在<code>uni-app</code>中，<code>h5</code>端和<code>app-vue</code>的<code>v3</code>编译器下可以使用<code>v-html</code>。其他环境无法支持。</p>
<h2 id="uParse"><a href="#uParse" class="headerlink" title="uParse"></a><code>uParse</code></h2><p>由于小程序的rich-text组件在一些场景不满足需求，于是业内出现了<code>wxparse</code>等三方方案，把<code>HTML</code>或<code>markdown</code>格式的服务器数据源转为<code>view</code>来渲染。<br>但<code>wxparse</code>许久不更新，且不跨端，在<code>uni-app</code>插件市场出现了更多改进版的parse插件。<br>它们功能更强，支持直接渲染<code>markdown</code>或<code>html</code>的数据源为富文本，也支持其中的图片和超链接的点击处理，有的还支持表格和视频的处理。<br>但这些<code>parser</code>解决方案的性能不如<code>rich-text</code>。</p>
<p>注：<code>app-nvue</code>只能使用<code>rich-text</code>。</p>
<p>几种方案的特点讲清楚了，大家在开发中根据自己的需求选择合适的富文本渲染方案吧。</p>
<p>至于富文本编辑，即在输入框里图文混排内容，解决方案如下：</p>
<ul>
<li>在<code>h5</code>、<code>app-vue</code>、微信小程序，支持editor组件</li>
<li>在<code>h5</code>中，传统的富文本编辑仍可使用</li>
<li>在非微信的其他小程序中，其官方没有提供解决方案，目前只能使用<code>web-view</code>组件套一个远程网页来满足这方面的需求。<code>web-view</code>组件是全端可用的解决方案。</li>
<li>还有一种方案，不再编辑区直接预览效果，而是采用<code>markdown</code>编辑器方案，输入区输入<code>markdown</code>语法，预览区提供预览。这种方案是跨端的。插件市场搜富文本编辑，有不少插件。<span class="exturl" data-url="aHR0cHM6Ly9leHQuZGNsb3VkLm5ldC5jbi9zZWFyY2g/cT0lRTUlQUYlOEMlRTYlOTYlODclRTYlOUMlQUMlRTclQkMlOTYlRTglQkUlOTE=">https://ext.dcloud.net.cn/search?q=%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>文章来源：</p>
<p>作者：喜欢桉树叶<br>链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xNTE4NWJjMDkyZGM=">https://www.jianshu.com/p/15185bc092dc<i class="fa fa-external-link-alt"></i></span><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
]]></content>
      <categories>
        <category>fe</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>rich-text、uparse、v-html的区别</tag>
        <tag>rich-text</tag>
        <tag>uparse</tag>
        <tag>v-html</tag>
        <tag>富文本</tag>
        <tag>富文本解析</tag>
        <tag>小程序富文本</tag>
        <tag>uni-app富文本</tag>
      </tags>
  </entry>
  <entry>
    <title>rsa非对称加密数学计算原理剖析</title>
    <url>/1a981449.html</url>
    <content><![CDATA[<p>这里不在叙述<code>rsa</code>从古到今的由来了，我们直奔主题剖析其原理，只需知道<code>rsa</code>就是这个加解密算法的创始人缩写就可以了。</p>
<a id="more"></a>

<p>在此之前我们回顾下那些被遗忘的数学名词。</p>
<h2 id="质数-素数"><a href="#质数-素数" class="headerlink" title="质数(素数)"></a>质数(素数)</h2><p><strong>质数</strong>又称<strong>素数</strong>。<strong>指整数在一个大于1的自然数中，除了1和此整数自身外，没法被其他自然数整除的数</strong>。换句话说，<strong>只有两个正因数（1和自己）的自然数即为素数</strong>。</p>
<p>比1大但不是素数的数称为合数。1和0既非素数也非合数。</p>
<p>素数在数论中有着很重要的作用。</p>
<h3 id="因数"><a href="#因数" class="headerlink" title="因数"></a>因数</h3><p> 因数是指整数a除以整数<code>b(b≠0)</code> 的商正好是整数而没有余数，我们就说b是a的因数。</p>
<h4 id="公因数"><a href="#公因数" class="headerlink" title="公因数"></a>公因数</h4><p>公因数，亦称“公约数”。它是一个能同时整除若干整数的整数 [1]  。如果一个整数同时是几个整数的因数，称这个整数为它们的“公因数”；公因数中最大的称为最大公因数。</p>
<h2 id="互质数"><a href="#互质数" class="headerlink" title="互质数"></a>互质数</h2><p>互质数为数学中的一种概念，即两个或多个整数的公因数只有1的非零自然数。公因数只有1的两个非零自然数，叫做互质数。</p>
<p>注：两个数为互质数，不代表两个数都是质数；同为质数的两个不同数必然是互质数。</p>
<p>如：4， 5，两个数只有一个公因数1，所以这两个数是互质数，但是很明显4不是质数</p>
<p>如：3， 7， 两个数只有一个公因数1，所以这两个数是互质数，且两个数明显都是质数</p>
<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>就是对于一个正整数n，小于n且和n互质的正整数（包括1）的个数，记作φ(n) 。 </p>
<h2 id="mod"><a href="#mod" class="headerlink" title="mod"></a><code>mod</code></h2><p> mod函数是一个求余函数，在编程中也叫取模，就是计算最后的余数。在编程中取模的计算表达式通常为<code>%</code></p>
<p>如：<code>15%12=3</code></p>
<h2 id="rsa加解密流程"><a href="#rsa加解密流程" class="headerlink" title="rsa加解密流程"></a><code>rsa</code>加解密流程</h2><table>
<thead>
<tr>
<th>步骤</th>
<th>说明</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>找出质数</td>
<td>P 、Q</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>计算公共模数</td>
<td>N = P * Q</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>欧拉函数</td>
<td>φ(N) = (P-1)(Q-1)</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>计算公钥E</td>
<td>1 &lt; E &lt; φ(N)</td>
<td>E的取值必须是整数<br>E 和 φ(N) 必须是互质数</td>
</tr>
<tr>
<td>5</td>
<td>计算私钥D</td>
<td>E * D % φ(N) = 1</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>加密</td>
<td>C ＝ M <sup>E</sup> mod N</td>
<td>C：密文 M：明文</td>
</tr>
<tr>
<td>7</td>
<td>解密</td>
<td>M ＝C <sup>D</sup> mod N</td>
<td>C：密文 M：明文</td>
</tr>
</tbody></table>
<p>公钥＝(E , N)<br>私钥＝(D, N)</p>
<p> 对外，我们只暴露公钥。 </p>
<h3 id="找出质数P、Q"><a href="#找出质数P、Q" class="headerlink" title="找出质数P、Q"></a>找出质数P、Q</h3><p>我们这里为了测试方便随机选取两个数值小的数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P &#x3D; 5</span><br><span class="line">Q &#x3D; 11</span><br></pre></td></tr></table></figure>

<h3 id="计算公共模数N"><a href="#计算公共模数N" class="headerlink" title="计算公共模数N"></a>计算公共模数N</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N &#x3D; P * Q &#x3D; 5 * 11 &#x3D; 55</span><br></pre></td></tr></table></figure>

<h3 id="欧拉函数-1"><a href="#欧拉函数-1" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">φ(N) &#x3D; (P-1)(Q-1) &#x3D; 4 * 10 &#x3D; 40</span><br></pre></td></tr></table></figure>

<h3 id="计算公钥E"><a href="#计算公钥E" class="headerlink" title="计算公钥E"></a>计算公钥E</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt; E &lt; φ(N)</span><br><span class="line">1 &lt; E &lt; 40</span><br></pre></td></tr></table></figure>

<p> E的取值必须是整数, <code>E</code> 和 <code>φ(N)</code> 必须是互质数 </p>
<p>所以E的取值范围为：</p>
<p><code>5, 7, 9, 11, 13, 17, 19, 23, 25, 29, 31, 35, 37</code></p>
<p>为了测试方便，我们取一个相对小一点的数来测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E &#x3D; 7</span><br></pre></td></tr></table></figure>

<h3 id="计算私钥D"><a href="#计算私钥D" class="headerlink" title="计算私钥D"></a>计算私钥D</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E * D % φ(N) &#x3D; 1</span><br><span class="line">&#x2F;&#x2F; 即</span><br><span class="line">7 * D % 40 &#x3D; 1</span><br><span class="line">&#x2F;&#x2F; 得出</span><br><span class="line">D &#x3D; 23</span><br></pre></td></tr></table></figure>

<h3 id="正向加解密"><a href="#正向加解密" class="headerlink" title="正向加解密"></a>正向加解密</h3><h4 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h4><p>我们这里为了测试方便，同样取一个比较小的数字进行加密测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M &#x3D; 4</span><br></pre></td></tr></table></figure>

<p>根据我们的公式我们来计算下加密结果C</p>
<p>C ＝ M <sup>E</sup> mod N</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C &#x3D;  16384 % 55</span><br><span class="line">C &#x3D; 49</span><br></pre></td></tr></table></figure>

<p>我们将数字4加密后的结果是49，接下来我们尝试使用私钥对其进行解密，看能不能得到加密前的数字4</p>
<h4 id="私钥解密"><a href="#私钥解密" class="headerlink" title="私钥解密"></a>私钥解密</h4><p>同样根据我们的解密公式，来尝试计算出原始明文M。</p>
<p>  M ＝C <sup>D</sup> mod N</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M &#x3D; 749048330965186233494494102694560000000 % 55</span><br><span class="line">&#x2F;&#x2F; 得出</span><br><span class="line">M &#x3D; 4</span><br></pre></td></tr></table></figure>

<h3 id="反向加解密"><a href="#反向加解密" class="headerlink" title="反向加解密"></a>反向加解密</h3><h4 id="私钥加密"><a href="#私钥加密" class="headerlink" title="私钥加密"></a>私钥加密</h4><p>我们这里为了测试方便，同样取一个比较小的数字进行加密测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M &#x3D; 5</span><br></pre></td></tr></table></figure>

<p>根据我们的公式我们来计算下加密结果C</p>
<p>C ＝ M <sup>d</sup> mod N</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C &#x3D;  11920928955078125‬ % 55</span><br><span class="line">C &#x3D; 15</span><br></pre></td></tr></table></figure>

<p>我们将数字5加密后的结果是15，接下来我们尝试使用公钥对其进行解密，看能不能得到加密前的数字5</p>
<h4 id="公钥解密"><a href="#公钥解密" class="headerlink" title="公钥解密"></a>公钥解密</h4><p>同样根据我们的解密公式，来尝试计算出原始明文M。</p>
<p>  M ＝C <sup>e</sup> mod N</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M &#x3D; 170859375‬ % 55</span><br><span class="line">&#x2F;&#x2F; 得出</span><br><span class="line">M &#x3D; 5</span><br></pre></td></tr></table></figure>

<p>经过以上示例，我们双向加解密已经成功。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>rsa</tag>
        <tag>非对称加密</tag>
        <tag>加解密原理</tag>
        <tag>加解密算法</tag>
        <tag>rsa加密</tag>
        <tag>rsa解密</tag>
        <tag>质数</tag>
        <tag>素数</tag>
        <tag>因数</tag>
        <tag>公因数</tag>
        <tag>互质数</tag>
        <tag>欧拉函数</tag>
        <tag>取余</tag>
        <tag>取模</tag>
        <tag>mod</tag>
        <tag>公钥</tag>
        <tag>私钥</tag>
        <tag>公共模数</tag>
        <tag>公钥加密</tag>
        <tag>公钥解密</tag>
        <tag>私钥加密</tag>
        <tag>私钥解密</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy中使用selenium</title>
    <url>/a9d12255.html</url>
    <content><![CDATA[<p>在通过<code>scrapy</code>框架进行某些网站数据爬取的时候，往往会碰到页面动态数据加载的情况发生，如果直接使用<code>scrapy</code>对其<code>url</code>发请求，是绝对获取不到那部分动态加载出来的数据值。但是通过观察我们会发现，通过浏览器进行<code>url</code>请求发送则会加载出对应的动态加载出的数据。那么如果我们想要在<code>scrapy</code>也获取动态加载出的数据，则必须使用<code>selenium</code>创建浏览器对象，然后通过该浏览器对象进行请求发送，获取动态加载的数据值。</p>
<a id="more"></a>

<p>案例</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>- 需求：爬取网易新闻的国内板块下的新闻数据</p>
<p>- 需求分析：当点击国内超链进入国内对应的页面时，会发现当前页面展示的新闻数据是被动态加载出来的，如果直接通过程序对<code>url</code>进行请求，是获取不到动态加载出的新闻数据的。则就需要我们使用<code>selenium</code>实例化一个浏览器对象，在该对象中进行<code>url</code>的请求，获取动态加载的新闻数据。</p>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p> 当引擎将国内板块<code>url</code>对应的请求提交给下载器后，下载器进行网页数据的下载，然后将下载到的页面数据，封装到~中，提交给引擎，引擎将<code>response</code>在转交给<code>Spiders</code>。<code>Spiders</code>接受到的<code>response</code>对象中存储的页面数据里是没有动态加载的新闻数据的。要想获取动态加载的新闻数据，则需要在下载中间件中对下载器提交给引擎的<code>response</code>响应对象进行拦截，切对其内部存储的页面数据进行篡改，修改成携带了动态加载出的新闻数据，然后将被篡改的<code>response</code>对象最终交给`进行解析操作。 </p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul>
<li><p>重写爬虫文件的构造方法，在该方法中使用<code>selenium</code>实例化一个浏览器对象（因为浏览器对象只需要被实例化一次）</p>
</li>
<li><p>重写爬虫文件的<code>closed(self,spider)</code>方法，在其内部关闭浏览器对象。该方法是在爬虫结束时被调用</p>
</li>
<li><p>重写下载中间件的<code>process_response</code>方法，让该方法对响应对象进行拦截，并篡改<code>response</code>中存储的页面数据</p>
</li>
<li><p>在配置文件中开启下载中间件</p>
</li>
</ul>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>爬虫<code>wangyi.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;wangyi&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;https://news.163.com/domestic/&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://news.163.com/domestic//&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 实例化一个浏览器对象(实例化一次)</span></span><br><span class="line">        self.bro = webdriver.Chrome(executable_path=<span class="string">r&#x27;E:\site\python\爬虫\chromedriver.exe&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        news = response.xpath(<span class="string">&#x27;//*[@class=&quot;ndi_main&quot;]//*[@class=&quot;news_title&quot;]//a/text()&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> news:</span><br><span class="line">            print(item)</span><br><span class="line">	<span class="comment"># 爬虫结束执行关闭浏览器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closed</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;关闭浏览器&#x27;</span>)</span><br><span class="line">        self.bro.quit()</span><br></pre></td></tr></table></figure>

<p>中间件<code>middlewares.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapymiddleDownloaderMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy acts as if the downloader middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">        <span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">        s = cls()</span><br><span class="line">        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment"># Called for each request that goes through the downloader</span></span><br><span class="line">        <span class="comment"># middleware.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this request</span></span><br><span class="line">        <span class="comment"># - or return a Response object</span></span><br><span class="line">        <span class="comment"># - or return a Request object</span></span><br><span class="line">        <span class="comment"># - or raise IgnoreRequest: process_exception() methods of</span></span><br><span class="line">        <span class="comment">#   installed downloader middleware will be called</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="comment">#拦截到响应对象（下载器传递给Spider的响应对象）</span></span><br><span class="line">        <span class="comment">#request：响应对象对应的请求对象</span></span><br><span class="line">        <span class="comment">#response：拦截到的响应对象</span></span><br><span class="line">        <span class="comment">#spider：爬虫文件中对应的爬虫类的实例</span></span><br><span class="line">        print(<span class="string">&#x27;request.url&#x27;</span>, request.url)</span><br><span class="line">        <span class="comment"># 爬虫中的浏览器对象</span></span><br><span class="line">        bro = spider.bro</span><br><span class="line">        <span class="comment"># 浏览器打开网址</span></span><br><span class="line">        bro.get(url=request.url)</span><br><span class="line">        <span class="comment"># 休眠测试，保证页面加载完成</span></span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 获取浏览器打开页面的源代码</span></span><br><span class="line">        <span class="comment"># 页面数据就是包含了动态加载出来的新闻数据对应的页面数据</span></span><br><span class="line">        source_code = bro.page_source</span><br><span class="line">        <span class="comment"># 休眠3秒</span></span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        print(<span class="string">&#x27;spiderurl：&#x27;</span>, spider.bro.current_url)</span><br><span class="line">        <span class="comment"># 篡改响应对象，将响应结果修改为浏览器打开页面的源代码</span></span><br><span class="line">        <span class="keyword">return</span> HtmlResponse(url=spider.bro.current_url, body=source_code, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="comment"># return response</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span></span><br><span class="line">        <span class="comment"># Called when a download handler or a process_request()</span></span><br><span class="line">        <span class="comment"># (from other downloader middleware) raises an exception.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this exception</span></span><br><span class="line">        <span class="comment"># - return a Response object: stops process_exception() chain</span></span><br><span class="line">        <span class="comment"># - return a Request object: stops process_exception() chain</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_opened</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        spider.logger.info(<span class="string">&#x27;Spider opened: %s&#x27;</span> % spider.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否遵守robots.txt规则</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用下载中间件</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;scrapymiddle.middlewares.ScrapymiddleDownloaderMiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志输出等级</span></span><br><span class="line">LOG_LEVEL = <span class="string">&quot;ERROR&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>scrapy爬虫</tag>
        <tag>selenium</tag>
        <tag>scrapy中使用selenium</tag>
        <tag>scrapy使用selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>vue使用ueditor前端配置</title>
    <url>/574181d3.html</url>
    <content><![CDATA[<p>在<code>vue</code>中使用<code>ueditor</code>，有网友已经帮我们封装好了<code>vue-ueditor-wrap</code>，配置简单，毕竟大厂出的插件，功能也是十分强大，但是在使用中也是有许多坑的，最最最大的问题你所避免不了的就是跨域了，下面细说！</p>
<a id="more"></a>

<h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vue-ueditor-wrap</span><br></pre></td></tr></table></figure>

<h2 id="下载ueditor"><a href="#下载ueditor" class="headerlink" title="下载ueditor"></a>下载<code>ueditor</code></h2><p>将下载好的<a href="https://github.com/HaoChuan9421/vue-ueditor-wrap/tree/master/assets/downloads"><code>ueditor</code></a>解压至项目<code>static</code>目录</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190829152057.png"></p>
<p>如果你使用的是 <span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlLw==">vue-cli 3.x<i class="fa fa-external-link-alt"></i></span>，可以把 <code>UEditor</code> 文件夹放入项目的 <code>public</code> 目录下。</p>
<h2 id="引入VueUeditorWrap组件"><a href="#引入VueUeditorWrap组件" class="headerlink" title="引入VueUeditorWrap组件"></a>引入<code>VueUeditorWrap</code>组件</h2><p>一般情况下编辑器只有添加修改页面会用到，所以这里我们没必要做成全局的，我们这里做成局部组件引入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在需要用到该组件时引入并注册该组件</span></span><br><span class="line"><span class="keyword">import</span> VueUeditorWrap <span class="keyword">from</span> <span class="string">&#x27;vue-ueditor-wrap&#x27;</span>;</span><br><span class="line">components: &#123;</span><br><span class="line">        VueUeditorWrap,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="绑定数据并修改VueUeditorWrap配置"><a href="#绑定数据并修改VueUeditorWrap配置" class="headerlink" title="绑定数据并修改VueUeditorWrap配置"></a>绑定数据并修改<code>VueUeditorWrap</code>配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;vue-ueditor-wrap v-model&#x3D;&quot;contents&quot; :config&#x3D;&quot;myConfig&quot;&gt;&lt;&#x2F;vue-ueditor-wrap&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    contents: <span class="string">&#x27;&lt;h2&gt;Vue + UEditor + v-model双向绑定&lt;/h2&gt;&#x27;</span>,</span><br><span class="line">    myConfig: &#123;</span><br><span class="line">      <span class="comment">// 编辑器不自动被内容撑高</span></span><br><span class="line">      autoHeightEnabled: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 初始容器高度</span></span><br><span class="line">      initialFrameHeight: <span class="number">240</span>,</span><br><span class="line">      <span class="comment">// 初始容器宽度</span></span><br><span class="line">      initialFrameWidth: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">      <span class="comment">// 上传文件接口（这个地址是我为了方便各位体验文件上传功能搭建的临时接口，请勿在生产环境使用！！！）</span></span><br><span class="line">      serverUrl: <span class="string">&#x27;http://35.201.165.105:8000/controller.php&#x27;</span>,</span><br><span class="line">      <span class="comment">// UEditor 资源文件的存放路径，如果你使用的是 vue-cli 生成的项目，通常不需要设置该选项，vue-ueditor-wrap 会自动处理常见的情况，如果需要特殊配置，参考下方的常见问题2</span></span><br><span class="line">      UEDITOR_HOME_URL: <span class="string">&#x27;/UEditor/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置完成总结"><a href="#配置完成总结" class="headerlink" title="配置完成总结"></a>配置完成总结</h2><p>按照以上配置，你的编辑器已经成功部署在你的页面中，但是有了新的问题，我们的上传文件接口是别人的，我们如果要上传到自己的服务器上，需要自己写这个服务器文件接口。</p>
<p>淡然如果刚好你的服务器网站是<code>php</code>、<code>jsp</code>、<code>asp</code>搭建的，恭喜你，百度正好给你提供了这些个<code>demo</code>，你可以直接使用，如果不是，比如我就想用<code>python</code>写服务端，下一篇跟着我来写一个<code>ueditor</code>服务端接口，<a href="/9923e2ee.html"><code>django</code>使用<code>editor</code>服务器端配置</a></p>
]]></content>
      <categories>
        <category>fe</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>ueditor跨域</tag>
        <tag>ueditor多图片上传</tag>
        <tag>ueditor多图片跨域</tag>
        <tag>ueditor单图片跨域</tag>
        <tag>vue使用ueditor</tag>
        <tag>vue-ueditor-wrap</tag>
        <tag>vue ueditor</tag>
        <tag>editor服务端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue获取待上传图片对象并显示图片</title>
    <url>/b712b10c.html</url>
    <content><![CDATA[<p>我们日常使用<code>vue</code>常用的框架如：<code>iView</code>、<code>Element</code>等上传时直接单独将资源上传上去再返回上传成功的资源信息。几乎现在只有在不使用<code>api</code>接口的时候才会想到让文件资源与数据一起传给服务器去处理，通常这时候我们采用<code>form</code>表单，并设置其<code>enctype=multipart/form-data</code>，但是如果我们既希望使用<code>api</code>发送请求，又喜欢数据携带资源，该如何处理呢？</p>
<a id="more"></a>

<h2 id="期望效果"><a href="#期望效果" class="headerlink" title="期望效果"></a>期望效果</h2><p>数据资源同步发送post请求，选择文件前如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190903154903.png"></p>
<p>选择图片后不直接上传，但是显示要上传的图片，且点击提交数据后资源与数据一起发送至服务器，如下：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190903155139.png"></p>
<p>下面一起来实现这种效果。</p>
<h3 id="获取待上传图片对象"><a href="#获取待上传图片对象" class="headerlink" title="获取待上传图片对象"></a>获取待上传图片对象</h3><p>我这里使用的<code>vue</code>，如果你是用的<code>jquery</code>更好处理这个问题了。</p>
<p>模板代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FormItem label&#x3D;&quot;图片&quot;&gt;</span><br><span class="line">                  &lt;div class&#x3D;&quot;ivu-upload ivu-upload-drag&quot; v-on:click&#x3D;&quot;handelup&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;file&quot; multiple&#x3D;&quot;multiple&quot; class&#x3D;&quot;ivu-upload-input&quot; ref&#x3D;&quot;filei&quot; v-on:change&#x3D;&quot;up&quot;&gt;</span><br><span class="line">                    &lt;img :src&#x3D;&quot;tempImg&quot; alt&#x3D;&quot;&quot; v-if&#x3D;&quot;tempImg&quot; class&#x3D;&quot;upimg&quot;&gt;</span><br><span class="line">                    &lt;div style&#x3D;&quot;padding: 20px 0px;&quot; v-else&gt;</span><br><span class="line">                      &lt;i class&#x3D;&quot;ivu-icon ivu-icon-ios-cloud-upload&quot;</span><br><span class="line">                         style&#x3D;&quot;font-size: 52px; color: rgb(51, 153, 255);&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">                      &lt;p&gt;请选择您要上传的文件&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                  &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;FormItem&gt;</span><br></pre></td></tr></table></figure>

<p><code>vue</code>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        tempImg:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">      <span class="comment">// 间接调用文件选择框</span></span><br><span class="line">      handelup(e) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$refs.filei.dispatchEvent(<span class="keyword">new</span> MouseEvent(<span class="string">&#x27;click&#x27;</span>))</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 选择文件</span></span><br><span class="line">      up(e) &#123;</span><br><span class="line">      	<span class="comment">// 获取待上传的文件对象</span></span><br><span class="line">        <span class="keyword">let</span> file = e.target.files[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">// 声明一个读取文件对象</span></span><br><span class="line">        <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        <span class="comment">// 开始读取文件内容</span></span><br><span class="line">        reader.readAsDataURL(file);</span><br><span class="line">        <span class="comment">// 读取操作结束时触发</span></span><br><span class="line">        reader.onloadend = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 赋值给vue对象属性</span></span><br><span class="line">          <span class="built_in">this</span>.tempImg = ev.target.result</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总得来说就是<strong>使用<code>vue</code>的<code>ref</code>参数直接操作<code>input</code>的点击事件触发</strong>来先获取待上传文件对象，然后使用<code>FileReader</code>来读取文件，将文件内容赋值给<code>vue</code>属性<code>tempImg</code>，然后图片<code>src</code>绑定了这个属性，达到了选择图片后立即显示的效果。</p>
<p>关于<code>FileReader</code>详细说明及用法：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0ZpbGVSZWFkZXI=">https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader<i class="fa fa-external-link-alt"></i></span></p>
<p>结语：图片对象我们都获取到了，与数据一起提交还成问题吗？讲这个图片对象赋给<code>vue</code>属性，点击提交的时候，将数据属性与资源属性一起提交即可！</p>
]]></content>
      <categories>
        <category>fe</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue获取待上传图片对象并显示图片</tag>
        <tag>vue获取图片对象</tag>
        <tag>vue获取上传图片</tag>
        <tag>js获取上传图片</tag>
        <tag>js获取图片对象</tag>
        <tag>js显示待上传图片</tag>
        <tag>vue资源数据一起提交</tag>
        <tag>FileReader</tag>
      </tags>
  </entry>
  <entry>
    <title>vue跨域使用jsonp解决方案</title>
    <url>/6fbae0cd.html</url>
    <content><![CDATA[<p>使用api开发中跨域是很常见的事，解决跨域的最好方案还是由后端来解决比较方便，但是有的时候使用的是第三方的api，对方不可能为你一个人需求去改后端。</p>
<a id="more"></a>

<p>常见的跨域解决方案：</p>
<ul>
<li>后端允许所有或者允许指定域</li>
<li>前后端布置在一个域下</li>
<li>使用jsonp</li>
</ul>
<p>前两种不用说了，我们就说下使用第三者只有jsonp方案的实施步骤。</p>
<p>网上好多关于jsonp的解决方案，我这里是开发小程序，使用了一个叫uniapp的库去生编译出小程序、h5等，小程序没什么问题，关键是h5牵涉到了域就会出现跨域问题，对方也只提供给了jsonp的一种方案，正常原生js里写jsonp没啥问题，要集成到uniapp中该如何入手呢。</p>
<p>这种问题肯定有很多大神遇到过肯定也有解决方案，果然，官方插件库发现了这个<code>vue-jsonp</code>，下面给出来使用示例。</p>
<p>vue请求数据的时候，会遇到跨域问题，服务器为了保证信息的安全，对跨域请求进行拦截，因此，为了解决vue跨域请求问题，需要使用jsonp。</p>
<h2 id="安装jsonp"><a href="#安装jsonp" class="headerlink" title="安装jsonp"></a>安装jsonp</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save vue-jsonp</span><br></pre></td></tr></table></figure>

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>安装完成之后在main.js中引入jsonp</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  VueJsonp  <span class="keyword">from</span>  <span class="string">&#x27;vue-jsonp&#x27;</span></span><br><span class="line">Vue.use(VueJsonp)</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>引入jsonp之后，就可以使用jsonp跨域请求数据。<br> 注意：并不是所有的网站都可以使用jsonp请求后台数据，需要后台支持jsonp。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">        header: &#123;</span><br><span class="line">          <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/xml&quot;</span> <span class="comment">// 豆瓣一定不能是json</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">this</span>.$jsonp(<span class="string">&#x27;https://douban.uieee.com/v2/movie/in_theaters&#x27;</span>,param).then(</span><br><span class="line">        (json) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(json)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<p>测试下豆瓣，可以了吧。</p>
]]></content>
      <categories>
        <category>re</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue跨域</tag>
        <tag>vue jsonp</tag>
        <tag>uniApp 跨域</tag>
        <tag>uniApp jsonp</tag>
        <tag>uni.request跨域</tag>
        <tag>uni.request jsonp</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress个人收藏插件</title>
    <url>/2b95339f.html</url>
    <content><![CDATA[<p>众多的*<code>WordPress</code>插件*,使得<code>WordPress</code>的功能得到了较大的扩展,但是也正是由于过多的插件,导致我们很难选择所需的插件。</p>
<a id="more"></a>

<h2 id="1、Advanced-Custom-Fields"><a href="#1、Advanced-Custom-Fields" class="headerlink" title="1、Advanced Custom Fields"></a>1、Advanced Custom Fields</h2><p>自定义高级字段，如其名，你可以自定义你需要到字段文本、文件、图像、等等到你的文章，甚至可以过滤分类，在指定分类、模板、类型、内容等多种条件下应用你所添加的字段，普通版免费已经足够你用了，貌似pro版本有更高级的功能，比如如果你需要用到类似画廊这种上传多张图片的，可以考虑pro版本</p>
<p>wordpress插件地址：<span class="exturl" data-url="aHR0cHM6Ly93b3JkcHJlc3Mub3JnL3BsdWdpbnMvYWR2YW5jZWQtY3VzdG9tLWZpZWxkcy8=">https://wordpress.org/plugins/advanced-custom-fields/<i class="fa fa-external-link-alt"></i></span></p>
<p>插件官网地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWR2YW5jZWRjdXN0b21maWVsZHMuY29tLw==">https://www.advancedcustomfields.com/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="2、Polylang"><a href="#2、Polylang" class="headerlink" title="2、Polylang"></a>2、Polylang</h2><p>多语言插件，如果你的网站需要用到多语言，个人感觉这个绝对是无可替代的插件，类似也有很多这样的插件，有的利用翻译api做到多种语言，翻译api最大的诟病就是语法还是有问题的，词不达意，每个人对同一句话的理解还不一样，你还何苦为难一个翻译api。这个插件之所以适合标准的多语言网站，只是在于如同一篇文章，你所用到的每种语言都需要作者自己用各种语言去发布一遍，用作者自己想表达的意思去传递给网站浏览者。并且这个插件已经为你考虑好了分类、导航，甚至上传的图片等多语言，强赞！</p>
<p>wordpress插件地址：<span class="exturl" data-url="aHR0cHM6Ly93b3JkcHJlc3Mub3JnL3BsdWdpbnMvcG9seWxhbmcv">https://wordpress.org/plugins/polylang/<i class="fa fa-external-link-alt"></i></span></p>
<p>插件官网地址：<span class="exturl" data-url="aHR0cHM6Ly9wb2x5bGFuZy5wcm8v">https://polylang.pro/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>Advanced Custom Fields</tag>
        <tag>Polylang</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇文章让你明白Laravel服务容器</title>
    <url>/7f5c7eb6.html</url>
    <content><![CDATA[<p><code>Laravel</code> 服务容器是用于管理类的依赖和执行依赖注入的工具。依赖注入这个花俏名词实质上是指：类的依赖项通过构造函数，或者某些情况下通过「<code>setter</code>」方法「注入」到类中。</p>
<a id="more"></a>

<h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><p><code>DI</code>就是常说的依赖注入，那么究竟什么是依赖注入呢？</p>
<p>打个比方，电脑（非笔记本哈）需要键盘和鼠标我们才能进行操作，这个‘需要’换句话说就是‘依赖’键盘和鼠标。</p>
<p>那么，相应的，一个类需要另一个类才能进行作业，那么这也就是依赖。</p>
<p>看一段代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">protected</span> $keyboard;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;            </span><br><span class="line">        <span class="keyword">$this</span>-&gt;$keyboard = <span class="keyword">new</span> Keyboard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的Computer类依赖了键盘类。</span></span><br></pre></td></tr></table></figure>

<p>好，既然我们已经知道了什么是依赖，那么什么是注入呢？</p>
<p>我们改造一下上面的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">protected</span> $keyboard;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Keyboard $keyboard</span>) </span>&#123;            </span><br><span class="line">        <span class="keyword">$this</span>-&gt;$keyboard = $keyboard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$computer = <span class="keyword">new</span> Computer(<span class="keyword">new</span> Keyboard());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的Computer类依赖注入了Keyboard类。</span></span><br></pre></td></tr></table></figure>

<p>关于依赖注入，我的理解是：</p>
<blockquote>
<p>所需要的类通过参数的形式传入的就是依赖注入。</p>
</blockquote>
<p>理解了依赖注入，我们可以接着理解<code>IOC</code>。</p>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p><code>IOC</code>是什么呢？</p>
<p>中文叫控制反转。啥意思呢？ 这个看明白了<code>DI</code>后就能很容易的理解了。</p>
<p>通过DI我们可以看到，一个类所需要的依赖类是由我们主动实例化后传入类中的。</p>
<p>控制反转和这个有什么关系呢？</p>
<blockquote>
<p>控制反转意思是说将依赖类的控制权交出去，由主动变为被动。</p>
</blockquote>
<p>看一段<code>laravel</code>代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>&#123;    </span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request $request</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">    	<span class="comment">//这就是IOC，我们不需要主动传入类了一切由laravel去实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这你可能有疑问了，这是怎么实现的呢？</p>
<p>这就是靠服务容器了，请往下接着看。</p>
<h2 id="服务容器"><a href="#服务容器" class="headerlink" title="服务容器"></a>服务容器</h2><p>看了很多文章，我一致认为服务容器就是一种设计模式。</p>
<blockquote>
<p>它的目的就是解耦依赖。</p>
</blockquote>
<p>它有点类似于我前面说的《享元模式》。区别在于服务容器解决了所有依赖的实现。</p>
<p>这里我们再从头至尾的看一遍，怎么一步步演化出服务容器。</p>
<p>依然是电脑的例子，我们知道电脑依赖键盘鼠标，可是键盘鼠标也有很多种呀。</p>
<p>先看一个最原始的代码例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">protected</span> $keyboard;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$type == <span class="literal">null</span></span>) </span>&#123;            </span><br><span class="line">        <span class="keyword">switch</span>($type) &#123;                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;common&#x27;</span>:                    </span><br><span class="line">            <span class="keyword">$this</span>-&gt;keyboard = <span class="keyword">new</span> CommonKeyboard();                    </span><br><span class="line">            <span class="keyword">break</span>;                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;awesome&#x27;</span>:                    </span><br><span class="line">            <span class="keyword">$this</span>-&gt;keyboard = <span class="keyword">new</span> AweSomeKeyboard();                    </span><br><span class="line">            <span class="keyword">break</span>;                </span><br><span class="line">            <span class="keyword">default</span>:                    </span><br><span class="line">            <span class="keyword">$this</span>-&gt;keyboard = <span class="keyword">new</span> Keyboard();                    </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或许你一眼就看出了问题在哪。</p>
<p>如果我们又要增加一钟键盘，那我们又得对这个类进行修改。这样下去，这个类会变得庞大且耦合程度过高。</p>
<p>那么我们可以怎么修改呢？</p>
<ul>
<li><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3></li>
</ul>
<p>这样我们可以避免直接的修改<code>Computer</code>类。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单工厂    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params">$type</span>)</span>&#123;            </span><br><span class="line">        <span class="keyword">switch</span>($type) &#123;                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;common&#x27;</span>:                    </span><br><span class="line">            <span class="keyword">$this</span>-&gt;keyboard = <span class="keyword">new</span> CommonKeyboard();                    </span><br><span class="line">            <span class="keyword">break</span>;                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;awesome&#x27;</span>:                    </span><br><span class="line">            <span class="keyword">$this</span>-&gt;keyboard = <span class="keyword">new</span> AweSomeKeyboard();                    </span><br><span class="line">            <span class="keyword">break</span>;                </span><br><span class="line">            <span class="keyword">default</span>:                    </span><br><span class="line">            <span class="keyword">$this</span>-&gt;keyboard = <span class="keyword">new</span> Keyboard();                    </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">protected</span> $keyboard;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$type == <span class="literal">null</span></span>) </span>&#123;            </span><br><span class="line">        <span class="keyword">$this</span>-&gt;keyboard = Factory::getInstance($type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样使用简单工厂模式后，我们后续的修改可以不用对<code>Computer</code>类进行操作而只要修改工厂类就行了。这就相当于对<code>Computer</code>类进行了解耦。</p>
<p><code>Computer</code>类虽不在依赖那些键盘类了，但是却变为依赖工厂类了。</p>
<p>后续添加新类型的键盘就必须对工厂类进行修改。</p>
<p>所以这个工厂类还不能很好的满足要求，我们知道电脑对键盘的接口都是一致的，键盘必须实现这一接口才能被电脑识别，那我们对<code>Computer</code>和<code>Keyboard</code>类进行修改。</p>
<ul>
<li><h3 id="DI（依赖注入）"><a href="#DI（依赖注入）" class="headerlink" title="DI（依赖注入）"></a>DI（依赖注入）</h3></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Board</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonBoard</span> <span class="keyword">implements</span> <span class="title">Board</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params"></span>)</span>&#123;            </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;普通键盘&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MechanicalKeyboard</span> <span class="keyword">implements</span> <span class="title">Board</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params"></span>)</span>&#123;            </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;机械键盘&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">protected</span> $keyboard;        </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params">Board $keyboard</span>) </span>&#123;            </span><br><span class="line">        <span class="keyword">$this</span>-&gt;keyboard = $keyboard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$computer = <span class="keyword">new</span> Computer(<span class="keyword">new</span> MechanialKeyBoard());</span><br></pre></td></tr></table></figure>

<p>可是这样也有问题，如果我们后续对这台电脑使用的键盘不满意要进行替换呢？ 我们又回到原点了，必须去修改传入的键盘类。</p>
<p>能不能做成可配置的呢？</p>
<ul>
<li><h3 id="IOC服务容器（超级工厂）"><a href="#IOC服务容器（超级工厂）" class="headerlink" title="IOC服务容器（超级工厂）"></a>IOC服务容器（超级工厂）</h3></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;    </span><br><span class="line">    <span class="keyword">protected</span> $binds;    </span><br><span class="line">    <span class="keyword">protected</span> $instances;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">$abstract, $concrete</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span> ($concrete <span class="keyword">instanceof</span> <span class="built_in">Closure</span>) &#123;            </span><br><span class="line">            <span class="keyword">$this</span>-&gt;binds[$abstract] = $concrete;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            <span class="keyword">$this</span>-&gt;instances[$abstract] = $concrete;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">$abstract, $parameters = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;instances[$abstract];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        array_unshift($parameters, <span class="keyword">$this</span>);        </span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;binds[$abstract], $parameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是一个简单的<code>IOC</code>服务容器。</p>
<p>这个怎么解决我们上述的问题呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$container = <span class="keyword">new</span> Container;</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(<span class="string">&#x27;Board&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$container</span>)</span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonBoard;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(<span class="string">&#x27;Computer&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$container,$module</span>)</span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Computer($container-&gt;make($module));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$computer = $container-&gt;make(<span class="string">&#x27;Computer&#x27;</span>,[<span class="string">&#x27;Board&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>这里生产出来的<code>Computer</code>类就是一个使用普通键盘的电脑类了。</p>
<p>解释一下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">bind(name,<span class="function"><span class="keyword">function</span>(<span class="params">$container</span>)</span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Name;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的name和Name之间的关系是：</span></span><br><span class="line"><span class="comment">//当我需要name类的时候你就给我实例化Name类。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//make(name)方法是对name进行生产返回一个实例。</span></span><br></pre></td></tr></table></figure>

<p>如果我们要更换键盘怎么办呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$container-&gt;bind(<span class="string">&#x27;Board&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$container</span>)</span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MechanicalBoard;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(<span class="string">&#x27;Computer&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$container,$module</span>)</span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Computer($container-&gt;make($module));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$computer = $container-&gt;make(<span class="string">&#x27;Computer&#x27;</span>,[<span class="string">&#x27;Board&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>只要对<code>bind</code>绑定的<code>Board</code>类的实现进行修改，我们就可以很容易替换掉键盘了。这就是一个服务容器。</p>
<p>对服务容器进行一个理解：</p>
<blockquote>
<p>容器就是一个装东西的，好比碗。而服务就是这个碗要装的饭呀，菜呀，等等东西。当我们需要饭时，我们就能从这个碗里拿到。如果你想在饭里加点菜（也就是饭依赖注入了菜），我们从碗里直接拿饭就可以了，而这些依赖都由容器解决了（这也就是控制反转）。</p>
</blockquote>
<p>我们需要做的就是对提供的服务进行维护。</p>
<p>我们看一段真实的在<code>laravel</code>框架上能跑的代码：<span class="exturl" data-url="aHR0cHM6Ly9pbXBsb2RlLmlvLzRtVDhPNA==">代码<i class="fa fa-external-link-alt"></i></span></p>
<p>当然<code>laravel</code>框架的服务容器比这里的要复杂很多了，但我们明白了它的使用目的以及使用场景就不难去入手<code>laravel</code>了。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>php</category>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>依赖注入</tag>
        <tag>服务容器</tag>
        <tag>IOC</tag>
        <tag>DI</tag>
      </tags>
  </entry>
  <entry>
    <title>个人觉得好用的软件收藏</title>
    <url>/d5631add.html</url>
    <content><![CDATA[<p>仅为个人使用后觉得好用的软件，不做他用。</p>
<h4 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h4><p>pycharm</p>
<p>phpstorm</p>
<p>vscode</p>
<p>HBuilderX</p>
<p>notepad++</p>
<p>sublime</p>
<p>Vim</p>
<h4 id="数据库工具"><a href="#数据库工具" class="headerlink" title="数据库工具"></a>数据库工具</h4><p>Navicat</p>
<h4 id="shell工具"><a href="#shell工具" class="headerlink" title="shell工具"></a>shell工具</h4><p>Xmanager</p>
<h4 id="写作类"><a href="#写作类" class="headerlink" title="写作类"></a>写作类</h4><p>Typora</p>
<h4 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h4><p><a href="https://www.diandian100.cn/e1bf671b.html">picgo</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>个人觉得好用的软件收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>主机无法访问虚拟机web项目</title>
    <url>/ef8f23a8.html</url>
    <content><![CDATA[<p>实在无法忍受<code>win</code>不支持开发中一些插件，索性<code>vm</code>中安装<code>linux</code>来开发，万事俱备，访问却失败了，虚拟机内部可以访问<code>web</code>项目，主机中死活打不开<code>web</code>项目，什么<code>allowd_host</code>，什么<code>0.0.0.0</code>加端口了，都不好使，防火墙关了就好了。</p>
<a id="more"></a>

<p>下面列举下主机访问不了虚拟机常见的解决方式：</p>
<h3 id="0-0-0-0"><a href="#0-0-0-0" class="headerlink" title="0.0.0.0"></a><code>0.0.0.0</code></h3><p>通常我们运行<code>Django</code>程序直接使用<code>Pycharm</code>上的快捷按钮或者快捷键了，手动执行也最多写个<code>runserver 8000</code>，事实上想让主机或者局域网中电脑可以访问到该项目，我们需要给其加上<code>ip</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<p>还不行？往下看</p>
<h3 id="ALLOWED-HOSTS"><a href="#ALLOWED-HOSTS" class="headerlink" title="ALLOWED_HOSTS"></a><code>ALLOWED_HOSTS</code></h3><p>在<code>Django</code>的<code>settings</code>文件中修改<code>ALLOWED_HOSTS</code>，<code>ip</code>为虚拟机<code>ip</code>，或者直接添加<code>*</code>号。</p>
<p>再试下？不行？走</p>
<h3 id="VM网络配置"><a href="#VM网络配置" class="headerlink" title="VM网络配置"></a><code>VM</code>网络配置</h3><p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817151256.png" alt="img"></p>
<p>主机端口:　　主机浏览器访问<code>Django</code>的端口,默认为<code>8000</code>(可自行修改)</p>
<p>虚拟机<code>IP</code>地址:　　在虚拟机中输入<code>ifconfig</code>命令获取</p>
<p>虚拟机端口:　　<code>xshell</code>工具连接虚拟机所用的端口</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817151331.png" alt="img"></p>
<p>还是不行……</p>
<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>经历以上步骤还不行，那基本就是防火墙问题了，关了它吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line"> (关闭防火墙,重启后无效)</span><br><span class="line"></span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"> (关闭防火墙,永久有效)</span><br></pre></td></tr></table></figure>

<p>成了，天亮了！！！！</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>主机无法访问虚拟机web项目</tag>
        <tag>访问虚拟机</tag>
        <tag>无法访问VMware</tag>
        <tag>无法访问django</tag>
        <tag>无法访问虚拟机django</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是数字签名？</title>
    <url>/22562fab.html</url>
    <content><![CDATA[<p> 加密方法可以分为两大类。一类是单钥加密（<code>private key cryptography</code>），还有一类叫做双钥加密（<code>public key cryptography</code>）。前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是两套密码。 </p>
<a id="more"></a>

<h2 id="单钥加密"><a href="#单钥加密" class="headerlink" title="单钥加密"></a>单钥加密</h2><p> 在单钥加密的情况下，密钥只有一把，所以密钥的保存变得很重要。一旦密钥泄漏，密码也就被破解。 </p>
<h2 id="双钥加密"><a href="#双钥加密" class="headerlink" title="双钥加密"></a>双钥加密</h2><p>在双钥加密的情况下，密钥有两把，一把是公开的公钥，还有一把是不公开的私钥。</p>
<p>双钥加密的原理如下：</p>
<p>a) 公钥和私钥是一一对应的关系，有一把公钥就必然有一把与之对应的、独一无二的私钥，反之亦成立。</p>
<p>b) 所有的（公钥, 私钥）对都是不同的。</p>
<p>c) 用公钥可以解开私钥加密的信息，反之亦成立。</p>
<p>d) 同时生成公钥和私钥应该相对比较容易，但是从公钥推算出私钥，应该是很困难或者是不可能的。</p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><ol>
<li>鲍勃有两把钥匙，一把是公钥，另一把是私钥。 </li>
</ol>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092155.png"></p>
<ol start="2">
<li>鲍勃把公钥送给他的朋友们—-帕蒂、道格、苏珊—-每人一把。 </li>
</ol>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092551.png"></p>
<ol start="3">
<li>苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。 </li>
</ol>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092626.png"></p>
<ol start="4">
<li>鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092719.png"></li>
<li>鲍勃给苏珊回信，决定采用”数字签名”。他写完后先用Hash函数，生成信件的摘要（digest）。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092746.png"></li>
<li>然后，鲍勃使用私钥，对这个摘要加密，生成”数字签名”（signature）。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092807.png"></li>
<li>鲍勃将这个签名，附在信件下面，一起发给苏珊。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092826.png"></li>
<li>苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092849.png"></li>
<li>苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092911.png"></li>
<li>复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092932.png"></li>
<li>后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称<code>CA</code>），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121092952.png"></li>
<li>鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093009.png"></li>
<li>苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。<img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093024.png"></li>
<li>下面，我们看一个应用”数字证书”的实例：<code>https</code>协议。这个协议主要用于网页加密。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093044.png"></li>
<li>首先，客户端向服务器发出加密请求。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093103.png"></li>
<li>服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。<img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093127.png"></li>
<li>客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093147.png"></li>
<li>如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。 <img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093205.png"></li>
<li>如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。<img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093222.png"></li>
<li>如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。<img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200121093237.png"></li>
</ol>
<p>本文转自<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTEvMDgvd2hhdF9pc19hX2RpZ2l0YWxfc2lnbmF0dXJlLmh0bWw=">阮一峰的博客<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>rsa</tag>
        <tag>公钥加密</tag>
        <tag>私钥加密</tag>
        <tag>什么是数字签名？</tag>
        <tag>rsa2</tag>
        <tag>数字签名</tag>
        <tag>数字证书</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开发手机app之安卓显示首页歌曲列表</title>
    <url>/59459212.html</url>
    <content><![CDATA[<p>上篇文章**<a href="https://www.diandian100.cn/d8571d9a.html">从零开发手机app之歌曲列表接口及文件访问路由</a>**我们在服务端做好了歌曲列表接口和静态文件访问的接口，接下来我们现在安卓上调用下以上接口进行测试。</p>
<p>测试之前先考虑如何在将前端打包在安卓上，我这里选择的是<code>Dcloud</code>家的产品，<code>uni-app</code>和<code>mui</code>，会用<code>vue</code>之后感觉有时候使用<code>jquery</code>操作节点很繁琐，所以刚开始选择的<code>uni-app</code>，随便拉了一点代码打包发现并不是我想要的样子，不想在这上面浪费太多，还是先用<code>mui</code>把功能给实现出来。</p>
<a id="more"></a>

<p>先来预览下最终的效果</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20191015094709.png"></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><p><strong><code>HBuilder X</code>一枚，人家的产品配套人家的开发工具才能最快的提高开发效率</strong></p>
</li>
<li><p><strong>安卓手机或安卓模拟器，本人使用的是<code>mumu</code>模拟器</strong></p>
<p>使用模拟器要在<code>HBuilder</code>中修改下端口“运行”—&gt;“运行到手机或模拟器”—&gt;“<code>Android</code>模拟器端口设置”，设置端口为<code>7555</code>，如果不能正常连接模拟器可以在以上设置中找到<code>adb</code>路径，本人的位置在“<code>F:/迅雷下载/HBuilderX.2.2.0.20190810.full/HBuilderX/plugins/launcher/tools/adbs/adb.exe</code>”。</p>
</li>
</ul>
<h2 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h2><p>我们这里先创建一个首页和设置页面，本文只说首页歌曲列表</p>
<h3 id="基础页面"><a href="#基础页面" class="headerlink" title="基础页面"></a>基础页面</h3><p>默认的<code>index.html</code>作为我们的基础页面，存放底部选项卡</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;mui-bar mui-bar-tab&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-tab-item mui-active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mui-icon mui-icon-home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mui-tab-label&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-tab-item&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mui-icon mui-icon-phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mui-tab-label&quot;</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-tab-item&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mui-icon mui-icon-email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mui-tab-label&quot;</span>&gt;</span>邮件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-tab-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;setttings&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mui-icon mui-icon-gear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;mui-tab-label&quot;</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 初始化,初始打开home页面</span></span></span><br><span class="line">		mui.init(&#123;</span><br><span class="line">			subpages:[&#123;</span><br><span class="line"><span class="javascript">				url:<span class="string">&#x27;home.html&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				id:<span class="string">&#x27;home.html&#x27;</span>,</span></span><br><span class="line">				styles:&#123;</span><br><span class="line"><span class="javascript">					top:<span class="string">&#x27;0px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					bottom:<span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;]</span><br><span class="line">		&#125;);</span><br><span class="line"><span class="javascript">		<span class="comment">// 点击设置</span></span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">&#x27;setttings&#x27;</span>).addEventListener(<span class="string">&#x27;tap&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">		        mui.openWindow(&#123;</span><br><span class="line"><span class="javascript">					url:<span class="string">&quot;settings.html&quot;</span>,</span></span><br><span class="line"><span class="javascript">					id:<span class="string">&quot;settings.html&quot;</span>,</span></span><br><span class="line">					styles:&#123;</span><br><span class="line"><span class="javascript">						top:<span class="string">&#x27;0px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						bottom:<span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line"><span class="javascript">		<span class="comment">// 点击首页</span></span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">&#x27;home&#x27;</span>).addEventListener(<span class="string">&#x27;tap&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">		        mui.openWindow(&#123;</span><br><span class="line"><span class="javascript">					url:<span class="string">&quot;home.html&quot;</span>,</span></span><br><span class="line"><span class="javascript">					id:<span class="string">&#x27;home.html&#x27;</span>,</span></span><br><span class="line">					styles:&#123;</span><br><span class="line"><span class="javascript">						top:<span class="string">&#x27;0px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						bottom:<span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>我们创建home页面作为我们的首页，用来显示歌曲列表。该文件需要用到请求接口了，为了后续其他文档中能方便使用接口地址，我们选择将接口地址放在公共文件<code>mui.js</code>文件中进行存放</p>
<p><code>mui.js</code>文件中上方加入我们的接口地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.base_url = <span class="string">&quot;http://10.10.10.238:9859&quot;</span>;</span><br><span class="line"><span class="built_in">window</span>.images_url = <span class="built_in">window</span>.base_url + <span class="string">&quot;/images/&quot;</span>;</span><br><span class="line"><span class="built_in">window</span>.media_url = <span class="built_in">window</span>.base_url + <span class="string">&quot;/media/&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>home</code>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;mui-bar mui-bar-nav&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;mui-title&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mui-content&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view&quot;</span> <span class="attr">id</span>=<span class="string">&quot;music_list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		mui.init();		</span><br><span class="line"><span class="javascript">		<span class="comment">// 加载页面请求数据</span></span></span><br><span class="line"><span class="javascript">		mui.plusReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 发起请求</span></span></span><br><span class="line"><span class="javascript">			mui.get(<span class="built_in">window</span>.base_url+<span class="string">&#x27;/songs&#x27;</span>,</span></span><br><span class="line">			&#123;&#125;,</span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// console.log(&#x27;开始home页面&#x27;)</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// console.log(JSON.stringify(data))</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 循环每条数据</span></span></span><br><span class="line"><span class="javascript">				res.data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 图片地址格式为决定地址</span></span></span><br><span class="line"><span class="javascript">					item.pic = <span class="built_in">window</span>.images_url + item.pic</span></span><br><span class="line"><span class="javascript">					<span class="comment">// console.log(JSON.stringify(item))</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// 封装为html</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					html_li = `<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view-cell mui-media&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">					&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;mui-media-object mui-pull-left&quot;</span> src=<span class="string">&quot;$&#123;item.pic&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">					&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;mui-media-body&quot;</span>&gt;</span></span><br><span class="line">					    $&#123;item.title&#125;</span><br><span class="line"><span class="javascript">						&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;mui-ellipsis&quot;</span>&gt;$&#123;item.author&#125;-$&#123;item.releaseDate&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">				<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span>`;</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 将html代码插入到ul中</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.getElementById(<span class="string">&quot;music_list&quot;</span>).insertAdjacentHTML(<span class="string">&#x27;beforeend&#x27;</span>, html_li)</span></span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			)</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试首页"><a href="#测试首页" class="headerlink" title="测试首页"></a>测试首页</h2><p>环境准备中我们设置好了连接的模拟器，此时我们在“运行”-》“运行到手机或模拟器”-》“运行在设备<code>mumu</code>”，打开模拟器首次将为我们安装一个<code>Hbuilder</code>的<code>app</code>，首次较慢，接着会自动打开，展示首页，效果就是本文开始展示的效果。</p>
]]></content>
      <categories>
        <category>fe</category>
      </categories>
      <tags>
        <tag>app开发</tag>
        <tag>uni-app开发</tag>
        <tag>mui开发app</tag>
        <tag>安卓开发app</tag>
        <tag>dcloud app开发</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开发手机app之安卓音乐播放页面</title>
    <url>/8ed8a17.html</url>
    <content><![CDATA[<p>上篇文章**<a href="https://www.diandian100.cn/59459212.html">从零开发手机app之安卓显示首页歌曲列表</a>**我们完成了音乐列表展示的功能，本文继续下面的代码，主要实现点击音乐列表中的某个音乐，进入播放页面，并播放该音乐。</p>
<a id="more"></a>
<p>要播放指定音乐，我们需要跳转到播放音乐，并将该音乐数据携带过来，所以我们要修改之前写的音乐列表页面代码，加上跳转且携带数据的功能。</p>
<h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;mui-bar mui-bar-nav&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;mui-title&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mui-content&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;mui-table-view&quot;</span> <span class="attr">id</span>=<span class="string">&quot;music_list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		mui.init();		</span><br><span class="line"><span class="javascript">		<span class="comment">// 加载页面请求数据</span></span></span><br><span class="line"><span class="javascript">		mui.plusReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 发起请求</span></span></span><br><span class="line"><span class="javascript">			mui.get(<span class="built_in">window</span>.base_url+<span class="string">&#x27;/songs&#x27;</span>,</span></span><br><span class="line">			&#123;&#125;,</span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// console.log(&#x27;开始home页面&#x27;)</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// console.log(JSON.stringify(data))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">				<span class="comment">// 循环每条数据</span></span></span><br><span class="line"><span class="javascript">				res.data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// console.log(JSON.stringify(item))</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// 图片地址格式为决定地址</span></span></span><br><span class="line"><span class="javascript">										item.pic = <span class="built_in">window</span>.images_url + item.pic</span></span><br><span class="line"><span class="javascript">										item.audio = <span class="built_in">window</span>.media_url + item.audio</span></span><br><span class="line"><span class="javascript">										<span class="comment">// 添加音乐li至页面</span></span></span><br><span class="line">										add_item(item)</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			)</span><br><span class="line">		&#125;)</span><br><span class="line"><span class="javascript">		<span class="comment">// 添加每条音乐html代码</span></span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span>  <span class="title">add_item</span>(<span class="params">obj</span>)</span>&#123;         </span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">          li.className =<span class="string">&quot;mui-table-view-cell mui-media&quot;</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">		  <span class="comment">// 点击该音乐,跳转音乐播放页面,并将该条音乐数据携带过去</span></span></span><br><span class="line"><span class="javascript">          a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">          		mui.openWindow(&#123;</span><br><span class="line"><span class="javascript">          			url:<span class="string">&quot;view.html&quot;</span>,</span></span><br><span class="line"><span class="javascript">          			id:<span class="string">&quot;view.html&quot;</span>,</span></span><br><span class="line">          			extras:obj</span><br><span class="line">          		&#125;)</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="javascript">          img.className =<span class="string">&quot;mui-media-object mui-pull-left&quot;</span>;</span></span><br><span class="line">          img.src = obj.pic;</span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">          div.className=<span class="string">&quot;mui-media-body&quot;</span>;</span></span><br><span class="line">          div.innerText = obj.title;</span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="javascript">          p.className=<span class="string">&quot;mui-ellipsis&quot;</span>;</span></span><br><span class="line"><span class="javascript">          p.innerText=obj.author+<span class="string">&#x27;-&#x27;</span>+obj.releaseDate; </span></span><br><span class="line">          </span><br><span class="line">          li.appendChild(a);</span><br><span class="line">          a.appendChild(img);</span><br><span class="line">          a.appendChild(div);</span><br><span class="line">          div.appendChild(p);</span><br><span class="line">          </span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementById(<span class="string">&quot;music_list&quot;</span>).appendChild(li);</span></span><br><span class="line">    &#125;</span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="音乐播放页面"><a href="#音乐播放页面" class="headerlink" title="音乐播放页面"></a>音乐播放页面</h2><p><code>view.html</code>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.song_img</span>&#123;</span></span><br><span class="line">				width: 100%;</span><br><span class="line">				text-align: center;</span><br><span class="line">				padding: 20px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.song_pic_bg</span>&#123;</span></span><br><span class="line">				width: 260px;</span><br><span class="line">				height: 260px;</span><br><span class="line">				border-radius: 50%;</span><br><span class="line"><span class="css">				<span class="selector-tag">background</span>: <span class="selector-id">#2AC845</span>;</span></span><br><span class="line">				margin: 0 auto;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.to_rotate</span>&#123;</span></span><br><span class="line">				animation: rotate 5s linear infinite; </span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="keyword">@keyframes</span> rotate&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>)&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>)&#125;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.pic</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">				height: 200px;</span><br><span class="line">				margin: 30px auto;</span><br><span class="line">				border-radius: 50%;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.text-center</span>&#123;</span></span><br><span class="line">				text-align: center;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;mui-bar mui-bar-nav&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mui-action-back mui-icon mui-icon-left-nav mui-pull-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;mui-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mui-content&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;song_img&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cd&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;song_pic_bg&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://img.mukewang.com/5d81aba509a59de109000383.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pic&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mui-input-row mui-input-range&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pause&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mui-btn mui-btn-yellow mui-btn-block&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;stop&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mui-btn mui-btn-red mui-btn-block&quot;</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/mui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">		mui.init()</span><br><span class="line"><span class="javascript">		<span class="comment">// 定义播放器对象</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> player_obj = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 暂停/继续状态</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> parse = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 停止/开始状态</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> stop = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 音频地址</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> audio = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 暂停/继续按钮</span></span></span><br><span class="line"><span class="javascript">		parse_btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pause&quot;</span>)</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 停止/开始按钮</span></span></span><br><span class="line"><span class="javascript">		stop_btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;stop&quot;</span>)</span></span><br><span class="line"><span class="javascript">		mui.plusReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 获取传过来的数据</span></span></span><br><span class="line">			data = plus.webview.currentWebview()</span><br><span class="line"><span class="javascript">			<span class="comment">// 设置标题</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.getElementById(<span class="string">&#x27;title&#x27;</span>).innerText=<span class="string">`正在播放<span class="subst">$&#123;data.title&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 设置歌曲背景图</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.getElementById(<span class="string">&#x27;pic&#x27;</span>).src=data.pic</span></span><br><span class="line">			audio = data.audio</span><br><span class="line"><span class="javascript">			<span class="comment">// 创建播放对象</span></span></span><br><span class="line">			player_obj = plus.audio.createPlayer(audio)</span><br><span class="line"><span class="javascript">			<span class="comment">// 开始播放</span></span></span><br><span class="line">			player_obj.play()</span><br><span class="line"><span class="javascript">			<span class="comment">// 旋转播放图片</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.getElementById(<span class="string">&#x27;cd&#x27;</span>).classList.add(<span class="string">&#x27;to_rotate&#x27;</span>)</span></span><br><span class="line">		&#125;)</span><br><span class="line"><span class="javascript">		<span class="comment">// 暂停、继续播放</span></span></span><br><span class="line"><span class="javascript">		parse_btn.addEventListener(<span class="string">&#x27;tap&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 切换暂停/继续播放状态</span></span></span><br><span class="line">			parse = !parse</span><br><span class="line"><span class="javascript">			<span class="comment">// 如果暂停状态为暂停则暂停音乐播放,反之继续播放</span></span></span><br><span class="line">			if(parse)&#123;</span><br><span class="line">				player_obj.pause()</span><br><span class="line"><span class="javascript">				parse_btn.innerText=<span class="string">&#x27;继续&#x27;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 暂停旋转播放图片</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">document</span>.getElementById(<span class="string">&#x27;cd&#x27;</span>).classList.remove(<span class="string">&#x27;to_rotate&#x27;</span>)</span></span><br><span class="line"><span class="javascript">			&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">				player_obj.resume()</span><br><span class="line"><span class="javascript">				parse_btn.innerText=<span class="string">&#x27;暂停&#x27;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 旋转播放图片</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">document</span>.getElementById(<span class="string">&#x27;cd&#x27;</span>).classList.add(<span class="string">&#x27;to_rotate&#x27;</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		        </span><br><span class="line">				</span><br><span class="line">		&#125;)</span><br><span class="line"><span class="javascript">		<span class="comment">// 停止、开始播放</span></span></span><br><span class="line"><span class="javascript">		stop_btn.addEventListener(<span class="string">&#x27;tap&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 切换停止/开始状态</span></span></span><br><span class="line">			stop = !stop</span><br><span class="line"><span class="javascript">			<span class="comment">// 如果停止状态为停止则停止音乐播放,反之开始播放</span></span></span><br><span class="line">			if(stop)&#123;</span><br><span class="line">				player_obj.stop();</span><br><span class="line"><span class="javascript">				stop_btn.innerText=<span class="string">&#x27;开始&#x27;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 暂停旋转播放图片</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">document</span>.getElementById(<span class="string">&#x27;cd&#x27;</span>).classList.remove(<span class="string">&#x27;to_rotate&#x27;</span>)</span></span><br><span class="line"><span class="javascript">			&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 创建播放对象</span></span></span><br><span class="line">				player_obj = plus.audio.createPlayer(audio)</span><br><span class="line"><span class="javascript">				<span class="comment">// 开始播放</span></span></span><br><span class="line">				player_obj.play()</span><br><span class="line"><span class="javascript">				stop_btn.innerText=<span class="string">&#x27;停止&#x27;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 旋转播放图片</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">document</span>.getElementById(<span class="string">&#x27;cd&#x27;</span>).classList.add(<span class="string">&#x27;to_rotate&#x27;</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		    &#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><p>我们简单做了一点特效，播放时音乐旋转，如同<code>cd</code>一样，<code>slide</code>播放进度暂未实现哟，暂停/继续、停止/开始按钮切换</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191015153637.png"></p>
<p>以上就是今天我们完成的功能</p>
]]></content>
      <categories>
        <category>fe</category>
      </categories>
      <tags>
        <tag>app开发</tag>
        <tag>python app开发</tag>
        <tag>flask app开发</tag>
        <tag>hbuilder app开发</tag>
        <tag>openWindow</tag>
        <tag>plusReady</tag>
        <tag>createPlayer</tag>
        <tag>plus.audio.createPlayer</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开发手机app之歌曲列表接口及文件访问路由</title>
    <url>/d8571d9a.html</url>
    <content><![CDATA[<p>接上篇，利用采集已经帮我们准备好了歌曲数据，接下来写一个获取歌曲列表的接口，当然还有封面及<code>mp3</code>文件访问的路由。</p>
<p>为了将项目显得稍微清晰点，我们将每个功能单独写一个蓝图，本次我们主要写歌曲列表蓝图和文件访问蓝图。</p>
<a id="more"></a>

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>我们为返回接口规定一个固定的相应格式，整个文件内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">MEDIA_PATH = <span class="string">&quot;static/media&quot;</span></span><br><span class="line">IMAGE_PATH = <span class="string">&quot;static/img&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库配置</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">27017</span>)</span><br><span class="line">MONGO_DB = client[<span class="string">&quot;aios&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Rest-Api</span></span><br><span class="line">RET=&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建蓝图"><a href="#创建蓝图" class="headerlink" title="创建蓝图"></a>创建蓝图</h2><p>我们在项目根创建一个blue_print的专门用来存放蓝图的目录，在其中创建songs和files文件，代表以上两个路由的蓝图。</p>
<h3 id="歌曲列表蓝图"><a href="#歌曲列表蓝图" class="headerlink" title="歌曲列表蓝图"></a>歌曲列表蓝图</h3><p>主要用来返回歌曲列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, jsonify</span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="comment"># 实例化蓝图</span></span><br><span class="line">songs = Blueprint(<span class="string">&#x27;songs&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@songs.route(&quot;/songs&quot;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">songs_list</span>():</span></span><br><span class="line">    <span class="comment"># 查询5条数据</span></span><br><span class="line">    res = list(settings.MONGO_DB.music.find().limit(<span class="number">5</span>))</span><br><span class="line">    <span class="comment"># 将每条数据的_id由objectid修改为str字符串</span></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(res):</span><br><span class="line">        res[index][<span class="string">&#x27;_id&#x27;</span>] = str(item.get(<span class="string">&#x27;_id&#x27;</span>))</span><br><span class="line">    <span class="comment"># 返回格式</span></span><br><span class="line">    settings.RET[<span class="string">&quot;code&quot;</span>] = <span class="number">200</span></span><br><span class="line">    settings.RET[<span class="string">&quot;msg&quot;</span>] = <span class="string">&quot;查询歌曲列表&quot;</span></span><br><span class="line">    settings.RET[<span class="string">&quot;data&quot;</span>] = res</span><br><span class="line">    <span class="keyword">return</span> jsonify(settings.RET)</span><br></pre></td></tr></table></figure>

<h3 id="文件访问蓝图"><a href="#文件访问蓝图" class="headerlink" title="文件访问蓝图"></a>文件访问蓝图</h3><p>后期<code>app</code>调用我么借口会访问我们的图片和音频等静态资源，此处我们为其这些静态资源写一个路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">显示文件路由</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, send_file</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">files = Blueprint(<span class="string">&#x27;files&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 音频路由</span></span><br><span class="line"><span class="meta">@files.route(&#x27;/media/&lt;file&gt;&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_media</span>(<span class="params">file</span>):</span></span><br><span class="line">    media = os.path.join(settings.MEDIA_PATH, file)</span><br><span class="line">    <span class="keyword">return</span> send_file(media)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片路由</span></span><br><span class="line"><span class="meta">@files.route(&#x27;/images/&lt;file&gt;&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_images</span>(<span class="params">file</span>):</span></span><br><span class="line">    image = os.path.join(settings.IMAGE_PATH, file)</span><br><span class="line">    <span class="keyword">return</span> send_file(image)</span><br></pre></td></tr></table></figure>

<h2 id="绑定蓝图"><a href="#绑定蓝图" class="headerlink" title="绑定蓝图"></a>绑定蓝图</h2><p>我们创建一个入口主文件<code>app_api.py</code>，在其中注册我们刚才创建的蓝图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> blue_print <span class="keyword">import</span> songs, files</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册歌曲列表蓝图</span></span><br><span class="line">app.register_blueprint(songs.songs)</span><br><span class="line"><span class="comment"># 注册文件访问蓝图</span></span><br><span class="line">app.register_blueprint(files.files)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9859</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h2><h3 id="歌曲列表"><a href="#歌曲列表" class="headerlink" title="歌曲列表"></a>歌曲列表</h3><p>访问<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5ODU5L3NvbmdzJUVGJUJDJThDJUU4JUJGJTk0JUU1JTlCJTlFJUU3JUJCJTkzJUU2JTlFJTlDJUU1JUE2JTgyJUU0JUI4JThCJUVGJUJDJTlB">http://localhost:9859/songs，返回结果如下：<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    data: [</span><br><span class="line">        &#123;</span><br><span class="line">        _id: &quot;5da0160897fde511e5f13948&quot;,</span><br><span class="line">        audio: &quot;178fea24-95ef-489b-8a6b-987babeab02a.mp3&quot;,</span><br><span class="line">        author: &quot;姚智鑫&quot;,</span><br><span class="line">        pic: &quot;178fea24-95ef-489b-8a6b-987babeab02a.jpg&quot;,</span><br><span class="line">        releaseDate: &quot;2019-09-10&quot;,</span><br><span class="line">        songTimeMinutes: &quot;02:21&quot;,</span><br><span class="line">        title: &quot;野狼disco (抒情完整版)&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        _id: &quot;5da0161097fde511e5f13949&quot;,</span><br><span class="line">        audio: &quot;d2672688-649f-4557-82b5-59206bf54842.mp3&quot;,</span><br><span class="line">        author: &quot;张泽熙&quot;,</span><br><span class="line">        pic: &quot;d2672688-649f-4557-82b5-59206bf54842.jpg&quot;,</span><br><span class="line">        releaseDate: &quot;2018-08-11&quot;,</span><br><span class="line">        songTimeMinutes: &quot;03:40&quot;,</span><br><span class="line">        title: &quot;那个女孩&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        _id: &quot;5da0161d97fde511e5f1394a&quot;,</span><br><span class="line">        audio: &quot;7ea23d21-c0db-4fd7-bfcb-33ca9f712061.mp3&quot;,</span><br><span class="line">        author: &quot;汪峰&quot;,</span><br><span class="line">        pic: &quot;7ea23d21-c0db-4fd7-bfcb-33ca9f712061.jpg&quot;,</span><br><span class="line">        releaseDate: &quot;2016-12-30&quot;,</span><br><span class="line">        songTimeMinutes: &quot;05:34&quot;,</span><br><span class="line">        title: &quot;我爱你中国&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        _id: &quot;5da0162597fde511e5f1394b&quot;,</span><br><span class="line">        audio: &quot;117ebccb-7dd1-4436-a82e-4000083c1789.mp3&quot;,</span><br><span class="line">        author: &quot;音阙诗听&amp;赵方婧&quot;,</span><br><span class="line">        pic: &quot;117ebccb-7dd1-4436-a82e-4000083c1789.jpg&quot;,</span><br><span class="line">        releaseDate: &quot;2019-06-06&quot;,</span><br><span class="line">        songTimeMinutes: &quot;03:36&quot;,</span><br><span class="line">        title: &quot;芒种&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        _id: &quot;5da0162f97fde511e5f1394c&quot;,</span><br><span class="line">        audio: &quot;6c2b1c8f-4448-4421-b116-250ddd4bfda5.mp3&quot;,</span><br><span class="line">        author: &quot;华语群星&quot;,</span><br><span class="line">        pic: &quot;6c2b1c8f-4448-4421-b116-250ddd4bfda5.jpg&quot;,</span><br><span class="line">        releaseDate: &quot;2019-09-29&quot;,</span><br><span class="line">        songTimeMinutes: &quot;04:03&quot;,</span><br><span class="line">        title: &quot;我和我的祖国&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    msg: &quot;查询歌曲列表&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功访问到了歌曲列表数据，接着测试文件访问</p>
<h3 id="文件访问路由"><a href="#文件访问路由" class="headerlink" title="文件访问路由"></a>文件访问路由</h3><p>后期要在我们<code>app</code>上显示服务器上的图片和音频，肯定要有一个静态资源访问到的路由</p>
<h4 id="访问图片"><a href="#访问图片" class="headerlink" title="访问图片"></a>访问图片</h4><p>访问：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5ODU5L2ltYWdlcy8zMjI3ZjliYS04YTJiLTQ2ODYtOTQwMC0wOWQyNDdiMzZmMzMuanBn">http://localhost:9859/images/3227f9ba-8a2b-4686-9400-09d247b36f33.jpg<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20191011154145.png"></p>
<p>没毛病</p>
<h4 id="访问音频"><a href="#访问音频" class="headerlink" title="访问音频"></a>访问音频</h4><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20191011154430.png"></p>
<p>完美</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>flask</category>
      </categories>
      <tags>
        <tag>app开发</tag>
        <tag>flask接口</tag>
        <tag>接口开发</tag>
        <tag>flask路由</tag>
        <tag>flask文件</tag>
        <tag>手机开发app</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开发手机app之爬取数据</title>
    <url>/3348cce.html</url>
    <content><![CDATA[<p>为了巩固<code>python</code>学习，决定开发一个简单的音乐播放<code>app</code>，主要使用到的技术有<code>flask+socket+mongodb+uni-app</code>。我们先来简单采集一些音乐数据，这里不牵涉到太高深的爬虫技术(太高深也不会啊)，就简单的使用<code>requests</code>库帮我们来完成。</p>
<p>关于采集目标站点，我这里爬取的酷我音乐的数据，没别的原因，就是没遇到反爬机制(我这里一秒采取一条暂时还没有遇到什么反爬虫机制)，本来目的也只是学习，我们就采集30条数据就够了。</p>
<a id="more"></a>

<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><h3 id="确保你的python已安装了requests库"><a href="#确保你的python已安装了requests库" class="headerlink" title="确保你的python已安装了requests库"></a>确保你的<code>python</code>已安装了<code>requests</code>库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<h3 id="确保安装了MongoDB"><a href="#确保安装了MongoDB" class="headerlink" title="确保安装了MongoDB"></a>确保安装了<code>MongoDB</code></h3><p>网上大把的安装教程，基本下一步下一步就能完成安装，关于使用可以参考<a href="https://www.diandian100.cn/255f71f1.html"><code>python</code>之<code>MongoDB</code>常用操作</a></p>
<h3 id="找到酷我音乐的音乐接口"><a href="#找到酷我音乐的音乐接口" class="headerlink" title="找到酷我音乐的音乐接口"></a>找到酷我音乐的音乐接口</h3><p>本人选取的是抖音热歌榜页面，通过浏览器开发者工具分析出音乐分布在两个接口上(其实是3个)：个歌曲列表接口、歌曲信息接口、歌曲文件接口，因为列表中接口中包含了歌曲的一些简单信息如：封面、歌曲名、作者、时长、上线时间等已经够我们使用了，所以这里我们不用去歌曲信息接口上再取数据了。</p>
<p>歌曲列表接口地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.kuwo.cn&#x2F;api&#x2F;www&#x2F;bang&#x2F;bang&#x2F;musicList?bangId&#x3D;158&amp;pn&#x3D;1&amp;rn&#x3D;30&amp;reqId&#x3D;a27b7ee0-ebd3-11e9-92b8-13a9816f0dc5</span><br></pre></td></tr></table></figure>

<p>数据返回如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">code: 200,</span><br><span class="line">curTime: 1570763602713,</span><br><span class="line">data: &#123;</span><br><span class="line">    num: &quot;100&quot;,</span><br><span class="line">    pub: &quot;2019-10-08&quot;,</span><br><span class="line">    musicList: [</span><br><span class="line">        &#123;</span><br><span class="line">        musicrid: &quot;MUSIC_77162192&quot;,</span><br><span class="line">        artist: &quot;姚智鑫&quot;,</span><br><span class="line">        trend: &quot;u0&quot;,</span><br><span class="line">        pic: &quot;http://img1.kuwo.cn/star/albumcover/300/27/21/838967606.jpg&quot;,</span><br><span class="line">        isstar: 0,</span><br><span class="line">        rid: 77162192,</span><br><span class="line">        duration: 141,</span><br><span class="line">        rank_change: &quot;2&quot;,</span><br><span class="line">        track: 0,</span><br><span class="line">        hasLossless: false,</span><br><span class="line">        hasmv: 0,</span><br><span class="line">        releaseDate: &quot;2019-09-10&quot;,</span><br><span class="line">        album: &quot;野狼disco抒情版&quot;,</span><br><span class="line">        albumid: 10736160,</span><br><span class="line">        pay: &quot;0&quot;,</span><br><span class="line">        artistid: 3024208,</span><br><span class="line">        albumpic: &quot;http://img1.kuwo.cn/star/albumcover/500/27/21/838967606.jpg&quot;,</span><br><span class="line">        songTimeMinutes: &quot;02:21&quot;,</span><br><span class="line">        isListenFee: false,</span><br><span class="line">        pic120: &quot;http://img1.kuwo.cn/star/albumcover/120/27/21/838967606.jpg&quot;,</span><br><span class="line">        name: &quot;野狼disco (抒情完整版)&quot;,</span><br><span class="line">        online: 1,</span><br><span class="line">        payInfo: &#123;</span><br><span class="line">            cannotOnlinePlay: 0,</span><br><span class="line">            cannotDownload: 0</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        musicrid: &quot;MUSIC_52241430&quot;,</span><br><span class="line">        artist: &quot;张泽熙&quot;,</span><br><span class="line">        trend: &quot;e0&quot;,</span><br><span class="line">        pic: &quot;http://img1.kuwo.cn/star/albumcover/300/10/1/3204759747.jpg&quot;,</span><br><span class="line">        isstar: 0,</span><br><span class="line">        rid: 52241430,</span><br><span class="line">        duration: 220,</span><br><span class="line">        rank_change: &quot;0&quot;,</span><br><span class="line">        track: 1,</span><br><span class="line">        hasLossless: false,</span><br><span class="line">        hasmv: 1,</span><br><span class="line">        releaseDate: &quot;2018-08-11&quot;,</span><br><span class="line">        album: &quot;那个女孩&quot;,</span><br><span class="line">        albumid: 6799808,</span><br><span class="line">        pay: &quot;16515324&quot;,</span><br><span class="line">        artistid: 3052403,</span><br><span class="line">        albumpic: &quot;http://img1.kuwo.cn/star/albumcover/500/10/1/3204759747.jpg&quot;,</span><br><span class="line">        songTimeMinutes: &quot;03:40&quot;,</span><br><span class="line">        isListenFee: false,</span><br><span class="line">        pic120: &quot;http://img1.kuwo.cn/star/albumcover/120/10/1/3204759747.jpg&quot;,</span><br><span class="line">        name: &quot;那个女孩&quot;,</span><br><span class="line">        online: 1,</span><br><span class="line">        payInfo: &#123;</span><br><span class="line">            cannotOnlinePlay: 0,</span><br><span class="line">            cannotDownload: 0</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>歌曲文件接口地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.kuwo.cn&#x2F;url?format&#x3D;mp3&amp;rid&#x3D;&#123;mid&#125;&amp;response&#x3D;url&amp;type&#x3D;convert_url3&amp;br&#x3D;128kmp3&amp;from&#x3D;web&amp;t&#x3D;1570763011614&amp;reqId&#x3D;b4d733e1-ebd3-11e9-92b8-13a9816f0dc5</span><br><span class="line"></span><br><span class="line"># rid代表歌曲的id</span><br></pre></td></tr></table></figure>

<p>歌曲文件接口数据返回如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 200,</span><br><span class="line">    msg: &quot;success&quot;,</span><br><span class="line">    url: &quot;https://nx01-sycdn.kuwo.cn/6b80ef89b1193109cc138d8c0d731e46/5d9ff5fd/resource/n3/53/19/3884797726.mp3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h2><p>为防止频繁访问酷我音乐，我这里选择将静态资源也下载到本地，如封面和歌曲文件。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py文件，当前进度内容</span></span><br><span class="line"><span class="comment"># 图片与歌曲文件路径</span></span><br><span class="line">MEDIA_PATH = <span class="string">&quot;static/media&quot;</span></span><br><span class="line">IMAGE_PATH = <span class="string">&quot;static/img&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库配置</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">27017</span>)</span><br><span class="line">MONGO_DB = client[<span class="string">&quot;aios&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># spider.py爬虫代码如下</span></span><br><span class="line"><span class="keyword">import</span> requests, time, os</span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止被墙</span></span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+ xml,application/xml;q = 0.9,image/webp,image/apng,*/*;q=0.8, application/signe-exchange;v = b3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抖音热歌列表url</span></span><br><span class="line">music_list_url = <span class="string">&#x27;http://www.kuwo.cn/api/www/bang/bang/musicList?bangId=158&amp;pn=1&amp;rn=30&amp;reqId=a27b7ee0-ebd3-11e9-92b8-13a9816f0dc5&#x27;</span></span><br><span class="line"><span class="comment"># 歌曲资源地址信息</span></span><br><span class="line">music_file_url = <span class="string">&#x27;http://www.kuwo.cn/url?format=mp3&amp;rid=&#123;mid&#125;&amp;response=url&amp;type=convert_url3&amp;br=128kmp3&amp;from=web&amp;t=1570763011614&amp;reqId=b4d733e1-ebd3-11e9-92b8-13a9816f0dc5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取音乐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kuwo</span>():</span></span><br><span class="line">    <span class="comment"># 获取歌曲列表接口</span></span><br><span class="line">    res = requests.get(music_list_url, headers=headers)</span><br><span class="line">    <span class="comment"># 获取歌曲列表数据</span></span><br><span class="line">    music_datas = res.json().get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;musicList&#x27;</span>)</span><br><span class="line">    <span class="comment"># 循环读取每条歌曲数据</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> music_datas:</span><br><span class="line">        <span class="comment"># 休眠一秒防止被踢</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 获取歌曲文件信息</span></span><br><span class="line">        music_obj = requests.get(music_file_url.format(mid=item.get(<span class="string">&#x27;rid&#x27;</span>)), headers=headers)</span><br><span class="line">        <span class="comment"># 定义文件名</span></span><br><span class="line">        <span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line">        filename = uuid4()</span><br><span class="line">        <span class="comment"># 定义要保存的图片名称及路径</span></span><br><span class="line">        img = os.path.join(settings.IMAGE_PATH, <span class="string">f&quot;<span class="subst">&#123;filename&#125;</span>.jpg&quot;</span>)</span><br><span class="line">        <span class="comment"># 定义要保存的文件名称及路径</span></span><br><span class="line">        mp3 = os.path.join(settings.MEDIA_PATH, <span class="string">f&quot;<span class="subst">&#123;filename&#125;</span>.mp3&quot;</span>)</span><br><span class="line">        <span class="comment"># 下载歌曲图片</span></span><br><span class="line">        download(item.get(<span class="string">&#x27;pic&#x27;</span>), img)</span><br><span class="line">        <span class="comment"># 下载歌曲文件</span></span><br><span class="line">        download(music_obj.json().get(<span class="string">&#x27;url&#x27;</span>), mp3)</span><br><span class="line">        <span class="comment"># 保存至数据库</span></span><br><span class="line">        settings.MONGO_DB.music.insert_one(&#123;</span><br><span class="line">            <span class="string">&quot;title&quot;</span> : item.get(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">            <span class="string">&quot;author&quot;</span> : item.get(<span class="string">&#x27;artist&#x27;</span>),</span><br><span class="line">            <span class="string">&quot;pic&quot;</span>    : <span class="string">f&quot;<span class="subst">&#123;filename&#125;</span>.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;audio&quot;</span> : <span class="string">f&quot;<span class="subst">&#123;filename&#125;</span>.mp3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;releaseDate&quot;</span>    : item.get(<span class="string">&#x27;releaseDate&#x27;</span>),</span><br><span class="line">            <span class="string">&quot;songTimeMinutes&quot;</span>    : item.get(<span class="string">&#x27;songTimeMinutes&#x27;</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">        print(<span class="string">&#x27;采集成功……&#x27;</span>)</span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">url, path</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    下载文件</span></span><br><span class="line"><span class="string">    :param url: 要在下载的文件路径</span></span><br><span class="line"><span class="string">    :param path: 要保存的文件位置</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    res = requests.get(url).content</span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 开始爬取</span></span><br><span class="line">    kuwo()</span><br></pre></td></tr></table></figure>

<h2 id="执行爬取"><a href="#执行爬取" class="headerlink" title="执行爬取"></a>执行爬取</h2><p>运行该文件，数十秒后可以看到文件夹中已经下载好了刚才爬取的封面和<code>mp3</code>文件</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20191011143828.png"></p>
<p>数据库中我们也可以看到歌曲信息也正常保存了</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20191011143948.png"></p>
<p>爬虫代码基本每行都加了注释，另外本身也很简单，到此，准备数据部分结束</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>爬虫</tag>
        <tag>python采集</tag>
        <tag>采集</tag>
        <tag>酷我音乐采集</tag>
        <tag>爬取酷我</tag>
        <tag>requests</tag>
        <tag>python爬虫学习</tag>
      </tags>
  </entry>
  <entry>
    <title>使用yum安装mysql</title>
    <url>/7d08ee3b.html</url>
    <content><![CDATA[<p>之前在<a href="https://www.diandian100.cn/513fdd7f.html">Linux中yum和apt-get</a>中列出了<code>linux</code>软件管理的一些常用操作，这里实际以<code>mysql</code>为例进行一次安装演示。</p>
<a id="more"></a>

<h3 id="配置mysql扩展源"><a href="#配置mysql扩展源" class="headerlink" title="配置mysql扩展源"></a>配置<code>mysql</code>扩展源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh http:&#x2F;&#x2F;repo.mysql.com&#x2F;yum&#x2F;mysql-5.7-community&#x2F;el&#x2F;7&#x2F;x86_64&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="yum安装mysql"><a href="#yum安装mysql" class="headerlink" title="yum安装mysql"></a><code>yum</code>安装<code>mysql</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-server -y</span><br></pre></td></tr></table></figure>

<h3 id="查看mysql状态，启动，开机自启设置"><a href="#查看mysql状态，启动，开机自启设置" class="headerlink" title="查看mysql状态，启动，开机自启设置"></a>查看<code>mysql</code>状态，启动，开机自启设置</h3><h4 id="查看mysql状态"><a href="#查看mysql状态" class="headerlink" title="查看mysql状态"></a>查看<code>mysql</code>状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl status mysqld</span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:mysqld(8)</span><br><span class="line">           http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html</span><br></pre></td></tr></table></figure>

<h4 id="启动mysql，并设置开机自启"><a href="#启动mysql，并设置开机自启" class="headerlink" title="启动mysql，并设置开机自启"></a>启动<code>mysql</code>，并设置开机自启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start mysqld</span><br><span class="line">[root@localhost ~]# systemctl enable mysqld</span><br></pre></td></tr></table></figure>

<p>再次查看状态可以看到mysql已经启动起来了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl status mysqld</span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 三 2020-08-12 13:08:40 CST; 22s ago</span><br><span class="line">     Docs: man:mysqld(8)</span><br><span class="line">           http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html</span><br><span class="line"> Main PID: 30522 (mysqld)</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;mysqld.service</span><br><span class="line">           └─30522 &#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br><span class="line"></span><br><span class="line">8月 12 13:08:34 localhost.localdomain systemd[1]: Starting MySQL Server...</span><br><span class="line">8月 12 13:08:40 localhost.localdomain systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure>

<h3 id="使用mysql初始密码登录"><a href="#使用mysql初始密码登录" class="headerlink" title="使用mysql初始密码登录"></a>使用<code>mysql</code>初始密码登录</h3><p><code>mysql</code>的初始密码在哪儿呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat &#x2F;var&#x2F;log&#x2F;mysqld.log </span><br><span class="line">2020-08-12T05:08:34.775425Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see doc</span><br><span class="line">umentation for more details).2020-08-12T05:08:35.467104Z 0 [Warning] InnoDB: New log files created, LSN&#x3D;45790</span><br><span class="line">2020-08-12T05:08:35.571012Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2020-08-12T05:08:35.636312Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating </span><br><span class="line">a new UUID: dffd9de5-dc59-11ea-9b06-000c298217df.2020-08-12T05:08:35.639692Z 0 [Warning] Gtid table is not ready to be used. Table &#39;mysql.gtid_executed&#39; cannot be opened.</span><br><span class="line">2020-08-12T05:08:36.708627Z 0 [Warning] CA certificate ca.pem is self signed.</span><br><span class="line">2020-08-12T05:08:36.737506Z 1 [Note] A temporary password is generated for root@localhost: lug76&#x2F;d98m!F</span><br><span class="line">2020-08-12T05:08:39.278229Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see doc</span><br><span class="line">umentation for more details).</span><br></pre></td></tr></table></figure>

<p>查看该日志文件，可以看到密码为：<code>lug76/d98m!F</code></p>
<p>或者使用命令行查看，一样的密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# echo $(awk &#39;&#x2F;temporary password&#x2F;&#123;print $NF&#125;&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log)</span><br><span class="line">lug76&#x2F;d98m!F</span><br></pre></td></tr></table></figure>

<p>使用该初始密码进行登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p$(awk &#39;&#x2F;temporary password&#x2F;&#123;print $NF&#125;&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log)</span><br></pre></td></tr></table></figure>

<h3 id="修改数据库密码"><a href="#修改数据库密码" class="headerlink" title="修改数据库密码"></a>修改数据库密码</h3><p>我们尝试直接修改密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> set password for root@localhost &#x3D; password(&#39;123456&#39;);</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure>

<p>直接报错，提示不符合密码策略要求。</p>
<p>数据库默认密码规则必须携带大小写字母、特殊符号，字符长度大于8否则会报错。<br>因此设定较为简单的密码时需要首先修改<code>set global validate_password_policy</code>和<code>_length</code>参数值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> set global validate_password_policy&#x3D;0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"> set global validate_password_length&#x3D;1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"> set password for root@localhost &#x3D; password(&#39;123456&#39;);</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mysql -uroot -p123456</span><br><span class="line"> show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>至此，<code>mysql</code>已经成功安装在我们<code>linux</code>环境中</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>mysql安装</tag>
        <tag>使用yum安装mysql</tag>
        <tag>linux安装mysql</tag>
        <tag>服务器安装mysql</tag>
        <tag>mysql修改密码</tag>
        <tag>mysql默认密码</tag>
      </tags>
  </entry>
  <entry>
    <title>关于iview使用常见问题</title>
    <url>/211b7f18.html</url>
    <content><![CDATA[<p><code>iView</code> 是一套基于 <code>Vue.js</code> 的开源 <code>UI</code> 组件库，主要服务于 <code>PC</code> 界面的中后台产品。且其提供的<code>iView admin</code></p>
<p>是很多程序员做前后分离后台程序的首选，但是其使用中也是有一些问题叙述简单，导致使用的时候出现一些意想不到的错误。</p>
<a id="more"></a>

<p>view使用的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpbWluZ2hlL2FzeW5jLXZhbGlkYXRvcg==">async-validator<i class="fa fa-external-link-alt"></i></span> 做的校验，个人觉得有一个很大的不便，即每个字段都会去验证字段类型，如果你没有写字段类型，插件默认为该字段类型为<code>string</code>，对于有时我们只需要必填就行的要求，还是需要手动修改。</p>
<h2 id="select验证失败"><a href="#select验证失败" class="headerlink" title="select验证失败"></a><code>select</code>验证失败</h2><p><code>iView</code>为我们提供了表单校验的功能，第一次使用验证时就出现了问题，<code>select</code>验证死活通过不了，关于表单校验，官方是这么说的</p>
<blockquote>
<p>Form 组件基于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpbWluZ2hlL2FzeW5jLXZhbGlkYXRvcg=="> async-validator<i class="fa fa-external-link-alt"></i></span> 实现的数据验证，给 <code>Form</code> 设置属性 <code>rules</code>，同时给需要验证的 <code>FormItem</code> 设置属性 <code>prop</code> 指向对应字段即可。</p>
</blockquote>
<p>也就是<code>prop</code>是我们验证的字段</p>
<p>我们来到 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpbWluZ2hlL2FzeW5jLXZhbGlkYXRvcg==">async-validator<i class="fa fa-external-link-alt"></i></span> 仓库，文档里关于字段类型的验证有以下描述：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190830153121.png"></p>
<p>也就是说如果你不填写字段类型，那么默认校验字段类型为字符串，而本人自己的select中option值都是整数型的，故该字段一直提示验证失败。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cat: [</span><br><span class="line">              &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;必须选择一个分类&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">type</span>:<span class="string">&#x27;integer&#x27;</span>&#125;</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure>

<p>这样给该字段加一个<code>type</code>就可以了</p>
<h2 id="日期时间校验失败"><a href="#日期时间校验失败" class="headerlink" title="日期时间校验失败"></a>日期时间校验失败</h2><p>验证日期使用<code>type=&#39;date&#39;</code>即可；验证时间呢？<code>type=&quot;string&quot;</code>；验证日期时间呢？自定义验证去，没有一个类型为<code>datetime</code>的类型。另外记得将字段<code>trigger</code>修改为<code>change</code>。</p>
]]></content>
      <categories>
        <category>fe</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>iview</tag>
        <tag>iview select验证失败</tag>
        <tag>iview select验证</tag>
        <tag>iview select</tag>
        <tag>iview日期时间</tag>
        <tag>iview日期时间校验</tag>
      </tags>
  </entry>
  <entry>
    <title>创建coding.me博客</title>
    <url>/53304.html</url>
    <content><![CDATA[<p>Coding.net 已全面升级为腾讯云开发者平台。开通Coding博客，我这里默认为你已经配置好了git，所以这里不再说git配置的部分，直接开始创建博客的部分。</p>
<h3 id="创建coding博客仓库："><a href="#创建coding博客仓库：" class="headerlink" title="创建coding博客仓库："></a>创建coding博客仓库：</h3><p>如图创建仓库，仓库名为你的用户名.coding.me，如：tonyu2019.coding.me，下面默认公开创建既可</p>
<a id="more"></a>

<p><img data-src="/images/1562901326250.png" alt="1562901326250"></p>
<p>进入刚才创建的仓库，点击Pages服务进行部署</p>
<p><img data-src="/images/1562901388565.png" alt="1562901388565"></p>
<p>以上操作仓库方创建完毕。</p>
<h3 id="开始创建博客"><a href="#开始创建博客" class="headerlink" title="开始创建博客"></a>开始创建博客</h3><p>Hexo是一个简单、快速、强大的基于 coding Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。这里我们就选择使用hexo创建博客</p>
<ol>
<li><p><strong>全局安装hexo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>初始化hexo</strong></p>
<p>创建你的博客文件夹，如：tonyu2019.coding.me</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd tonyu2019.coding.me</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成静态文件并启动博客服务</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure>

<p> 执行以上命令后，会自动为你生成public的目录，里面保存了html等静态文件</p>
</li>
<li><p><strong>修改主题</strong></p>
<p> 默认主题太丑，不忍直视，进入官网主题<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=">https://hexo.io/themes/<i class="fa fa-external-link-alt"></i></span></p>
<p> 我这里随便拉一个我喜欢的主题<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NvZGVEYXJhVy9IYWNrZXI=">https://github.com/CodeDaraW/Hacker<i class="fa fa-external-link-alt"></i></span></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;CodeDaraW&#x2F;Hacker.git themes&#x2F;hacker</span><br></pre></td></tr></table></figure>

<p> 执行后themes文件夹多了一个hacker的主题文件夹</p>
</li>
<li><p><strong>修改配置文件</strong></p>
<p> 打开_config.yml文件，修改一下两处配置</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: hacker</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@git.dev.tencent.com:tonyu2019&#x2F;tonyu2019.coding.me.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p> theme代表主题，直接修改刚才下载的hacker主题即可。deploy代表部署你的部署方式和仓库地址及代码分支，正常情况下不写分支默认master分支。保存配置文件</p>
</li>
<li><p><strong>安装插件</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deployer not found: coding 或者 Deployer not found: git</span><br><span class="line"># 如果使用hexo d出现如下错误，需执行以下命令。</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>写博客</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &#39;my-first-blog&#39;</span><br></pre></td></tr></table></figure>

<p> 会在你的博客文件夹生成，<code>source/_posts/my-first-blog.md</code> 文件，个人习惯用Typora修改md文件。</p>
<p> 默认博客首页会显示你的博客文章所有内容，可以在md中添加</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<p> 即可。</p>
</li>
<li><p><strong>上传博客</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p> 表示生成静态文件并上传至仓库。</p>
</li>
</ol>
<p>按照以上操作，访问<span class="exturl" data-url="aHR0cHM6Ly90b255dTIwMTkuY29kaW5nLm1l5Y2z5Y+v55yL5Yiw572R56uZKHRvbnl1MjAxOeimgeaNouaIkOS9oOeahOeUqOaIt+WQjeWTnykv">https://tonyu2019.coding.me即可看到网站（tonyu2019要换成你的用户名哟）<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>创建gitee.io博客</title>
    <url>/58462.html</url>
    <content><![CDATA[<p>开通gitee博客，我这里默认为你已经配置好了git，所以这里不再说git配置的部分，直接开始创建博客的部分。</p>
<h3 id="创建gitee博客仓库："><a href="#创建gitee博客仓库：" class="headerlink" title="创建gitee博客仓库："></a>创建gitee博客仓库：</h3><p>如图创建仓库，仓库名为你的用户名，如：tonyyu2016，下面默认公开创建既可</p>
<a id="more"></a>

<p><img data-src="/images/1562900876214.png" alt="1562900876214"></p>
<p>进入刚才创建的仓库，点击服务、选择Gitee Pages</p>
<p><img data-src="/images/1562900922256.png" alt="1562900922256"></p>
<p>进入Gitee Pages服务</p>
<p><img data-src="/images/1562900961852.png" alt="1562900961852"></p>
<p>部署分支选择自己的主分支maser既可，下面是否启用https，以上操作仓库方创建完毕。</p>
<h3 id="开始创建博客"><a href="#开始创建博客" class="headerlink" title="开始创建博客"></a>开始创建博客</h3><p>Hexo是一个简单、快速、强大的基于 gitee Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。这里我们就选择使用hexo创建博客</p>
<ol>
<li><p><strong>全局安装hexo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>初始化hexo</strong></p>
<p>创建你的博客文件夹，如：tonyyu2016.gitee.io</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd tonyyu2016.gitee.io</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成静态文件并启动博客服务</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure>

<p> 执行以上命令后，会自动为你生成public的目录，里面保存了html等静态文件</p>
</li>
<li><p><strong>修改主题</strong></p>
<p> 默认主题太丑，不忍直视，进入官网主题<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=">https://hexo.io/themes/<i class="fa fa-external-link-alt"></i></span></p>
<p> 我这里随便拉一个我喜欢的主题<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NvZGVEYXJhVy9IYWNrZXI=">https://github.com/CodeDaraW/Hacker<i class="fa fa-external-link-alt"></i></span></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;CodeDaraW&#x2F;Hacker.git themes&#x2F;hacker</span><br></pre></td></tr></table></figure>

<p> 执行后themes文件夹多了一个hacker的主题文件夹</p>
</li>
<li><p><strong>修改配置文件</strong></p>
<p> 打开_config.yml文件，修改一下两处配置</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: hacker</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@gitee.com:tonyyu2016&#x2F;tonyyu2016.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p> theme代表主题，直接修改刚才下载的hacker主题即可。deploy代表部署你的部署方式和仓库地址及代码分支，正常情况下不写分支默认master分支。保存配置文件</p>
</li>
<li><p><strong>安装插件</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deployer not found: gitee 或者 Deployer not found: git</span><br><span class="line"># 如果使用hexo d出现如下错误，需执行以下命令。</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>写博客</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &#39;my-first-blog&#39;</span><br></pre></td></tr></table></figure>

<p> 会在你的博客文件夹生成，<code>source/_posts/my-first-blog.md</code> 文件，个人习惯用Typora修改md文件。</p>
<p> 默认博客首页会显示你的博客文章所有内容，可以在md中添加</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<p> 即可。</p>
</li>
<li><p><strong>上传博客</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p> 表示生成静态文件并上传至仓库。</p>
</li>
</ol>
<p>按照以上操作，访问<span class="exturl" data-url="aHR0cHM6Ly90b255eXUyMDE2LmdpdGVlLmlv5Y2z5Y+v55yL5Yiw572R56uZKHRvbnl5dTIwMTbopoHmjaLmiJDkvaDnmoTnlKjmiLflkI3lk58pLw==">https://tonyyu2016.gitee.io即可看到网站（tonyyu2016要换成你的用户名哟）<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>创建github.io博客</title>
    <url>/33075.html</url>
    <content><![CDATA[<p>开通github博客，我这里默认为你已经配置好了git，所以这里不再说git配置的部分，直接开始创建博客的部分。</p>
<h3 id="创建github博客仓库："><a href="#创建github博客仓库：" class="headerlink" title="创建github博客仓库："></a>创建github博客仓库：</h3><p>如图创建仓库，仓库名为你的用户名.github.io，如：tonyu2019.github.io，下面默认公开创建既可</p>
<a id="more"></a>

<p><img data-src="/images/1562898746423.png" alt="1562898746423"></p>
<p>进入刚才创建的仓库，选择setting</p>
<p><img data-src="/images/1562898984670.png" alt="1562898984670"></p>
<p>页面往下拉找到GitHub Pages</p>
<p><img data-src="/images/1562899080468.png" alt="1562899080468"></p>
<p>source选择自己的主分支maser既可，下面是否启用https，以上操作仓库方创建完毕。</p>
<h3 id="开始创建博客"><a href="#开始创建博客" class="headerlink" title="开始创建博客"></a>开始创建博客</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。这里我们就选择使用hexo创建博客</p>
<ol>
<li><p><strong>全局安装hexo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>初始化hexo</strong></p>
<p>创建你的博客文件夹，如：tonyu2019.github.io</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd tonyu2019.github.io</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成静态文件并启动博客服务</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure>

<p> 执行以上命令后，会自动为你生成public的目录，里面保存了html等静态文件</p>
</li>
<li><p><strong>修改主题</strong></p>
<p> 默认主题太丑，不忍直视，进入官网主题<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=">https://hexo.io/themes/<i class="fa fa-external-link-alt"></i></span></p>
<p> 我这里随便拉一个我喜欢的主题<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NvZGVEYXJhVy9IYWNrZXI=">https://github.com/CodeDaraW/Hacker<i class="fa fa-external-link-alt"></i></span></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;CodeDaraW&#x2F;Hacker.git themes&#x2F;hacker</span><br></pre></td></tr></table></figure>

<p> 执行后themes文件夹多了一个hacker的主题文件夹</p>
</li>
<li><p><strong>修改配置文件</strong></p>
<p> 打开_config.yml文件，修改一下两处配置</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: hacker</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:tonyu2019&#x2F;tonyu2019.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p> theme代表主题，直接修改刚才下载的hacker主题即可。deploy代表部署你的部署方式和仓库地址及代码分支，正常情况下不写分支默认master分支。保存配置文件</p>
</li>
<li><p><strong>安装插件</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br><span class="line"># 如果使用hexo d出现如下错误，需执行以下命令。</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>写博客</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &#39;my-first-blog&#39;</span><br></pre></td></tr></table></figure>

<p> 会在你的博客文件夹生成，<code>source/_posts/my-first-blog.md</code> 文件，个人习惯用Typora修改md文件。</p>
<p> 默认博客首页会显示你的博客文章所有内容，可以在md中添加</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<p> 即可。</p>
</li>
<li><p><strong>上传博客</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p> 表示生成静态文件并上传至仓库。</p>
</li>
</ol>
<p>按照以上操作，访问<span class="exturl" data-url="aHR0cHM6Ly90b255dTIwMTkuZ2l0aHViLmlv5Y2z5Y+v55yL5Yiw572R56uZKHRvbnl1MjAxOeimgeaNouaIkOS9oOeahOeUqOaIt+WQjeWTnykv">https://tonyu2019.github.io即可看到网站（tonyu2019要换成你的用户名哟）<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>初始百度人工智能</title>
    <url>/984cffe0.html</url>
    <content><![CDATA[<p>人工智能听起来高大上，现有阶段我们可以借助第三方开发好的库来服务于各个领域，其中百度就给我们提供了很多如图像识别、语音识别、语音合成、自然语言等多种产品服务，今天和大家一起接触下。</p>
<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>前提我认为你已经在<span class="exturl" data-url="aHR0cDovL2FpLmJhaWR1LmNvbS8=">百度ai开放平台<i class="fa fa-external-link-alt"></i></span>上登录且创建好了相应的应用，本文中用到了简单的语音合成和图像识别，所以创建应用是，选择接口应该包含以上接口。</p>
<p>请在操作前安装第三方百度<code>ai</code>库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure>

<h2 id="语音合成"><a href="#语音合成" class="headerlink" title="语音合成"></a>语音合成</h2><h3 id="新建AipSpeech"><a href="#新建AipSpeech" class="headerlink" title="新建AipSpeech"></a>新建<code>AipSpeech</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipSpeech</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 你的 APPID AK SK &quot;&quot;&quot;</span></span><br><span class="line">APP_ID = <span class="string">&#x27;你的 App ID&#x27;</span></span><br><span class="line">API_KEY = <span class="string">&#x27;你的 Api Key&#x27;</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;你的 Secret Key&#x27;</span></span><br><span class="line"></span><br><span class="line">client = AipSpeech(APP_ID, API_KEY, SECRET_KEY)</span><br></pre></td></tr></table></figure>

<h3 id="接口描述"><a href="#接口描述" class="headerlink" title="接口描述"></a>接口描述</h3><p>基于该接口，开发者可以轻松的获取语音合成能力</p>
<h3 id="请求说明"><a href="#请求说明" class="headerlink" title="请求说明"></a>请求说明</h3><ul>
<li>合成文本长度必须小于1024字节，如果本文长度较长，可以采用多次请求的方式。文本长度不可超过限制</li>
</ul>
<p>举例，要把一段文字合成为语音文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result  = client.synthesis(<span class="string">&#x27;我在上海，你在哪儿？&#x27;</span>, <span class="string">&#x27;zh&#x27;</span>, <span class="number">1</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;vol&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别正确返回语音二进制 错误则返回dict 参照下面错误码</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(result, dict):</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;auido.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(result)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>是否必须</th>
</tr>
</thead>
<tbody><tr>
<td><code>tex</code></td>
<td>String</td>
<td>合成的文本，使用<code>UTF-8</code>编码， 请注意文本长度必须小于1024字节</td>
<td>是</td>
</tr>
<tr>
<td><code>cuid</code></td>
<td>String</td>
<td>用户唯一标识，用来区分用户， 填写机器 <code>MAC</code> 地址或 <code>IMEI</code> 码，长度为60以内</td>
<td>否</td>
</tr>
<tr>
<td><code>spd</code></td>
<td>String</td>
<td>语速，取值0-15，默认为5中语速</td>
<td>否</td>
</tr>
<tr>
<td><code>pit</code></td>
<td>String</td>
<td>音调，取值0-15，默认为5中语调</td>
<td>否</td>
</tr>
<tr>
<td><code>vol</code></td>
<td>String</td>
<td>音量，取值0-15，默认为5中音量</td>
<td>否</td>
</tr>
<tr>
<td><code>per</code></td>
<td>String</td>
<td>发音人选择, 0为女声，1为男声， 3为情感合成-度逍遥，4为情感合成-度丫丫，默认为普通女</td>
<td>否</td>
</tr>
</tbody></table>
<p><strong>返回样例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成功返回二进制文件流</span></span><br><span class="line"><span class="comment">// 失败返回</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;err_no&quot;</span>:<span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;err_msg&quot;</span>:<span class="string">&quot;notsupport.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sn&quot;</span>:<span class="string">&quot;abcdefgh&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;idx&quot;</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回文件：</p>
<p>此时在当前文件夹会出现一个<code>auido.mp3</code>的文件，内容就是“我在上海，你在哪儿？”的语音</p>
<h2 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h2><h3 id="新建AipImageClassify"><a href="#新建AipImageClassify" class="headerlink" title="新建AipImageClassify"></a>新建<code>AipImageClassify</code></h3><p><code>AipImageClassify</code>是图像识别的<code>Python SDK</code>客户端，为使用图像识别的开发人员提供了一系列的交互方法。</p>
<p>参考如下代码新建一个<code>AipImageClassify</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipImageClassify</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 你的 APPID AK SK &quot;&quot;&quot;</span></span><br><span class="line">APP_ID = <span class="string">&#x27;你的 App ID&#x27;</span></span><br><span class="line">API_KEY = <span class="string">&#x27;你的 Api Key&#x27;</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;你的 Secret Key&#x27;</span></span><br><span class="line"></span><br><span class="line">client = AipImageClassify(APP_ID, API_KEY, SECRET_KEY)</span><br></pre></td></tr></table></figure>

<p>在上面代码中，常量<code>APP_ID</code>在百度智能云控制台中创建，常量<code>API_KEY</code>与<code>SECRET_KEY</code>是在创建完毕应用后，系统分配给用户的，均为字符串，用于标识用户，为访问做签名验证，可在AI服务控制台中的<strong>应用列表</strong>中查看。</p>
<p><strong>注意</strong>：如您以前是百度智能云的老用户，其中<code>API_KEY</code>对应百度智能云的“Access Key ID”，<code>SECRET_KEY</code>对应百度智能云的“Access Key Secret”。</p>
<h3 id="车辆识别"><a href="#车辆识别" class="headerlink" title="车辆识别"></a>车辆识别</h3><p>该请求用于检测一张车辆图片的具体车型。即对于输入的一张图片（可正常解码，且长宽比适宜），输出图片的车辆品牌及型号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 读取图片 &quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span>(<span class="params">filePath</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(filePath, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">return</span> fp.read()</span><br><span class="line"></span><br><span class="line">image = get_file_content(<span class="string">&#x27;example.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 调用车辆识别 &quot;&quot;&quot;</span></span><br><span class="line">client.carDetect(image);</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 如果有可选参数 &quot;&quot;&quot;</span></span><br><span class="line">options = &#123;&#125;</span><br><span class="line">options[<span class="string">&quot;top_num&quot;</span>] = <span class="number">3</span></span><br><span class="line">options[<span class="string">&quot;baike_num&quot;</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 带参数调用车辆识别 &quot;&quot;&quot;</span></span><br><span class="line">client.carDetect(image, options)</span><br></pre></td></tr></table></figure>

<p><strong>车辆识别 请求参数详情</strong></p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>是否必选</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>image</td>
<td>是</td>
<td>string</td>
<td></td>
<td>图像数据，<code>base64</code>编码，要求<code>base64</code>编码后大小不超过<code>4M</code>，最短边至少<code>15px</code>，最长边最大<code>4096px</code>,支持<code>jpg/png/bmp</code>格式</td>
</tr>
<tr>
<td><code>top_num</code></td>
<td>否</td>
<td>string</td>
<td></td>
<td>返回预测得分top结果数，默认为5</td>
</tr>
<tr>
<td><code>baike_num</code></td>
<td>否</td>
<td>string</td>
<td>0</td>
<td>返回百科信息的结果数，默认不返回</td>
</tr>
</tbody></table>
<p><strong>车辆识别 返回数据参数详情</strong></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>是否必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>log_id</td>
<td>否</td>
<td><code>uint64</code></td>
<td>唯一的log id，用于问题定位</td>
</tr>
<tr>
<td>color_result</td>
<td>是</td>
<td>string</td>
<td>颜色</td>
</tr>
<tr>
<td>result</td>
<td>否</td>
<td>car-result()</td>
<td>车型识别结果数组</td>
</tr>
<tr>
<td>+name</td>
<td>否</td>
<td>string</td>
<td>车型名称，示例：宝马x6</td>
</tr>
<tr>
<td>+score</td>
<td>否</td>
<td>double</td>
<td>置信度，示例：0.5321</td>
</tr>
<tr>
<td>+year</td>
<td>否</td>
<td>string</td>
<td>年份</td>
</tr>
<tr>
<td><code>+baike_info</code></td>
<td>object</td>
<td>否</td>
<td>对应识别结果的百科词条名称</td>
</tr>
<tr>
<td><code>++baike_url</code></td>
<td>string</td>
<td>否</td>
<td>对应识别结果百度百科页面链接</td>
</tr>
<tr>
<td><code>++image_url</code></td>
<td>string</td>
<td>否</td>
<td>对应识别结果百科图片链接</td>
</tr>
<tr>
<td>++description</td>
<td>string</td>
<td>否</td>
<td>对应识别结果百科内容描述</td>
</tr>
<tr>
<td>location_result</td>
<td>否</td>
<td>string</td>
<td>车在图片中的位置信息</td>
</tr>
</tbody></table>
<p><strong>车辆识别 返回示例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;log_id&quot;</span>: <span class="number">4086212218842203806</span>,</span><br><span class="line">  <span class="attr">&quot;location_result&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;width&quot;</span>: <span class="number">447</span>,</span><br><span class="line">    <span class="attr">&quot;top&quot;</span>: <span class="number">226</span>,</span><br><span class="line">    <span class="attr">&quot;height&quot;</span>: <span class="number">209</span>,</span><br><span class="line">    <span class="attr">&quot;left&quot;</span>: <span class="number">188</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;baike_info&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;baike_url&quot;</span>: <span class="string">&quot;http://baike.baidu.com/item/%E5%B8%83%E5%8A%A0%E8%BF%AAChiron/20419512&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;布加迪Chiron是法国跑车品牌布加迪出品的豪华超跑车。配置四涡轮增压发动机，420 公里每小时，有23种颜色的选择，售价高达260万美元。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;score&quot;</span>: <span class="number">0.98793351650238</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;布加迪Chiron&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="string">&quot;无年份信息&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;score&quot;</span>: <span class="number">0.0021970034576952</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;奥迪RS5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="string">&quot;2011-2017&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;score&quot;</span>: <span class="number">0.0021096928976476</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;奥迪RS4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="string">&quot;无年份信息&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;score&quot;</span>: <span class="number">0.0015581247862428</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;奥迪RS7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="string">&quot;2014-2016&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;score&quot;</span>: <span class="number">0.00082337751518935</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;布加迪威航&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="string">&quot;2004-2015&quot;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">&quot;color_result&quot;</span>: <span class="string">&quot;颜色无法识别&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就完成了两个简单的语音合成和图像识别小功能，你大可以封装为类，运用在你的项目中！关于百度ai库，还有很多接口功能，大致类似，参照以上做一个多功能的智能系统吧！</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>百度人工智能</tag>
        <tag>人工智能</tag>
        <tag>百度ai</tag>
        <tag>语音合成</tag>
        <tag>语音识别</tag>
        <tag>图像识别</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Django</title>
    <url>/3af8bc7c.html</url>
    <content><![CDATA[<p><code>Django</code>是一个由<code>Python</code>写成的<code>Web</code>应用框架。<code>Django</code>的主要目的是简便、快速的开发数据库驱动的网站。它强调代码复用，多个组件可以很方便的以“插件”形式服务于整个框架，<code>Django</code>有许多功能强大的第三方插件，你甚至可以很方便的开发出自己的工具包。</p>
<a id="more"></a>

<h2 id="MVC与MTV模型"><a href="#MVC与MTV模型" class="headerlink" title="MVC与MTV模型"></a><code>MVC</code>与<code>MTV</code>模型</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a><code>MVC</code></h3><p><code>Web</code>服务器开发领域里著名的<code>MVC</code>模式，所谓<code>MVC</code>就是把<code>Web</code>应用分为<code>模型(M)</code>，<code>控制器(C)</code>和<code>视图(V)</code>三层，他们之间以一种插件式的、松耦合的方式连接在一起，模型负责业务对象与数据库的映射(<code>ORM</code>)，视图负责与用户的交互(页面)，控制器接受用户的输入调用模型和视图完成用户的请求，其示意图如下所示：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200416165025.png" alt="img"></p>
<h3 id="MTV"><a href="#MTV" class="headerlink" title="MTV"></a><code>MTV</code></h3><p><code>Django</code>的MTV模式本质上和<code>MVC</code>是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，<code>Django</code>的<code>MTV</code>分别是值：</p>
<ul>
<li><code>M</code> 代表模型（<code>Model</code>）： 负责业务对象和数据库的关系映射(<code>ORM</code>)。</li>
<li><code>T</code> 代表模板 (<code>Template</code>)：负责如何把页面展示给用户(<code>html</code>)。</li>
<li><code>V</code> 代表视图（<code>View</code>）： 负责业务逻辑，并在适当时候调用Model和<code>Template</code>。</li>
</ul>
<p>除了以上三层之外，还需要一个<code>URL</code>分发器，它的作用是将一个个URL的页面请求分发给不同的<code>View</code>处理，<code>View</code>再调用相应的<code>Model</code>和<code>Template</code>，<code>MTV</code>的响应模式如下所示：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200416165052.png" alt="img"></p>
<p>一般是用户通过浏览器向我们的服务器发起一个请求(request)，这个请求回去访问视图函数，（如果不涉及到数据调用，那么这个时候视图函数返回一个模板也就是一个网页给用户），视图函数调用模型，模型去数据库查找数据，然后逐级返回，视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。</p>
<h2 id="Django安装及基本命令"><a href="#Django安装及基本命令" class="headerlink" title="Django安装及基本命令"></a><code>Django</code>安装及基本命令</h2><p><code>pycharm</code>自带图形化，不许介绍，这里只介绍原始命令。</p>
<h3 id="下载Django"><a href="#下载Django" class="headerlink" title="下载Django"></a>下载<code>Django</code></h3><p>默认会安装最新的<code>Django</code>版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">django-admin.py startproject myproject</span><br></pre></td></tr></table></figure>

<p>运行该命令，当前目录会生成该项目目录结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myproject</span><br><span class="line">|——manage.py</span><br><span class="line">|——myproject</span><br><span class="line">	|——__init__.py</span><br><span class="line">	|——settings.py</span><br><span class="line">	|——urls.py</span><br><span class="line">	|——wsgi.py</span><br></pre></td></tr></table></figure>

<ul>
<li><code>manage.py</code> —– <code>Django</code>项目里面的工具，通过它可以调用<code>django shell</code>和数据库等。</li>
<li><code>settings.py</code> —- 包含了项目的默认设置，包括数据库信息，调试标志以及其他一些工作的变量。</li>
<li><code>urls.py</code> —– 负责把<code>URL</code>模式映射到应用程序。</li>
</ul>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py startapp myapp</span><br></pre></td></tr></table></figure>

<p>执行后的目录为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myproject</span><br><span class="line">|——manage.py</span><br><span class="line">|——myproject</span><br><span class="line">	|——__init__.py</span><br><span class="line">	|——settings.py</span><br><span class="line">	|——urls.py</span><br><span class="line">	|——wsgi.py</span><br><span class="line">|——myapp</span><br><span class="line">	|——__init__.py</span><br><span class="line">	|——admin.py</span><br><span class="line">	|——aps.py</span><br><span class="line">	|——models.py</span><br><span class="line">	|——tests.py</span><br><span class="line">	|——views.py</span><br><span class="line">	|——migrations</span><br><span class="line">		|——__init__.py</span><br></pre></td></tr></table></figure>

<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 8000</span><br></pre></td></tr></table></figure>

<p>使用浏览器打开<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDAwLw==">http://localhost:8000<i class="fa fa-external-link-alt"></i></span> 或127.0.0.1:8000即可看到<code>Django</code>正常运行</p>
<h2 id="第一个实例"><a href="#第一个实例" class="headerlink" title="第一个实例"></a>第一个实例</h2><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>在<code>myapp-&gt;views.py</code>文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&quot;我就是一测试文件&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p>视图中我们使用<code>render</code>，里面包含了我们的模板名称和模板参数，接下来在<code>templages/index.html</code>文件中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h3><p>上面视图和模板都建好了，就差一个能访问该视图的路由了，接下来在<code>myproject/urls.py</code>中创建该路由：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> wechat <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="访问示例"><a href="#访问示例" class="headerlink" title="访问示例"></a>访问示例</h3><p>同样我们使用<code>python manage.py runserver 8000</code>命令来运行该程序，随后在浏览器中使用<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDAwL2luZGV4JUU2JTlEJUE1JUU4JUFFJUJGJUU5JTk3JUFFJUU4JUFGJUE1JUU1JTlDJUIwJUU1JTlEJTgwJUVGJUJDJTlB">http://localhost:8000/index来访问该地址：<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200417131020.png" alt="img"></p>
<p>至此我们初次对<code>Django</code>的认识到此结束</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>初识Django</tag>
        <tag>安装Django</tag>
        <tag>Django入门</tag>
        <tag>Django实例</tag>
        <tag>创建Django工程</tag>
        <tag>创建Django应用</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Scrapy爬虫框架</title>
    <url>/64071ba.html</url>
    <content><![CDATA[<p> <code>Scrapy</code>是一个为了爬取网站数据，提取结构性数据而编写的应用框架，非常出名，非常强悍。所谓的框架就是一个已经被集成了各种功能（高性能异步下载，队列，分布式，解析，持久化等）的具有很强通用性的项目模板。对于框架的学习，重点是要学习其框架的特性、各个功能的用法即可。 </p>
<a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Scrapy</code>主要包括了以下组件：</p>
<ul>
<li><strong>引擎(<code>Scrapy</code>)</strong><br><em>用来处理整个系统的数据流处理, 触发事务(框架核心)</em></li>
<li><strong>调度器(<code>Scheduler</code>)</strong><br><em>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个<code>URL</code>（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</em></li>
<li><strong>下载器(<code>Downloader</code>)</strong><br><em>用于下载网页内容, 并将网页内容返回给蜘蛛(<code>Scrapy</code>下载器是建立在<code>twisted</code>这个高效的异步模型上的)</em></li>
<li><strong>爬虫(<code>Spiders</code>)</strong><br><em>爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(<code>Item</code>)。用户也可以从中提取出链接,让<code>Scrapy</code>继续抓取下一个页面</em></li>
<li><strong>项目管道(<code>Pipeline</code>)</strong><br><em>负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</em></li>
<li><strong>下载器中间件(<code>Downloader Middlewares</code>)</strong><br><em>位于<code>Scrapy</code>引擎和下载器之间的框架，主要是处理<code>Scrapy</code>引擎与下载器之间的请求及响应。</em></li>
<li><strong>爬虫中间件(<code>Spider Middlewares</code>)</strong><br><em>介于<code>Scrapy</code>引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。</em></li>
<li><strong>调度中间件(<code>Scheduler Middewares</code>)</strong><br><em>介于<code>Scrapy</code>引擎和调度之间的中间件，从<code>Scrapy</code>引擎发送到调度的请求和响应。</em></li>
</ul>
<p><code>Scrapy</code>运行流程大概如下：</p>
<ol>
<li>引擎从调度器中取出一个链接(<code>URL</code>)用于接下来的抓取</li>
<li>引擎把<code>URL</code>封装成一个请求(<code>Request</code>)传给下载器</li>
<li>下载器把资源下载下来，并封装成应答包(<code>Response</code>)</li>
<li>爬虫解析<code>Response</code></li>
<li>解析出实体（<code>Item</code>）,则交给实体管道进行进一步的处理</li>
<li>解析出的是链接（<code>URL</code>）,则把URL交给调度器等待抓取</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a><code>linux</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy</span><br></pre></td></tr></table></figure>

<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a><code>windows</code></h3><h4 id="安装wheel"><a href="#安装wheel" class="headerlink" title="安装wheel"></a>安装<code>wheel</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install wheel</span><br></pre></td></tr></table></figure>

<h4 id="下载"><a href="#下载" class="headerlink" title="下载`"></a>下载`</h4><p> <span class="exturl" data-url="aHR0cDovL3d3dy5sZmQudWNpLmVkdS9+Z29obGtlL3B5dGhvbmxpYnMvI3R3aXN0ZWQ=">http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted<i class="fa fa-external-link-alt"></i></span></p>
<p>该页面下载与你<code>php</code>版本对应的<code>twisted</code></p>
<h4 id="安装twisted"><a href="#安装twisted" class="headerlink" title="安装twisted"></a>安装<code>twisted</code></h4><p>进入下载的<code>twisted</code>目录，安装<code>twisted</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install traits-5.1.2-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<h4 id="安装pywin32"><a href="#安装pywin32" class="headerlink" title="安装pywin32"></a>安装<code>pywin32</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pywin32</span><br></pre></td></tr></table></figure>

<h4 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装<code>scrapy</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject 你的项目名称</span><br></pre></td></tr></table></figure>

<p> 自动创建目录： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌┈┈ 你的项目名称&#x2F;</span><br><span class="line">	├┈┈ scrapy.cfg</span><br><span class="line">	└┈┈ 你的项目名称&#x2F;</span><br><span class="line">        ├┈┈ __init__.py</span><br><span class="line">        ├┈┈ items.py</span><br><span class="line">        ├┈┈ pipelines.py</span><br><span class="line">        ├┈┈ settings.py</span><br><span class="line">        └┈┈ spiders&#x2F;</span><br><span class="line">            └┈┈ __init__.py</span><br></pre></td></tr></table></figure>

<p>文件说明：</p>
<ul>
<li><code>scrapy.cfg</code>  项目的配置信息，主要为<code>Scrapy</code>命令行工具提供一个基础的配置信息。（真正爬虫相关的配置信息在<code>settings.py</code>文件中）</li>
<li><code>items.py</code>   设置数据存储模板，用于结构化数据，如：<code>Django</code>的<code>Model</code></li>
<li><code>pipelines</code>   数据处理行为，如：一般结构化的数据持久化</li>
<li><code>settings.py</code> 配置文件，如：递归的层数、并发数，延迟下载等</li>
<li><code>spiders</code>    爬虫目录，如：创建文件，编写爬虫规则</li>
</ul>
<p>注意：一般创建爬虫文件时，以网站域名命名</p>
<h3 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h3><p>进入刚才的项目目录，即<code>cd your_project_name</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy genspider 应用名称 爬取网页的起始url</span><br></pre></td></tr></table></figure>

<p>如：<code>scrapy genspider diandian www.diandian100.cn</code></p>
<h3 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h3><p>上述代码执行后，将在你的<code>spiders</code>目录中生成一个<code>diandian.py</code>的爬虫文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiubaiSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;diandian&#x27;</span> <span class="comment">#应用名称</span></span><br><span class="line">    <span class="comment">#允许爬取的域名（如果遇到非该域名的url则爬取不到数据）</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;https://www.diandian100.cn/&#x27;</span>]</span><br><span class="line">    <span class="comment">#起始爬取的url</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.diandian100.cn/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">     <span class="comment">#访问起始URL并获取结果后的回调函数，该函数的response参数就是向起始的url发送请求后，获取的响应对象.该函数返回值必须为可迭代对象或者NUll </span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        print(response.text) <span class="comment">#获取字符串类型的响应内容</span></span><br><span class="line">        print(response.body)<span class="comment">#获取字节类型的相应内容</span></span><br></pre></td></tr></table></figure>

<h3 id="执行爬虫"><a href="#执行爬虫" class="headerlink" title="执行爬虫"></a>执行爬虫</h3><p><code>scrapy crawl 爬虫名称</code> ：该种执行形式会显示执行的日志信息<br><code>scrapy crawl 爬虫名称 --nolog</code>：该种执行形式不会显示执行的日志信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl  应用名称</span><br></pre></td></tr></table></figure>

<h3 id="递归的访问"><a href="#递归的访问" class="headerlink" title="递归的访问"></a>递归的访问</h3><p> 以上的爬虫仅仅是爬去初始页，而我们爬虫是需要源源不断的执行下去，直到所有的网页被执行完毕 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiandianSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;diandian&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.diandian100.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.diandian100.cn/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="comment"># 获取每篇文章</span></span><br><span class="line">        article_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;posts-expand&quot;]/article&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环每篇文章</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> article_list:</span><br><span class="line">            <span class="comment"># 取出该条文章第一个link标签下的href属性值</span></span><br><span class="line">            url = item.xpath(<span class="string">&#x27;./link/@href&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 在该条文章html中搜索h2标签下的第一个a标签的内容</span></span><br><span class="line">            tit = item.xpath(<span class="string">&#x27;.//h2/a/text()&#x27;</span>).extract_first()</span><br><span class="line">            print(url, <span class="string">&#x27;-&#x27;</span>, tit)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取分页标签</span></span><br><span class="line">        page_nav = response.xpath(<span class="string">&#x27;//*[@class=&quot;pagination&quot;]/a/@href&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 循环读取每页</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> page_nav:</span><br><span class="line">            page_url = <span class="string">&#x27;http://www.diandian100.cn/&#x27;</span> + page</span><br><span class="line">            <span class="keyword">yield</span> Request(url = page_url, callback=self.parse)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="指令持久化"><a href="#指令持久化" class="headerlink" title="指令持久化"></a>指令持久化</h3><p> 基于终端指令的持久化存储 ，保证爬虫文件的parse方法中有可迭代类型对象（通常为列表or字典）的返回，该返回值可以通过终端指令的形式写入指定格式的文件中进行持久化操作。执行输出指定格式进行存储：将爬取到的数据写入不同格式的文件中进行存储。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl 爬虫名称 -o xxx.json</span><br><span class="line">scrapy crawl 爬虫名称 -o xxx.xml</span><br><span class="line">scrapy crawl 爬虫名称 -o xxx.csv</span><br></pre></td></tr></table></figure>

<h3 id="管道持久化"><a href="#管道持久化" class="headerlink" title="管道持久化"></a>管道持久化</h3><p><code>scrapy</code>框架中已经为我们专门集成好了高效、便捷的持久化操作功能，我们直接使用即可。要想使用·的持久化操作功能，我们首先来认识如下两个文件：</p>
<p><code>items.py</code>：数据结构模板文件。定义数据属性。<br><code>pipelines.py</code>：管道文件。接收数据（<code>items</code>），进行持久化操作。</p>
<h4 id="持久化流程"><a href="#持久化流程" class="headerlink" title="持久化流程"></a>持久化流程</h4><p>​    1.爬虫文件爬取到数据后，需要将数据封装到<code>items</code>对象中。<br>​    2.使用<code>yield</code>关键字将<code>items</code>对象提交给<code>pipelines</code>管道进行持久化操作。<br>​    3.在管道文件中的<code>process_item</code>方法中接收爬虫文件提交过来的<code>item</code>对象，然后编写持久化存储的代码将<code>item</code>对象中存储的数据进行持久化存储<br>​    4.<code>settings.py</code>配置文件中开启管道</p>
<h4 id="持久化示例"><a href="#持久化示例" class="headerlink" title="持久化示例"></a>持久化示例</h4><h5 id="文件持久化"><a href="#文件持久化" class="headerlink" title="文件持久化"></a>文件持久化</h5><h6 id="爬虫文件diandian-py"><a href="#爬虫文件diandian-py" class="headerlink" title="爬虫文件diandian.py"></a>爬虫文件<code>diandian.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> study.items <span class="keyword">import</span> StudyItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiandianSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;diandian&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.diandian100.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.diandian100.cn/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="comment"># 获取每篇文章</span></span><br><span class="line">        article_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;posts-expand&quot;]/article&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环每篇文章</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> article_list:</span><br><span class="line">            <span class="comment"># 取出该条文章第一个link标签下的href属性值</span></span><br><span class="line">            url = item.xpath(<span class="string">&#x27;./link/@href&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># 在该条文章html中搜索h2标签下的第一个a标签的内容</span></span><br><span class="line">            tit = item.xpath(<span class="string">&#x27;.//h2/a/text()&#x27;</span>).extract_first()</span><br><span class="line">            <span class="comment"># print(url, &#x27;-&#x27;, tit)</span></span><br><span class="line">            <span class="comment"># 将解析到的数据封装至items对象中，提交item到管道文件（pipelines.py）</span></span><br><span class="line">            <span class="keyword">yield</span> StudyItem(tit=tit, url=url)</span><br></pre></td></tr></table></figure>

<h6 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a><code>items.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudyItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    tit = scrapy.Field() <span class="comment"># 存储标题</span></span><br><span class="line">    url = scrapy.Field() <span class="comment"># 存储url</span></span><br></pre></td></tr></table></figure>

<h6 id="管道文件：pipelines-py"><a href="#管道文件：pipelines-py" class="headerlink" title="管道文件：pipelines.py"></a>管道文件：<code>pipelines.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudyPipeline</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="comment">#构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fp = <span class="literal">None</span>  <span class="comment">#定义一个文件描述符属性</span></span><br><span class="line">　　<span class="comment">#下列都是在重写父类的方法：</span></span><br><span class="line">    <span class="comment">#开始爬虫时，执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;爬虫开始&#x27;</span>)</span><br><span class="line">        self.fp = open(<span class="string">&#x27;./data.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">　　 <span class="comment">#因为该方法会被执行调用多次，所以文件的开启和关闭操作写在了另外两个只会各自执行一次的方法中。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment">#将爬虫程序提交的item进行持久化存储</span></span><br><span class="line">        self.fp.write(item[<span class="string">&#x27;tit&#x27;</span>] + <span class="string">&#x27;:&#x27;</span> + item[<span class="string">&#x27;url&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment">#结束爬虫时，执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        self.fp.close()</span><br><span class="line">        print(<span class="string">&#x27;爬虫结束&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="配置文件：settings-py"><a href="#配置文件：settings-py" class="headerlink" title="配置文件：settings.py"></a>配置文件：<code>settings.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启管道</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;study.pipelines.StudyPipeline&#x27;</span>: <span class="number">300</span>, <span class="comment">#300表示为优先级，值越小优先级越高</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数据库持久化"><a href="#数据库持久化" class="headerlink" title="数据库持久化"></a>数据库持久化</h5><p>上述实例中， 在管道文件里将<code>item</code>对象中的数据值存储到了磁盘中，如果将~数据写入<code>mysql</code>数据库的话，只需要将上述案例中的管道文件修改成如下形式： </p>
<h6 id="管道文件：pipelines-py-1"><a href="#管道文件：pipelines-py-1" class="headerlink" title="管道文件：pipelines.py"></a>管道文件：<code>pipelines.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入数据库的类</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudyByMysql</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    conn = <span class="literal">None</span>  <span class="comment">#mysql的连接对象声明</span></span><br><span class="line">    cursor = <span class="literal">None</span><span class="comment">#mysql游标对象声明</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始爬虫&#x27;</span>)</span><br><span class="line">        <span class="comment">#链接数据库</span></span><br><span class="line">        self.conn = pymysql.Connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123456&#x27;</span>,db=<span class="string">&#x27;study&#x27;</span>)</span><br><span class="line">    <span class="comment">#编写向数据库中存储数据的相关代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment">#1.链接数据库</span></span><br><span class="line">        <span class="comment">#2.执行sql语句</span></span><br><span class="line">        sql = <span class="string">&#x27;insert into qiubai values(&quot;%s&quot;,&quot;%s&quot;)&#x27;</span>%(item[<span class="string">&#x27;tit&#x27;</span>],item[<span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line">        <span class="comment">#执行事务</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.conn.rollback()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;爬虫结束&#x27;</span>)</span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br></pre></td></tr></table></figure>

<h6 id="配置文件：settings-py-1"><a href="#配置文件：settings-py-1" class="headerlink" title="配置文件：settings.py"></a>配置文件：<code>settings.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;study.pipelines.StudyByMysql&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a><code>redis</code>持久化</h5><p> 上例中，在管道文件里将<code>item</code>对象中的数据值存储到了磁盘中，如果将<code>item</code>数据写入<code>redis</code>数据库的话，只需要将上述案例中的管道文件修改成如下形式 。</p>
<h6 id="管道文件：pipelines-py-2"><a href="#管道文件：pipelines-py-2" class="headerlink" title="管道文件：pipelines.py"></a>管道文件：<code>pipelines.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudyByRedis</span>(<span class="params">object</span>):</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始爬虫&#x27;</span>)</span><br><span class="line">        <span class="comment">#创建链接对象</span></span><br><span class="line">        self.conn = redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">6379</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        dict = &#123;</span><br><span class="line">            <span class="string">&#x27;tit&#x27;</span>:item[<span class="string">&#x27;tit&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>:item[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#写入redis中</span></span><br><span class="line">        self.conn.lpush(<span class="string">&#x27;data&#x27;</span>, dict)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<h6 id="配置文件：settings-py-2"><a href="#配置文件：settings-py-2" class="headerlink" title="配置文件：settings.py"></a>配置文件：<code>settings.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;study.pipelines.StudyByRedis&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
        <tag>爬虫持久化</tag>
        <tag>pipelines</tag>
        <tag>scrapy持久化</tag>
        <tag>scrapy数据库持久化</tag>
        <tag>scrapy文件持久化</tag>
        <tag>scrapy redis持久化</tag>
        <tag>scrapy缓存持久化</tag>
        <tag>递归爬虫</tag>
        <tag>win安装scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>前端输出字符串同名变量</title>
    <url>/ee9ae855.html</url>
    <content><![CDATA[<p>这个问题其实并不像标题中的那么简单，本就是一个<code>eval(&#39;变量同名字符串&#39;)</code>搞定的，从头捋一下我们的需求，问题是怎么回到标题的。</p>
<a id="more"></a>

<p>原始需求是用户提交数据进行前后端验证，无论用户填写的表单是否通过了验证我们都将这些提交数据显示在表单中，如果使用模板渲染，没任何问题，大多数框架在post提交后都可以坐到将用户填写的字段渲染到对应的字段上，也就是<code>input</code>的<code>value</code>属性。</p>
<p>但是如果是<code>vue</code>呢？我们使用的是<code>v-model</code>数据绑定呢？如何将用户提交的数据绑定到<code>vue</code>的应用属性中呢？原理上我们<code>get</code>和<code>post</code>用的一个模板，但是不管是<code>get</code>访问还是<code>post</code>请求都是一次新的加载，我们如果在这次post新的加载中获取原始get提交的数据呢？</p>
<p>我这里的做法是post提交给后端服务器后，服务器再回传给前端模板，你当然可以在<code>vue</code>属性中一一去接受后端携带回来的数据，但前提是你的<code>js</code>代码写在了<code>html</code>模板中，而大多数情况下我们会将这玩意儿单独写在一个js中，这时候我们只能通过变量统一接收，再循环获取赋值来完成了。</p>
<p>此处以<code>Django</code>为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def post(self, request):</span><br><span class="line">    # 获取post数据转为普通字典</span><br><span class="line">    datas &#x3D; request.POST.dict()</span><br><span class="line">    # 删除提交过来的csrftoken，这个不是用户填写的，也没必要传回去，当然这个前后端都可以处理</span><br><span class="line">    del datas[&#39;csrfmiddlewaretoken&#39;]</span><br><span class="line">    # 携带到前端模板，转为json格式，方便前端处理。</span><br><span class="line">    return render(request, &#39;users&#x2F;register.html&#39;, &#123; &#39;datas&#39;:json.dumps(datas)&#125;)</span><br></pre></td></tr></table></figure>

<p>我的<code>js</code>文件是独立的，所以在模板文件<code>js</code>中声明个变量来接收他吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if datas %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var user_form_datas &#x3D; &#123;&#123; datas|safe &#125;&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>随后在我们独立<code>js</code>中，<code>vue</code>示例创建后我们就处理这个对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">created: function()&#123;</span><br><span class="line">    	&#x2F;&#x2F; 如果定义了user_form_datas变量，证明服务器传给我们数据了，我们就处理它</span><br><span class="line">        if(&quot;undefined&quot; !&#x3D; typeof user_form_datas)&#123;</span><br><span class="line">            &#x2F;&#x2F; 循环后端发来的我们原始填写的字段</span><br><span class="line">            Object.keys(user_form_datas).forEach(item&#x3D;&gt;&#123;</span><br><span class="line">                &#x2F;&#x2F; 将我们vue实例中的该条属性值赋值为后端传来的字段值，此处未处理不存在的属性</span><br><span class="line">                this[item] &#x3D; user_form_datas[item]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>以上代码我们post后也回填了之前的数据。</p>
]]></content>
      <categories>
        <category>fe</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端输出字符串同名变量</tag>
        <tag>form数据回填</tag>
        <tag>form保留原始提交数据</tag>
        <tag>变量同名字符串获取</tag>
      </tags>
  </entry>
  <entry>
    <title>如何手动保存微信文章中的图片</title>
    <url>/14ecef07.html</url>
    <content><![CDATA[<p>微信公众号发布的文章里面，有些图片很不错，很希望把它保存下来，可是当习惯性的点击“图片另存为”时，却发现保存的文件都是webp格式的，这种格式在电脑中无法正常显示。那么我们到底该怎样才能把微信公众号的图片保存为jpg或是png格式呢？</p>
<a id="more"></a>

<h3 id="手动下载"><a href="#手动下载" class="headerlink" title="手动下载"></a>手动下载</h3><p>浏览器打开该文章</p>
<p>右击图片-》选择在新标签页打开图片</p>
<p>源图片链接为：<code>https://mmbiz.qpic.cn/mmbiz_png/WrmcAiaDp1GhMzU1cXt7e7oAw2tmyS97cHVQydZELiaFTO7MWZFBcSZuVJ7O20zAqSZXmYotBx7zRoHGLckvED4g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1</code></p>
<p>修改其中的参数<code>tp=wedp</code></p>
<p>将其修改为<code>tp=png</code></p>
<p>然后右键图片另存为即可</p>
<h3 id="使用插件下载"><a href="#使用插件下载" class="headerlink" title="使用插件下载"></a>使用插件下载</h3><p><code>Chrome</code>浏览器或者<code>Chrome</code>内核浏览器可下载 <code>Fatkun</code>图片批量下载 插件</p>
<p>可以直接保存为<code>.jpg</code>格式，还可以批量保存，另外插件提供了丰富的设置选项，可以说是存图利器~</p>
]]></content>
      <tags>
        <tag>wechat</tag>
        <tag>微信</tag>
        <tag>微信图片</tag>
        <tag>微信文章图片</tag>
        <tag>微信文章图片保存</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序rich-text常见图片问题</title>
    <url>/bb07c1d3.html</url>
    <content><![CDATA[<p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/rich-text.html"><code>rich-text</code>组件</a>为微信小程序富文本解析器，该组件支持富文本解析，但需要对照一套自定义规则的 <code>JOSN</code> 数据格式，<code>API</code> 返回的富文本需要前端做数据转换。</p>
<p>日常开发中该组件的主要用途就是解析<code>html</code>标签，但是在使用中也是有一些问题</p>
<p>这种情况下后端如果不返回富文本，前端去在小程序去处理是比较麻烦的，还得定个规则，前端再写好样式拼接起来。如果后端直接给你返回富文本，用这个去解析可以直接搞定。</p>
<a id="more"></a>

<h2 id="Bug-amp-Tip"><a href="#Bug-amp-Tip" class="headerlink" title="Bug &amp; Tip"></a>Bug &amp; Tip</h2><ol>
<li><code>tip</code>: <code>nodes</code> 不推荐使用 <code>String</code> 类型，性能会有所下降。</li>
<li><code>tip</code>: <code>rich-text</code> 组件内屏蔽所有节点的事件。</li>
<li><code>tip</code>: <code>attrs</code> 属性不支持 <code>id</code> ，支持 <code>class</code> 。</li>
<li><code>tip</code>: <code>name</code> 属性大小写不敏感。</li>
<li><code>tip</code>: 如果使用了不受信任的<code>HTML</code>节点，该节点及其所有子节点将会被移除。</li>
<li><code>tip</code>: <code>img</code> 标签仅支持网络图片。</li>
<li><code>tip</code>: 如果在自定义组件中使用 <code>rich-text</code> 组件，那么仅自定义组件的 <code>wxss</code> 样式对 <code>rich-text</code> 中的 <code>class</code> 生效。</li>
</ol>
<p>该组件能解析几乎所有的<code>html</code>标签，其中<code>table</code>和<code>img</code>标签支持<code>width</code>，问题就出现了，设定了固定的<code>width</code>，除非是百分比，否则还能自适应各个屏幕吗？另外<code>img</code>只支持网络图片，这个大家可以理解，毕竟代码不可能连图片资源一起带过来。</p>
<h2 id="图片不显示"><a href="#图片不显示" class="headerlink" title="图片不显示"></a>图片不显示</h2><p>多半这种问题产生的原因就在于你没有使用网络图片，解决方法如下：</p>
<p>服务器后台先对图片地址进行处理，修改为绝对的网络地址</p>
<p><code>python</code>代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">&#x27;&lt;p&gt;&lt;img class=&quot;size-full wp-image-20763 aligncenter&quot; src=&quot;/uploads/eb-52019_400-300.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt; EB-5新规出台，投资项目如何选？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#x27;</span></span><br><span class="line">content = content.replace(<span class="string">&#x27;&quot;/uploads/&#x27;</span>, <span class="string">&#x27;&quot;https://www.diandian100.cn/uploads/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>php</code>代码差不多</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$content = <span class="string">&#x27;&lt;p&gt;&lt;img class=&quot;size-full wp-image-20763 aligncenter&quot; src=&quot;/uploads/eb-52019_400-300.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt; EB-5新规出台，投资项目如何选？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#x27;</span></span><br><span class="line">$content = str_replace(<span class="string">&#x27;&quot;/uploads/&#x27;</span>, <span class="string">&#x27;&quot;https://www.diandian100.cn/uploads/&#x27;</span>, $content)</span><br></pre></td></tr></table></figure>

<h2 id="图片宽度超出"><a href="#图片宽度超出" class="headerlink" title="图片宽度超出"></a>图片宽度超出</h2><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814101315.png"></p>
<p><u>考虑到多张图片的话，图片之间会有间隙，不希望有间隙可以加上<code>display：block</code></u></p>
<p>处理方法有两种：</p>
<ol>
<li><p>服务器处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$content = str_replace(<span class="string">&quot;&lt;img &quot;</span>, <span class="string">&quot;&lt;img style=&#x27;max-width:100%;height:auto;display:block;&#x27;&quot;</span>, $content);</span><br></pre></td></tr></table></figure>
<p>或<code>python</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = content.replace(<span class="string">&quot;&lt;img &quot;</span>, <span class="string">&quot;&lt;img style=&#x27;max-width:100%;height:auto;display:block;&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>小程序处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> that.setData(&#123;</span><br><span class="line">          content: res.data.content.replace(<span class="regexp">/\&lt;img/gi</span>, <span class="string">&#x27;&lt;img style=&quot;max-width:100%;height:auto;display:block;&quot;&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"> </span><br><span class="line"> that.setData(&#123;</span><br><span class="line">          content: res.data.contents.replace(<span class="string">&#x27;&lt;img &#x27;</span>, <span class="string">&#x27;&lt;img style=&quot;max-width:100%;height:auto;display:block;&quot;&#x27;</span>)          </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190814101423.png"></p>
]]></content>
      <categories>
        <category>fe</category>
        <category>miniprogram</category>
      </categories>
      <tags>
        <tag>小程序rich-text</tag>
        <tag>rich-text问题</tag>
        <tag>rich-text图片</tag>
        <tag>rich-text图片无效</tag>
        <tag>rich-text图片超出</tag>
        <tag>rich-text图片限制</tag>
        <tag>rich-text图片宽度</tag>
        <tag>图片间隙</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的web后台模板</title>
    <url>/61601310.html</url>
    <content><![CDATA[<p>Web 开发中几乎的平台都需要一个后台管理，但是从零开发一套后台控制面板并不容易，幸运的是有很多开源免费的后台控制面板可以给开发者使用，那么有哪些优秀的开源免费的控制面板呢？我在 <code>Github</code> 上收集了一些优秀的后台控制面板，并总结得出 Top 10。</p>
<a id="more"></a>

<h2 id="1-AdminLTE"><a href="#1-AdminLTE" class="headerlink" title="1. AdminLTE"></a>1. <code>AdminLTE</code></h2><p><code>Github Star</code> 数 24969 ， <code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsbWFzYWVlZDIwMTAvQWRtaW5MVEU=">https://github.com/almasaeed2010/AdminLTE<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>非常流行的基于 <code>Bootstrap 3.x</code> 的免费的后台 <code>UI</code> 框架。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20191010162515.png"></p>
<hr>
<h2 id="2-vue-Element-Admin"><a href="#2-vue-Element-Admin" class="headerlink" title="2. vue-Element-Admin"></a>2. <code>vue-Element-Admin</code></h2><p><code>Github Star</code> 数 19546， <code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BhbkppYUNoZW4vdnVlLWVsZW1lbnQtYWRtaW4=">https://github.com/PanJiaChen/vue-element-admin<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>一个基于 <code>vue2.0</code> 和 <code>Eelement</code> 的控制面板 <code>UI</code> 框架。<img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/f9c3ca542503cc3427133737ca916290"></p>
<hr>
<h2 id="3-tabler"><a href="#3-tabler" class="headerlink" title="3. tabler"></a>3. <code>tabler</code></h2><p><code>Github Star</code> 数 15870， <code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RhYmxlci90YWJsZXI=">https://github.com/tabler/tabler<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>构建在 <code>BootStrap 4</code> 之上的免费的 HTML 控制面板框架</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/c6ae6d65f0dfe9b48971139e55ea7e1a"></p>
<hr>
<h2 id="4-Gentelella"><a href="#4-Gentelella" class="headerlink" title="4. Gentelella"></a>4. <code>Gentelella</code></h2><p><code>Github Star</code> 数 15654， <code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B1aWtpbnNoL2dlbnRlbGVsbGE=">https://github.com/puikinsh/gentelella<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>一个基于 <code>Bootstarp</code> 的免费的后台控制面板。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/b64a30c4cc36eaaf3ff35a4d7c20db86"></p>
<hr>
<h2 id="5-ng2-admin"><a href="#5-ng2-admin" class="headerlink" title="5. ng2-admin"></a>5. <code>ng2-admin</code></h2><p><code>Github Star</code> 数 13181， <code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FrdmVvL25neC1hZG1pbg==">https://github.com/akveo/ngx-admin<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>基于 <code>Angular 2</code>, <code>Bootstrap 4</code> 和 <code>Webpack</code> 的后台管理面板框架。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/aba94118e9107c84167bf860a404c9ec"></p>
<hr>
<h2 id="6-ant-design-pro"><a href="#6-ant-design-pro" class="headerlink" title="6. ant-design-pro"></a>6. <code>ant-design-pro</code></h2><p><code>Github Star</code> 数 12707，<code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi1wcm8=">https://github.com/ant-design/ant-design-pro<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>开箱即用的中台前端/设计解决方案</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/71a7501dac49b6295cef6221e9a930b3"></p>
<hr>
<h2 id="7-blur-admin"><a href="#7-blur-admin" class="headerlink" title="7. blur-admin"></a>7. <code>blur-admin</code></h2><p><code>Github Star</code> 数 9241，<code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FrdmVvL2JsdXItYWRtaW4=">https://github.com/akveo/blur-admin<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>基于 <code>Angular</code> 和 <code>Bootstrap</code> 的后台管理面板框架。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/ad30a071f03edef70b72a1e4aa5c418b"></p>
<hr>
<h2 id="8-vue-admin"><a href="#8-vue-admin" class="headerlink" title="8. vue-admin"></a>8. <code>vue-admin</code></h2><p><code>Github Star</code> 数 8676，<code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZS1idWxtYS92dWUtYWRtaW4=">https://github.com/vue-bulma/vue-admin<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>基于 <code>Vue</code> 和 <code>Bulma</code> 的控制面板。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/0baab05e5f68d7004ff9cb62f9677367"></p>
<hr>
<h2 id="9-iview-admin"><a href="#9-iview-admin" class="headerlink" title="9. iview-admin"></a>9. <code>iview-admin</code></h2><p><code>Github Star</code> 数 8668，<code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2l2aWV3L2l2aWV3LWFkbWlu">https://github.com/iview/iview-admin<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>基于 <code>iView</code> 的 <code>Vue 2.0</code> 控制面板。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/2fe6d552d9f2717ddffd19900126d1a0"></p>
<hr>
<h2 id="10-material-dashboard"><a href="#10-material-dashboard" class="headerlink" title="10. material-dashboard"></a>10. <code>material-dashboard</code></h2><p><code>Github</code> Star 数 7111，<code>Github</code> 地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyZWF0aXZldGltb2ZmaWNpYWwvbWF0ZXJpYWwtZGFzaGJvYXJk">https://github.com/creativetimofficial/material-dashboard<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>基于 <code>Bootstrap 4</code> 和 <code>Material</code> 风格的控制面板。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/98c4c1bb249ab60dcaf21656eadb8c72"></p>
]]></content>
      <categories>
        <category>fe</category>
      </categories>
      <tags>
        <tag>后台模板</tag>
        <tag>管理模板</tag>
        <tag>AdminLTE</tag>
      </tags>
  </entry>
  <entry>
    <title>常见掉坑代码记录</title>
    <url>/c88befb1.html</url>
    <content><![CDATA[<p>以下代码为学习中或现实开发中会遇到的坑，此处记录下，后续更新</p>
<a id="more"></a>

<p>代码1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span>:</span></span><br><span class="line">    items = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_items</span>(<span class="params">self, option</span>):</span></span><br><span class="line">        self.items.append(option)</span><br><span class="line"></span><br><span class="line">o1 = Obj()</span><br><span class="line">o2 = Obj()</span><br><span class="line">o1.set_items(<span class="number">666</span>)</span><br><span class="line">o1.set_items(<span class="string">&#x27;Tony&#x27;</span>)</span><br><span class="line">o2.set_items(<span class="string">&#x27;你好世界&#x27;</span>)</span><br><span class="line">print(o1.items, o2.items, Obj.items)</span><br></pre></td></tr></table></figure>

<p>打印结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">666</span>, <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;你好世界&#x27;</span>] [<span class="number">666</span>, <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;你好世界&#x27;</span>] [<span class="number">666</span>, <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;你好世界&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>掉坑</tag>
      </tags>
  </entry>
  <entry>
    <title>强推一个抠图python神库(含在线抠图)</title>
    <url>/38deb4fa.html</url>
    <content><![CDATA[<p>曾几何时，「抠图」是一个难度系数相当高的活儿，但今天要介绍的这款神工具，<strong>只要 3 行代码 5 秒钟就可以完成高精度抠图</strong>，甚至都不用会代码，点两下鼠标就完成了。感受下这款抠图工具抠地有多精细：</p>
<a id="more"></a>

<p> <img data-src="/images/v2-948db740da1b9fbf035ac585ad8132d8_b.jpg" alt="img"><br>  <img data-src="/images/v2-ea040fa837e2ab08fba9a5ea07095d70_b.jpg" alt="img"><br>  <img data-src="/images/v2-c859552e7e030980fe26133ed5297548_b.jpg" alt="img"><br>  <img data-src="/images/v2-7a0cb085d161bc0e7f4d334242205e52_b.jpg" alt="img"><br>  <img data-src="/images/v2-b5ff3c783b8d57d420ad7ec8ed112b5f_b.jpg" alt="img"><br>是不是很赞？什么 PS 、PPT 修图都 low 爆了，你软件还没打开，我这边都修完了。。。</p>
<p>这款工具叫：<strong>Remove.bg</strong> 。基于 Python、Ruby 和深度学习技术开发，通过强大的 AI 人工智能算法实现自动识别出前景主体与背景图，分分钟 秒秒钟完成抠图。这样下去，PS 设计师快都要下岗了。</p>
<p>怎么使用这款抠图工具呢？有多种简单方式。</p>
<p>首先是 Python 实现，很简单。</p>
<p>在网站上注册获取 API 后（不想那么麻烦可以私信我发你 API)，一行代码安装抠图库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install removebg</span><br></pre></td></tr></table></figure>

<p>接下来只需要三行代码就可以完成一张抠图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> removebg <span class="keyword">import</span> RemoveBg</span><br><span class="line">rmbg = RemoveBg(<span class="string">&quot;WPZ2Q4fraseKfAN9PPxxxxxx&quot;</span>, <span class="string">&quot;error.log&quot;</span>) <span class="comment"># 引号内是你获取的API</span></span><br><span class="line">rmbg.remove_background_from_img_file(<span class="string">&quot;C:/Users/sony/Desktop/1.jpg&quot;</span>) <span class="comment">#图片地址</span></span><br></pre></td></tr></table></figure>

<p>不仅能抠一张还可以批量抠图（把图片放到一个文件夹就可以了）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> removebg <span class="keyword">import</span> RemoveBg</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">rmbg = RemoveBg(<span class="string">&quot;WPZ2Q4fraseKfAN9PPxxxxxx&quot;</span>, <span class="string">&quot;error.log&quot;</span>)</span><br><span class="line">path = <span class="string">&#x27;%s/picture&#x27;</span>%os.getcwd() <span class="comment">#图片放到程序的同级文件夹 picture 里面</span></span><br><span class="line"><span class="keyword">for</span> pic <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    rmbg.remove_background_from_img_file(<span class="string">&quot;%s\%s&quot;</span>%(path,pic))</span><br></pre></td></tr></table></figure>

<p>是不是很爽？</p>
<p>默认生成的图片格式尺寸是标准的，每月最多免费处理 50 张照片。如果想生成高清甚至 4K 的图片或者处理更多需要付费。GitHub 库地址：<strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWxhbS9yZW1vdmUtYmc=">https://github.com/brilam/remove-bg<i class="fa fa-external-link-alt"></i></span></strong></p>
<p>如果不习惯用代码，官网提供了在线抠图，只需要上传照片即可，不限处理次数：</p>
<p>扣完图可以马上换颜色或者背景：<img data-src="/images/v2-4bec32b4a4a8221faacaa625a9be3a8f_b.gif" alt="img"></p>
<p>如果觉得在线不安全，还可以下载软件到本地使用，<strong>支持 Windows / Mac / Linux 三平台</strong>。抠图还有另外一个用途就是抠证件照换背景色了，不会 PS 又不想花钱重照，那就使用它吧很快能搞定：<img data-src="/images/v2-3e8143078d62c9cc4a86b6ff3947c5b4_b.jpg" alt="img"></p>
<p>官网地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVtb3ZlLmJnLw==">https://www.remove.bg/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>抠图</tag>
        <tag>removebg</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序/uniapp滑动选项卡</title>
    <url>/f08f28b3.html</url>
    <content><![CDATA[<p>小程序中滑动选项卡很常见，很多框架都封装了这个功能，包括我现在使用的<code>uniapp</code>，有时候官方封装太大，自己需要的简单，决定参考官方，写一个简单的。</p>
<a id="more"></a>

<p>滑动选项卡特别是<code>tabbar</code>超过一屏的我们需要用到小程序的两个容器组件：<code>scroll-view</code> 和 <code>swiper</code>，我们先来实现<code>tabbar</code>。</p>
<p>正常的一个选项卡要选择第二屏幕的<code>tabbar</code>选项，需要滑动<code>tabbar</code>区域，才能选到后面屏幕中的<code>tabbar</code>，但是这样用户体验很不好，网上很流行的一种做法是点击了第一屏幕中的后几个<code>tabbar</code>，该区域自动向后滑动，显示出后面区域的<code>tabbar</code>。实现方式也有两种下面一一介绍。</p>
<h3 id="使用scroll-left"><a href="#使用scroll-left" class="headerlink" title="使用scroll-left"></a>使用<code>scroll-left</code></h3><p>该参数的作用在于设置横向滚动条位置，举个栗子，我有8个<code>tabbar</code>选项，每屏放5个，当我点击第五个的时候让该区域的<code>scroll-left</code>设置为屏幕的宽度，整体往后移动了，大概样式如下：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/QQ%E5%BD%95%E5%B1%8F20200408092322.gif" alt="img"></p>
<p>具体实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line"></span><br><span class="line">		&lt;scroll-view scroll-x&#x3D;&quot;true&quot; class&#x3D;&quot;tab-h&quot; v-bind:scroll-left&#x3D;&quot;scroll_left&quot;&gt;</span><br><span class="line">			</span><br><span class="line">			&lt;view v-for&#x3D;&quot;(item, index) in tab_bar&quot; class&#x3D;&quot;tab-item&quot; v-bind:class&#x3D;&quot;current_tab&#x3D;&#x3D;index ? &#39;tab-bar-active&#39; : &#39;&#39;&quot; v-bind:key&#x3D;&quot;index&quot; v-bind:data-current&#x3D;&quot;index&quot; v-on:click&#x3D;&quot;change_tab&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;&#x2F;scroll-view&gt;</span><br><span class="line">	&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">	export default &#123;</span><br><span class="line"></span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				&#x2F;&#x2F; 当前选中tab索引</span><br><span class="line">				current_tab:0,</span><br><span class="line">				&#x2F;&#x2F; 当前滚动条距离左边的位置</span><br><span class="line">				scroll_left:0,</span><br><span class="line">				&#x2F;&#x2F; 屏幕宽度</span><br><span class="line">				screen_width:0,</span><br><span class="line">				tab_bar:[</span><br><span class="line">					&#39;情感&#39;,</span><br><span class="line">					&#39;健康&#39;,</span><br><span class="line">					&#39;职场&#39;,</span><br><span class="line">					&#39;育儿&#39;,</span><br><span class="line">					&#39;纠纷&#39;,</span><br><span class="line">					&#39;青葱&#39;,</span><br><span class="line">					&#39;全部&#39;,</span><br><span class="line">					&#39;其他&#39;</span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		onLoad() &#123;</span><br><span class="line">			&#x2F;&#x2F; 首次获取屏幕宽度</span><br><span class="line">			uni.getSystemInfo(&#123;</span><br><span class="line">			    success: (res) &#x3D;&gt;&#123;</span><br><span class="line">					this.screen_width &#x3D; res.screenWidth</span><br><span class="line">			    &#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			&#x2F;&#x2F; 点击tabbar事件</span><br><span class="line">			change_tab(e)&#123;</span><br><span class="line">				let index &#x3D; e.target.dataset.current || e.currentTarget.dataset.current;</span><br><span class="line">				&#x2F;&#x2F; 记录当前点击的选项位置</span><br><span class="line">				this.current_tab &#x3D; index</span><br><span class="line">				&#x2F;&#x2F; 如果点击了第4个以后的,滚动条向右移动屏幕的宽度</span><br><span class="line">				if(index&gt;4)&#123;</span><br><span class="line">					this.scroll_left &#x3D; this.screen_width</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.tab-h &#123;</span><br><span class="line">  height: 80rpx;</span><br><span class="line">  width: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  line-height: 80rpx;</span><br><span class="line">  background: #f7f7f7;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  z-index: 99;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.tab-item &#123;</span><br><span class="line">  margin: 0 36rpx;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.tab-bar-active&#123;</span><br><span class="line">	font-weight: bold;</span><br><span class="line">	border-bottom: solid #0066CC 1px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用scroll-into-view"><a href="#使用scroll-into-view" class="headerlink" title="使用scroll-into-view"></a>使用<code>scroll-into-view</code></h3><p>上述实例中应该也能看到，我们选项卡是不足两屏的，如果是2屏或者超过两屏缺点就很明显了，使用<code>scroll-into-view</code>可以更精确的让我们定位到选项。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/QQ%E5%BD%95%E5%B1%8F20200408102641.gif" alt="img"></p>
<p>如图所示，效果比原来舒服多了，而且即使再多屏也没有任何关系，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-x</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-h&quot;</span> <span class="attr">v-bind:scroll-into-view</span>=<span class="string">&quot;scroll_into&quot;</span> <span class="attr">v-bind:scroll-with-animation</span>=<span class="string">&quot;true&quot;</span>&gt;</span>			</span><br><span class="line">			<span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in tab_bar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-item&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;current_tab==index ? &#x27;tab-bar-active&#x27; : &#x27;&#x27;&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-bind:data-current</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;change_tab&quot;</span>&gt;</span>&#123;&#123;item.tit&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;hr&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"></span><br><span class="line">		data() &#123;</span><br><span class="line"><span class="javascript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 当前选中tab索引</span></span></span><br><span class="line">				current_tab:0,</span><br><span class="line"><span class="javascript">				<span class="comment">// 当前滚动条距离左边的位置</span></span></span><br><span class="line">				scroll_left:0,</span><br><span class="line"><span class="javascript">				<span class="comment">// 当前滚动条滚动到id位置</span></span></span><br><span class="line"><span class="javascript">				scroll_into:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 屏幕宽度</span></span></span><br><span class="line">				screen_width:0,</span><br><span class="line">				tab_bar:[</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;emotion&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;情感&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;news&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;新闻&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;diagrams&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;八卦&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;house&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;楼市&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;cars&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;骑车&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;healthy&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;健康&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;workplace&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;职场&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;all&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;全部&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;other&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;其他&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;music&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;音乐&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;movie&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;影视&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;sport&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;运动&#x27;</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">						id : <span class="string">&#x27;country&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						tit: <span class="string">&#x27;国家&#x27;</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		onLoad() &#123;</span><br><span class="line"><span class="javascript">			<span class="comment">// 首次获取屏幕宽度</span></span></span><br><span class="line">			uni.getSystemInfo(&#123;</span><br><span class="line"><span class="javascript">			    success: <span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.screen_width = res.screenWidth</span></span><br><span class="line">			    &#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="javascript">			<span class="comment">// 点击tabbar事件</span></span></span><br><span class="line">			change_tab(e)&#123;</span><br><span class="line"><span class="javascript">				<span class="keyword">let</span> index = e.target.dataset.current || e.currentTarget.dataset.current;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 记录当前点击的选项位置</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">this</span>.current_tab = index</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 如果点击了第4个以后的,滚动条向右移动屏幕的宽度</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">this</span>.scroll_into = <span class="built_in">this</span>.tab_bar[index].id</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.tab-h</span> &#123;</span></span><br><span class="line">  height: 80rpx;</span><br><span class="line">  width: 100%;</span><br><span class="line">  line-height: 80rpx;</span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#f7f7f7</span>;</span></span><br><span class="line">  font-size: 16px;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="css"><span class="selector-class">.tab-item</span> &#123;</span></span><br><span class="line">  padding: 0 36rpx;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.tab-bar-active</span>&#123;</span></span><br><span class="line">	font-weight: bold;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#007AFF</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.hr</span>&#123;</span></span><br><span class="line">	height: 1rpx;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#eeeeee</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="进阶完整tab"><a href="#进阶完整tab" class="headerlink" title="进阶完整tab"></a>进阶完整<code>tab</code></h3><p>结合<code>swiper</code>组件就能坐到完美的滑动tab选项卡样式，用户体验也很好。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/QQ%E5%BD%95%E5%B1%8F20200408112916.gif" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;scroll-view scroll-x&#x3D;&quot;true&quot; class&#x3D;&quot;tab-h&quot; v-bind:scroll-into-view&#x3D;&quot;scroll_into&quot; v-bind:scroll-with-animation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">			&lt;view v-for&#x3D;&quot;(item, index) in tab_bar&quot; class&#x3D;&quot;tab-item&quot; v-bind:class&#x3D;&quot;current_tab&#x3D;&#x3D;index ? &#39;tab-bar-active&#39; : &#39;&#39;&quot;</span><br><span class="line">			 v-bind:key&#x3D;&quot;index&quot; v-bind:data-current&#x3D;&quot;index&quot; v-bind:id&#x3D;&quot;item.id&quot; v-on:click&#x3D;&quot;change_tab&quot;&gt;&#123;&#123;item.tit&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;&#x2F;scroll-view&gt;</span><br><span class="line">		&lt;view class&#x3D;&quot;hr&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">		&lt;swiper class&#x3D;&quot;swiper&quot; v-bind:current&#x3D;&quot;current_tab&quot;  duration&#x3D;&quot;300&quot; @change&#x3D;&quot;change_swiper&quot;&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-red&quot;&gt;A&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-green&quot;&gt;B&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-blue&quot;&gt;C&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-red&quot;&gt;D&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-green&quot;&gt;E&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-blue&quot;&gt;F&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-red&quot;&gt;G&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-green&quot;&gt;H&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-blue&quot;&gt;I&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-red&quot;&gt;J&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-green&quot;&gt;K&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-blue&quot;&gt;L&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">			&lt;swiper-item&gt;</span><br><span class="line">				&lt;view class&#x3D;&quot;swiper-item uni-bg-red&quot;&gt;M&lt;&#x2F;view&gt;</span><br><span class="line">			&lt;&#x2F;swiper-item&gt;</span><br><span class="line">		&lt;&#x2F;swiper&gt;</span><br><span class="line">	&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line"></span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				&#x2F;&#x2F; 当前选中tab索引</span><br><span class="line">				current_tab: 0,</span><br><span class="line">				&#x2F;&#x2F; 当前滚动条距离左边的位置</span><br><span class="line">				scroll_left: 0,</span><br><span class="line">				&#x2F;&#x2F; 当前滚动条滚动到id位置</span><br><span class="line">				scroll_into: &#39;&#39;,</span><br><span class="line">				&#x2F;&#x2F; 屏幕宽度</span><br><span class="line">				screen_width: 0,</span><br><span class="line">				tab_bar: [&#123;</span><br><span class="line">						id: &#39;emotion&#39;,</span><br><span class="line">						tit: &#39;情感&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;news&#39;,</span><br><span class="line">						tit: &#39;新闻&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;diagrams&#39;,</span><br><span class="line">						tit: &#39;八卦&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;house&#39;,</span><br><span class="line">						tit: &#39;楼市&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;cars&#39;,</span><br><span class="line">						tit: &#39;骑车&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;healthy&#39;,</span><br><span class="line">						tit: &#39;健康&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;workplace&#39;,</span><br><span class="line">						tit: &#39;职场&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;all&#39;,</span><br><span class="line">						tit: &#39;全部&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;other&#39;,</span><br><span class="line">						tit: &#39;其他&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;music&#39;,</span><br><span class="line">						tit: &#39;音乐&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;movie&#39;,</span><br><span class="line">						tit: &#39;影视&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;sport&#39;,</span><br><span class="line">						tit: &#39;运动&#39;</span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						id: &#39;country&#39;,</span><br><span class="line">						tit: &#39;国家&#39;</span><br><span class="line">					&#125;</span><br><span class="line">				],</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		onLoad() &#123;</span><br><span class="line">			&#x2F;&#x2F; 首次获取屏幕宽度</span><br><span class="line">			uni.getSystemInfo(&#123;</span><br><span class="line">				success: (res) &#x3D;&gt; &#123;</span><br><span class="line">					this.screen_width &#x3D; res.screenWidth</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			&#x2F;&#x2F; 点击tabbar事件</span><br><span class="line">			change_tab(e) &#123;</span><br><span class="line">				let index &#x3D; e.target.dataset.current || e.currentTarget.dataset.current;</span><br><span class="line">				this.run_tab(index)</span><br><span class="line">			&#125;,</span><br><span class="line">			&#x2F;&#x2F; swiper滑动事件</span><br><span class="line">			change_swiper(e)&#123;</span><br><span class="line">				console.log(&#39;你啥时候执行啊&#39;, e)</span><br><span class="line">				let index &#x3D; e.target.current || e.detail.current;</span><br><span class="line">				this.run_tab(index)</span><br><span class="line">			&#125;,</span><br><span class="line">			&#x2F;&#x2F; 执行整个tab事件</span><br><span class="line">			run_tab(index)&#123;</span><br><span class="line">				&#x2F;&#x2F; 记录当前滑动的位置</span><br><span class="line">				this.current_tab &#x3D; index</span><br><span class="line">				&#x2F;&#x2F; 如果点击了第4个以后的,滚动条向右移动屏幕的宽度</span><br><span class="line">				this.scroll_into &#x3D; this.tab_bar[index].id</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">	.tab-h &#123;</span><br><span class="line">		height: 80rpx;</span><br><span class="line">		width: 100%;</span><br><span class="line">		line-height: 80rpx;</span><br><span class="line">		background: #f7f7f7;</span><br><span class="line">		font-size: 16px;</span><br><span class="line">		white-space: nowrap;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.tab-item &#123;</span><br><span class="line">		padding: 0 36rpx;</span><br><span class="line">		display: inline-block;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.tab-bar-active &#123;</span><br><span class="line">		font-weight: bold;</span><br><span class="line">		color: #007AFF;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.hr &#123;</span><br><span class="line">		height: 1rpx;</span><br><span class="line">		background-color: #eeeeee;</span><br><span class="line">	&#125;</span><br><span class="line">	.swiper&#123;</span><br><span class="line">		height: 500rpx;</span><br><span class="line">		text-align: center;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	.swiper-item&#123;</span><br><span class="line">		height: 500rpx;</span><br><span class="line">		line-height: 500rpx;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>以上就是原始版本的<code>tab</code>滑动选项卡，根据自己的样式定义吧。</p>
]]></content>
      <categories>
        <category>fe</category>
        <category>miniprogram</category>
      </categories>
      <tags>
        <tag>微信小程序/uniapp滑动选项卡</tag>
        <tag>scroll-left</tag>
        <tag>scroll-into-view</tag>
        <tag>tab</tag>
        <tag>滑动选项卡</tag>
        <tag>swiper</tag>
        <tag>小程序选项卡</tag>
        <tag>小程序滑动选项卡</tag>
        <tag>小程序tab</tag>
        <tag>uniapp选项卡</tag>
        <tag>uniapp tab</tag>
      </tags>
  </entry>
  <entry>
    <title>我是河南人</title>
    <url>/641111c1.html</url>
    <content><![CDATA[<p>对于河南，觉得河南哪儿哪儿都好！不愁吃穿也不用担心遇到什么天灾。</p>
<p>当然了，如果有人问我是哪里的，那我当然一定会说自己是河南的！土生</p>
<p>土长的河南人！</p>
<p>地域黑我是河南的？！不就是井盖吗？好吧，我承认，我们河南人白天睡觉啊晚上去偷井盖，一晚上能偷不少呢，我们河南人就是靠偷井盖谋生的哦！啊哈哈哈哈哈哈哈哈哈，要笑死！对于井盖这个十几年前的梗，我已经无力反驳加无力吐槽了，随那些喷子怎么说，你们喷你们的，反正不影响我们河南继续发展，反而更使我们河南人团结！不过遇到这种人还是会想上去反驳。</p>
<a id="more"></a>

<p>对了，前几天看到几张图片，</p>
<p>长图预警，如果图片可以呈现出QQ空间里的那个模式就比较省时间也比较更好读了，下面图有点多也有点长。</p>
<p>。</p>
<p><img data-src="/images/v2-41ffa22b6487a9bf2ad3f9162292ce0c_b.jpg" alt="img"><br><img data-src="/images/v2-fbb53303567fd585f68dd2ad52e78ad9_b.jpg" alt="img"><br><img data-src="/images/v2-bea007ca44f315f8b16810856f243d58_b.jpg" alt="img"><br><img data-src="/images/v2-b17f7d2f3e43235866aaf71494c39c17_b.jpg" alt="img"><br><img data-src="/images/v2-86dd7918fe734ae0edc6b2b783f3a6fa_b.jpg" alt="img"><br><img data-src="/images/v2-2d0abc83665d59c086ef3dc67e9cff19_b.jpg" alt="img"><br><img data-src="/images/v2-e1ddf1f32cf8de57e27fa5a8c72854e5_b.jpg" alt="img"><br><img data-src="/images/v2-0babd9fe0980a3e011e2adac3bb89208_b.jpg" alt="img"><br><img data-src="/images/v2-5d6e0c5218a008a7f292177ee4c9257b_b.jpg" alt="img"><br><img data-src="/images/v2-e3a507090b7ce0a071fe4c3c2a4abb41_b.jpg" alt="img"><br><img data-src="/images/v2-8914af7bceaebf485f6f3296ecf04764_b.jpg" alt="img"><br><img data-src="/images/v2-5f2112c794e52f1f5b6d0d99f371162f_b.jpg" alt="img"><br><img data-src="/images/v2-93a649b365bb7ad0735b9afc61f437e1_b.jpg" alt="img"><br><img data-src="/images/v2-f4f6b314163820147231be8746636c84_b.jpg" alt="img"><br><img data-src="/images/v2-1ad8ae5d0cbd04b2d038ce00ed4a5992_b.jpg" alt="img"></p>
<p>漫画是别人的，由于水印太多，我也找不到出处了，可以转载，如果侵犯了原漫画作者的权益我会删掉的。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>河南人</tag>
        <tag>地域黑</tag>
        <tag>偷井盖</tag>
        <tag>弄啥嘞</tag>
        <tag>中中中</tag>
        <tag>烩面</tag>
        <tag>龙门石窟</tag>
        <tag>少林寺</tag>
        <tag>去球吧</tag>
        <tag>真排场</tag>
        <tag>鳖孙</tag>
        <tag>中原</tag>
        <tag>胡辣汤</tag>
        <tag>拿铁星人</tag>
        <tag>黑河南</tag>
        <tag>七朝古都</tag>
        <tag>八朝古都</tag>
        <tag>十三朝古都</tag>
        <tag>夏商古都</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析es6新特性</title>
    <url>/5e3ea888.html</url>
    <content><![CDATA[<p>在近期的<code>Vue</code>开发中，使用了大量的<code>ES6</code>语法，因此觉得有必要找个时间来整理下近期的学习笔记。<code>ES6</code>相对<code>ES5</code>增加了许多新的特性，给我们的开发提供了方便。并且<code>ES6</code>也是未来开发的潮流，所以我觉得大家很有必要去掌握这一技能。</p>
<a id="more"></a>

<p>在我们正式学习<code>ES6</code>前，我们需要先去学习下转码器。常用的转码器有<a href="https://link.jianshu.com/?t=https://babeljs.io/docs/setup/"><code>Babel</code></a>和<code>Traceur</code>。这里推荐一篇<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHBzOi8vd3d3LmNuYmxvZ3MuY29tL3l1ZmFubi9wL0VTNi1ub3RlMS5odG1s">常见的ES6转码工具<i class="fa fa-external-link-alt"></i></span>有兴趣的可以去看看。</p>
<p>接下来我们就一起去见证<code>ES6</code>的神奇之处吧！</p>
<h2 id="1-let和const"><a href="#1-let和const" class="headerlink" title="1.let和const"></a>1.let和const</h2><p><code>let</code>与<code>var</code>类似是用来声明变量的，<code>const</code>用来声明常量。在实际用途中它们存在着许多区别，废话不多说，直接看代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;      </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">100</span>;      </span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">200</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//100</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//b is not defined -- Error</span></span><br></pre></td></tr></table></figure>

<p>是不是感觉很奇怪，为什么a有值而b却<code>not defined</code>呢？因为<code>ES5</code>只有全局作用域和函数作用域，没有块级作用域。而<code>let</code>则实际上为<code>JavaScript</code>新增了块级作用域。用它所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p>
<p><code>let</code>不存在变量提升。那么什么是变量提升呢？简单来说就是无论声明在什么地方，都会被视为声明在顶部。下面来看个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;ES5:&quot;</span>);    </span><br><span class="line"><span class="keyword">var</span> a = [];    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;        </span><br><span class="line">    <span class="keyword">var</span> c = i;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;            </span><br><span class="line">        <span class="built_in">console</span>.log(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">5</span>](); </span><br><span class="line"><span class="comment">//结果:9</span></span><br></pre></td></tr></table></figure>

<p>是不是有许多小伙伴在疑惑为什么输出的不是5呢？变量i是<code>var</code>声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用<code>let</code>则不会出现这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;ES6:&quot;</span>);    </span><br><span class="line"><span class="keyword">var</span> b = [];    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;        </span><br><span class="line">	<span class="keyword">let</span> d = j;</span><br><span class="line">    b[j] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;            </span><br><span class="line">    	<span class="built_in">console</span>.log(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    b[<span class="number">5</span>](); </span><br><span class="line">    <span class="comment">//结果://5</span></span><br></pre></td></tr></table></figure>

<p>同时<code>let</code>也是不允许重复声明的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;        </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">100</span>;        </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">200</span>;        </span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//200</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">// 模块内部不允许用let命令重复声明</span></span><br><span class="line">&#123;        </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;        </span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;        </span><br><span class="line">    <span class="built_in">console</span>.log(a); </span><br><span class="line">    <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面再来说说 <code>const</code>。<code>const</code>也用来声明变量，但是声明的是常量，一旦声明，常量的值就不能改变。它和let一样只在声明的区域内有用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;        </span><br><span class="line">	<span class="keyword">var</span> a   = <span class="number">100</span>;        </span><br><span class="line">	<span class="keyword">const</span> a = <span class="number">200</span>;        </span><br><span class="line">	<span class="built_in">console</span>.log(a); <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>const</code>声明对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.name  = <span class="string">&quot;Zhangsan&quot;</span>;</span><br><span class="line">person.age   = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name);   <span class="comment">//Zhangsan</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age);    <span class="comment">//30</span></span><br><span class="line"><span class="built_in">console</span>.log(person);        <span class="comment">//Object &#123;name: &quot;Zhangsan&quot;, age: 30&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>const</code>对象冻结</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line">person.name  = <span class="string">&quot;Zhangsan&quot;</span>;</span><br><span class="line">person.age   = <span class="number">30</span>;    <span class="built_in">console</span>.log(person.name);   <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age);    <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person);        <span class="comment">//Object</span></span><br></pre></td></tr></table></figure>

<h2 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="2.模板字符串"></a>2.模板字符串</h2><p>相对于<code>es5</code>的’ ‘+变量这种字符串拼接方法，<code>es6</code>的模板字符串要方便许多。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;张三&#x27;</span>;     </span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;     </span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;我的名字是&#x27;</span>+a+<span class="string">&#x27;我今年&#x27;</span>+age+<span class="string">&#x27;岁了&#x27;</span>; <span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">`我的名字是<span class="subst">$&#123;a&#125;</span>我今年<span class="subst">$&#123;age&#125;</span>岁了`</span>; <span class="comment">// es6</span></span><br></pre></td></tr></table></figure>

<p>当然简单的两行代码可能它的优势没有那么的明显，一旦代码量变多，你就能体会到它的便利了。</p>
<h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h2><h5 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    n = n || <span class="number">200</span>; <span class="comment">//当传入n时，n为传入的值，没有则默认200</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>es6</code>为参数提供了默认值。在定义函数时便初始化了这个参数，直接看代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params">n = <span class="number">200</span></span>) </span>&#123;        </span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;     </span><br><span class="line"><span class="built_in">console</span>.log(n()); <span class="comment">// 200</span></span><br><span class="line"><span class="built_in">console</span>.log(n(<span class="number">100</span>)); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>箭头函数的基本用法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">breakfast</span>(<span class="params">dessert,drink</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;        </span><br><span class="line">    	<span class="keyword">return</span> dessert+drink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> breakfast = <span class="function">(<span class="params">dessert,drink</span>) =&gt;</span> dessert + <span class="string">&#x27; &#x27;</span> + drink;     </span><br><span class="line"><span class="built_in">console</span>.log(breakfast(<span class="string">&#x27;面包&#x27;</span>,<span class="string">&#x27;牛奶&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>箭头函数的this指向绑定定义是所在的作用域，而普通函数this指向运行时所在的作用域（全局对象），箭头函数没有自己的this而是引用外层的this。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line">cartView: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;          </span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;          </span><br><span class="line">    <span class="built_in">this</span>.$http.get(<span class="string">&quot;data/cartData.json&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="number">123</span>&#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    		_this.productList = res.data.result.list;</span><br><span class="line">        	<span class="built_in">console</span>.log(_this.productList);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;<span class="comment">// es6</span></span><br><span class="line">cartView()&#123;</span><br><span class="line">    <span class="built_in">this</span>.$http.get(<span class="string">&quot;data/cartData.json&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="number">123</span>&#125;)</span><br><span class="line">        .then((res) &#123;</span><br><span class="line">              <span class="built_in">this</span>.productList = res.data.result.list;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="built_in">this</span>.productList);</span><br><span class="line">          &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-解构"><a href="#4-解构" class="headerlink" title="4.解构"></a>4.解构</h2><p>数组和对象是<code>JS</code>中最常用也是最重要表示形式。为了简化提取信息，<code>ES6</code>新增了解构，这是将一个数据结构分解为更小的部分的过程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5提取对象</span></span><br><span class="line"><span class="keyword">let</span> people = &#123;        </span><br><span class="line">    name : <span class="string">&#x27;json&#x27;</span>,        </span><br><span class="line">    age : <span class="number">18</span>,        </span><br><span class="line">    sex : <span class="string">&#x27;male&#x27;</span></span><br><span class="line">             &#125;;</span><br><span class="line"><span class="keyword">let</span> name = people.name;    </span><br><span class="line"><span class="keyword">let</span> age = people.age;</span><br><span class="line">... <span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> people = &#123;        </span><br><span class="line">    name : <span class="string">&#x27;json&#x27;</span>,        </span><br><span class="line">    age : <span class="number">18</span>,        </span><br><span class="line">    sex : <span class="string">&#x27;male&#x27;</span></span><br><span class="line">             &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age, sex&#125; = people;</span><br></pre></td></tr></table></figure>

<p>相比于<code>es5</code>是不是简便了许多，当然数组的方法与对象的类似。下面我们再来举个栗子，函数参数解构赋值的默认值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun (&#123;x, y&#125; = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;) &#123;        </span><br><span class="line">    <span class="keyword">return</span> [x, y];</span><br><span class="line">                              &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fun(&#123;<span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;)); <span class="comment">//[100, 200]</span></span><br><span class="line"><span class="built_in">console</span>.log(fun(&#123;<span class="attr">x</span>: <span class="number">100</span>&#125;));         <span class="comment">//[100, undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(fun(&#123;&#125;));               <span class="comment">//[undefined, undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(fun());                 <span class="comment">//[0, 0]</span></span><br></pre></td></tr></table></figure>

<p>讲了这么多，可能有人就会问了这个解构到底有什么用呢？其实它适合于各种与数组，对象，函数打交道的场景。下面我们来举个运用最广的例子—变量交换。直接上代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;ES5:&quot;</span>);    </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;    </span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;交换前：&quot;</span>);    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span> + a);    <span class="comment">//a = 100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span> + b);    <span class="comment">//b = 200</span></span><br><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;交换后：&quot;</span>);    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span> + a);    <span class="comment">//a = 200</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span> + b);    <span class="comment">//b = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;ES6:&quot;</span>);    </span><br><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>;    </span><br><span class="line"><span class="keyword">var</span> y = <span class="number">200</span>;    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;交换前：&quot;</span>);    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;x = &quot;</span> + x);    <span class="comment">//x = 100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;y = &quot;</span> + y);    <span class="comment">//y = 200</span></span><br><span class="line">[x, y] = [y, x];    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;交换后：&quot;</span>);   </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;x = &quot;</span> + x);    <span class="comment">//x = 200</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;y = &quot;</span> + y);    <span class="comment">//y = 100</span></span><br></pre></td></tr></table></figure>

<h2 id="5-…操作符"><a href="#5-…操作符" class="headerlink" title="5. …操作符"></a>5. …操作符</h2><ul>
<li>展开操作符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str2 = [<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;梨子&#x27;</span>];    </span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//[&quot;苹果&quot;, &quot;梨子&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(...str2);<span class="comment">//苹果 梨子</span></span><br></pre></td></tr></table></figure>

<ul>
<li>剩余操作符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun(a,b,...c)&#123;        </span><br><span class="line">    <span class="built_in">console</span>.log(a,b,...c);<span class="comment">//...c指展开数组</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;香蕉&#x27;</span>,<span class="string">&#x27;橘子&#x27;</span>,<span class="string">&#x27;梨子&#x27;</span>,<span class="string">&#x27;李子&#x27;</span>);<span class="comment">//苹果 香蕉 橘子 梨子 李子</span></span><br></pre></td></tr></table></figure>

<h2 id="6-class、-extends、-super"><a href="#6-class、-extends、-super" class="headerlink" title="6.class、 extends、 super"></a>6.class、 extends、 super</h2><p>这三个特性涉及了<code>ES5</code>中最令人头疼的的几个部分：原型、构造函数，继承…看到它们是不是开始怀疑人生了。</p>
<p>别怕有来了<code>ES6</code>我们以后再怀疑吧！</p>
<p><code>ES6</code>提供了更接近传统语言的写法，引入了<code>Class</code>（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>() &#123;  <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">prop</span>() &#123;  <span class="comment">// 取值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title">prop</span>(<span class="params">value</span>) &#123; <span class="comment">// 存值</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line">inst.prop = <span class="number">123</span>;<span class="comment">// setter: 123</span></span><br><span class="line"><span class="built_in">console</span>.log(inst.prop);<span class="comment">// &#x27;getter&#x27;</span></span><br></pre></td></tr></table></figure>

<p>extends用法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;    </span><br><span class="line">        <span class="built_in">this</span>.x = x;    </span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(x, y, color) &#123;    </span><br><span class="line">        <span class="built_in">this</span>.color = color; <span class="comment">// ReferenceError</span></span><br><span class="line">        <span class="built_in">super</span>(x, y);    </span><br><span class="line">        <span class="built_in">this</span>.color = color; <span class="comment">// 正确</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有super方法才能返回父类实例。父类的静态方法，也会被子类继承。</p>
<p>注意，<code>super</code>虽然代表了父类<code>Point</code>的构造函数，但是返回的是子类<code>ColorPoint</code>的实例，即<code>super</code>内部的<code>this</code>指的是<code>ColorPoint</code>，因此<code>super()</code>在这里相当于<code>Point.prototype.constructor.call(this)</code>。</p>
<p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。<br>作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    m()&#123;         </span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 报错</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    p() &#123;            </span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;     </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;            </span><br><span class="line">    <span class="keyword">constructor</span>() &#123;            </span><br><span class="line">        <span class="built_in">super</span>();            </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">super</span>.p()); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>

<p>上面代码中，子类B当中的<code>super.p()</code>就是将super当作一个对象使用。这时，<code>super</code>在普通方法之中，指向<code>A.prototype</code>，所以<code>super.p()</code>就相当于<code>A.prototype.p()</code>。这里需要注意，由于<code>super</code>指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。</p>
<h2 id="7-Promise"><a href="#7-Promise" class="headerlink" title="7.Promise"></a>7.Promise</h2><p>在promise之前代码过多的回调或者嵌套，可读性差、耦合度高、扩展性低。通过Promise机制，大大提高了代码可读性；用同步编程的方式来编写异步代码，保存线性的代码逻辑，极大的降低了代码耦合性而提高了程序的可扩展性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$http(<span class="string">&#x27;/api/getData&#x27;</span>)</span><br><span class="line">	.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">		res = res.data;<span class="built_in">this</span>.dataList = res.result;</span><br><span class="line">	&#125;)</span><br><span class="line">	.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这是一个<code>vue</code>的异步请求，用的就是<code>promise</code>机制，这样的好处是不会因为多层的回调而降低代码的可读性。</p>
<p>当然这只是<code>promise</code>的冰山一角，想要更好的掌握它还是需要更加深入的去学习它。</p>
<h2 id="8-Set"><a href="#8-Set" class="headerlink" title="8.Set"></a>8.Set</h2><p>实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p>
<ul>
<li>操作方法：<br><code>add(value)</code>：添加某个值，返回Set结构本身。<br><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。<br><code>has(value)</code>：返回一个布尔值，表示该值是否为Set的成员。<br><code>clear()</code>：清除所有成员，没有返回值。</li>
<li>遍历方法：<br><code>keys()</code>：返回键名的遍历器<br><code>values()</code>：返回键值的遍历器<br><code>entries()</code>：返回键值对的遍历器<br><code>forEach()</code>：使用回调函数遍历每个成员<br>由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;str的长度为：&#x27;</span>+str.length); <span class="comment">// 长度为11</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(str);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;去重后的长度为：&#x27;</span>+s.size);<span class="comment">//长度为7</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Array</span>.from(s));<span class="comment">//Array.from 将Set转换为数组形式</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(item);<span class="comment">// red green blue</span></span><br><span class="line">    arr.add(item);<span class="comment">//将item添加到arr set结构中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">&#x27; : &#x27;</span> + value));</span><br></pre></td></tr></table></figure>

<h2 id="9-import-和-export"><a href="#9-import-和-export" class="headerlink" title="9.import 和 export"></a>9.import 和 export</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全部导入</span></span><br><span class="line"><span class="keyword">import</span> mallHeader <span class="keyword">from</span> <span class="string">&#x27;../components/header.vue&#x27;</span></span><br><span class="line"><span class="comment">//导入部分</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">&#x27;./example&#x27;</span></span><br><span class="line"><span class="comment">// 导出默认, 有且只有一个默认</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br><span class="line"><span class="comment">// 部分导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="title">extend</span> <span class="title">Component</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这些仅仅是es6家族中的冰山一角，想要更加全面的去掌握这一技能，就需要我们更加系统的去学习它。感谢花了这么长时间，阅读文章的小伙伴们，希望能对你们带来帮助。</p>
]]></content>
      <categories>
        <category>javsacript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>let</tag>
        <tag>const</tag>
        <tag>vue</tag>
        <tag>es5</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云ssl证书nginx和apache下如何配置</title>
    <url>/acfb5eef.html</url>
    <content><![CDATA[<p>一个有效、可信的 <code>SSL</code> 数字证书包括一个公共密钥和一个私用密钥。公共密钥用于加密信息，私用密钥用于解译加密的信息。因此，浏览器指向一个安全域时，<code>SSL</code> 将同步确认服务器和客户端，并创建一种加密方式和一个唯一的会话密钥。一般而言，由 <code>CA</code> 业界发出的数字证书，有别于国内浏览器业者比对域名信息等方式，采取更为严格的企业及所有权验证，为电商环境树立更为可信的运作环境。</p>
<a id="more"></a>

<h2 id="一、Nginx环境下安装"><a href="#一、Nginx环境下安装" class="headerlink" title="一、Nginx环境下安装"></a>一、Nginx环境下安装</h2><h3 id="I、获取证书"><a href="#I、获取证书" class="headerlink" title="I、获取证书"></a>I、获取证书</h3><p><code>Nginx</code>文件夹内获得<code>SSL</code>证书文件 1_<code>www.domain.com_bundle.crt</code> 和私钥文件 2_<code>www.domain.com.key</code>,</p>
<p>1_<code>www.domain.com_bundle.crt</code> 文件包括两段证书代码 “—–<code>BEGIN CERTIFICATE</code>—–”和“<code>-----END CERTIFICATE-----</code>”,</p>
<p>2<code>_www.domain.com.key</code> 文件包括一段私钥代码“—–<code>BEGIN RSA PRIVATE KEY</code>—–”和“<code>-----END RSA PRIVATE KEY-----</code>”。</p>
<h3 id="II、证书安装"><a href="#II、证书安装" class="headerlink" title="II、证书安装"></a>II、证书安装</h3><p>将域名 <code>www.domain.com</code> 的证书文件1<code>_www.domain.com_bundle.crt</code> 、私钥文件2_<code>www.domain.com.key</code>保存到同一个目录，例如<code>/usr/local/nginx/conf</code>目录下。</p>
<p>更新<code>Nginx</code>根目录下 <code>conf/nginx.conf</code> 文件如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">        <span class="attribute">server_name</span> www.domain.com; <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> 1_www.domain.com_bundle.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> 2_www.domain.com.key;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#按照这个协议配置</span></span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html; <span class="comment">#站点目录</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>注：</p>
<table>
<thead>
<tr>
<th align="left">配置文件参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">listen 443</td>
<td align="left">SSL访问端口号为443</td>
</tr>
<tr>
<td align="left">ssl on</td>
<td align="left">启用SSL功能</td>
</tr>
<tr>
<td align="left">ssl_certificate</td>
<td align="left">证书文件</td>
</tr>
<tr>
<td align="left">ssl_certificate_key</td>
<td align="left">私钥文件</td>
</tr>
<tr>
<td align="left">ssl_protocols</td>
<td align="left">使用的协议</td>
</tr>
<tr>
<td align="left">ssl_ciphers</td>
<td align="left">配置加密套件，写法遵循openssl标准</td>
</tr>
</tbody></table>
<p>III、使用全站加密，<code>http</code>自动跳转<code>https</code>（可选）</p>
<p>对于用户不知道网站可以进行<code>https</code>访问的情况下，让服务器自动把<code>http</code>的请求重定向到<code>https</code>。</p>
<p>在服务器这边的话配置的话，可以在页面里加js脚本，也可以在后端程序里写重定向，当然也可以在web服务器来实现跳转。<code>Nginx</code>是支持<code>rewrite</code>的（只要在编译的时候没有去掉<code>pcre</code>）</p>
<p>在<code>http</code>的<code>server</code>里增加<code>rewrite ^(.*) https://$host$1 permanent;</code></p>
<p>这样就可以实现80进来的请求，重定向为<code>https</code>了。</p>
<h2 id="二、Apache环境下安装"><a href="#二、Apache环境下安装" class="headerlink" title="二、Apache环境下安装"></a>二、Apache环境下安装</h2><p>I、 获取证书</p>
<p><code>Apache</code>文件夹内获得证书文件 1<code>_root_bundle.crt</code>，2_<code>www.domain.com_cert.crt</code> 和私钥文件 3_<code>www.domain.com.key</code>,</p>
<p>1<code>_root_bundle.crt</code> 文件包括一段证书代码 <code>“-----BEGIN CERTIFICATE-----</code>”和“<code>-----END CERTIFICATE-----</code>”,</p>
<p>2_<code>www.domain.com_cert.crt</code> 文件包括一段证书代码 “-<code>----BEGIN CERTIFICATE-----</code>”和“<code>-----END CERTIFICATE-----</code>”,</p>
<p>3<code>_www.domain.com.key</code> 文件包括一段私钥代码“<code>-----BEGIN RSA PRIVATE KEY-----</code>”和“<code>-----END RSA PRIVATE KEY-----</code>”。</p>
<h3 id="II、-证书安装"><a href="#II、-证书安装" class="headerlink" title="II、 证书安装"></a>II、 证书安装</h3><p>编辑<code>Apache</code>根目录下 <code>conf/httpd.conf</code> 文件，</p>
<p>找到 <code>#LoadModule ssl_module modules/mod_ssl.so</code> 和 <code>#Include conf/extra/httpd-ssl.conf</code>，去掉前面的#号注释；</p>
<p>编辑<code>Apache</code>根目录下 <code>conf/extra/httpd-ssl.conf</code> 文件，修改如下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost 0.0.0.0:443&gt;</span><br><span class="line">    <span class="attribute">DocumentRoot</span> <span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">    ServerName www.domain.com</span><br><span class="line">    SSLEngine <span class="literal">on</span></span><br><span class="line">    SSLCertificateFile /usr/local/apache/conf/2_www.domain.com_cert.crt</span><br><span class="line">    SSLCertificateKeyFile /usr/local/apache/conf/3_www.domain.com.key</span><br><span class="line">    SSLCertificateChainFile /usr/local/apache/conf/1_root_bundle.crt</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>配置完成后，重新启动 <code>Apache</code> 就可以使用<span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9tYWluLmNvbeadpeiuv+mXruS6hi4v">https://www.domain.com来访问了。<i class="fa fa-external-link-alt"></i></span></p>
<p>注：</p>
<table>
<thead>
<tr>
<th align="left">配置文件参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SSLEngine on</td>
<td align="left">启用SSL功能</td>
</tr>
<tr>
<td align="left">SSLCertificateFile</td>
<td align="left">证书文件</td>
</tr>
<tr>
<td align="left">SSLCertificateKeyFile</td>
<td align="left">私钥文件</td>
</tr>
<tr>
<td align="left">SSLCertificateChainFile</td>
<td align="left">证书链文件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssl</tag>
        <tag>ssl证书</tag>
        <tag>https</tag>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一个python单线程、多线程简单爬虫的执行效率</title>
    <url>/c955ff7b.html</url>
    <content><![CDATA[<p>python多线程与其他语言相比有很大的区别，<code>python</code>中的多线程，由于<code>cil锁</code>的缘故，导致<code>cpu</code>同一时间只能执行一个线程，这样产生的问题就是别管你的<code>cpu</code>是几核的，都没什么卵用。但是这种情况是计算密集性才会有的问题，如果牵涉到的是计算密集性，那么<code>python</code>可以通过多线程来做这种操作，这样就解决了多核缺并不能提高效率的问题。</p>
<a id="more"></a>

<p>今天要用的爬虫其实是<code>cpu</code>把任务分配给了其他硬件进行操作，<code>cpu</code>只牵涉到了分配，其他不用自己处理，这样即使是多线程，轮询分配下任务并不降低什么效率，同样类型的<code>IO操作</code>，我们都可以使用多线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">all_urls = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url_list</span>(<span class="params">target_url</span>):</span></span><br><span class="line">    list_infos = []</span><br><span class="line">    <span class="comment"># 访问目标地址</span></span><br><span class="line">    ret = requests.get(url=target_url)</span><br><span class="line">    soup = BeautifulSoup(ret.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    list_box = soup.find(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;list&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    lis = list_box.find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        info = li.find(<span class="string">&#x27;h3&#x27;</span>)</span><br><span class="line">        title = info.find(<span class="string">&#x27;a&#x27;</span>).text</span><br><span class="line">        target = info.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        list_infos.append(&#123;</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> : title,</span><br><span class="line">            <span class="string">&#x27;target&#x27;</span> : target</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> list_infos</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        all_urls.append(get_url_list(<span class="string">&#x27;http://www.chinamedevice.cn/product/12/11/1127/%s.html&#x27;</span>%item))</span><br><span class="line"><span class="comment"># 进程执行的任务返回的结果保存至url列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span>(<span class="params">future</span>):</span></span><br><span class="line">    all_urls.append(future.result())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thred_run</span>():</span></span><br><span class="line">    <span class="comment"># 创建一个包含5条线程的线程池</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">            <span class="comment"># 向线程池提交一个task, url会作为get_url_list()函数的参数</span></span><br><span class="line">            res = pool.submit(get_url_list, <span class="string">&#x27;http://www.chinamedevice.cn/product/12/11/1127/%s.html&#x27;</span> % item)</span><br><span class="line">            <span class="comment"># 为res添加线程完成的回调函数</span></span><br><span class="line">            res.add_done_callback(get_result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.perf_counter()</span><br><span class="line">    thred_run()</span><br><span class="line">    <span class="comment"># run()</span></span><br><span class="line">    end = time.perf_counter()</span><br><span class="line">    print(all_urls, len(all_urls), <span class="string">&#x27;总用时：%s&#x27;</span> % (end - start))</span><br></pre></td></tr></table></figure>

<p>单次测试，使用常规的单进程单线程爬取50页即1500条数据所耗费的时间大约在45秒左右；而我们使用单进程5线程获取同样的数据大概耗费了10秒左右，具体线程数根据自己需求</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>多进程</tag>
        <tag>cil锁</tag>
      </tags>
  </entry>
  <entry>
    <title>超实用的到python代码片段，后续更新</title>
    <url>/7caad671.html</url>
    <content><![CDATA[<p><code>Python</code>是目前最流行的语言之一，它在数据科学、机器学习、<code>web</code>开发、脚本编写、自动化方面被许多人广泛使用。它的简单和易用性造就了它如此流行的原因。</p>
<p>在本文中，我们将会介绍 30 个简短的代码片段，你可以在 30 秒或更短的时间里理解和学习这些代码片段。后续有其他好用的的代码片段，我们也会收录在该文中。</p>
<a id="more"></a>

<h2 id="1-检查重复元素"><a href="#1-检查重复元素" class="headerlink" title="1.检查重复元素"></a>1.检查重复元素</h2><p>下面的方法可以检查给定列表中是否有重复的元素。它使用了 <code>set()</code> 属性，该属性将会从列表中删除重复的元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def all_unique(lst):    </span><br><span class="line">    return len(lst) &#x3D;&#x3D; len(set(lst))  </span><br><span class="line">      </span><br><span class="line">x &#x3D; [1,1,2,2,3,2,3,4,5,6]    </span><br><span class="line">y &#x3D; [1,2,3,4,5]    </span><br><span class="line">all_unique(x) # False    </span><br><span class="line">all_unique(y) # True</span><br></pre></td></tr></table></figure>

<h2 id="2-变位词"><a href="#2-变位词" class="headerlink" title="2.变位词"></a>2.变位词</h2><p>检测两个字符串是否互为变位词（即互相颠倒字符顺序）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import Counter   </span><br><span class="line"></span><br><span class="line">def anagram(first, second):    </span><br><span class="line">    return Counter(first) &#x3D;&#x3D; Counter(second)    </span><br><span class="line">anagram(&quot;abcd3&quot;, &quot;3acdb&quot;) # True</span><br></pre></td></tr></table></figure>

<h2 id="3-检查内存使用情况"><a href="#3-检查内存使用情况" class="headerlink" title="3.检查内存使用情况"></a>3.检查内存使用情况</h2><p>以下代码段可用来检查对象的内存使用情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys    </span><br><span class="line">variable &#x3D; 30     </span><br><span class="line">print(sys.getsizeof(variable)) # 24</span><br></pre></td></tr></table></figure>

<h2 id="4-字节大小计算"><a href="#4-字节大小计算" class="headerlink" title="4.字节大小计算"></a>4.字节大小计算</h2><p>以下方法将以字节为单位返回字符串长度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def byte_size(string):    </span><br><span class="line">    return(len(string.encode( utf-8 )))   </span><br><span class="line">     </span><br><span class="line">byte_size( 😀 ) # 4    </span><br><span class="line">byte_size( Hello World ) # 11</span><br></pre></td></tr></table></figure>

<h2 id="5-重复打印字符串-N-次"><a href="#5-重复打印字符串-N-次" class="headerlink" title="5.重复打印字符串 N 次"></a>5.重复打印字符串 N 次</h2><p>以下代码不需要使用循环即可打印某个字符串 n 次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n &#x3D; 2; </span><br><span class="line">s &#x3D;&quot;Programming&quot;; print(s * n); </span><br><span class="line"></span><br><span class="line"># ProgrammingProgramming</span><br></pre></td></tr></table></figure>

<h2 id="6-首字母大写"><a href="#6-首字母大写" class="headerlink" title="6.首字母大写"></a>6.首字母大写</h2><p>以下代码段使用 title() 方法将字符串内的每个词进行首字母大写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;programming is awesome&quot;    </span><br><span class="line">print(s.title()) # Programming Is Awesome</span><br></pre></td></tr></table></figure>

<h2 id="7-分块"><a href="#7-分块" class="headerlink" title="7.分块"></a>7.分块</h2><p>以下方法使用 range() 将列表分块为指定大小的较小列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from math import ceil </span><br><span class="line"></span><br><span class="line">def chunk(lst, size):    </span><br><span class="line">    return list(    </span><br><span class="line">        map(lambda x: lst[x * size:x * size + size],    </span><br><span class="line">            list(range(0, ceil(len(lst) &#x2F; size)))))    </span><br><span class="line">chunk([1,2,3,4,5],2) # [[1,2],[3,4],5]</span><br></pre></td></tr></table></figure>

<h2 id="8-压缩"><a href="#8-压缩" class="headerlink" title="8.压缩"></a>8.压缩</h2><p>以下方法使用 <code>fliter()</code> 删除列表中的错误值（如：<code>False</code>, <code>None</code>, <code>0</code> 和<code>“”</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def compact(lst):    </span><br><span class="line">    return list(filter(bool, lst))    </span><br><span class="line">compact([0, 1, False, 2,   , 3,  a ,  s , 34]) # [ 1, 2, 3,  a ,  s , 34 ]</span><br></pre></td></tr></table></figure>

<h2 id="9-间隔数"><a href="#9-间隔数" class="headerlink" title="9.间隔数"></a>9.间隔数</h2><p>以下代码段可以用来转换一个二维数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array &#x3D; [[ a ,  b ], [ c ,  d ], [ e ,  f ]]    </span><br><span class="line">transposed &#x3D; zip(*array)    </span><br><span class="line">print(transposed) # [( a ,  c ,  e ), ( b ,  d ,  f )]</span><br></pre></td></tr></table></figure>

<h2 id="10-链式比较"><a href="#10-链式比较" class="headerlink" title="10.链式比较"></a>10.链式比较</h2><p>以下代码可以在一行中用各种操作符进行多次比较。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 3    </span><br><span class="line">print( 2 &lt; a &lt; 8) # True    </span><br><span class="line">print(1 &#x3D;&#x3D; a &lt; 2) # False</span><br></pre></td></tr></table></figure>

<h2 id="11-逗号分隔"><a href="#11-逗号分隔" class="headerlink" title="11.逗号分隔"></a>11.逗号分隔</h2><p>以下代码段可将字符串列表转换为单个字符串，列表中的每个元素用逗号分隔。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hobbies &#x3D; [&quot;basketball&quot;, &quot;football&quot;, &quot;swimming&quot;]</span><br><span class="line">print(&quot;My hobbies are: &quot; + &quot;, &quot;.join(hobbies)) # My hobbies are: basketball, football, swimming</span><br></pre></td></tr></table></figure>

<h2 id="12-计算元音字母数"><a href="#12-计算元音字母数" class="headerlink" title="12.计算元音字母数"></a>12.计算元音字母数</h2><p>以下方法可计算字符串中元音字母（‘<code>a</code>’, ‘<code>e</code>’, ‘<code>i</code>’, ‘<code>o</code>’, ‘<code>u</code>’）的数目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re    </span><br><span class="line">def count_vowels(str):    </span><br><span class="line">    return len(len(re.findall(r [aeiou] , str, re.IGNORECASE)))    </span><br><span class="line">count_vowels( foobar ) # 3    </span><br><span class="line">count_vowels( gym ) # 0</span><br></pre></td></tr></table></figure>



<h2 id="13-首字母恢复小写"><a href="#13-首字母恢复小写" class="headerlink" title="13.首字母恢复小写"></a>13.首字母恢复小写</h2><p>以下方法可用于将给定字符串的第一个字母转换为小写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def decapitalize(string):    </span><br><span class="line">    return str[:1].lower() + str[1:]    </span><br><span class="line">decapitalize( FooBar ) #  fooBar     </span><br><span class="line">decapitalize( FooBar ) #  fooBar</span><br></pre></td></tr></table></figure>

<h2 id="14-平面化"><a href="#14-平面化" class="headerlink" title="14.平面化"></a>14.平面化</h2><p>以下方法使用递归来展开潜在的深度列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def spread(arg):</span><br><span class="line">    ret &#x3D; []</span><br><span class="line">    for i in arg:</span><br><span class="line">        if isinstance(i, list):</span><br><span class="line">            ret.extend(i)</span><br><span class="line">        else:</span><br><span class="line">            ret.append(i)</span><br><span class="line">    return ret</span><br><span class="line">def deep_flatten(lst):</span><br><span class="line">    result &#x3D; []</span><br><span class="line">    result.extend(</span><br><span class="line">        spread(list(map(lambda x: deep_flatten(x) if type(x) &#x3D;&#x3D; list else x, lst))))</span><br><span class="line">    return result</span><br><span class="line">deep_flatten([1, [2], [[3], 4], 5]) # [1,2,3,4,5]</span><br></pre></td></tr></table></figure>

<h2 id="15-差异"><a href="#15-差异" class="headerlink" title="15.差异"></a>15.差异</h2><p>该方法只保留第一个迭代器中的值，从而发现两个迭代器之间的差异。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def difference(a, b):</span><br><span class="line">    set_a &#x3D; set(a)</span><br><span class="line">    set_b &#x3D; set(b)</span><br><span class="line">    comparison &#x3D; set_a.difference(set_b)</span><br><span class="line">    return list(comparison)</span><br><span class="line">difference([1,2,3], [1,2,4]) # [3]</span><br></pre></td></tr></table></figure>

<h2 id="16-寻找差异"><a href="#16-寻找差异" class="headerlink" title="16.寻找差异"></a>16.寻找差异</h2><p>下面的方法在将给定的函数应用于两个列表的每个元素后，返回两个列表之间的差值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def difference_by(a, b, fn):</span><br><span class="line">    b &#x3D; set(map(fn, b))</span><br><span class="line">    return [item for item in a if fn(item) not in b]</span><br><span class="line">from math import floor</span><br><span class="line">difference_by([2.1, 1.2], [2.3, 3.4],floor) # [1.2]</span><br><span class="line">difference_by([&#123;  x : 2 &#125;, &#123;  x : 1 &#125;], [&#123;  x : 1 &#125;], lambda v : v[ x ]) # [ &#123; x: 2 &#125; ]</span><br></pre></td></tr></table></figure>

<h2 id="17-链式函数调用"><a href="#17-链式函数调用" class="headerlink" title="17.链式函数调用"></a>17.链式函数调用</h2><p>以下方法可在一行中调用多个函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add(a, b):</span><br><span class="line">    return a + b</span><br><span class="line">def subtract(a, b):</span><br><span class="line">    return a - b</span><br><span class="line">a, b &#x3D; 4, 5</span><br><span class="line">print((subtract if a &gt; b else add)(a, b)) # 9</span><br></pre></td></tr></table></figure>

<h2 id="18-检查重复值"><a href="#18-检查重复值" class="headerlink" title="18.检查重复值"></a>18.检查重复值</h2><p>以下方法使用 <code>set()</code> 方法仅包含唯一元素的事实来检查列表是否具有重复值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def has_duplicates(lst):</span><br><span class="line">    return len(lst) !&#x3D; len(set(lst))</span><br><span class="line">    </span><br><span class="line">x &#x3D; [1,2,3,4,5,5]</span><br><span class="line">y &#x3D; [1,2,3,4,5]</span><br><span class="line">has_duplicates(x) # True</span><br><span class="line">has_duplicates(y) # False</span><br></pre></td></tr></table></figure>

<h2 id="19-合并两个词典"><a href="#19-合并两个词典" class="headerlink" title="19.合并两个词典"></a>19.合并两个词典</h2><p>以下方法可用于合并两个词典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def merge_two_dicts(a, b):</span><br><span class="line">    c &#x3D; a.copy()   # make a copy of a </span><br><span class="line">    c.update(b)    # modify keys and values of a with the ones from b</span><br><span class="line">    return c</span><br><span class="line">a &#x3D; &#123;  x : 1,  y : 2&#125;</span><br><span class="line">b &#x3D; &#123;  y : 3,  z : 4&#125;</span><br><span class="line">print(merge_two_dicts(a, b)) # &#123; y : 3,  x : 1,  z : 4&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>Python 3.5</code>及更高版本中，你还可以执行以下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def merge_dictionaries(a, b)</span><br><span class="line">   return &#123;**a, **b&#125;</span><br><span class="line">a &#x3D; &#123;  x : 1,  y : 2&#125;</span><br><span class="line">b &#x3D; &#123;  y : 3,  z : 4&#125;</span><br><span class="line">print(merge_dictionaries(a, b)) # &#123; y : 3,  x : 1,  z : 4&#125;</span><br></pre></td></tr></table></figure>



<h2 id="20-将两个列表转换成一个词典"><a href="#20-将两个列表转换成一个词典" class="headerlink" title="20.将两个列表转换成一个词典"></a>20.将两个列表转换成一个词典</h2><p>以下方法可将两个列表转换成一个词典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def to_dictionary(keys, values):</span><br><span class="line">    return dict(zip(keys, values))</span><br><span class="line">    </span><br><span class="line">keys &#x3D; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]    </span><br><span class="line">values &#x3D; [2, 3, 4]</span><br><span class="line">print(to_dictionary(keys, values)) # &#123; a : 2,  c : 4,  b : 3&#125;</span><br></pre></td></tr></table></figure>

<h2 id="21-使用枚举"><a href="#21-使用枚举" class="headerlink" title="21.使用枚举"></a>21.使用枚举</h2><p>以下方法将字典作为输入，然后仅返回该字典中的键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list &#x3D; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">for index, element in enumerate(list): </span><br><span class="line">    print(&quot;Value&quot;, element, &quot;Index &quot;, index, )</span><br><span class="line"></span><br><span class="line"># ( Value ,  a ,  Index  , 0)</span><br><span class="line"></span><br><span class="line"># ( Value ,  b ,  Index  , 1)</span><br><span class="line"></span><br><span class="line">#( Value ,  c ,  Index  , 2)</span><br><span class="line"></span><br><span class="line"># ( Value ,  d ,  Index  , 3)</span><br></pre></td></tr></table></figure>

<h2 id="22-计算所需时间"><a href="#22-计算所需时间" class="headerlink" title="22.计算所需时间"></a>22.计算所需时间</h2><p>以下代码段可用于计算执行特定代码所需的时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">start_time &#x3D; time.time()</span><br><span class="line">a &#x3D; 1</span><br><span class="line">b &#x3D; 2</span><br><span class="line">c &#x3D; a + b</span><br><span class="line">print(c) #3</span><br><span class="line">end_time &#x3D; time.time()</span><br><span class="line">total_time &#x3D; end_time - start_time</span><br><span class="line">print(&quot;Time: &quot;, total_time)</span><br><span class="line"></span><br><span class="line"># ( Time:  , 1.1205673217773438e-05)</span><br></pre></td></tr></table></figure>

<h2 id="23-Try-else-指令"><a href="#23-Try-else-指令" class="headerlink" title="23.Try else 指令"></a>23.<code>Try else</code> 指令</h2><p>你可以将 <code>else</code> 子句作为 <code>try/except</code> 块的一部分，如果没有抛出异常，则执行该子句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    2*3</span><br><span class="line">except TypeError:</span><br><span class="line">    print(&quot;An exception was raised&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Thank God, no exceptions were raised.&quot;)</span><br><span class="line">#Thank God, no exceptions were raised.</span><br></pre></td></tr></table></figure>

<h2 id="24-查找最常见元素"><a href="#24-查找最常见元素" class="headerlink" title="24.查找最常见元素"></a>24.查找最常见元素</h2><p>以下方法返回列表中出现的最常见元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def most_frequent(list):</span><br><span class="line">    return max(set(list), key &#x3D; list.count)</span><br><span class="line"></span><br><span class="line">list &#x3D; [1,2,1,2,3,2,1,4,2]</span><br><span class="line">most_frequent(list)</span><br></pre></td></tr></table></figure>

<h2 id="25-回文"><a href="#25-回文" class="headerlink" title="25.回文"></a>25.回文</h2><p>以下方法可检查给定的字符串是否为回文结构。该方法首先将字符串转换为小写，然后从中删除非字母数字字符。最后，它会将新的字符串与反转版本进行比较。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def palindrome(string):</span><br><span class="line">    from re import sub</span><br><span class="line">    s &#x3D; sub( [W_] ,   , string.lower())</span><br><span class="line">    return s &#x3D;&#x3D; s[::-1]</span><br><span class="line">palindrome( taco cat ) # True</span><br></pre></td></tr></table></figure>

<h2 id="26-没有-if-else-语句的简单计算器"><a href="#26-没有-if-else-语句的简单计算器" class="headerlink" title="26.没有 if-else 语句的简单计算器"></a>26.没有 <code>if-else</code> 语句的简单计算器</h2><p>以下代码段将展示如何编写一个不使用 <code>if-else</code> 条件的简单计算器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import operator</span><br><span class="line">action &#x3D; &#123;</span><br><span class="line">    &quot;+&quot;: operator.add,</span><br><span class="line">    &quot;-&quot;: operator.sub,</span><br><span class="line">    &quot;&#x2F;&quot;: operator.truediv,</span><br><span class="line">    &quot;*&quot;: operator.mul,</span><br><span class="line">    &quot;**&quot;: pow</span><br><span class="line">&#125;</span><br><span class="line">print(action[ - ](50, 25)) # 25</span><br></pre></td></tr></table></figure>

<h2 id="27-元素顺序打乱"><a href="#27-元素顺序打乱" class="headerlink" title="27.元素顺序打乱"></a>27.元素顺序打乱</h2><p>以下算法通过实现 <code>Fisher-Yates</code>算法 在新列表中进行排序来将列表中的元素顺序随机打乱。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from copy import deepcopy</span><br><span class="line">from random import randint</span><br><span class="line">def shuffle(lst):</span><br><span class="line">    temp_lst &#x3D; deepcopy(lst)</span><br><span class="line">    m &#x3D; len(temp_lst)</span><br><span class="line">    while (m):</span><br><span class="line">        m -&#x3D; 1</span><br><span class="line">        i &#x3D; randint(0, m)</span><br><span class="line">        temp_lst[m], temp_lst[i] &#x3D; temp_lst[i], temp_lst[m]</span><br><span class="line">    return temp_lst</span><br><span class="line"></span><br><span class="line">foo &#x3D; [1,2,3]</span><br><span class="line">shuffle(foo) # [2,3,1] , foo &#x3D; [1,2,3]</span><br></pre></td></tr></table></figure>

<h2 id="28-列表扁平化"><a href="#28-列表扁平化" class="headerlink" title="28.列表扁平化"></a>28.列表扁平化</h2><p>以下方法可使列表扁平化，类似于<code>JavaScript</code>中的<code>[].concat(…arr)</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def spread(arg):</span><br><span class="line">    ret &#x3D; []</span><br><span class="line">    for i in arg:</span><br><span class="line">        if isinstance(i, list):</span><br><span class="line">            ret.extend(i)</span><br><span class="line">        else:</span><br><span class="line">            ret.append(i)</span><br><span class="line">    return ret</span><br><span class="line">spread([1,2,3,[4,5,6],[7],8,9]) # [1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>

<h2 id="29-变量交换"><a href="#29-变量交换" class="headerlink" title="29.变量交换"></a>29.变量交换</h2><p>以下是交换两个变量的快速方法，而且无需使用额外的变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def swap(a, b):</span><br><span class="line">  return b, a</span><br><span class="line">a, b &#x3D; -1, 14</span><br><span class="line">swap(a, b) # (14, -1)</span><br></pre></td></tr></table></figure>

<h2 id="30-获取缺失键的默认值"><a href="#30-获取缺失键的默认值" class="headerlink" title="30.获取缺失键的默认值"></a>30.获取缺失键的默认值</h2><p>以下代码段显示了如何在字典中没有包含要查找的键的情况下获得默认值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123; a : 1,  b : 2&#125;</span><br><span class="line">print(d.get( c , 3)) # 3</span><br></pre></td></tr></table></figure>

<p>以上是你在日常工作中可能会发现的有用方法的简短列表。它主要基于这个<code>GitHub</code>项目（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzMwLXNlY29uZHMvMzBfc2Vjb25kc19vZl9rbm93bGVkZ2UlRUYlQkMlODklRUYlQkMlOEMlRTQlQkQlQTAlRTUlOEYlQUYlRTQlQkIlQTUlRTUlOUMlQTglRTUlODUlQjYlRTQlQjglQUQlRTYlODklQkUlRTUlODglQjAlRTglQUUlQjglRTUlQTQlOUElRTUlODUlQjYlRTQlQkIlOTYlRTYlOUMlODklRTclOTQlQTglRTclOUElODQlRTQlQkIlQTMlRTclQTAlODElRTclODklODclRTYlQUUlQjUlRUYlQkMlOEMlRTUlOEMlODUlRTYlOEIlQUNQeXRob24lRTUlOEYlOEElRTUlODUlQjYlRTQlQkIlOTYlRTclQkMlOTYlRTclQTglOEIlRTglQUYlQUQlRTglQTglODAlRTUlOTIlOEMlRTYlOEElODAlRTYlOUMlQUYlRTMlODAlODI=">https://github.com/30-seconds/30_seconds_of_knowledge），你可以在其中找到许多其他有用的代码片段，包括Python及其他编程语言和技术。<i class="fa fa-external-link-alt"></i></span><br>作者：Fatos Morina（<span class="exturl" data-url="aHR0cHM6Ly90b3dhcmRzZGF0YXNjaWVuY2UuY29tL0BGYXRvc01vcmluYSVFRiVCQyU4OQ==">https://towardsdatascience.com/@FatosMorina）<i class="fa fa-external-link-alt"></i></span><br>数据科学家 | 软件工程师 | 作者<br>个人主页：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmF0b3Ntb3JpbmEuY29tLw==">https://www.fatosmorina.com/<i class="fa fa-external-link-alt"></i></span><br>via <span class="exturl" data-url="aHR0cHM6Ly90b3dhcmRzZGF0YXNjaWVuY2UuY29tLzMwLWhlbHBmdWwtcHl0aG9uLXNuaXBwZXRzLXRoYXQteW91LWNhbi1sZWFybi1pbi0zMC1zZWNvbmRzLW9yLWxlc3MtNjliYjQ5MjA0MTcy">https://towardsdatascience.com/30-helpful-python-snippets-that-you-can-learn-in-30-seconds-or-less-69bb49204172<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python片段</tag>
        <tag>变位词</tag>
        <tag>检查重复</tag>
        <tag>首字母大写</tag>
        <tag>字节计算</tag>
        <tag>重复打印</tag>
        <tag>分块</tag>
        <tag>压缩</tag>
        <tag>链式比较</tag>
        <tag>平面化</tag>
        <tag>差异</tag>
        <tag>合并字典</tag>
        <tag>合并列表</tag>
        <tag>使用枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>进制之间互相转换</title>
    <url>/dde7447f.html</url>
    <content><![CDATA[<p> 进制是计算机中数据的一种表示方法。 N进制的数可以用0~(N-1) 的数表示, 超过9的用字母A-F 表示 . </p>
<p> 我们常用的进制包括：二进制、八进制、十进制与十六进制，它们之间区别在于数运算时是逢几进一位。比如二进制是逢2进一位，十进制也就是我们常用的0-9是逢10进一位。其他的同理。<br>好的，接下来就是进制之间的互相转换了。 </p>
<a id="more"></a>

<h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><p> 2进制 由 0-1组成 </p>
<h2 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h2><p> 8进制 由 0-7组成 </p>
<h2 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h2><p> 10进制 , 就是 用 0~9 的数表示 , 逢 10 进 1 </p>
<h2 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h2><p> 16 进制由 0-9，A-F组成， 与10进制的对应关系是：0-9 对应 0-9；A-F对应10-15； 字母不区分大小写。 </p>
<h2 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h2><p> 十进制数除2取余法，即十进制数除2，余数为权位上的数，得到的商值继续除，直到商为0为止，最后得到的余数反转就是转换后的结果</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120151050.png"></p>
<p>最后将每次得到的余数顺序反转，就是转换后的结果，即149转换为二进制后结果为：10010101</p>
<h2 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h2><p> 把二进制数按权展开、相加即得十进制数。 </p>
<p>我们以索引为0开始算起</p>
<p>二进制第0位对应的权值是2的0次方，第1位为2的1次方……第N为为2,的N次方，每个位上的权值最后相加得到的结果即为换算后的10进制。(计算方式从右向左哟)</p>
<h3 id="10010101转十进制"><a href="#10010101转十进制" class="headerlink" title="10010101转十进制"></a>10010101转十进制</h3><p>换算成上面的横式为(从右向左哟)：</p>
<p>1x2<sup>0</sup>+0x2<sup>1</sup>+1x2<sup>2</sup>+0x2<sup>3</sup>+1x2<sup>4</sup>+0x2<sup>5</sup>+0x2<sup>6</sup>+1x2<sup>7</sup> = 149</p>
<p>0乘以任何数都等于0，简化后即</p>
<p>1x2<sup>0</sup>+1x2<sup>2</sup>+1x2<sup>4</sup>+1x2<sup>7</sup> = 149</p>
<p>即</p>
<p>1 + 4 + 16 + 128 = 149</p>
<p>如图</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191121092859.png"></p>
<p>其实常用的2的N次方我们大多数都能记得2的8次方等于256，所以9位及以内的二进制我们可以根据图表算出来</p>
<table>
<thead>
<tr>
<th>十进制</th>
<th>256</th>
<th>128</th>
<th>64</th>
<th>32</th>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody><tr>
<td>二进制</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>所以刚才的二进制数字依次填入下表中，可以清晰看到每位对应的数字，0可以忽略掉，结果即：128+16+4+1=149</p>
<h2 id="八进制转二进制"><a href="#八进制转二进制" class="headerlink" title="八进制转二进制"></a>八进制转二进制</h2><p> 八进制数通过除2取余法，得到二进制数，对每个八进制为3个二进制，不足时在最左边补零 </p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120160624.png"></p>
<h2 id="十六进制转二进制"><a href="#十六进制转二进制" class="headerlink" title="十六进制转二进制"></a>十六进制转二进制</h2><p> 十六进制数通过除2取余法，得到二进制数，对每个十六进制为4个二进制，不足时在最左边补零。 </p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120163737.png"></p>
<h2 id="二进制转八进制"><a href="#二进制转八进制" class="headerlink" title="二进制转八进制"></a>二进制转八进制</h2><p>3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）。 </p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120165912.png"></p>
<h2 id="二进制转十六进制"><a href="#二进制转十六进制" class="headerlink" title="二进制转十六进制"></a>二进制转十六进制</h2><p>与二进制转八进制方法近似，八进制是取三合一，十六进制是取四合一。（注意事项，4位二进制转成十六进制是从右到左开始转换，不足时补0）。 </p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120171903.png"></p>
<h2 id="十进制转八进制"><a href="#十进制转八进制" class="headerlink" title="十进制转八进制"></a>十进制转八进制</h2><p>第一：间接法—把十进制转成二进制，然后再由二进制转成八进制，按照上述做法依次转换，故这里不做演示。</p>
<p>第二：直接法—把十进制转八进制按照除8取余，直到商为0为止。（具体用法如下图）</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120174847.png"></p>
<h2 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h2><p>第一：间接法—把十进制转成二进制，然后再由二进制转成十六进制，按照上述做法依次转换，故这里不做演示。</p>
<p>第二：直接法—把十进制转十六进制按照除16取余，直到商为0为止。（具体用法如下图）</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120175500.png"></p>
<h2 id="八进制转十进制"><a href="#八进制转十进制" class="headerlink" title="八进制转十进制"></a>八进制转十进制</h2><p> 把八进制数按权展开、相加即得十进制数。 </p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120175613.png"></p>
<h2 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h2><p> 把十六进制数按权展开、相加即得十进制数。 </p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191120180249.png"></p>
<h2 id="八进制十六进制互相转换"><a href="#八进制十六进制互相转换" class="headerlink" title="八进制十六进制互相转换"></a>八进制十六进制互相转换</h2><p>八进制与十六进制之间的转换有两种方法</p>
<p>第一种：他们之间的转换可以先转成二进制然后再相互转换。</p>
<p>第二种：他们之间的转换可以先转成十进制然后再相互转换。</p>
<p>两种都是间接转换，所以按照上方方法依次转换即可。</p>
]]></content>
      <categories>
        <category>rd</category>
      </categories>
      <tags>
        <tag>进制转换</tag>
        <tag>二进制转换</tag>
        <tag>十进制转换</tag>
        <tag>八进制转换</tag>
        <tag>十六进制转换</tag>
        <tag>二进制</tag>
        <tag>十进制</tag>
        <tag>八进制</tag>
        <tag>十六进制</tag>
        <tag>二进制转十进制</tag>
        <tag>十进制转二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云ssl证书nginx和apache下如何配置</title>
    <url>/4d5a2676.html</url>
    <content><![CDATA[<p><code>SSL</code>证书是数字证书的一种，类似于驾驶证、护照和营业执照的电子副本。因为配置在服务器上，也称为<code>SSL</code>服务器证书。</p>
<p><code>SSL</code> 证书就是遵守 <code>SSL</code>协议，由受信任的数字证书颁发机构<code>CA</code>，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。</p>
<a id="more"></a>

<h2 id="一、首先下载购买生成的证书"><a href="#一、首先下载购买生成的证书" class="headerlink" title="一、首先下载购买生成的证书"></a>一、首先下载购买生成的证书</h2><p>其中包含<code>pem</code>和<code>key</code>两个文件</p>
<h2 id="二、安装证书"><a href="#二、安装证书" class="headerlink" title="二、安装证书"></a>二、安装证书</h2><p>安装证书<code>php</code>分<code>Apache</code>和<code>Nginx</code>，<code>iis</code>环境这里我用不上，就不做记录。</p>
<h3 id="I、Nginx环境下安装"><a href="#I、Nginx环境下安装" class="headerlink" title="I、Nginx环境下安装"></a>I、Nginx环境下安装</h3><h5 id="文件说明："><a href="#文件说明：" class="headerlink" title="文件说明："></a>文件说明：</h5><ol>
<li><p>证书文件<code>214855730130402.pem</code>，包含两段内容，请不要删除任何一段内容。</p>
</li>
<li><p>如果是证书系统创建的<code>CSR</code>，还包含：证书私钥文件<code>214855730130402.key</code>。</p>
</li>
</ol>
<p>( 1 ) 在<code>Nginx</code>的安装目录下创建<code>cert</code>目录，并且将下载的全部文件拷贝到<code>cert</code>目录中。如果申请证书时是自己创建的<code>CSR</code>文件，请将对应的私钥文件放到<code>cert</code>目录下并且命名为<code>214855730130402.key</code>；<br>( 2 ) 打开 <code>Nginx</code> 安装目录下 <code>conf</code> 目录中的 <code>nginx.conf</code> 文件，找到：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTPS server</span></span><br><span class="line"><span class="comment"># #server &#123;</span></span><br><span class="line"><span class="comment">#     listen 443;</span></span><br><span class="line"><span class="comment">#     server_name localhost;</span></span><br><span class="line"><span class="comment">#     ssl on;</span></span><br><span class="line"><span class="comment">#     ssl_certificate cert.pem;</span></span><br><span class="line"><span class="comment">#     ssl_certificate_key cert.key;</span></span><br><span class="line"><span class="comment">#     ssl_session_timeout 5m;</span></span><br><span class="line"><span class="comment">#     ssl_protocols SSLv2 SSLv3 TLSv1;</span></span><br><span class="line"><span class="comment">#     ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span></span><br><span class="line"><span class="comment">#     ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment">#     location / &#123;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>

<p>( 3 ) 将其修改为 (以下属性中<code>ssl</code>开头的属性与证书配置有直接关系，其它属性请结合自己的实际情况复制或调整) :</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">root</span> html;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>   cert/<span class="number">214855730130402</span>.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  cert/<span class="number">214855730130402</span>.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存退出。</p>
<p>( 4 )重启 <code>Nginx</code>。</p>
<p>( 5 ) 通过 <code>https</code> 方式访问您的站点，测试站点证书的安装配置。</p>
<h3 id="II、Apache环境下安装"><a href="#II、Apache环境下安装" class="headerlink" title="II、Apache环境下安装"></a>II、Apache环境下安装</h3><p>文件说明：</p>
<p>\1. 证书文件<code>214855730130402.pem</code>，包含两段内容，请不要删除任何一段内容。</p>
<p>\2. 如果是证书系统创建的<code>CSR</code>，还包含：证书私钥文件<code>214855730130402.key</code>、证书公钥文件<code>public.pem</code>、证书链文件<code>chain.pem</code>。</p>
<p>( 1 ) 在<code>Apache</code>的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。如果申请证书时是自己创建的<code>CSR</code>文件，请将对应的私钥文件放到cert目录下并且命名为<code>214855730130402.key</code>；</p>
<p>( 2 ) 打开 <code>apache</code> 安装目录下 <code>conf</code> 目录中的 <code>httpd.conf</code> 文件，找到以下内容并去掉“#”：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LoadModule ssl_module modules/mod_ssl.so (如果找不到请确认是否编译过 openssl 插件)</span></span><br><span class="line"><span class="comment">#Include conf/extra/httpd-ssl.conf</span></span><br></pre></td></tr></table></figure>

<p>( 3 ) 打开 <code>apache</code> 安装目录下 <code>conf/extra/httpd-ssl.conf</code> 文件 (也可能是<code>conf.d/ssl.conf</code>，与操作系统及安装方式有关)， 在配置文件中查找以下配置语句:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 SSL 协议支持协议，去掉不安全的协议</span></span><br><span class="line"><span class="attribute">SSLProtocol</span> all -SSLv2 -SSLv3</span><br><span class="line"><span class="comment"># 修改加密套件如下</span></span><br><span class="line">SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM</span><br><span class="line">SSLHonorCipherOrder <span class="literal">on</span></span><br><span class="line"><span class="comment"># 证书公钥配置</span></span><br><span class="line">SSLCertificateFile cert/public.pem</span><br><span class="line"><span class="comment"># 证书私钥配置</span></span><br><span class="line">SSLCertificateKeyFile cert/<span class="number">214855730130402</span>.key</span><br><span class="line"><span class="comment"># 证书链配置，如果该属性开头有 &#x27;#&#x27;字符，请删除掉</span></span><br><span class="line">SSLCertificateChainFile cert/chain.pem</span><br></pre></td></tr></table></figure>

<p>( 4 ) 重启 <code>Apache</code>。</p>
<p>( 5 ) 通过 <code>https</code> 方式访问您的站点,测试站点证书的安装配置。</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>ssl</tag>
        <tag>ssl证书</tag>
        <tag>https</tag>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之强大的Grid布局</title>
    <url>/29a83e80.html</url>
    <content><![CDATA[<p>今天在知乎上看到一篇写<code>Grid</code>布局的文章，因为用框架用多了，就会对底层属性陌生，这边文章写得很棒，也很详细，这里拿来做下笔记。</p>
<a id="more"></a>

<h2 id="Grid-布局是什么？"><a href="#Grid-布局是什么？" class="headerlink" title="Grid 布局是什么？"></a>Grid 布局是什么？</h2><p><code>Grid</code> 布局即网格布局，是一种新的 <code>CSS</code> 布局模型，比较擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系。号称是最强大的的 <code>CSS</code> 布局方案，是目前唯一一种 <code>CSS</code> 二维布局。利用 <code>Grid</code> 布局，我们可以轻松实现类似下图布局。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174053.png" alt="img"></p>
<h2 id="Grid-布局和-flex-布局"><a href="#Grid-布局和-flex-布局" class="headerlink" title="Grid 布局和 flex 布局"></a>Grid 布局和 flex 布局</h2><p>讲到布局，我们就会想到 <code>flex</code> 布局，甚至有人认为竟然有 <code>flex</code> 布局了，似乎没有必要去了解 <code>Grid</code> 布局。但 <code>flex</code> 布局和 <code>Grid</code> 布局有实质的区别，那就是 <strong><code>flex</code> 布局是一维布局，<code>Grid</code>布局是二维布局</strong>。<code>flex</code> 布局一次只能处理一个维度上的元素布局，一行或者一列。<code>Grid</code> 布局是将容器划分成了“行”和“列”，产生了一个个的网格，我们可以将网格元素放在与这些行和列相关的位置上，从而达到我们布局的目的。</p>
<p><strong><code>Grid</code> 布局远比 <code>flex</code> 布局强大！</strong></p>
<p>flex布局示例:<img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174152.png" alt="img"></p>
<p>Grid 布局示例：<img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174212.png" alt="img"></p>
<h2 id="Grid-基础概念"><a href="#Grid-基础概念" class="headerlink" title="Grid 基础概念"></a>Grid 基础概念</h2><p>我们使用 Grid 实现一个小例子，演示 Grid 的一些基础概念。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one item&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two item&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three item&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;four item&quot;</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;five item&quot;</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;six item&quot;</span>&gt;</span>Six<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="comment">/* 声明一个容器 */</span></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/*  声明列的宽度  */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">200px</span>);</span><br><span class="line">  <span class="comment">/*  声明行间距和列间距  */</span></span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/*  声明行的高度  */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#19CAAD</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.two</span> &#123; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#8CC7B5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.three</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#D1BA74</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.four</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#BEE7E9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.five</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#E6CEAC</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.six</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ECAD9E</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174305.png" alt="img"></p>
<h3 id="容器和项目"><a href="#容器和项目" class="headerlink" title="容器和项目"></a>容器和项目</h3><p>我们通过在元素上声明 <code>display：grid</code> 或 <code>display：inline-grid</code> 来创建一个网格容器。一旦我们这样做，这个元素的所有直系子元素将成为网格项目。比如上面 <code>.wrapper</code> 所在的元素为一个网格容器，其直系子元素将成为网格项目。</p>
<h3 id="网格轨道"><a href="#网格轨道" class="headerlink" title="网格轨道"></a>网格轨道</h3><p><code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性来定义网格中的行和列。容器内部的水平区域称为行，垂直区域称为列。上图中 <code>One</code>、<code>Two</code>、<code>Three</code> 组成了一行，<code>One</code>、<code>Four</code> 则是一列</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174325.png" alt="img"></p>
<h3 id="网格单元"><a href="#网格单元" class="headerlink" title="网格单元"></a>网格单元</h3><p>一个网格单元是在一个网格元素中最小的单位， 从概念上来讲其实它和表格的一个单元格很像。上图中 <code>One</code>、<code>Two</code>、<code>Three</code>、<code>Four</code>…都是一个个的网格单元。</p>
<h3 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h3><p>划分网格的线，称为”网格线”。应该注意的是，当我们定义网格时，我们定义的是网格轨道，而不是网格线。Grid 会为我们创建编号的网格线来让我们来定位每一个网格元素。m 列有 m + 1 根垂直的网格线，n 行有 n + 1  跟水平网格线。比如上图示例中就有 4 根垂直网格线。一般而言，是从左到右，从上到下，1，2，3 进行编号排序。当然也可以从右到左，从下到上，按照 -1，-2，-3…顺序进行编号排序</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174350.png" alt="img"></p>
<h2 id="容器属性和项目属性介绍"><a href="#容器属性和项目属性介绍" class="headerlink" title="容器属性和项目属性介绍"></a>容器属性和项目属性介绍</h2><p><code>Grid</code> 布局相关的属性以及值众多，需要记忆的不少，建议可以跟 <code>demo</code> 一起结合起来，边敲代码边理解，再利用一些空闲时间记忆一下。笔者会在介绍每个属性的时候，做个小 <code>demo</code> 演示，建议大家可以自己修改看看效果加深记忆</p>
<p><code>Grid</code> 布局属性可以分为两大类，一类是容器属性，一类是项目属性。我们先来看</p>
<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="display-属性"><a href="#display-属性" class="headerlink" title="display 属性"></a>display 属性</h4><p>我们通过在元素上声明 <code>display：grid</code> 或 <code>display：inline-grid</code> 来创建一个网格容器。声明 <code>display：grid</code> 则该容器是一个块级元素，设置成 <code>display: inline-grid</code> 则容器元素为行内元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174453.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper-1 &#123;</span><br><span class="line">  display: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174515.png" alt="img"></p>
<h4 id="grid-template-columns-属性和-grid-template-rows-属性"><a href="#grid-template-columns-属性和-grid-template-rows-属性" class="headerlink" title="grid-template-columns 属性和 grid-template-rows 属性"></a>grid-template-columns 属性和 grid-template-rows 属性</h4><p><code>grid-template-columns</code> 属性设置列宽，<code>grid-template-rows</code> 属性设置行高，这两个属性在 <code>Grid</code> 布局中尤为重要，它们的值是有多种多样的，而且它们的设置是比较相似的</p>
<p>下面针对 <code>grid-template-columns</code> 属性进行讲解</p>
<h5 id="固定的列宽和行高"><a href="#固定的列宽和行高" class="headerlink" title="固定的列宽和行高"></a><strong>固定的列宽和行高</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  &#x2F;*  声明了三列，宽度分别为 200px 100px 200px *&#x2F;</span><br><span class="line">  grid-template-columns: 200px 100px 200px;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  &#x2F;*  声明了两行，行高分别为 50px 50px  *&#x2F;</span><br><span class="line">  grid-template-rows: 50px 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上表示固定列宽为 200px 100px 200px，行高为 50px 50px</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174554.png" alt="img"></p>
<h5 id="repeat-函数"><a href="#repeat-函数" class="headerlink" title="repeat() 函数"></a><strong>repeat() 函数</strong></h5><p>可以简化重复的值。该函数接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值。比如上面行高都是一样的，我们可以这么去实现，实际效果是一模一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper-1 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 200px 100px 200px;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  &#x2F;*  2行，而且行高都为 50px  *&#x2F;</span><br><span class="line">  grid-template-rows: repeat(2, 50px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="auto-fill-关键字"><a href="#auto-fill-关键字" class="headerlink" title="auto-fill 关键字"></a><strong>auto-fill 关键字</strong></h5><p>表示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格。<code>grid-template-columns: repeat(auto-fill, 200px)</code> 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素，代码以及效果如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper-2 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: repeat(auto-fill, 200px);</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174637.png" alt="img"></p>
<h5 id="fr-关键字"><a href="#fr-关键字" class="headerlink" title="fr 关键字"></a><strong>fr 关键字</strong></h5><p><code>Grid</code> 布局还引入了一个另外的长度单位来帮助我们创建灵活的网格轨道。<code>fr</code> 单位代表网格容器中可用空间的一等份。<code>grid-template-columns: 200px 1fr 2fr</code> 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3。代码以及效果如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper-3 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 200px 1fr 2fr;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174705.png" alt="img"></p>
<h5 id="minmax-函数"><a href="#minmax-函数" class="headerlink" title="minmax() 函数"></a><strong><code>minmax()</code> 函数</strong></h5><p>我们有时候想给网格元素一个最小和最大的尺寸，<code>minmax()</code> 函数产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中。它接受两个参数，分别为最小值和最大值。<code>grid-template-columns: 1fr 1fr minmax(300px, 2fr)</code> 的意思是，第三个列宽最少也是要 300px，但是最大不能大于第一第二列宽的两倍。代码以及效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper-4 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 1fr minmax(300px, 2fr);</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174737.png" alt="img"></p>
<h5 id="auto-关键字"><a href="#auto-关键字" class="headerlink" title="auto 关键字"></a><strong><code>auto</code> 关键字</strong></h5><p>由浏览器决定长度。通过<code>auto</code>关键字，我们可以轻易实现三列或者两列布局。<code>grid-template-columns: 100px auto 100px</code>表示第一第三列为 100px，中间由浏览器决定长度，代码以及效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper-5 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 100px auto 100px;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174803.png" alt="img"></p>
<h4 id="grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性"><a href="#grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性" class="headerlink" title="grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性"></a>grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性</h4><p><code>grid-row-gap</code> 属性、<code>grid-column-gap</code> 属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式。</p>
<p><code>grid-row-gap: 10px</code> 表示行间距是 10px，<code>grid-column-gap: 20px</code> 表示列间距是 20px。<code>grid-gap: 10px 20px</code> 实现的效果是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 200px 100px 100px;</span><br><span class="line">  grid-gap: 10px 20px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.wrapper-1 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 200px 100px 100px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">  grid-row-gap: 10px;</span><br><span class="line">  grid-column-gap: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上两种写法效果是一样的。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174838.png" alt="img"></p>
<h4 id="grid-template-areas-属性"><a href="#grid-template-areas-属性" class="headerlink" title="grid-template-areas 属性"></a>grid-template-areas 属性</h4><p><code>grid-template-areas</code> 属性用于定义区域，一个区域由一个或者多个单元格组成</p>
<p>一般这个属性跟网格元素的 <code>grid-area</code> 一起使用，我们在这里一起介绍。 <code>grid-area</code> 属性指定项目放在哪一个区域</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-gap: 10px;</span><br><span class="line">  grid-template-columns: 120px  120px  120px;</span><br><span class="line">  grid-template-areas:</span><br><span class="line">    &quot;. header  header&quot;</span><br><span class="line">    &quot;sidebar content content&quot;;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  color: #444;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码表示划分出 6 个单元格，其中值得注意的是<code>.</code>符号代表空的单元格，也就是没有用到该单元格。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.sidebar &#123;</span><br><span class="line">  grid-area: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">  grid-area: content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  grid-area: header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码表示将类 <code>.sidebar</code> <code>.content</code> <code>.header</code>所在的元素放在上面 <code>grid-template-areas</code>中定义的 <code>sidebar</code> <code>content</code> <code>header</code> 区域中</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174910.png" alt="img"></p>
<h4 id="grid-auto-flow-属性"><a href="#grid-auto-flow-属性" class="headerlink" title="grid-auto-flow 属性"></a>grid-auto-flow 属性</h4><p><code>grid-auto-flow</code> 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图英文数字的顺序 <code>one</code>,<code>two</code>,<code>three</code>…。这个顺序由 <code>grid-auto-flow</code> 属性决定，默认值是 <code>row</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 100px 200px 100px;</span><br><span class="line">  grid-auto-flow: row;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174934.png" alt="img"></p>
<p>细心的同学可能发现了一个问题，就是第五个项目和第六个项目之间有个空白（如下图所示），这个是由于第六块的长度大于了空白处的长度，被挤到了下一行导致的。在实际应用中，我们可能想让下面长度合适的填满这个空白，这个时候可以设置 <code>grid-auto-flow: row dense</code>，表示尽可能填满表格。代码以及效果如下所示：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817174951.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper-2 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 100px 200px 100px;</span><br><span class="line">  grid-auto-flow: row dense;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175015.png" alt="img"></p>
<p>可以设置<code>grid-auto-flow: column</code>，表示先列后行，代码以及效果如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper-1 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-auto-columns: 100px;</span><br><span class="line">  grid-auto-flow: column;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-template-rows:  50px 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175038.png" alt="img"></p>
<h4 id="justify-items-属性、align-items-属性以及-place-items-属性"><a href="#justify-items-属性、align-items-属性以及-place-items-属性" class="headerlink" title="justify-items 属性、align-items 属性以及 place-items 属性"></a>justify-items 属性、align-items 属性以及 place-items 属性</h4><p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右），<code>align-items</code> 属性设置单元格的垂直位置（上中下）</p>
<p>下面以 justify-items 属性为例进行讲解，align-items 属性同理，只是方向为垂直方向。它们都有如下属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  justify-items: start | end | center | stretch;</span><br><span class="line">  align-items: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其代码实现以及效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper, .wrapper-1, .wrapper-2, .wrapper-3 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 100px 200px 100px;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">  justify-items: start;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper-1 &#123;</span><br><span class="line">  justify-items: end;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper-2 &#123;</span><br><span class="line">  justify-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper-3 &#123;</span><br><span class="line">  justify-items: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="start"><a href="#start" class="headerlink" title="start"></a>start</h5><p>对齐单元格的起始边缘</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175118.png" alt="img"></p>
<h5 id="end"><a href="#end" class="headerlink" title="end"></a>end</h5><p>对齐单元格的结束边缘</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175137.png" alt="img"></p>
<h5 id="center"><a href="#center" class="headerlink" title="center"></a>center</h5><p>单元格内部居中</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175153.png" alt="img"></p>
<h5 id="stretch"><a href="#stretch" class="headerlink" title="stretch"></a>stretch</h5><p>拉伸，占满单元格的整个宽度（默认值）</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175208.png" alt="img"></p>
<h4 id="justify-content-属性、align-content-属性以及-place-content-属性"><a href="#justify-content-属性、align-content-属性以及-place-content-属性" class="headerlink" title="justify-content 属性、align-content 属性以及 place-content 属性"></a>justify-content 属性、align-content 属性以及 place-content 属性</h4><p><code>justify-content</code> 属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code> 属性是整个内容区域的垂直位置（上中下）。它们都有如下的属性值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  align-content: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面以 <code>justify-content</code> 属性为例进行讲解，<code>align-content</code> 属性同理，只是方向为垂直方向</p>
<ul>
<li>start - 对齐容器的起始边框</li>
<li>end - 对齐容器的结束边框</li>
<li>center - 容器内部居中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper, .wrapper-1, .wrapper-2, .wrapper-3, .wrapper-4, .wrapper-5, .wrapper-6 &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 100px 200px 100px;</span><br><span class="line">  grid-gap: 5px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">  justify-content: start;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper-1 &#123;</span><br><span class="line">  justify-content: end;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper-2 &#123;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175251.png" alt="img"></p>
<ul>
<li><code>space-around</code> - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍<br><code>space-between</code> - 项目与项目的间隔相等，项目与容器边框之间没有间隔<br><code>space-evenly</code> - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔<br><code>stretch</code> - 项目大小没有指定时，拉伸占据整个网格容器</li>
</ul>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175307.png" alt="img"></p>
<h4 id="grid-auto-columns-属性和-grid-auto-rows-属性"><a href="#grid-auto-columns-属性和-grid-auto-rows-属性" class="headerlink" title="grid-auto-columns 属性和 grid-auto-rows 属性"></a>grid-auto-columns 属性和 grid-auto-rows 属性</h4><p>在讲 <code>grid-auto-columns</code> 属性和 <code>grid-auto-rows</code> 属性之前，先来看看隐式和显示网格的概念</p>
<p><strong>隐式和显示网格</strong>：显式网格包含了你在 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性中定义的行和列。如果你在网格定义之外又放了一些东西，或者因为内容的数量而需要的更多网格轨道的时候，网格将会在隐式网格中创建行和列</p>
<p>假如有多余的网格（也就是上面提到的隐式网格），那么它的行高和列宽可以根据 <code>grid-auto-columns</code> 属性和 <code>grid-auto-rows</code> 属性设置。它们的写法和<code>grid-template-columns</code> 和 <code>grid-template-rows</code> 完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 200px 100px;</span><br><span class="line">&#x2F;*  只设置了两行，但实际的数量会超出两行，超出的行高会以 grid-auto-rows 算 *&#x2F;</span><br><span class="line">  grid-template-rows: 100px 100px;</span><br><span class="line">  grid-gap: 10px 20px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>grid-template-columns</code> 属性和 <code>grid-template-rows</code> 属性只是指定了两行两列，但实际有九个元素，就会产生隐式网格。通过 <code>grid-auto-rows</code> 可以指定隐式网格的行高为 50px</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175334.png" alt="img"></p>
<h3 id="项目属性介绍"><a href="#项目属性介绍" class="headerlink" title="项目属性介绍"></a>项目属性介绍</h3><h4 id="grid-column-start-属性、grid-column-end-属性、grid-row-start-属性以及grid-row-end-属性"><a href="#grid-column-start-属性、grid-column-end-属性、grid-row-start-属性以及grid-row-end-属性" class="headerlink" title="grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性"></a>grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性</h4><p>可以指定网格项目所在的四个边框，分别定位在哪根网格线，从而指定项目的位置</p>
<ul>
<li><code>grid-column-start</code> 属性：左边框所在的垂直网格线</li>
<li><code>grid-column-end</code> 属性：右边框所在的垂直网格线</li>
<li><code>grid-row-start</code> 属性：上边框所在的水平网格线</li>
<li><code>grid-row-end</code> 属性：下边框所在的水平网格线</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: repeat(3, 1fr);</span><br><span class="line">  grid-gap: 20px;</span><br><span class="line">  grid-auto-rows: minmax(100px, auto);</span><br><span class="line">&#125;</span><br><span class="line">.one &#123;</span><br><span class="line">  grid-column-start: 1;</span><br><span class="line">  grid-column-end: 2;</span><br><span class="line">  background: #19CAAD;</span><br><span class="line">&#125;</span><br><span class="line">.two &#123; </span><br><span class="line">  grid-column-start: 2;</span><br><span class="line">  grid-column-end: 4;</span><br><span class="line">  grid-row-start: 1;</span><br><span class="line">  grid-row-end: 2;</span><br><span class="line">  &#x2F;*   如果有重叠，就使用 z-index *&#x2F;</span><br><span class="line">  z-index: 1;</span><br><span class="line">  background: #8CC7B5;</span><br><span class="line">&#125;</span><br><span class="line">.three &#123;</span><br><span class="line">  grid-column-start: 3;</span><br><span class="line">  grid-column-end: 4;</span><br><span class="line">  grid-row-start: 1;</span><br><span class="line">  grid-row-end: 4;</span><br><span class="line">  background: #D1BA74;</span><br><span class="line">&#125;</span><br><span class="line">.four &#123;</span><br><span class="line">  grid-column-start: 1;</span><br><span class="line">  grid-column-end: 2;</span><br><span class="line">  grid-row-start: 2;</span><br><span class="line">  grid-row-end: 5;</span><br><span class="line">  background: #BEE7E9;</span><br><span class="line">&#125;</span><br><span class="line">.five &#123;</span><br><span class="line">  grid-column-start: 2;</span><br><span class="line">  grid-column-end: 2;</span><br><span class="line">  grid-row-start: 2;</span><br><span class="line">  grid-row-end: 5;</span><br><span class="line">  background: #E6CEAC;</span><br><span class="line">&#125;</span><br><span class="line">.six &#123;</span><br><span class="line">  grid-column: 3;</span><br><span class="line">  grid-row: 4;</span><br><span class="line">  background: #ECAD9E;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，类 <code>.two</code> 所在的网格项目，垂直网格线是从 2 到 4，水平网格线是从 1 到 2。其中它跟 <code>.three</code> （垂直网格线是从3 到 4，水平网格线是从 1 到 4） 是有冲突的。可以设置 <code>z-index</code> 去决定它们的层级关系</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175401.png" alt="img"></p>
<h4 id="grid-area-属性"><a href="#grid-area-属性" class="headerlink" title="grid-area 属性"></a>grid-area 属性</h4><p><code>grid-area</code> 属性指定项目放在哪一个区域，在上面介绍 <code>grid-template-areas</code> 的时候有提到过，这里不再具体展开，具体的使用可以参考演示地址：</p>
<h4 id="justify-self-属性、align-self-属性以及-place-self-属性"><a href="#justify-self-属性、align-self-属性以及-place-self-属性" class="headerlink" title="justify-self 属性、align-self 属性以及 place-self 属性"></a>justify-self 属性、align-self 属性以及 place-self 属性</h4><h5 id="justify-self-属性"><a href="#justify-self-属性" class="headerlink" title="justify-self 属性"></a><code>justify-self</code> 属性</h5><p>设置单元格内容的水平位置（左中右），跟 <code>justify-items</code> 属性的用法完全一致，但只作用于单个项目</p>
<h5 id="align-self-属性"><a href="#align-self-属性" class="headerlink" title="align-self 属性"></a><code>align-self</code> 属性</h5><p>设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目</p>
<p>两者很相像，这里只拿 <code>justify-self</code> 属性演示，<code>align-self</code> 属性同理，只是作用于垂直方向</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  justify-self: start | end | center | stretch;</span><br><span class="line">  align-self: start | end | center | stretch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  justify-self: start;</span><br><span class="line">&#125;</span><br><span class="line">.item-1 &#123;</span><br><span class="line">  justify-self: end;</span><br><span class="line">&#125;</span><br><span class="line">.item-2 &#123;</span><br><span class="line">  justify-self: center;</span><br><span class="line">&#125;</span><br><span class="line">.item-3 &#123;</span><br><span class="line">  justify-self: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="start-1"><a href="#start-1" class="headerlink" title="start"></a>start</h6><p>对齐单元格的起始边缘</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175434.png" alt="img"></p>
<h6 id="end-1"><a href="#end-1" class="headerlink" title="end"></a>end</h6><p>对齐单元格的结束边缘</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175450.png" alt="img"></p>
<h6 id="center-1"><a href="#center-1" class="headerlink" title="center"></a>center</h6><p>单元格内部居中</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175504.png" alt="img"></p>
<h6 id="stretch-1"><a href="#stretch-1" class="headerlink" title="stretch"></a>stretch</h6><p>拉伸，占满单元格的整个宽度（默认值）</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175517.png" alt="img"></p>
<h2 id="Grid-实战——实现响应式布局"><a href="#Grid-实战——实现响应式布局" class="headerlink" title="Grid 实战——实现响应式布局"></a>Grid 实战——实现响应式布局</h2><p>经过上面的介绍，相信大家都可以看出，Grid 是非常强大的。一些常见的 CSS 布局，如居中，两列布局，三列布局等等是很容易实现的。我们接下来看看 Grid 布局是如何实现响应式布局的</p>
<p>fr 实现等分响应式</p>
<p><code>fr</code> 等分单位，可以将容器的可用空间分成想要的多个等分空间。利用这个特性，我们能够轻易实现一个等分响应式。<code>grid-template-columns: 1fr 1fr 1fr</code> 表示容器分为三等分</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175542.png" alt="img"></p>
<h3 id="repeat-auto-fit——固定列宽，改变列数量"><a href="#repeat-auto-fit——固定列宽，改变列数量" class="headerlink" title="repeat + auto-fit——固定列宽，改变列数量"></a>repeat + auto-fit——固定列宽，改变列数量</h3><p>等分布局并不只有 <code>Grid</code> 布局才有，像 <code>flex</code> 布局也能轻松实现，接下来看看更高级的响应式</p>
<p>上面例子的始终都是三列的，但是需求往往希望我们的网格能够固定列宽，并根据容器的宽度来改变列的数量。这个时候，我们可以用到上面提到 <code>repeat()</code> 函数以及 <code>auto-fit</code> 关键字。<code>grid-template-columns: repeat(auto-fit, 200px)</code> 表示固定列宽为 200px，数量是自适应的，只要容纳得下，就会往上排列，代码以及效果实现如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  margin: 50px;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: repeat(auto-fit, 200px);</span><br><span class="line">  grid-gap: 10px 20px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175603.png" alt="img"></p>
<h3 id="repeat-auto-fit-minmax-去掉右侧空白"><a href="#repeat-auto-fit-minmax-去掉右侧空白" class="headerlink" title="repeat+auto-fit+minmax 去掉右侧空白"></a>repeat+auto-fit+minmax 去掉右侧空白</h3><p>上面看到的效果中，右侧通常会留下空白，这是我们不希望看到的。如果列的宽度也能在某个范围内自适应就好了。<code>minmax()</code> 函数就帮助我们做到了这点。将 <code>grid-template-columns: repeat(auto-fit, 200px)</code> 改成 <code>grid-template-columns: repeat(auto-fit, minmax(200px, 1fr))</code> 表示列宽至少 200px，如果还有空余则一起等分。代码以及效果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">  margin: 50px;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));</span><br><span class="line">  grid-gap: 10px 20px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175633.png" alt="img"></p>
<h3 id="repeat-auto-fit-minmax-span-dense-解决空缺问题"><a href="#repeat-auto-fit-minmax-span-dense-解决空缺问题" class="headerlink" title="repeat+auto-fit+minmax-span-dense 解决空缺问题"></a><code>repeat+auto-fit+minmax-span-dense</code> 解决空缺问题</h3><p>似乎一切进行得很顺利，但是某天 <code>UI</code> 来说，每个网格元素的长度可能不相同，这也简单，通过 <code>span</code> 关键字进行设置网格项目的跨度，<code>grid-column-start: span 3</code>，表示这个网格项目跨度为 3。具体的代码与效果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item-3 &#123;</span><br><span class="line">  grid-column-start: span 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175657.png" alt="img"></p>
<p>不对，怎么右侧又有空白了？原来是有一些长度太长了，放不下，这个时候就到我们的<code>dense</code>关键字出场了。<code>grid-auto-flow: row dense</code>表示尽可能填充，而不留空白，代码以及效果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper, .wrapper-1 &#123;</span><br><span class="line">  margin: 50px;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));</span><br><span class="line">  grid-gap: 10px 20px;</span><br><span class="line">  grid-auto-rows: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.wrapper-1 &#123;</span><br><span class="line">  grid-auto-flow: row dense;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175717.png" alt="img"></p>
<h2 id="Grid-布局兼容性"><a href="#Grid-布局兼容性" class="headerlink" title="Grid 布局兼容性"></a>Grid 布局兼容性</h2><p>最后，聊聊 <code>Grid</code> 布局兼容性问题，在 caniuse 中，我们可以看到的结果如下，总体兼容性还不错，但在 IE 10 以下不支持。个人建议在公司的内部系统运用起来是没有问题的，但 <code>TOC</code> 的话，可能目前还是不太合</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200817175809.png" alt="img"></p>
<blockquote>
<p>文章转载于：</p>
<p>我很酷的文章</p>
<p>知乎 <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNjUwMDIwMDg=">https://zhuanlan.zhihu.com/p/165002008<i class="fa fa-external-link-alt"></i></span></p>
<p>侵权请联系本人</p>
</blockquote>
]]></content>
      <categories>
        <category>fe</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>CSS之强大的Grid布局</tag>
        <tag>grid布局</tag>
        <tag>flex</tag>
        <tag>flex布局</tag>
        <tag>grid</tag>
        <tag>容器属性</tag>
        <tag>项目属性</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之模型层</title>
    <url>/8c4e905f.html</url>
    <content><![CDATA[<p>模型是一个用于表示数据的<code>Python</code>类，包含基本的数据字段和行为，在<code>Django</code>中，通常一个模型就代表一个数据库表。模型继承自<code>Django.db.models . Model</code> ，模型的每一个属性代表一个数据表的列。</p>
<a id="more"></a>

<ul>
<li><code>MVC</code>或者<code>MVC</code>框架中包括一个重要的部分，就是<code>ORM</code>，它实现了数据模型与数据库的解耦，即数据模型的设计不需要依赖于特定的数据库，通过简单的配置就可以轻松更换数据库，这极大的减轻了开发人员的工作量，不需要面对因数据库变更而导致的无效劳动</li>
<li><code>ORM</code>是“对象-关系-映射”的简称。</li>
</ul>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200420115005.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql中的表                                                      </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#创建表:</span></span><br><span class="line">     CREATE TABLE employee(                                     </span><br><span class="line">                id INT PRIMARY KEY auto_increment ,                    </span><br><span class="line">                name VARCHAR (<span class="number">20</span>),                                      </span><br><span class="line">                gender BIT default <span class="number">1</span>,                                  </span><br><span class="line">                birthday DATA ,                                         </span><br><span class="line">                department VARCHAR (<span class="number">20</span>),                                </span><br><span class="line">                salary DECIMAL (<span class="number">8</span>,<span class="number">2</span>) unsigned,                          </span><br><span class="line">              );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#sql中的表纪录                                                  </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#添加一条表纪录:                                                          </span></span><br><span class="line">      INSERT employee (name,gender,birthday,salary,department)            </span><br><span class="line">             VALUES   (<span class="string">&quot;alex&quot;</span>,<span class="number">1</span>,<span class="string">&quot;1985-12-12&quot;</span>,<span class="number">8000</span>,<span class="string">&quot;保洁部&quot;</span>);               </span><br><span class="line"></span><br><span class="line">  <span class="comment">#查询一条表纪录:                                                           </span></span><br><span class="line">      SELECT * FROM employee WHERE age=<span class="number">24</span>;                               </span><br><span class="line"></span><br><span class="line">  <span class="comment">#更新一条表纪录:                                                           </span></span><br><span class="line">      UPDATE employee SET birthday=<span class="string">&quot;1989-10-24&quot;</span> WHERE id=<span class="number">1</span>;              </span><br><span class="line"></span><br><span class="line">  <span class="comment">#删除一条表纪录:                                                          </span></span><br><span class="line">      DELETE FROM employee WHERE name=<span class="string">&quot;alex&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">     id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">     name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">     gender=models.BooleanField()</span><br><span class="line">     birthday=models.DateField()</span><br><span class="line">     department=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">     salary=models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#python的类对象</span></span><br><span class="line">      <span class="comment">#添加一条表纪录:</span></span><br><span class="line">          emp=Employee(name=<span class="string">&quot;alex&quot;</span>,gender=<span class="literal">True</span>,birthday=<span class="string">&quot;1985-12-12&quot;</span>,epartment=<span class="string">&quot;保洁部&quot;</span>)</span><br><span class="line">          emp.save()</span><br><span class="line">      <span class="comment">#查询一条表纪录:</span></span><br><span class="line">          Employee.objects.filter(age=<span class="number">24</span>)</span><br><span class="line">      <span class="comment">#更新一条表纪录:</span></span><br><span class="line">          Employee.objects.filter(id=<span class="number">1</span>).update(birthday=<span class="string">&quot;1989-10-24&quot;</span>)</span><br><span class="line">      <span class="comment">#删除一条表纪录:</span></span><br><span class="line">          Employee.objects.filter(name=<span class="string">&quot;alex&quot;</span>).delete()</span><br></pre></td></tr></table></figure>

<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><p>在应用下的<code>models.py</code>中创建模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">     id=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">     title=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">     state=models.BooleanField()</span><br><span class="line">     pub_date=models.DateField()</span><br><span class="line">     price=models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">     publish=models.CharField(max_length=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>

<h4 id="字段和参数"><a href="#字段和参数" class="headerlink" title="字段和参数"></a>字段和参数</h4><p>每个字段有一些特有的参数，例如，<code>CharField</code>需要<code>max_length</code>参数来指定<code>VARCHAR</code>数据库字段的大小。还有一些适用于所有字段的通用参数。 这些参数在文档中有详细定义，这里我们只简单介绍一些最常用的：</p>
<p><strong>1、AutoField</strong> —自增列 = int(11) 如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。<br><strong>2、CharField</strong> —字符串字段 单行输入，用于较短的字符串，如要保存大量文本, 使用 TextField。必须 max_length 参数，django会根据这个参数在数据库层和校验层限制该字段所允许的最大字符数。<br><strong>3、BooleanField</strong> —布尔类型=tinyint(1) 不能为空，Blank=True<br><strong>4、ComaSeparatedIntegerField</strong> —用逗号分割的数字=varchar 继承CharField，所以必须 max_lenght 参数，<br><strong>5、DateField</strong> —日期类型 date 对于参数，auto_now = True 则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。<br><strong>6、DateTimeField</strong> —日期类型 datetime 同DateField的参数<br><strong>7、Decimal</strong> —十进制小数类型 = decimal 必须指定整数位max_digits和小数位decimal_places<br><strong>8、EmailField</strong> —字符串类型（正则表达式邮箱） =varchar 对字符串进行正则表达式 一个带有检查 Email 合法性的 CharField，不接受 maxlength 参数。<br><strong>9、FloatField</strong> —浮点类型 = double 浮点型字段。 必须提供两个 参数， 参数描述：<br>max_digits：总位数(不包括小数点和符号）<br>decimal_places：小数位数。如：要保存最大值为 999 (小数点后保存2位)，你要这样定义字段：FloatField(…，max_digits=5，  decimal_places=2)，要保存最大值一百万(小数点后保存10位)的话，你要这样定义：FloatField(…，max_digits=19， decimal_places=10)<br><strong>10、IntegerField</strong> —整形 用于保存一个整数<br><strong>11、BigIntegerField</strong> —长整形</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">integer_field_ranges = &#123;</span><br><span class="line">    <span class="string">&#x27;SmallIntegerField&#x27;</span>: (<span class="number">-32768</span>, <span class="number">32767</span>),</span><br><span class="line">    <span class="string">&#x27;IntegerField&#x27;</span>: (<span class="number">-2147483648</span>, <span class="number">2147483647</span>),</span><br><span class="line">    <span class="string">&#x27;BigIntegerField&#x27;</span>: (<span class="number">-9223372036854775808</span>, <span class="number">9223372036854775807</span>),</span><br><span class="line">    <span class="string">&#x27;PositiveSmallIntegerField&#x27;</span>: (<span class="number">0</span>, <span class="number">32767</span>),</span><br><span class="line">    <span class="string">&#x27;PositiveIntegerField&#x27;</span>: (<span class="number">0</span>, <span class="number">2147483647</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>12、IPAddressField</strong> —字符串类型（ip4正则表达式） 一个字符串形式的 IP 地址， (如 “202.1241.30″)。<br><strong>13、GenericIPAddressField</strong> —字符串类型（ip4和ip6是可选的） 参数protocol可以是：both、ipv4、ipv6 验证时，会根据设置报错<br><strong>14、NullBooleanField</strong> —允许为空的布尔类型 类似 BooleanField， 不过允许 NULL 作为其中一个选项。 推荐使用这个字段而不要用 BooleanField 加 null=True 选项。 admin 用一个选择框 　　　　</p>
<p>多行编辑框表示该字段数据。<br><strong>20、TimeField</strong>  —时间 HH:MM[:ss[.uuuuuu]]  时间字段，类似于 DateField 和 DateTimeField。<br><strong>21、URLField</strong>  —字符串，地址正则表达式  用于保存URL。若 verify_exists 参数为 True (默认)， 给定的 URL 会预先检查是否存在(即URL是否被有效装入且没有返回404响应).<br><strong>22、BinaryField</strong>  —二进制<br><strong>23、ImageField</strong>  —图片  类似 FileField， 不过要校验上传对象是否是一个合法图片。用于保存图像文件的字段。其基本用法和特性与FileField一样，只不过多了两个属性height和width。默认情况下，该字段在HTML中表现为一个ClearableFileInput标签。在数据库内，我们实际保存的是一个字符串类型，默认最大长度100，可以通过max_length参数自定义。真实的图片是保存在服务器的文件系统内的。<br><strong>height_field参数：</strong>保存有图片高度信息的模型字段名。width_field参数：保存有图片宽度信息的模型字段名。<br>使用Django的ImageField需要提前安装pillow模块，pip install pillow即可。<br><strong>使用FileField或者ImageField字段的步骤：</strong><br>在settings文件中，配置MEDIA_ROOT，作为你上传文件在服务器中的基本路径（为了性能考虑，这些文件不会被储存在数据库中）。再配置个MEDIA_URL，作为公用URL，指向上传文件的基本路径。请确保Web服务器的用户账号对该目录具有写的权限。<br>添加FileField或者ImageField字段到你的模型中，定义好upload_to参数，文件最终会放在MEDIA_ROOT目录的“upload_to”子目录中。<br>所有真正被保存在数据库中的，只是指向你上传文件路径的字符串而已。可以通过url属性，在Django的模板中方便的访问这些文件。例如，假设你有一个ImageField字段，名叫mug_shot，那么在Django模板的HTML文件中，可以使用来获取该文件。其中的object用你具体的对象名称代替。<br>可以通过name和size属性，获取文件的名称和大小信息。</p>
<p><strong>24、FilePathField</strong> —选择指定目录按限制规则选择文件，有三个参数可选， 其中”path”必需的，这三个参数可以同时使用， 参数描述：<br>path：必需参数，一个目录的绝对文件系统路径。 FilePathField 据此得到可选项目。 Example： “/home/images”；<br>match：可选参数， 一个正则表达式， 作为一个字符串， FilePathField 将使用它过滤文件名。 注意这个正则表达式只会应用到 base filename 而不是路径全名。 Example： “foo。<em>\。txt^”， 将匹配文件 foo23.txt 却不匹配 bar.txt 或 foo23.gif；<br>recursive：可选参数， 是否包括 path 下全部子目录，True 或 False，默认值为 False。<br>match 仅应用于 base filename， 而不是路径全名。 如：FilePathField(path=”/home/images”， match=”foo.*”， recursive=True)…会匹配 /home/images/foo.gif 而不匹配 /home/images/foo/bar.gif<br>*</em>25、FileField** —文件上传字段。 要求一个必须有的参数： upload_to， 一个用于保存上载文件的本地文件系统路径。 这个路径必须包含 strftime  formatting， 该格式将被上载文件的 date/time 替换(so that uploaded files don’t fill up the given directory)。在一个 model 中使用 FileField 或 ImageField 需要以下步骤：在你的  settings 文件中， 定义一个完整路径给 MEDIA_ROOT 以便让 Django在此处保存上传文件。  (出于性能考虑，这些文件并不保存到数据库。) 定义 MEDIA_URL 作为该目录的公共 URL。 要确保该目录对 WEB  服务器用户帐号是可写的。在你的 model 中添加 FileField 或 ImageField， 并确保定义了 upload_to  选项，以告诉 Django 使用 MEDIA_ROOT 的哪个子目录保存上传文件。你的数据库中要保存的只是文件的路径(相对于  MEDIA_ROOT)。 出于习惯你一定很想使用 Django 提供的 get__url 函数。举例来说，如果你的 ImageField 叫作 mug_shot， 你就可以在模板中以 这样的方式得到图像的绝对路径。<br><strong>26、PhoneNumberField</strong> —一个带有合法美国风格电话号码校验的 CharField(格式：XXX-XXX-XXXX)<br><strong>27、USStateField</strong> —美国州名缩写，由两个字母组成（天朝人民无视）。<br><strong>28、XMLField</strong> —XML字符字段，校验值是否为合法XML的 TextField，必须提供参数：<br>schema_path：校验文本的 RelaxNG schema 的文件系统路径。</p>
<p>更多参数：可参见：**<a href="https://www.diandian100.cn/83419695.html">Django模型字段通用属性</a>**</p>
<p><strong>1、null</strong> 数据库中字段是否可以为空（null=True）<br><strong>2、db_column</strong> 数据库中字段的列名(db_column=”test”)<br><strong>3、db_tablespace</strong><br><strong>4、default</strong> 数据库中字段的默认值<br><strong>5、primary_key</strong> 数据库中字段是否为主键(primary_key=True)<br><strong>6、db_index</strong> 数据库中字段是否可以建立索引(db_index=True)<br><strong>7、unique</strong> 数据库中字段是否可以建立唯一索引(unique=True)<br><strong>8、unique_for_date</strong> 数据库中字段【日期】部分是否可以建立唯一索引<br><strong>9、unique_for_month</strong> 数据库中字段【月】部分是否可以建立唯一索引<br><strong>10、unique_for_year</strong> 数据库中字段【年】部分是否可以建立唯一索引<br><strong>11、auto_now</strong> 更新时自动更新当前时间<br><strong>12、auto_now_add</strong> 创建时自动更新当前时间<br><strong>13、verbose_name</strong> Admin中显示的字段名称<br><strong>14、blankAdmin</strong> 中是否允许用户输入为空表单提交时可以为空<br><strong>15、editableAdmin</strong> 中是否可以编辑<br><strong>16、help_textAdmin</strong> 中该字段的提示信息<br><strong>17choicesAdmin</strong> 中显示选择框的内容，用不变动的数据放在内存中从而避免跨表操作<br>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sex&#x3D;models.IntegerField(choices&#x3D;[(0,&#39;男&#39;),(1,&#39;女&#39;),],default&#x3D;1)</span><br></pre></td></tr></table></figure>

<p>error_messages自定义错误信息（字典类型），从而定制想要显示的错误信息；<br>字典健：null,blank,invalid,invalid_choice,unique,andunique_for_date<br>如：{‘null’:”不能为空.”,’invalid’:’格式错误’}<br><strong>18、validators</strong> 自定义错误验证（列表类型），从而定制想要的验证规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> EmailValidator,URLValidator,DecimalValidator,</span><br><span class="line">MaxLengthValidator,MinLengthValidator,MaxValueValidator,MinValueValidator</span><br><span class="line">如：</span><br><span class="line">test = models.CharField(</span><br><span class="line">    max_length=<span class="number">32</span>,</span><br><span class="line">    error_messages=&#123;</span><br><span class="line">    <span class="string">&#x27;c1&#x27;</span>: <span class="string">&#x27;优先错信息1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c2&#x27;</span>: <span class="string">&#x27;优先错信息2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c3&#x27;</span>: <span class="string">&#x27;优先错信息3&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">validators=[</span><br><span class="line">    RegexValidator(regex=<span class="string">&#x27;root_\d+&#x27;</span>, message=<span class="string">&#x27;错误了&#x27;</span>, code=<span class="string">&#x27;c1&#x27;</span>),</span><br><span class="line">    RegexValidator(regex=<span class="string">&#x27;root_112233\d+&#x27;</span>, message=<span class="string">&#x27;又错误了&#x27;</span>, code=<span class="string">&#x27;c2&#x27;</span>),</span><br><span class="line">    EmailValidator(message=<span class="string">&#x27;又错误了&#x27;</span>, code=<span class="string">&#x27;c3&#x27;</span>), ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="settings配置数据库"><a href="#settings配置数据库" class="headerlink" title="settings配置数据库"></a><code>settings</code>配置数据库</h4><p>若想将模型转为<code>mysql</code>数据库中的表，需要在settings中配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>:<span class="string">&#x27;bms&#x27;</span>,     　　 　  <span class="comment"># 要连接的数据库，连接前需要创建好</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,　　　　　　  <span class="comment"># 连接数据库的用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;&#x27;</span>,　　　　　　  <span class="comment"># 连接数据库的密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,       <span class="comment"># 连接主机，默认本级</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>：<span class="number">3306</span>    　　　     <span class="comment">#  端口 默认3306</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意1：NAME即数据库的名字，在mysql连接前该数据库必须已经创建，而上面的sqlite数据库下的db.sqlite3则是项目自动创建  USER和PASSWORD分别是数据库的用户名和密码。设置完后，再启动我们的Django项目前，我们需要激活我们的mysql。然后，启动项目，会报错：no module named MySQLdb 。这是因为django默认你导入的驱动是MySQLdb，可是MySQLdb  对于py3有很大问题，所以我们需要的驱动是PyMySQL 所以，我们,可在主配置文件（和项目同名的文件下，不是app配置文件）中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<p>最后通过两条数据库迁移命令即可在指定的数据库中创建表 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>注意2:确保配置文件中的INSTALLED_APPS中写入我们创建的app名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;book&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意3:如果报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.3 or newer is required; you have 0.7.11.None</span><br></pre></td></tr></table></figure>

<p>MySQLclient目前只支持到python3.4，因此如果使用的更高版本的python，需要修改如下：</p>
<p>通过查找路径C:\Programs\Python\Python36-32\Lib\site-packages\Django-2.0-py3.6.egg\django\db\backends\mysql<br>这个路径里的文件把</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> version &lt; (<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>):</span><br><span class="line">     <span class="keyword">raise</span> ImproperlyConfigured(<span class="string">&quot;mysqlclient 1.3.3 or newer is required; you have %s&quot;</span> % Database.__version__)</span><br></pre></td></tr></table></figure>

<p>注释掉 就OK了。</p>
<p>注意4: 如果想打印orm转换过程中的sql，需要在settings中进行如下配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加表记录"><a href="#添加表记录" class="headerlink" title="添加表记录"></a>添加表记录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create方法的返回值book_obj就是插入book表中的python葵花宝典这本书籍纪录对象</span></span><br><span class="line">  book_obj=Book.objects.create(title=<span class="string">&quot;python葵花宝典&quot;</span>,state=<span class="literal">True</span>,price=<span class="number">100</span>,publish=<span class="string">&quot;苹果出版社&quot;</span>,pub_date=<span class="string">&quot;2012-12-12&quot;</span>)</span><br><span class="line">  <span class="comment"># 或者</span></span><br><span class="line">  book_obj=Book(title=<span class="string">&quot;python葵花宝典&quot;</span>,state=<span class="literal">True</span>,price=<span class="number">100</span>,publish=<span class="string">&quot;苹果出版社&quot;</span>,pub_date=<span class="string">&quot;2012-12-12&quot;</span>)</span><br><span class="line">book_obj.save()</span><br></pre></td></tr></table></figure>

<h4 id="批量添加表记录"><a href="#批量添加表记录" class="headerlink" title="批量添加表记录"></a>批量添加表记录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量添加学员</span></span><br><span class="line">user_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    user_dic = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&#x27;学员&#x27;</span>+str(i),</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : random.randrange(<span class="number">18</span>, <span class="number">45</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    user_list.append(User(**user_dic))</span><br><span class="line">User.objects.bulk_create(user_list)</span><br></pre></td></tr></table></figure>

<h3 id="查询表记录"><a href="#查询表记录" class="headerlink" title="查询表记录"></a>查询表记录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="number">1</span>&gt; all():                  查询所有结果</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">2</span>&gt; filter(**kwargs):       它包含了与所给筛选条件相匹配的对象</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">3</span>&gt; get(**kwargs):          返回与所给筛选条件相匹配的对象，返回结果有且只有一个，</span><br><span class="line">                            如果符合筛选条件的对象超过一个或者没有都会抛出错误。</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">4</span>&gt; exclude(**kwargs):      它包含了与所给筛选条件不匹配的对象</span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">5</span>&gt; order_by(*field):       对查询结果排序</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">6</span>&gt; reverse():              对查询结果反向排序</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">8</span>&gt; count():                返回数据库中匹配查询(QuerySet)的对象数量。</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">9</span>&gt; first():                返回第一条记录</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">10</span>&gt; last():                返回最后一条记录</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">11</span>&gt; exists():              如果QuerySet包含数据，就返回<span class="literal">True</span>，否则返回<span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">12</span>&gt; values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列</span><br><span class="line">                            model的实例化对象，而是一个可迭代的字典序列</span><br><span class="line">&lt;<span class="number">13</span>&gt; values_list(*field):   它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列</span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">14</span>&gt; distinct():            从返回结果中剔除重复纪录</span><br></pre></td></tr></table></figure>

<p><strong>基于下划线的模糊查询</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.filter(price__in=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>])</span><br><span class="line">Book.objects.filter(price__gt=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__lt=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__range=[<span class="number">100</span>,<span class="number">200</span>])</span><br><span class="line">Book.objects.filter(title__contains=<span class="string">&quot;python&quot;</span>)</span><br><span class="line">Book.objects.filter(title__icontains=<span class="string">&quot;python&quot;</span>)</span><br><span class="line">Book.objects.filter(title__startswith=<span class="string">&quot;py&quot;</span>)</span><br><span class="line">Book.objects.filter(pub_date__year=<span class="number">2012</span>)</span><br></pre></td></tr></table></figure>

<h3 id="删除表记录"><a href="#删除表记录" class="headerlink" title="删除表记录"></a>删除表记录</h3><p>删除方法就是 delete()。它运行时立即删除对象而不返回任何值。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_obj.delete()</span><br></pre></td></tr></table></figure>

<p>你也可以一次性删除多个对象。每个 QuerySet 都有一个 delete() 方法，它一次性删除 QuerySet 中所有的对象。</p>
<p>例如，下面的代码将删除 pub_date 是2005年的 Entry 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Entry.objects.filter(pub_date__year=<span class="number">2005</span>).delete()</span><br></pre></td></tr></table></figure>

<p>在 Django 删除对象时，会模仿 SQL 约束 ON DELETE CASCADE 的行为，换句话说，删除一个对象时也会删除与它相关联的外键对象。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = Blog.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># This will delete the Blog and all of its Entry objects.</span></span><br><span class="line">b.delete()</span><br></pre></td></tr></table></figure>

<p>要注意的是： delete() 方法是 QuerySet 上的方法，但并不适用于 Manager 本身。这是一种保护机制，是为了避免意外地调用  Entry.objects.delete() 方法导致 所有的 记录被误删除。如果你确认要删除所有的对象，那么你必须显式地调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Entry.objects.all().delete()</span><br></pre></td></tr></table></figure>

<p>如果不想级联删除，可以设置为:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pubHouse = models.ForeignKey(to=<span class="string">&#x27;Publisher&#x27;</span>, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="修改表纪录"><a href="#修改表纪录" class="headerlink" title="修改表纪录"></a>修改表纪录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Book.objects.filter(title__startswith&#x3D;&quot;py&quot;).update(price&#x3D;120)</span><br></pre></td></tr></table></figure>

<p>此外，update()方法对于任何结果集（<code>QuerySet</code>）均有效，这意味着你可以同时更新多条记录update()方法会返回一个整型数值，表示受影响的记录条数。　　</p>
<h3 id="软删除和字段复用"><a href="#软删除和字段复用" class="headerlink" title="软删除和字段复用"></a>软删除和字段复用</h3><p>可参考之前的文章：**<a href="https://www.diandian100.cn/ebdbdc90.html">django软删除与模型字段复用</a>**</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django之模型层</tag>
        <tag>django创建模型</tag>
        <tag>Django字段</tag>
        <tag>Django参数</tag>
        <tag>Django配置</tag>
        <tag>Django添加表</tag>
        <tag>Django查询</tag>
        <tag>Django删除</tag>
        <tag>Django修改</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之路由层</title>
    <url>/29c6b278.html</url>
    <content><![CDATA[<p>每一个<code>URL</code>都会对应一个视图函数，当一个用户请求访问<code>Django</code>站点的一个页面时，然后就由<code>Django</code>路由系统（<code>URL配置文件</code>）去决定要执行哪个视图函数使用的算法。这个路由系统我们也称之为<code>url控制器</code>，一般是项目目录和应用目录里的<code>urls.py</code>文件。</p>
<a id="more"></a>

<p>路由配置是所有整个<code>Django</code>的入口，我们想要访问什么，想要去什么地方，都取决路由，所以我们需要充分理解路由配置的用法。</p>
<p>一般情况下，一个<code>URL</code>，我们是这样写的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(正则表达式, views视图函数，参数，别名),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># 1、一个正则表达式字符串</span></span><br><span class="line"><span class="comment"># 2、一个可调用对象，通常为一个视图函数或一个指定视图函数路径的字符串</span></span><br><span class="line"><span class="comment"># 3、可选的要传递给视图函数的默认参数（字典形式）</span></span><br><span class="line"><span class="comment"># 4、一个可选的name参数(别名)</span></span><br></pre></td></tr></table></figure>

<p>下面是一个简单的路由配置例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&#x27;</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/&#x27;</span>, views.article_detail),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li>要捕获一段<code>url</code>中的值，需要使用尖括号，而不是之前的圆括号；</li>
<li>可以转换捕获到的值为指定类型，比如例子中的<code>&lt;int:year&gt;</code>。默认情况下，捕获到的结果保存为字符串类型，不包含**<code>/</code>**这个特殊字符；</li>
<li>规则的前面不需要添加**<code>/</code><strong>，因为默认情况下，每个<code>url</code>都带一个最前面的</strong><code>/</code>**。比如：<code>articles</code>, 不能写成 <code>/articles</code>。</li>
</ol>
<p><strong>匹配例子：</strong></p>
<p>1、<code>/articles/2005/03/</code> 将匹配第三条，并调用<code>views.month_archive(request, year=2005, month=3)；</code></p>
<p>2、<code>/articles/2003/</code>匹配第一条，并调用<code>views.special_case_2003(request)；</code></p>
<p>3、<code>/articles/2003</code>将一条都匹配不上，因为它最后少了一个斜杠，而列表中的所有模式中都以斜杠结尾；</p>
<p>4、<code>/articles/2003/03/building-a-django-site/</code> 将匹配最后一个，并调用<code>views.article_detail(request, year=2003, month=3, slug=&quot;building-a-django-site&quot;</code></p>
<h3 id="一、path转换器"><a href="#一、path转换器" class="headerlink" title="一、path转换器"></a>一、<code>path</code>转换器</h3><p><code>Django</code>默认情况下内置下面的路径转换器：</p>
<p>1、<code>str</code>：匹配任何非空字符串，但不含斜杠/，如果你没有专门指定转换器，那么这个是默认使用的；<br>2、<code>int</code>：匹配0和正整数，返回一个int类型<br>3、<code>slug</code>：可理解为注释、后缀、附属等概念，是<code>url</code>拖在最后的一部分解释性字符。该转换器匹配任何ASCII字符以及连接符和下划线，比如<code>’ building-your-1st-django-site‘</code>；<br>4、<code>uuid</code>：匹配一个<code>uuid</code>格式的对象。为了防止冲突，规定必须使用破折号，所有字母必须小写，例如’<code>075194d3-6885-417e-a8a8-6c931e272f00</code>‘ 。返回一个<code>UUID</code>对象；<br>5、<code>path</code>：匹配任何非空字符串，重点是可以包含路径分隔符’<code>/</code>‘。这个转换器可以帮助你匹配整个<code>url</code>而不是一段一段的<code>url</code>字符串。</p>
<h3 id="二、注册自定义路径转换器"><a href="#二、注册自定义路径转换器" class="headerlink" title="二、注册自定义路径转换器"></a>二、注册自定义路径转换器</h3><p>对于更复杂的匹配需求，您可以定义自己的路径转换器。自定义，就是单独写一个类，它包含下面的内容：<br>1、类属性<code>regex</code>：一个字符串形式的正则表达式属性；<br>2、<code>to_python(self, value)</code> 方法：一个用来将匹配到的字符串转换为你想要的那个数据类型，并传递给视图函数。如果不能转换给定的值，则会引发<code>ValueError</code>。</p>
<p>3、<code>to_url(self, value)</code>方法：将<code>Python</code>数据类型转换为一段<code>url</code>的方法，上面方法的反向操作。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourDigitYearConverter</span>:</span></span><br><span class="line">    regex = <span class="string">&#x27;[0-9]&#123;4&#125;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> int(value)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%04d&#x27;</span> % value</span><br></pre></td></tr></table></figure>

<p>在<code>路由</code>中注册自定义转换器类，并使用它:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, register_converter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> converters, </span><br><span class="line">viewsregister_converter(converters.FourDigitYearConverter, <span class="string">&#x27;yyyy&#x27;</span>)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;yyyy:year&gt;/&#x27;</span>, views.year_archive),</span><br><span class="line">    ...</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<h3 id="三、使用正则表达式"><a href="#三、使用正则表达式" class="headerlink" title="三、使用正则表达式"></a>三、使用正则表达式</h3><p>如果路径和转换器语法不足以定义URL模式，也可以使用正则表达式。这时我们就需要使用<code>re_path()</code>而不是<code>path()</code>。</p>
<p>在<code>Python</code>正则表达式中，命名正则表达式组的语法是 <code>(?P&lt;name&gt;pattern)</code>，其中<code>name</code>是组的名称，<code>pattern</code>是需要匹配的规则。</p>
<p>前面的路由示例，如果使用正则表达式重写，是这样子的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    <span class="comment">#表示articles/2003/这个路径映射views模块的special_case_2003函数</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive),</span><br><span class="line">    <span class="comment">#表示匹配4个0-9的任意数字</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$&#x27;</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\w-]+)/$&#x27;</span>, views.article_detail),</span><br><span class="line">    ]</span><br><span class="line"><span class="comment">#注意:上面匹配都加了小括号，这些括号里面的值会当作参数传递到后面的视图函数中</span></span><br></pre></td></tr></table></figure>

<p><code>re_path</code>与<code>path()</code>不同的主要在于两点：<br>1、<code>year</code>中匹配不到<code>10000</code>等非四位数字，这是正则表达式决定的<br>2、传递给视图的所有参数都是字符串类型。而不像<code>path()</code>方法中可以指定转换成某种类型。</p>
<h3 id="四、指定视图参数的默认值"><a href="#四、指定视图参数的默认值" class="headerlink" title="四、指定视图参数的默认值"></a>四、指定视图参数的默认值</h3><p>有一个方便的小技巧是指定视图参数的默认值。 下面是一个路由配置和视图的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;blog/&#x27;</span>, views.page),</span><br><span class="line">    path(<span class="string">&#x27;blog/page&lt;int:num&gt;/&#x27;</span>, views.page),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># View (in blog/views.py)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span>(<span class="params">request, num=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="comment"># Output the appropriate page of blog entries, according to num.</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，两个URL模式指向同一个视图<code>views.page</code> —— 但是第一个模式不会从<code>URL</code> 中捕获任何值。如果第一个模式匹配，<code>page()</code> 函数将使用<code>num</code>参数的默认值”1”。如果第二个模式匹配，<code>page()</code> 将使用正则表达式捕获的<code>num</code> 值。</p>
<h3 id="五、路由匹配请求URL中的哪些部分"><a href="#五、路由匹配请求URL中的哪些部分" class="headerlink" title="五、路由匹配请求URL中的哪些部分"></a>五、路由匹配请求<code>URL</code>中的哪些部分</h3><p>请求的<code>URL</code>被看做是一个普通的<code>Python</code>字符串，路由在其上查找并匹配。进行匹配时将不包括<code>GET</code>或<code>POST</code>请求方式的参数以及域名。<br>例如，在<span class="exturl" data-url="aHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vbXlhcHAvJUU3JTlBJTg0JUU4JUFGJUI3JUU2JUIxJTgyJUU0JUI4JUFEJUVGJUJDJThDJUU4JUI3JUFGJUU3JTk0JUIxJUU1JUIwJTg2JUU2JTlGJUE1JUU2JTg5JUJFJTYwbXlhcHAvJTYwJUUzJTgwJTgy">https://www.example.com/myapp/的请求中，路由将查找`myapp/`。<i class="fa fa-external-link-alt"></i></span><br>在<span class="exturl" data-url="aHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vbXlhcHAvP3BhZ2U9MyVFNyU5QSU4NCVFOCVBRiVCNyVFNiVCMSU4MiVFNCVCOCVBRCVFRiVCQyU4QyVFOCVCNyVBRiVFNyU5NCVCMSVFNCVCOSU5RiVFNSVCMCU4NiVFNiU5RiVBNSVFNiU4OSVCRSU2MG15YXBwLyU2MCVFMyU4MCU4Mg==">https://www.example.com/myapp/?page=3的请求中，路由也将查找`myapp/`。<i class="fa fa-external-link-alt"></i></span><br>路由不检查使用何种HTTP请求方法，所有请求方法POST、GET、HEAD等都将路由到同一个URL的同一个视图。在视图中，才根据具体请求方法的不同，进行不同的处理。</p>
<h3 id="六、错误页面处理"><a href="#六、错误页面处理" class="headerlink" title="六、错误页面处理"></a>六、错误页面处理</h3><p>当<code>Django</code>找不到与请求匹配的<code>URL</code>时，或者当抛出一个异常时，将调用一个错误处理视图。错误视图包括400、403、404和500，分别表示请求错误、拒绝服务、页面不存在和服务器错误。它们分别位于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- handler400 —— django.conf.urls.handler400。</span><br><span class="line">- handler403 —— django.conf.urls.handler403。</span><br><span class="line">- handler404 —— django.conf.urls.handler404。</span><br><span class="line">- handler500 —— django.conf.urls.handler500。</span><br></pre></td></tr></table></figure>

<p>这些值可以在根路由中设置。在其它<code>app</code>中的二级路由中设置这些变量无效。</p>
<p><code>Django</code>有内置的<code>HTML</code>模版，用于返回错误页面给用户，但是这些403，404页面实在丑陋，通常我们都自定义错误页面。</p>
<p>首先，在根路由中额外增加下面的条目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^blog/$&#x27;</span>, views.page),</span><br><span class="line">    url(<span class="string">r&#x27;^blog/page(?P&lt;num&gt;[0-9]+)/$&#x27;</span>, views.page),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 增加的条目</span></span><br><span class="line">handler400 = views.bad_request</span><br><span class="line">handler403 = views.permission_denied</span><br><span class="line">handler404 = views.page_not_found</span><br><span class="line">handler500 = views.page_error</span><br></pre></td></tr></table></figure>

<p>然后在，<code>views.py</code>文件中增加四个处理视图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">request, exception</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;404.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_error</span>(<span class="params">request, exception</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;500.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permission_denied</span>(<span class="params">request, exception</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;403.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_request</span>(<span class="params">request, exception</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;400.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>再根据自己的需求，创建<code>404.html</code>、<code>400.html</code>等四个页面文件，就可以了。</p>
<blockquote>
<p>注意，运行如果报错视图函数参数需要添加<code>exception</code>参数，另外<code>settings.py</code>中<code>debug</code>要设为<code>false</code>才能看到效果。</p>
</blockquote>
<h3 id="七、urls分层模块化（路由分发）"><a href="#七、urls分层模块化（路由分发）" class="headerlink" title="七、urls分层模块化（路由分发）"></a>七、<code>urls</code>分层模块化（路由分发）</h3><p>通常，我们会在每个<code>app</code>里，各自创建一个<code>urls.py</code>路由模块，然后从根路由出发，将<code>app</code>所属的<code>url</code>请求，全部转发到相应的<code>urls.py</code>模块中。</p>
<p>例如，下面是<code>Django</code>网站本身的路由节选。 它包含许多其它路由：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ... snip ...</span></span><br><span class="line">    path(<span class="string">&#x27;community/&#x27;</span>, include(<span class="string">&#x27;aggregator.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;contact/&#x27;</span>, include(<span class="string">&#x27;contact.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># ... snip ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>路由转发使用的是<code>include()</code>方法，需要提前导入，它的参数是转发目的地路径的字符串，路径以圆点分割。</p>
<p>注意，这个例子中的正则表达式没有包含$（字符串结束匹配符），但是包含一个末尾的斜杠。 每当<code>Django</code> 遇到<code>include()</code>（来自<code>django.conf.urls.include()</code>）时，它会去掉<code>URL</code>中匹配的部分并将剩下的字符串发送给<code>include</code>的路由做进一步处理，也就是转发到二级路由去。</p>
<p>另外一种转发其它<code>URL</code>模式的方式是使用一个<code>url()</code>实例的列表。 例如，下面的路由：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> apps.main <span class="keyword">import</span> views <span class="keyword">as</span> main_views</span><br><span class="line"><span class="keyword">from</span> credit <span class="keyword">import</span> views <span class="keyword">as</span> credit_views</span><br><span class="line">extra_patterns = [</span><br><span class="line">    path(<span class="string">&#x27;reports/&#x27;</span>, credit_views.report),</span><br><span class="line">    path(<span class="string">&#x27;reports/&lt;int:id&gt;/&#x27;</span>, credit_views.report),</span><br><span class="line">    path(<span class="string">&#x27;charge/&#x27;</span>, credit_views.charge),</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, main_views.homepage),</span><br><span class="line">    path(<span class="string">&#x27;help/&#x27;</span>, include(<span class="string">&#x27;apps.help.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;credit/&#x27;</span>, include(extra_patterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在这个例子中， <code>/credit/reports/</code> <code>URL</code>将被 <code>credit.views.report()</code> 这个<code>Django</code> 视图处理。<br>上面这种方法可以用来去除路由 中的冗余，其中某个模式前缀被重复使用。例如，下面这个例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/history/&#x27;</span>, views.history),</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/edit/&#x27;</span>, views.edit),</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/discuss/&#x27;</span>, views.discuss),</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/permissions/&#x27;</span>, views.permissions),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>我们可以改进它，通过只声明共同的路径前缀一次并将后面的部分分组转发:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/&#x27;</span>, include([</span><br><span class="line">        path(<span class="string">&#x27;history/&#x27;</span>, views.history),</span><br><span class="line">        path(<span class="string">&#x27;edit/&#x27;</span>, views.edit),</span><br><span class="line">        path(<span class="string">&#x27;discuss/&#x27;</span>, views.discuss),</span><br><span class="line">        path(<span class="string">&#x27;permissions/&#x27;</span>, views.permissions),</span><br><span class="line">    ])),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="八、捕获参数"><a href="#八、捕获参数" class="headerlink" title="八、捕获参数"></a>八、捕获参数</h3><p>被转发的路由会收到来自父路由捕获的所有参数，看下面的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In settings/urls/main.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&lt;username&gt;/blog/&#x27;</span>, include(<span class="string">&#x27;foo.urls.blog&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># In foo/urls/blog.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.blog.index),</span><br><span class="line">    path(<span class="string">&#x27;archive/&#x27;</span>, views.blog.archive),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，捕获的”<code>username</code>“变量将被传递给<code>include()</code>指向的路由，再进一步传递给对应的视图。</p>
<h3 id="九、嵌套参数"><a href="#九、嵌套参数" class="headerlink" title="九、嵌套参数"></a>九、嵌套参数</h3><p>正则表达式允许嵌套参数，<code>Django</code>将解析它们并传递给视图。当反查时，<code>Django</code>将尝试填满所有外围捕获的参数，并忽略嵌套捕获的参数。 考虑下面的<code>URL</code>模式，它带有一个可选的<code>page</code>参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^blog/(page-(\d+)/)?$&#x27;</span>, blog_articles),   <span class="comment"># bad</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^comments/(?:page-(?P&lt;page_number&gt;\d+)/)?$&#x27;</span>, comments),  <span class="comment"># good</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>两个模式都使用嵌套的参数，其解析方式是：例如<code>blog/page-2/</code>将匹配<code>page-2/</code>并带有两个位置参数<code>blog_articles</code>和2。第二个<code>comments</code>的模式将匹配<code>page_number</code>并带有一个值为2的关键字参数<code>comments/page-2/</code>。这个例子中外围参数是一个不捕获的参数(?:…)。</p>
<p><code>blog_articles</code>视图需要最外层捕获的参数来反查，在这个例子中是<code>comments</code>或者没有参数，而<code>page-2/</code>可以不带参数或者用一个<code>page_number</code>值来反查。</p>
<h3 id="十、向视图传递额外的参数"><a href="#十、向视图传递额外的参数" class="headerlink" title="十、向视图传递额外的参数"></a>十、向视图传递额外的参数</h3><p>路由s具有一个钩子（<code>hook</code>），允许你传递一个<code>Python</code>字典作为额外的关键字参数给视图函数。</p>
<p>像这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;blog/&lt;int:year&gt;/&#x27;</span>, views.year_archive, &#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，对于<code>/blog/2005/</code>请求，<code>Django</code>将调<code>用views.year_archive(request, year=&#39;2005&#39;, foo=&#39;bar&#39;)</code>。理论上，你可以在这个字典里传递任何你想要的传递的东西。但是要注意，URL模式捕获的命名关键字参数和在字典中传递的额外参数有可能具有相同的名称，这会发生冲突，要避免。</p>
<h3 id="十一、传递额外的参数给include"><a href="#十一、传递额外的参数给include" class="headerlink" title="十一、传递额外的参数给include()"></a>十一、传递额外的参数给<code>include()</code></h3><p>类似上面，也可以传递额外的参数给<code>include()</code>。参数会传递给<code>include</code>指向的路由中的每一行。</p>
<p>例如，下面两种路由配置方式在功能上完全相同：</p>
<p>配置一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;blog/&#x27;</span>, include(<span class="string">&#x27;inner&#x27;</span>), &#123;<span class="string">&#x27;blog_id&#x27;</span>: <span class="number">3</span>&#125;),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># inner.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;archive/&#x27;</span>, views.archive),</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, views.about),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>配置二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;blog/&#x27;</span>, include(<span class="string">&#x27;inner&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># inner.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;archive/&#x27;</span>, views.archive, &#123;<span class="string">&#x27;blog_id&#x27;</span>: <span class="number">3</span>&#125;),</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, views.about, &#123;<span class="string">&#x27;blog_id&#x27;</span>: <span class="number">3</span>&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意，只有当你确定被<code>include</code>的路由中的每个视图都接收你传递给它们的额外的参数时才有意义，否则其中一个以上视图不接收该参数都将导致错误异常。</p>
<h3 id="十二、url的反向解析"><a href="#十二、url的反向解析" class="headerlink" title="十二、url的反向解析"></a>十二、<code>url</code>的反向解析</h3><p>在实际的<code>Django</code>项目中，经常需要获取某条<code>URL</code>，为生成的内容配置<code>URL</code>链接。</p>
<p>比如，我要在页面上展示一列文章列表，每个条目都是个超级链接，点击就进入该文章的详细页面。</p>
<p>现在我们的路由是这么配置的：<code>^post/(?P\d+)</code>。</p>
<p>在前端中，这就需要为HTML的``标签的href属性提供一个诸如<code>http://www.xxx.com/post/3</code>的值。其中的域名部分，Django会帮你自动添加无须关心，我们关注的是<code>post/3</code>。</p>
<p>此时，一定不能硬编码URL为<code>post/3</code>，那样费时、不可伸缩，而且容易出错。试想，如果哪天，因为某种原因，需要将路由中的正则改成<code>^entry/(?P\d+)</code>，为了让链接正常工作，必须修改对应的<code>herf</code>属性值，于是你去项目里将所有的<code>post/3</code>都改成<code>entry/3</code>吗？显然这是不行的！</p>
<p>我们需要一种安全、可靠、自适应的机制，当修改路由中的代码后，无需在项目源码中大范围搜索、替换失效的硬编码<code>URL</code>。</p>
<p>为了解决这个问题，<code>Django</code>提供了一种解决方案，只需在<code>URL</code>中提供一个<code>name</code>参数，并赋值一个你自定义的、好记的、直观的字符串。</p>
<p>通过这个<code>name</code>参数，可以反向解析<code>URL</code>、反向<code>URL</code>匹配、反向<code>URL</code>查询或者简单的<code>URL</code>反查。</p>
<p>在需要解析<code>URL</code>的地方，对于不同层级，<code>Django</code>提供了不同的工具用于<code>URL</code>反查：</p>
<ul>
<li>在模板语言中：使用<code>url</code>模板标签。(也就是写前端网页时）</li>
<li>在<code>Python</code>代码中：使用<code>reverse()</code>函数。（也就是写视图函数等情况时）</li>
<li>在更高层的与处理<code>Django</code>模型实例相关的代码中：使用<code>get_absolute_url()</code>方法。(也就是在模型<code>model</code>中)</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive, name=<span class="string">&#x27;news-year-archive&#x27;</span>),</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>某一年<code>nnnn</code>对应的归档的<code>URL</code>是<code>/articles/nnnn/</code>。</p>
<p>可以在模板的代码中使用下面的方法获得它们：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;news-year-archive&#x27; 2012 %&#125;&quot;</span>&gt;</span>2012 Archive<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;# Or with the year in a template context variable: #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for yearvar in year_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;news-year-archive&#x27; yearvar %&#125;&quot;</span>&gt;</span>&#123;&#123; yearvar &#125;&#125; Archive<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>Python</code>代码中，这样使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect_to_year</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    year = <span class="number">2006</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;news-year-archive&#x27;</span>, args=(year,)))</span><br></pre></td></tr></table></figure>

<p>其中，起到核心作用的是我们通过<code>name=&#39;news-year-archive&#39;</code>为那条<code>url</code>起了一个可以被引用的名称。</p>
<p><code>URL</code>名称<code>name</code>使用的字符串可以包含任何你喜欢的字符，但是过度的放纵有可能带来重名的冲突，比如两个不同的<code>app</code>，在各自的路由中为某一条<code>url</code>取了相同的<code>name</code>，这就会带来麻烦。为了解决这个问题，又引出了下面命名的URL模式。</p>
<h3 id="十三、命名的URL模式（URL别名）"><a href="#十三、命名的URL模式（URL别名）" class="headerlink" title="十三、命名的URL模式（URL别名）"></a>十三、命名的<code>URL</code>模式（<code>URL</code>别名）</h3><p><code>URL</code>别名可以保证反查到唯一的<code>URL</code>，即使不同的<code>app</code>使用相同的<code>URL</code>名称。</p>
<p>第三方应用始终使用带命名空间的<code>URL</code>是一个很好的做法。</p>
<p>类似地，它还允许你在一个应用有多个实例部署的情况下反查<code>URL</code>。 换句话讲，因为一个应用的多个实例共享相同的命名<code>URL</code>，命名空间提供了一种区分这些命名<code>URL</code> 的方法。</p>
<p>实现命名空间的做法很简单，在路由文件中添加<code>app_name = &#39;wechat&#39;</code>和<code>namespace=&#39;wechat&#39;</code>这种类似的定义。</p>
<p><strong>范例</strong>：</p>
<p>以两个实例为例子：<code>wechat</code> 和<code>weibo</code>。</p>
<p>假设我们已经在创建和显示投票时考虑了实例命名空间的问题，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;wechat/&#x27;</span>, include(<span class="string">&#x27;wechat.urls&#x27;</span>, namespace=<span class="string">&#x27;wechat&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;weibo/&#x27;</span>, include(<span class="string">&#x27;weibo.urls&#x27;</span>, namespace=<span class="string">&#x27;weibo&#x27;</span>))</span><br><span class="line">]</span><br><span class="line"><span class="comment"># wechat/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">&#x27;wechat&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index, name = <span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, views.hello, name = <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># weibo/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">&#x27;weibo&#x27;</span></span><br><span class="line">urlpatterns=[</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, views.hello, name=<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在视图中方向生成连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wechat/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(request)</span><br><span class="line">    print(<span class="string">&#x27;当前连接&#x27;</span>, reverse(<span class="string">&quot;wechat:index&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&quot;我是wechat应用中的index视图&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;当前连接&#x27;</span>, reverse(<span class="string">&quot;wechat:hello&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;我是wechat应用中的hello视图&#x27;</span>)</span><br><span class="line"><span class="comment"># weibo/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;当前连接&#x27;</span>, reverse(<span class="string">&quot;weibo:index&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;我就是weibo应用中的index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;当前连接&#x27;</span>, reverse(<span class="string">&quot;weibo:hello&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;我就是weibo应用中的hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>和在模板中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前连接：&#123;% url &#x27;wechat:index&#x27; %&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前连接：&#123;% url &#x27;wechat:hello&#x27; %&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前连接：&#123;% url &#x27;weibo:index&#x27; %&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前连接：&#123;% url &#x27;weibo:index&#x27; %&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="十四、URL命名空间和include的路由"><a href="#十四、URL命名空间和include的路由" class="headerlink" title="十四、URL命名空间和include的路由"></a>十四、URL命名空间和include的路由</h3><p>可以通过两种方式指定include的路由的应用名称空间。</p>
<p><strong>第一种</strong></p>
<p>在include的路由模块中设置与urlpatterns属性相同级别的<code>app_name</code>属性。必须将实际模块或模块的字符串引用传递到include()，而不是urlpatterns本身的列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># polls/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/&#x27;</span>, views.DetailView.as_view(), name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>此时，polls.urls中定义的URL将具有应用名称空间polls。</p>
<p><strong>第二种</strong></p>
<p>include一个包含嵌套命名空间数据的对象。如果你include()一个url()实例的列表，那么该对象中包含的URL将添加到全局命名空间。 但是，你也可以include()一个2元组，其中包含：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&lt;list of path()&#x2F;re_path() instances&gt;, &lt;application namespace&gt;)</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rom django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">polls_patterns = ([</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/&#x27;</span>, views.DetailView.as_view(), name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">], <span class="string">&#x27;polls&#x27;</span>)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, include(polls_patterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这将include指定的URL模式到给定的app命名空间。</p>
<p>可以使用include()的namespace参数指定app实例命名空间。如果未指定，则app实例命名空间默认为路由的app命名空间。</p>
<p>注：之前不记得有过路由的文章，其他参考可进入：<a href="https://www.diandian100.cn/219c79ef.html">Django路由系统</a></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>Django之路由层</tag>
        <tag>django路由</tag>
        <tag>django路由别名</tag>
        <tag>django路由模块</tag>
        <tag>django路由参数</tag>
        <tag>django反向解析</tag>
        <tag>django url</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础使用</title>
    <url>/cf791c57.html</url>
    <content><![CDATA[<p><code>Docker</code> 是一个开源项目最初是 <code>DotCloud</code> 公司内部的一个业余项目。它基于 <code>Google</code> 公司推出的 <code>Go</code> 语言实现。项目后来加入了 <code>Linux</code> 基金会，遵从了 <code>Apache 2.0</code> 协议，项目代码在 <code>GitHub</code> 上进行维护。<code>Docker</code>是一个轻量级、便携式与外界隔离的容器，也是一个可以在容器中很方便地构建、传输、运行应用的引擎。这里简单记录下一些Docker常用命令的使用。</p>
<a id="more"></a>

<h2 id="Docker镜像加速器"><a href="#Docker镜像加速器" class="headerlink" title="Docker镜像加速器"></a><code>Docker</code>镜像加速器</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><code>Linux</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;daotools&#x2F;set_mirror.sh | sh -s http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>

<p>该脚本可以将 <code>--registry-mirror</code> 加入到你的 Docker 配置文件 <code>/etc/docker/daemon.json</code> 中。适用于 <code>Ubuntu14.04</code>、<code>Debian</code>、<code>CentOS6</code> 、<code>CentOS7</code>、<code>Fedora</code>、<code>Arch Linux</code>、<code>openSUSE</code> <code>Leap 42.1</code>，其他版本可能有细微不同。更多详情请访问文档。</p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a><code>macOS</code></h3><p>右键点击桌面顶栏的 <code>docker</code> 图标，选择 <code>Preferences</code> ，在 <code>Daemon</code> 标签（<code>Docker 17.03</code> 之前版本为 <code>Advanced</code> 标签）下的 <code>Registry mirrors</code> 列表中加入下面的镜像地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>

<p>点击 <code>Apply &amp; Restart</code> 按钮使设置生效。</p>
<p><code>Docker Toolbox</code> 等配置方法请参考<span class="exturl" data-url="aHR0cDovL2d1aWRlLmRhb2Nsb3VkLmlvL2Rjcy9kYW9jbG91ZC05MTUzMTUxLmh0bWwjZG9ja2VyLXRvb2xib3g=">帮助文档<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><code>Windows</code></h3><p>在桌面右下角状态栏中右键 <code>docker</code> 图标，修改在 <code>Docker Daemon</code> 标签页中的 <code>json</code> ，把下面的地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>

<p>加到” <code>registry-mirrors</code>“的数组里。点击 <code>Apply</code> 。</p>
<h3 id="手动添加镜像源"><a href="#手动添加镜像源" class="headerlink" title="手动添加镜像源"></a>手动添加镜像源</h3><p><strong>NOTE</strong>：若以上命令不可用，可以自行添加镜像源，方法如下：</p>
<h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建配置文件</span><br><span class="line">touch &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure>

<h4 id="写入内容"><a href="#写入内容" class="headerlink" title="写入内容"></a>写入内容</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;:[&quot;http:&#x2F;&#x2F;f1361db2.m.daocloud.io&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启<code>docker</code>服务</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="Docker基础命令解释"><a href="#Docker基础命令解释" class="headerlink" title="Docker基础命令解释"></a><code>Docker</code>基础命令解释</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@docker ~]# docker --help</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">docker [OPTIONS] COMMAND [arg...]</span><br><span class="line"></span><br><span class="line">       docker daemon [ --help | ... ]</span><br><span class="line"></span><br><span class="line">       docker [ --help | -v | --version ]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">A</span><br><span class="line">self-sufficient runtime for containers.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  --config&#x3D;~&#x2F;.docker              Location of client config files  #客户端配置文件的位置</span><br><span class="line"></span><br><span class="line">  -D, --debug&#x3D;false               Enable debug mode  #启用Debug调试模式</span><br><span class="line"></span><br><span class="line">  -H, --host&#x3D;[]                   Daemon socket(s) to connect to  #守护进程的套接字（Socket）连接</span><br><span class="line"></span><br><span class="line">  -h, --help&#x3D;false                Print usage  #打印使用</span><br><span class="line"></span><br><span class="line">  -l, --log-level&#x3D;info            Set the logging level  #设置日志级别</span><br><span class="line"></span><br><span class="line">  --tls&#x3D;false                     Use TLS; implied by--tlsverify  #</span><br><span class="line"></span><br><span class="line">  --tlscacert&#x3D;~&#x2F;.docker&#x2F;ca.pem    Trust certs signed only by this CA  #信任证书签名CA</span><br><span class="line"></span><br><span class="line">  --tlscert&#x3D;~&#x2F;.docker&#x2F;cert.pem    Path to TLS certificate file  #TLS证书文件路径</span><br><span class="line"></span><br><span class="line">  --tlskey&#x3D;~&#x2F;.docker&#x2F;key.pem      Path to TLS key file  #TLS密钥文件路径</span><br><span class="line"></span><br><span class="line">  --tlsverify&#x3D;false               Use TLS and verify the remote  #使用TLS验证远程</span><br><span class="line"></span><br><span class="line">  -v, --version&#x3D;false             Print version information and quit  #打印版本信息并退出</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">    attach    Attach to a running container  #当前shell下attach连接指定运行镜像</span><br><span class="line"></span><br><span class="line">    build     Build an image from a Dockerfile  #通过Dockerfile定制镜像</span><br><span class="line"></span><br><span class="line">    commit    Create a new image from a container&#39;s changes  #提交当前容器为新的镜像</span><br><span class="line"></span><br><span class="line">    cp    Copy files&#x2F;folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line"></span><br><span class="line">    create    Create a new container  #创建一个新的容器，同run 但不启动容器</span><br><span class="line"></span><br><span class="line">    diff    Inspect changes on a container&#39;s filesystem  #查看docker容器变化</span><br><span class="line"></span><br><span class="line">    events    Get real time events from the server#从docker服务获取容器实时事件</span><br><span class="line"></span><br><span class="line">    exec    Run a command in a running container#在已存在的容器上运行命令</span><br><span class="line"></span><br><span class="line">    export    Export a container&#39;s filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)</span><br><span class="line"></span><br><span class="line">    history    Show the history of an image  #展示一个镜像形成历史</span><br><span class="line"></span><br><span class="line">    images    List images  #列出系统当前镜像</span><br><span class="line"></span><br><span class="line">    import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)</span><br><span class="line"></span><br><span class="line">    info    Display system-wide information  #显示系统相关信息</span><br><span class="line"></span><br><span class="line">    inspect    Return low-level information on a container or image  #查看容器详细信息</span><br><span class="line"></span><br><span class="line">    kill    Kill a running container  #kill指定docker容器</span><br><span class="line"></span><br><span class="line">    load    Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)</span><br><span class="line"></span><br><span class="line">    login    Register or log in to a Docker registry#注册或者登陆一个docker源服务器</span><br><span class="line"></span><br><span class="line">    logout    Log out from a Docker registry  #从当前Docker registry退出</span><br><span class="line"></span><br><span class="line">    logs    Fetch the logs of a container  #输出当前容器日志信息</span><br><span class="line"></span><br><span class="line">    pause    Pause all processes within a container#暂停容器</span><br><span class="line"></span><br><span class="line">    port    List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口</span><br><span class="line"></span><br><span class="line">    ps    List containers  #列出容器列表</span><br><span class="line"></span><br><span class="line">    pull    Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line"></span><br><span class="line">    push    Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器</span><br><span class="line"></span><br><span class="line">    rename    Rename a container  #重命名容器</span><br><span class="line"></span><br><span class="line">    restart    Restart a running container  #重启运行的容器</span><br><span class="line"></span><br><span class="line">    rm    Remove one or more containers  #移除一个或者多个容器</span><br><span class="line"></span><br><span class="line">    rmi    Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)</span><br><span class="line"></span><br><span class="line">    run    Run a command in a new container  #创建一个新的容器并运行一个命令</span><br><span class="line"></span><br><span class="line">    save    Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)</span><br><span class="line"></span><br><span class="line">    search    Search the Docker Hub for images  #在docker</span><br><span class="line">hub中搜索镜像</span><br><span class="line"></span><br><span class="line">    start    Start one or more stopped containers#启动容器</span><br><span class="line"></span><br><span class="line">    stats    Display a live stream of container(s) resource usage statistics  #统计容器使用资源</span><br><span class="line"></span><br><span class="line">    stop    Stop a running container  #停止容器</span><br><span class="line"></span><br><span class="line">    tag         Tag an image into a repository  #给源中镜像打标签</span><br><span class="line"></span><br><span class="line">    top       Display the running processes of a container #查看容器中运行的进程信息</span><br><span class="line"></span><br><span class="line">    unpause    Unpause all processes within a container  #取消暂停容器</span><br><span class="line"></span><br><span class="line">    version    Show the Docker version information#查看容器版本号</span><br><span class="line"></span><br><span class="line">    wait         Block until a container stops, then print its exit code  #截取容器停止时的退出状态值</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Run &#39;docker COMMAND --help&#39; for more information on a command.  #运行docker命令在帮助可以获取更多信息</span><br></pre></td></tr></table></figure>

<h2 id="显示已有镜像"><a href="#显示已有镜像" class="headerlink" title="显示已有镜像"></a>显示已有镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">or</span><br><span class="line">docker image ls</span><br><span class="line">显示：</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              a2a15febcdf3        3 weeks ago         64.2MB</span><br><span class="line">hello-world         latest              fce289e99eb9        8 months ago        1.84kB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker image rm 镜像名</span><br></pre></td></tr></table></figure>

<h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search 镜像名</span><br></pre></td></tr></table></figure>

<h2 id="获取下载docker镜像"><a href="#获取下载docker镜像" class="headerlink" title="获取下载docker镜像"></a>获取下载docker镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名(镜像ID)</span><br></pre></td></tr></table></figure>

<h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run 镜像名(镜像id前三位)</span><br></pre></td></tr></table></figure>

<h2 id="查看正在运行的docker镜像"><a href="#查看正在运行的docker镜像" class="headerlink" title="查看正在运行的docker镜像"></a>查看正在运行的<code>docker</code>镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看正在运行的镜像(存活的)</span><br><span class="line">docker ps</span><br><span class="line"># 查看运行过的镜像记录(挂掉的)</span><br><span class="line">docker ps -a</span><br><span class="line"># 查看运行过的镜像记录仅显示记录id</span><br><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure>

<h2 id="删除镜像、镜像记录"><a href="#删除镜像、镜像记录" class="headerlink" title="删除镜像、镜像记录"></a>删除镜像、镜像记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除镜像记录</span><br><span class="line">docker rm 镜像记录id(前三位即可)</span><br><span class="line"># 删除镜像</span><br><span class="line">docker rmi 镜像id</span><br></pre></td></tr></table></figure>

<h2 id="批量删除镜像记录"><a href="#批量删除镜像记录" class="headerlink" title="批量删除镜像记录"></a>批量删除镜像记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 批量删除所有镜像记录</span><br><span class="line">docker rm &#96;docker ps -aq&#96;</span><br></pre></td></tr></table></figure>

<h2 id="导出docker镜像"><a href="#导出docker镜像" class="headerlink" title="导出docker镜像"></a>导出<code>docker</code>镜像</h2><p>导出命令为<code>docker save</code></p>
<h3 id="查看当前已有镜像"><a href="#查看当前已有镜像" class="headerlink" title="查看当前已有镜像"></a>查看当前已有镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">tonyu&#x2F;flask-hello            latest              b7ac47e3f338        7 minutes ago       890MB</span><br></pre></td></tr></table></figure>

<h3 id="导出该镜像"><a href="#导出该镜像" class="headerlink" title="导出该镜像"></a>导出该镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp# docker save tonyu&#x2F;flask-hello &gt; &#x2F;tmp&#x2F;flask-centos.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="查看已导出镜像"><a href="#查看已导出镜像" class="headerlink" title="查看已导出镜像"></a>查看已导出镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp# ls -l</span><br><span class="line">总用量 892504</span><br><span class="line">-rw-r--r-- 1 root root 913905664 9月  17 10:20 flask-centos.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="导入docker镜像"><a href="#导入docker镜像" class="headerlink" title="导入docker镜像"></a>导入<code>docker</code>镜像</h2><p>我们先删除刚才的镜像和镜像记录<code>tonyu/flask-hello</code>，导入命令是<code>docker load</code></p>
<h3 id="导入镜像包"><a href="#导入镜像包" class="headerlink" title="导入镜像包"></a>导入镜像包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp# docker load &lt; &#x2F;tmp&#x2F;flask-centos.tar.gz</span><br><span class="line">4479b1829422: Loading layer [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;]   5.14MB&#x2F;5.14MB</span><br><span class="line">2199fb161fda: Loading layer [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;]  3.072kB&#x2F;3.072kB</span><br><span class="line">Loaded image: tonyu&#x2F;flask-hello:latest</span><br></pre></td></tr></table></figure>

<h3 id="查看是否导出成功"><a href="#查看是否导出成功" class="headerlink" title="查看是否导出成功"></a>查看是否导出成功</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;tmp# docker images</span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">tonyu&#x2F;flask-hello            latest              b7ac47e3f338        14 minutes ago      890MB</span><br></pre></td></tr></table></figure>



<h2 id="交互式运行镜像"><a href="#交互式运行镜像" class="headerlink" title="交互式运行镜像"></a>交互式运行镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --rm ubuntu bash</span><br><span class="line">docker run：运行容器命令</span><br><span class="line">参数：</span><br><span class="line">	-it： -i代表交互式操作；-t代表终端。</span><br><span class="line">	--rm：容器退出后将其删除。也可不指定参数，手动docker rm，使用--rm可以避免浪费空间。</span><br><span class="line">	ubuntu：指定的容器镜像</span><br><span class="line">	bash：指定用交互式的shell， 因此需要bash命令（可省略）</span><br></pre></td></tr></table></figure>

<h2 id="后台模式启动Docker镜像"><a href="#后台模式启动Docker镜像" class="headerlink" title="后台模式启动Docker镜像"></a>后台模式启动<code>Docker</code>镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 每秒打印一次hello centos</span><br><span class="line">docker run -d centos &#x2F;bin&#x2F;sh -c &quot;while true;do echo hello centos; sleep 1;done&quot;</span><br><span class="line"># 查看正在运行的docker镜像</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">61b09f32454c        centos              &quot;&#x2F;bin&#x2F;sh -c &#39;while t…&quot;   5 seconds ago       Up 5 seconds                            strange_hodgkin</span><br></pre></td></tr></table></figure>

<h2 id="查看容器内的标准输出日志"><a href="#查看容器内的标准输出日志" class="headerlink" title="查看容器内的标准输出日志"></a>查看容器内的标准输出日志</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看容器内的标准输出</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker logs 61b</span><br><span class="line">hello centos</span><br><span class="line">hello centos</span><br><span class="line">hello centos</span><br><span class="line">hello centos</span><br><span class="line"># 查看容器内的标准输出（实时监测，类似tail）</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker logs 61b -f</span><br><span class="line">hello centos</span><br><span class="line">hello centos</span><br><span class="line">hello centos</span><br><span class="line">hello centos</span><br></pre></td></tr></table></figure>



<h2 id="终止正在运行的docker镜像"><a href="#终止正在运行的docker镜像" class="headerlink" title="终止正在运行的docker镜像"></a>终止正在运行的<code>docker</code>镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker stop 61b</span><br><span class="line">61b</span><br></pre></td></tr></table></figure>

<h2 id="重新运行记录中的docker镜像"><a href="#重新运行记录中的docker镜像" class="headerlink" title="重新运行记录中的docker镜像"></a>重新运行记录中的<code>docker</code>镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker start 61b</span><br></pre></td></tr></table></figure>

<h2 id="提交创建自定义的镜像"><a href="#提交创建自定义的镜像" class="headerlink" title="提交创建自定义的镜像"></a>提交创建自定义的镜像</h2><p>我们发现当我们运行镜像在镜像中安装了自定义的软件，退出后重新进入该镜像，之前安装的软件都不存在了，这就需要我们提交下自己的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 交互式运行centos镜像</span><br><span class="line">docker run -it centos</span><br><span class="line"># 安装vim</span><br><span class="line">yum install vim -y</span><br><span class="line"># 退出centos镜像</span><br><span class="line">exit</span><br><span class="line"># 查看docker镜像运行记录</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">d684e9735d15        centos              &quot;&#x2F;bin&#x2F;bash&quot;              7 minutes ago       Exited (0) 35 seconds ago                         loving_villa</span><br><span class="line">ni</span><br><span class="line"># 提交运行容器镜像为新的自定义镜像</span><br><span class="line">docker commit d68 centos-vim</span><br><span class="line"># 查看docker镜像</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">contos-vim          latest              e90556adf335        16 seconds ago      369MB</span><br><span class="line"># 运行镜像</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker run -it e90</span><br><span class="line"># 测试vim</span><br><span class="line">[root@743b1e0c3e11 &#x2F;]# vim</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h2><p>期望：一个外部能访问的flask程序</p>
<h3 id="进入centos镜像"><a href="#进入centos镜像" class="headerlink" title="进入centos镜像"></a>进入<code>centos</code>镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it centos</span><br></pre></td></tr></table></figure>

<h3 id="安装python工具包"><a href="#安装python工具包" class="headerlink" title="安装python工具包"></a>安装<code>python</code>工具包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install python-setuptools</span><br></pre></td></tr></table></figure>

<h3 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装<code>flask</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@47830fd38e99 &#x2F;]# easy_install flask</span><br></pre></td></tr></table></figure>

<h3 id="创建flask文件"><a href="#创建flask文件" class="headerlink" title="创建flask文件"></a>创建<code>flask</code>文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@47830fd38e99 &#x2F;]# cd &#x2F;home</span><br><span class="line">[root@47830fd38e99 home]# ls</span><br><span class="line">[root@47830fd38e99 home]# touch flask-web.py</span><br><span class="line">[root@47830fd38e99 home]# vim flask-web.py </span><br></pre></td></tr></table></figure>

<h3 id="写入代码"><a href="#写入代码" class="headerlink" title="写入代码"></a>写入代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">	return &#39;&lt;h1&gt;Im flask, im from Centos Docker&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">	app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;9000)</span><br></pre></td></tr></table></figure>

<h3 id="退出镜像"><a href="#退出镜像" class="headerlink" title="退出镜像"></a>退出镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@47830fd38e99 home]# exit</span><br></pre></td></tr></table></figure>

<h3 id="查看镜像运行记录"><a href="#查看镜像运行记录" class="headerlink" title="查看镜像运行记录"></a>查看镜像运行记录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">47830fd38e99        centos              &quot;&#x2F;bin&#x2F;bash&quot;              22 minutes ago      Exited (0) 3 seconds ago                           jolly_prosk</span><br><span class="line">uriakova</span><br></pre></td></tr></table></figure>

<h3 id="提交自定义镜像"><a href="#提交自定义镜像" class="headerlink" title="提交自定义镜像"></a>提交自定义镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker commit 478 flask-contos</span><br><span class="line">sha256:9d07a47feca87a97ecff59f2b58c369051af25ef343813e0f1a0cf326bb88721</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看镜像列表"><a href="#查看镜像列表" class="headerlink" title="查看镜像列表"></a>查看镜像列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">flask-contos        latest              9d07a47feca8        8 seconds ago       374MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="运行镜像-1"><a href="#运行镜像-1" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker run -d -p 7000:9000  9d0 python &#x2F;home&#x2F;flask-web.py</span><br><span class="line">f53e673da36d942becdc8bf9199dcbe608569511f102904e084d5b92c4d5aaab</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看当前正在运行的镜像和端口映射"><a href="#查看当前正在运行的镜像和端口映射" class="headerlink" title="查看当前正在运行的镜像和端口映射"></a>查看当前正在运行的镜像和端口映射</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">f53e673da36d        9d0                 &quot;python &#x2F;home&#x2F;flask-…&quot;   6 seconds ago       Up 5 seconds        0.0.0.0:7000-&gt;9000&#x2F;tcp   gracious_euclid</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker port f53</span><br><span class="line">9000&#x2F;tcp -&gt; 0.0.0.0:7000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190916095729.png"></p>
<h2 id="发布容器镜像到仓库"><a href="#发布容器镜像到仓库" class="headerlink" title="发布容器镜像到仓库"></a>发布容器镜像到仓库</h2><h3 id="注册dockerhub"><a href="#注册dockerhub" class="headerlink" title="注册dockerhub"></a>注册<code>dockerhub</code></h3><p>至 <span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=">https://hub.docker.com/<i class="fa fa-external-link-alt"></i></span> 注册用户</p>
<h3 id="登录docker"><a href="#登录docker" class="headerlink" title="登录docker"></a>登录<code>docker</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:/home/tony# docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one</span><br><span class="line">.Username: 646547989</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改镜像名"><a href="#修改镜像名" class="headerlink" title="修改镜像名"></a>修改镜像名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交格式</span><br><span class="line">docker push 注册用户名&#x2F;镜像名 </span><br><span class="line"># 修改提交镜像格式</span><br><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker tag flask-contos 646547989&#x2F;flask-centos</span><br></pre></td></tr></table></figure>

<h3 id="查看修改后的镜像"><a href="#查看修改后的镜像" class="headerlink" title="查看修改后的镜像"></a>查看修改后的镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker images</span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">646547989&#x2F;flask-centos   latest              9d07a47feca8        3 days ago          374MB</span><br><span class="line">flask-contos             latest              9d07a47feca8        3 days ago          374MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:&#x2F;home&#x2F;tony# docker push 646547989&#x2F;flask-centos</span><br><span class="line">The push refers to repository [docker.io&#x2F;646547989&#x2F;flask-centos]</span><br><span class="line">630f3a7bfad7: Pushed </span><br><span class="line">877b494a9f30: Mounted from library&#x2F;centos </span><br><span class="line">latest: digest: sha256:c81d9d2d6d595c912c5ed6215e1c2e7da14518a141ae19f226eaaa146bd68d94 size: 741</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看推送的镜像"><a href="#查看推送的镜像" class="headerlink" title="查看推送的镜像"></a>查看推送的镜像</h3><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190916103713.png"></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="某些镜像无法删除"><a href="#某些镜像无法删除" class="headerlink" title="某些镜像无法删除"></a>某些镜像无法删除</h3><p>有些镜像删除的时候会提示类似：“<code>image has dependent child images</code>”，大概意思是镜像有依赖，即有其他 <code>image FROM</code> 了这个 <code>image</code>，可以使用下面的命令列出所有在指定 <code>image</code> 之后创建的 <code>image</code> 的父 <code>image</code></p>
<p>网上有些说先查询其依赖，再依次删除。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker image inspect --format&#x3D;&#39;&#123;&#123;.RepoTags&#125;&#125; &#123;&#123;.Id&#125;&#125; &#123;&#123;.Parent&#125;&#125;&#39; $(docker image ls -q --filter since&#x3D;XXX) # XXX指镜像ID</span><br></pre></td></tr></table></figure>

<p>实际情况下我们可能只有两三个镜像删除不掉，我们删除时加一个<code>--force</code>即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像id(前三位即可) --force</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Docker基础使用</tag>
        <tag>Docker命令</tag>
        <tag>Docker基础</tag>
        <tag>显示docker</tag>
        <tag>删除docker</tag>
        <tag>搜索docker</tag>
        <tag>下载docker</tag>
        <tag>运行docker</tag>
        <tag>导出镜像</tag>
        <tag>导入镜像</tag>
        <tag>获取docker</tag>
        <tag>docker images</tag>
        <tag>docker image ls</tag>
        <tag>docker search</tag>
        <tag>docker pull</tag>
        <tag>docker run</tag>
        <tag>docker rm</tag>
        <tag>docker ps</tag>
        <tag>docker push</tag>
        <tag>docker save</tag>
        <tag>docker load</tag>
        <tag>发布镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask之封装ueditor</title>
    <url>/3f02c688.html</url>
    <content><![CDATA[<p>百度出品的<code>ueditor</code>是一款优秀的在线编辑器，官方给出来部分开发语言的使用案例，之前使用网友开发的<code>python ueditor</code>插件使用起来也要修改好些东西，对于<code>ueditor</code>不熟悉，也挺折腾，索性研究了下<code>php</code>版本的<code>ueditor</code>，照猫画虎写了一个基于<code>flask</code>的<code>ueditor</code>。</p>
<a id="more"></a>

<h2 id="部署Flask"><a href="#部署Flask" class="headerlink" title="部署Flask"></a>部署<code>Flask</code></h2><p><code>pip</code>安装好<code>flask</code>，默认<code>app.py</code>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;世界，你好&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h2 id="添加编辑器视图路由"><a href="#添加编辑器视图路由" class="headerlink" title="添加编辑器视图路由"></a>添加编辑器视图路由</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><p>模板代码直接拿百度提供的即可，<code>js</code>地址修改为自己的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>完整demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">            width: 80%;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/plain&quot;</span>&gt;</span></span></span><br><span class="line">        这里写你的初始化内容</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 配置文件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/editor/ueditor.config.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 编辑器源码文件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/editor/ueditor.all.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 实例化编辑器 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span></span><br><span class="line">        var ue = UE.getEditor(&#x27;container&#x27;);</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h2><p>正常访问，除了文件上传，其实这个编辑器就能正常使用了，但是上传功能肯定少不了的，这就要借助我们的后端语言去处理上传的文件了。</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200330132610.png" alt="img"></p>
<h2 id="修改后端服务处理地址"><a href="#修改后端服务处理地址" class="headerlink" title="修改后端服务处理地址"></a>修改后端服务处理地址</h2><p>修改<code>ueditor.config.js</code>中的后端服务处理地址，亦可以在模板文件中修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">var</span> ue = UE.getEditor(<span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                serverUrl : <span class="string">&#x27;/upfile&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(ue)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="创建处理方法"><a href="#创建处理方法" class="headerlink" title="创建处理方法"></a>创建处理方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/upfile&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;, &#x27;options&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ueditor</span>():</span></span><br></pre></td></tr></table></figure>

<h2 id="设置响应参数"><a href="#设置响应参数" class="headerlink" title="设置响应参数"></a>设置响应参数</h2><p>设置返回的参数和相应类型，并读取后端处理上传文件的配置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 响应类型</span></span><br><span class="line">    mime_type = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    <span class="comment"># 用来返回的结果</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="comment"># 配置文件路径</span></span><br><span class="line">    config_file = os.path.join(app.static_folder, <span class="string">&#x27;editor/config.json&#x27;</span>)</span><br><span class="line">    <span class="comment"># 配置文件内容</span></span><br><span class="line">    CONFIG = &#123;&#125;</span><br><span class="line">    <span class="comment"># 读取配置文件并格式化</span></span><br><span class="line">    <span class="keyword">with</span> open(config_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 去除配置文件中的注释并将json转为python中的字典</span></span><br><span class="line">            CONFIG = json.loads(re.sub(<span class="string">r&#x27;\/\*.*\*\/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, f.read()))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            CONFIG = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断用户动作</span></span><br><span class="line">    action = request.args.get(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line">    <span class="comment"># 上传配置</span></span><br><span class="line">    config = &#123;&#125;</span><br><span class="line">    <span class="comment"># 提交的图片表单名称</span></span><br><span class="line">    field_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    result = json.dumps(result)</span><br><span class="line">    res = make_response(result)</span><br><span class="line">    res.mimetype = mime_type</span><br><span class="line">    res.headers[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    res.headers[<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>] = <span class="string">&#x27;X-Requested-With,X_Requested_With&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h2 id="添加文件类型的处理方法"><a href="#添加文件类型的处理方法" class="headerlink" title="添加文件类型的处理方法"></a>添加文件类型的处理方法</h2><p><code>ueditor</code>常见的文件处理类型有上传文件(图片、视频，文件)，涂鸦上传、远程图片抓取，代码中已经详细注释了，故不另做解释。以下是完整的文件处理方法代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, make_response</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> uploader <span class="keyword">import</span> Upload</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ueditor</span>():</span></span><br><span class="line">    <span class="comment"># 响应类型</span></span><br><span class="line">    mime_type = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    <span class="comment"># 用来返回的结果</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="comment"># 配置文件路径</span></span><br><span class="line">    config_file = os.path.join(app.static_folder, <span class="string">&#x27;editor/config.json&#x27;</span>)</span><br><span class="line">    <span class="comment"># 配置文件内容</span></span><br><span class="line">    CONFIG = &#123;&#125;</span><br><span class="line">    <span class="comment"># 读取配置文件并格式化</span></span><br><span class="line">    <span class="keyword">with</span> open(config_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 去除配置文件中的注释并将json转为python中的字典</span></span><br><span class="line">            CONFIG = json.loads(re.sub(<span class="string">r&#x27;\/\*.*\*\/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, f.read()))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            CONFIG = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断用户动作</span></span><br><span class="line">    action = request.args.get(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line">    <span class="comment"># 上传配置</span></span><br><span class="line">    config = &#123;&#125;</span><br><span class="line">    <span class="comment"># 提交的图片表单名称</span></span><br><span class="line">    field_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 如果是页面初始化读取配置</span></span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">&#x27;config&#x27;</span>:</span><br><span class="line">        result = CONFIG</span><br><span class="line">    <span class="comment"># 如果是上传图片、涂鸦、视频、文件</span></span><br><span class="line">    <span class="keyword">elif</span> action <span class="keyword">in</span> [<span class="string">&#x27;uploadimage&#x27;</span>, <span class="string">&#x27;uploadvideo&#x27;</span>, <span class="string">&#x27;uploadfile&#x27;</span>]:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&#x27;uploadimage&#x27;</span>:</span><br><span class="line">            field_name = CONFIG.get(<span class="string">&#x27;imageFieldName&#x27;</span>)</span><br><span class="line">            config = &#123;</span><br><span class="line">                <span class="string">&quot;pathFormat&quot;</span>: CONFIG[<span class="string">&#x27;imagePathFormat&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;maxSize&quot;</span>   : CONFIG[<span class="string">&#x27;imageMaxSize&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;allowFiles&quot;</span>: CONFIG[<span class="string">&#x27;imageAllowFiles&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">&#x27;uploadvideo&#x27;</span>:</span><br><span class="line">            field_name = CONFIG.get(<span class="string">&#x27;videoFieldName&#x27;</span>)</span><br><span class="line">            config = &#123;</span><br><span class="line">                <span class="string">&quot;pathFormat&quot;</span>: CONFIG[<span class="string">&#x27;videoPathFormat&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;maxSize&quot;</span>: CONFIG[<span class="string">&#x27;videoMaxSize&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;allowFiles&quot;</span>: CONFIG[<span class="string">&#x27;videoAllowFiles&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            field_name = CONFIG.get(<span class="string">&#x27;fileFieldName&#x27;</span>)</span><br><span class="line">            config = &#123;</span><br><span class="line">                <span class="string">&quot;pathFormat&quot;</span>: CONFIG[<span class="string">&#x27;filePathFormat&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;maxSize&quot;</span>: CONFIG[<span class="string">&#x27;fileMaxSize&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;allowFiles&quot;</span>: CONFIG[<span class="string">&#x27;fileAllowFiles&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment"># 判断文件是否真实</span></span><br><span class="line">        <span class="keyword">if</span> field_name <span class="keyword">in</span> request.files:</span><br><span class="line">            <span class="comment"># 获取文件</span></span><br><span class="line">            file = request.files.get(field_name)</span><br><span class="line">            <span class="comment"># 执行上传</span></span><br><span class="line">            upload_obj = Upload(file, config, app.static_folder)</span><br><span class="line">            result = upload_obj.get_file_info()</span><br><span class="line">            print(<span class="string">&#x27;我已经执行上传要输出响应了&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 请求有误，报错</span></span><br><span class="line">            result[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;小子，你又开始恶意了？&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&#x27;uploadscrawl&#x27;</span>:</span><br><span class="line">        config = &#123;</span><br><span class="line">            <span class="string">&quot;pathFormat&quot;</span>: CONFIG[<span class="string">&#x27;scrawlPathFormat&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;maxSize&quot;</span>: CONFIG[<span class="string">&#x27;scrawlMaxSize&#x27;</span>],</span><br><span class="line">            <span class="comment"># &quot;allowFiles&quot;: CONFIG[&#x27;scrawlAllowFiles&#x27;],</span></span><br><span class="line">            <span class="string">&quot;oriName&quot;</span>: <span class="string">&quot;scrawl.png&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        field_name = CONFIG[<span class="string">&#x27;scrawlFieldName&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> field_name <span class="keyword">in</span> request.form:</span><br><span class="line">            uploader = Upload(request.form[field_name], config, app.static_folder, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">            result = uploader.get_file_info()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;上传接口出错&#x27;</span></span><br><span class="line">    <span class="comment"># 抓取远程图片</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&#x27;catchimage&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        config = &#123;</span><br><span class="line">            <span class="string">&quot;pathFormat&quot;</span>: CONFIG[<span class="string">&#x27;catcherPathFormat&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;maxSize&quot;</span>: CONFIG[<span class="string">&#x27;catcherMaxSize&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;allowFiles&quot;</span>: CONFIG[<span class="string">&#x27;catcherAllowFiles&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;oriName&quot;</span>: <span class="string">&quot;yuancheng.png&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        field_name = CONFIG[<span class="string">&#x27;catcherFieldName&#x27;</span>]</span><br><span class="line">        print(<span class="string">&#x27;表单，你已经开始执行了啊&#x27;</span>, request.form)</span><br><span class="line">        <span class="comment"># 用来存放远程图片</span></span><br><span class="line">        sources = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 存放每个远程图片的返回信息</span></span><br><span class="line">        _res_lists = []</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;%s[]&#x27;</span> % field_name <span class="keyword">in</span> request.form:</span><br><span class="line">            sources = request.form.getlist(<span class="string">&#x27;%s[]&#x27;</span> % field_name)</span><br><span class="line">            <span class="keyword">for</span> img_url <span class="keyword">in</span> sources:</span><br><span class="line">                print(<span class="string">&#x27;都有什么图片：&#x27;</span>, img_url)</span><br><span class="line">                uploader = Upload(img_url, config, app.static_folder, <span class="string">&#x27;remote&#x27;</span>)</span><br><span class="line">                info = uploader.get_file_info()</span><br><span class="line">                _res_lists.append(&#123;</span><br><span class="line">                    <span class="string">&#x27;state&#x27;</span>: info[<span class="string">&#x27;state&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;url&#x27;</span>: info[<span class="string">&#x27;url&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;original&#x27;</span>: info[<span class="string">&#x27;original&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;source&#x27;</span>: img_url,</span><br><span class="line">                &#125;)</span><br><span class="line">            result[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;SUCCESS&#x27;</span> <span class="keyword">if</span> len(_res_lists) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;ERROR&#x27;</span></span><br><span class="line">            result[<span class="string">&#x27;list&#x27;</span>] = _res_lists</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;上传接口出错&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;请求地址出错&#x27;</span></span><br><span class="line"></span><br><span class="line">    result = json.dumps(result)</span><br><span class="line">    res = make_response(result)</span><br><span class="line">    res.mimetype = mime_type</span><br><span class="line">    res.headers[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    res.headers[<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>] = <span class="string">&#x27;X-Requested-With,X_Requested_With&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h2 id="文件处理类"><a href="#文件处理类" class="headerlink" title="文件处理类"></a>文件处理类</h2><p>上述代码中引用了文件处理类，用来出来用户上传文件的操作，主要分为上传文件、上传涂鸦、抓取远程图片三个主要处理功能，完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> lazy_pinyin</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span>:</span></span><br><span class="line">    state_info = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    state_map = [  <span class="comment"># 上传状态映射表，国际化用户需考虑此处数据的国际化</span></span><br><span class="line">        <span class="string">&quot;SUCCESS&quot;</span>,  <span class="comment"># 上传成功标记，在UEditor中内不可改变，否则flash判断会出错</span></span><br><span class="line">        <span class="string">&quot;文件大小超出 upload_max_filesize 限制&quot;</span>,</span><br><span class="line">        <span class="string">&quot;文件大小超出 MAX_FILE_SIZE 限制&quot;</span>,</span><br><span class="line">        <span class="string">&quot;文件未被完整上传&quot;</span>,</span><br><span class="line">        <span class="string">&quot;没有文件被上传&quot;</span>,</span><br><span class="line">        <span class="string">&quot;上传文件为空&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    state_error = &#123;</span><br><span class="line">        <span class="string">&quot;ERROR_TMP_FILE&quot;</span>: <span class="string">&quot;临时文件错误&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_TMP_FILE_NOT_FOUND&quot;</span>: <span class="string">&quot;找不到临时文件&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_SIZE_EXCEED&quot;</span>: <span class="string">&quot;文件大小超出网站限制&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_TYPE_NOT_ALLOWED&quot;</span>: <span class="string">&quot;文件类型不允许&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_CREATE_DIR&quot;</span>: <span class="string">&quot;目录创建失败&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_DIR_NOT_WRITEABLE&quot;</span>: <span class="string">&quot;目录没有写权限&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_FILE_MOVE&quot;</span>: <span class="string">&quot;文件保存时出错&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_FILE_NOT_FOUND&quot;</span>: <span class="string">&quot;找不到上传文件&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_WRITE_CONTENT&quot;</span>: <span class="string">&quot;写入文件内容错误&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_UNKNOWN&quot;</span>: <span class="string">&quot;未知错误&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_DEAD_LINK&quot;</span>: <span class="string">&quot;链接不可用&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_HTTP_LINK&quot;</span>: <span class="string">&quot;链接不是http链接&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ERROR_HTTP_CONTENTTYPE&quot;</span>: <span class="string">&quot;链接contentType不正确&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="comment"># 要处理的文件对象；处理该对象的配置参数；文件保存的目录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file, config, save_folder, __type=<span class="string">&#x27;up_file&#x27;</span></span>):</span></span><br><span class="line">        self.file = file</span><br><span class="line">        self.config = config</span><br><span class="line">        self.save_folder = save_folder</span><br><span class="line">        self.__type = __type</span><br><span class="line">        <span class="keyword">if</span> self.__type == <span class="string">&#x27;remote&#x27;</span>:</span><br><span class="line">            self.save_remote()</span><br><span class="line">        <span class="keyword">elif</span> self.__type == <span class="string">&#x27;base64&#x27;</span>:</span><br><span class="line">            self.up_base64()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.up_file()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_remote</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取文件内容</span></span><br><span class="line">        _file = request.urlopen(self.file).read()</span><br><span class="line">        <span class="comment"># 文件大小</span></span><br><span class="line">        self.file_size = len(_file)</span><br><span class="line">        <span class="comment"># 原始文件名</span></span><br><span class="line">        self.ori_name = self.config[<span class="string">&#x27;oriName&#x27;</span>]</span><br><span class="line">        <span class="comment"># 文件后缀</span></span><br><span class="line">        self.file_type = self.get_file_type()</span><br><span class="line">        <span class="comment"># 生成新的文件名含路径</span></span><br><span class="line">        self.full_name = self.get_full_name()</span><br><span class="line">        <span class="comment"># 文件保存路径完整绝对路径</span></span><br><span class="line">        self.file_path = self.get_file_path()</span><br><span class="line">        <span class="comment"># 判断文件大小是否超出限制</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.check_size():</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_SIZE_EXCEED&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取保存路径</span></span><br><span class="line">        dir_name = os.path.dirname(self.file_path)</span><br><span class="line">        <span class="comment"># 判断保存路径是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">            <span class="comment"># 创建保存路径，创建失败则报错</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(dir_name)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.state_info = self.get_error(<span class="string">&#x27;ERROR_CREATE_DIR&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断保存路径如果不允许写入则直接报错</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> os.access(dir_name, os.W_OK):</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_DIR_NOT_WRITEABLE&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 开始保存文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> open(self.file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(_file)</span><br><span class="line">            self.state_info = self.state_map[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_FILE_MOVE&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">up_base64</span>(<span class="params">self</span>):</span></span><br><span class="line">        im = base64.b64decode(self.file)</span><br><span class="line">        <span class="comment"># 文件大小</span></span><br><span class="line">        self.file_size = len(im)</span><br><span class="line">        <span class="comment"># 原始文件名</span></span><br><span class="line">        self.ori_name = self.config[<span class="string">&#x27;oriName&#x27;</span>]</span><br><span class="line">        <span class="comment"># 文件后缀</span></span><br><span class="line">        self.file_type = self.get_file_type()</span><br><span class="line">        <span class="comment"># 生成新的文件名含路径</span></span><br><span class="line">        self.full_name = self.get_full_name()</span><br><span class="line">        <span class="comment"># 文件保存路径完整绝对路径</span></span><br><span class="line">        self.file_path = self.get_file_path()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断文件大小是否超出限制</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.check_size():</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_SIZE_EXCEED&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取保存路径</span></span><br><span class="line">        dir_name = os.path.dirname(self.file_path)</span><br><span class="line">        <span class="comment"># 判断保存路径是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">            <span class="comment"># 创建保存路径，创建失败则报错</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(dir_name)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.state_info = self.get_error(<span class="string">&#x27;ERROR_CREATE_DIR&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断保存路径如果不允许写入则直接报错</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> os.access(dir_name, os.W_OK):</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_DIR_NOT_WRITEABLE&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 开始保存文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> open(self.file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(im)</span><br><span class="line">            self.state_info = self.state_map[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_FILE_MOVE&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 上传文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">up_file</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        上传文件的主处理方法</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 文件大小</span></span><br><span class="line">        self.file_size = self.get_file_size()</span><br><span class="line">        <span class="comment"># 原始文件名</span></span><br><span class="line">        self.ori_name = self.get_ori_name()</span><br><span class="line">        <span class="comment"># 文件后缀</span></span><br><span class="line">        self.file_type = self.get_file_type()</span><br><span class="line">        <span class="comment"># 生成新的文件名含路径</span></span><br><span class="line">        self.full_name = self.get_full_name()</span><br><span class="line">        <span class="comment"># 文件保存路径完整绝对路径</span></span><br><span class="line">        self.file_path = self.get_file_path()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断文件大小是否超出限制</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.check_size():</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_SIZE_EXCEED&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 判断文件类型是否允许</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.check_type():</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_TYPE_NOT_ALLOWED&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 开始保存文件</span></span><br><span class="line">        self.save_file()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_ori_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取原始文件名（不支持中文，使用pypinyin将中文转为每个汉字首字母）</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> secure_filename(<span class="string">&#x27;&#x27;</span>.join(lazy_pinyin(self.file.filename, style=<span class="number">4</span>)))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取文件大小(将指针移动到文件末尾，读取指针位置，即该文件的大小；</span></span><br><span class="line"><span class="string">        获得文件大小后还将指针移动到文件开始位置)。</span></span><br><span class="line"><span class="string">        :return: 文件大小</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.file.seek(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        file_size = self.file.tell()</span><br><span class="line">        self.file.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> file_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_file</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取保存路径</span></span><br><span class="line">        dir_name = os.path.dirname(self.file_path)</span><br><span class="line">        <span class="comment"># 判断保存路径是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">            <span class="comment"># 创建保存路径，创建失败则报错</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(dir_name)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.state_info = self.get_error(<span class="string">&#x27;ERROR_CREATE_DIR&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断保存路径如果不允许写入则直接报错</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> os.access(dir_name, os.W_OK):</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_DIR_NOT_WRITEABLE&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 开始保存文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.file.save(self.file_path)</span><br><span class="line">            self.state_info = self.state_map[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.state_info = self.get_error(<span class="string">&#x27;ERROR_FILE_MOVE&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文件错误提示</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_error</span>(<span class="params">self, error_code</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        上传错误输出</span></span><br><span class="line"><span class="string">        :param error_code: 错误代码</span></span><br><span class="line"><span class="string">        :return: 错误信息</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.state_error.get(error_code, <span class="string">&#x27;未知错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件后缀</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_type</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取文件类型</span></span><br><span class="line"><span class="string">        :return:返回文件后缀包含.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;.%s&#x27;</span> % self.ori_name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">-1</span>].lower()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成新的文件名,含相对路径</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_full_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        按照配置文件规则生成文件新地址</span></span><br><span class="line"><span class="string">        :return: 生成新的文件地址</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        _format = self.config[<span class="string">&#x27;pathFormat&#x27;</span>]</span><br><span class="line">        _format = _format.replace(<span class="string">&#x27;&#123;uuid&#125;&#x27;</span>, str(uuid4()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断路径首字符是否是“/”，如果是则去除，便于拼接完整绝对路径</span></span><br><span class="line">        _format = _format[<span class="number">1</span>:<span class="number">-1</span>] <span class="keyword">if</span> _format[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span> <span class="keyword">else</span> _format</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (_format, self.get_file_type())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件路径</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        生成文件保存的完整绝对路径</span></span><br><span class="line"><span class="string">        :return: 文件完整绝对路径</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(self.save_folder, self.full_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证文件类型是否允许</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_type</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        判断上传的文件后缀是否在配置文件允许的后缀列表中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.file_type <span class="keyword">in</span> self.config[<span class="string">&#x27;allowFiles&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证文件大小是否超出设定</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        判断文件大小是否超出配置文件中的文件大小单位：字节</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.file_size &lt;= self.config[<span class="string">&#x27;maxSize&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;state&#x27;</span>: self.state_info,</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: url_for(<span class="string">&#x27;static&#x27;</span>, filename=self.full_name, _external=<span class="literal">True</span>),</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>: self.ori_name,</span><br><span class="line">            <span class="string">&#x27;original&#x27;</span>: self.ori_name,</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: self.file_type,</span><br><span class="line">            <span class="string">&#x27;size&#x27;</span>: self.file_size,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>官方示例代码很简单明了，照着其他语言编写还是不难的，有些部分稍有不同，根据当前使用的语言修改该部分即可。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>flask</category>
      </categories>
      <tags>
        <tag>ueditor</tag>
        <tag>Flask之封装ueditor</tag>
        <tag>python ueditor</tag>
        <tag>python在线编辑器</tag>
        <tag>flask在线编辑器</tag>
        <tag>python百度编辑器</tag>
        <tag>flask百度编辑器</tag>
        <tag>flask ueditor</tag>
        <tag>封装ueditor</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask常用基础配置</title>
    <url>/7c0db3b1.html</url>
    <content><![CDATA[<p>Flask是一个使用 [<code>Python</code>]编写的轻量级 <code>Web</code> 应用框架。其 [<code>WSGI</code>]工具箱采用 <code>Werkzeug</code> ，[模板引擎]则使用 <code>Jinja2</code> 。Flask使用 BSD 授权。</p>
<p><code>Flask</code>也被称为 “<code>microframework</code>” ，因为它使用简单的核心，用 <code>extension</code> 增加其他功能。<code>Flask</code>没有默认使用的数据库、窗体验证工具.</p>
<a id="more"></a>

<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a><code>Response</code></h2><p><code>Flask</code>给我们提供的响应方式有三种：响应字符串、视图、重定向，除此之外还给我们提供了响应<code>json</code>格式、响应文件格式。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 响应字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应视图(可携带数据给视图)</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">return</span> render_template&#123;<span class="string">&#x27;index.html&#x27;</span>, name=<span class="string">&#x27;张学友&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向至指定url</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line">redirect： <span class="keyword">return</span> redirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应json，响应头里自动包含了Content-type:application/json</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张学友&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应文件内容，自动识别文件，响应头自动设置Content-type为该文件格式</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> send_file</span><br><span class="line"><span class="keyword">return</span> send_file(文件地址)</span><br></pre></td></tr></table></figure>

<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a><code>Request</code></h2><p><code>Flask</code>给我们提供的请求数据有如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line">request.method <span class="comment"># 请求方式</span></span><br><span class="line">request.form <span class="comment"># 存放FormData中的数据 to_dict 序列化成字典</span></span><br><span class="line">request.args <span class="comment"># 获取URL中的数据 to_dict 序列化成字典</span></span><br><span class="line">request.url <span class="comment"># 访问的完整路径</span></span><br><span class="line">request.path <span class="comment"># 路由地址</span></span><br><span class="line">request.host <span class="comment"># 主机地址</span></span><br><span class="line">request.values <span class="comment"># 获取 FormData and URL中的数据 不要用to_dict</span></span><br><span class="line">request.json  <span class="comment"># 如果提交时请求头中的Content-Type:application/json 字典操作</span></span><br><span class="line">request.data  <span class="comment"># 如果提交时请求头中的Content-Type 无法被识别 将请求体中的原始数据存放 byte</span></span><br><span class="line">request.cookies <span class="comment"># 获取Cookie中的数据</span></span><br><span class="line">request.headers <span class="comment"># 获取请求头</span></span><br><span class="line">request.files <span class="comment"># 序列化文件存储 save()</span></span><br></pre></td></tr></table></figure>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="endpoint"><a href="#endpoint" class="headerlink" title="endpoint"></a><code>endpoint</code></h3><p>反向生成<code>url</code>地址标志、不设置该参数则默认为该函数视图名</p>
<h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a><code>methods</code></h4><p>视图函数允许的请求方式</p>
<h4 id="defaults"><a href="#defaults" class="headerlink" title="defaults"></a><code>defaults</code></h4><p>视图默认参数。如<code>defaults=&#123;&quot;id&quot;:99&#125;</code></p>
<h4 id="strict-slashes"><a href="#strict-slashes" class="headerlink" title="strict_slashes"></a><code>strict_slashes</code></h4><p>是否严格遵循路由地址。如：<code>strict_slashes=True</code></p>
<h4 id="redirect-to"><a href="#redirect-to" class="headerlink" title="redirect_to"></a><code>redirect_to</code></h4><p>永久301重定向至目标链接。如<code>redirect_to=&#39;/login&#39;</code></p>
<h4 id="动态路由参数"><a href="#动态路由参数" class="headerlink" title="动态路由参数"></a>动态路由参数</h4><p>默认不填写类型代表字符串 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app_route(&quot;&#x2F;index&#x2F;&lt;id&gt;&quot;)</span><br><span class="line">def index(id):</span><br><span class="line">	pass</span><br><span class="line"># 等同于</span><br><span class="line">@app_route(&quot;&#x2F;index&#x2F;&lt;string:id&gt;&quot;)</span><br><span class="line">def index(id):</span><br><span class="line">	pass</span><br><span class="line"># 可设置参数类型</span><br><span class="line">@app_route(&quot;&#x2F;index&#x2F;&lt;int:id&gt;&quot;)</span><br><span class="line">def index(id):</span><br><span class="line">	pass</span><br></pre></td></tr></table></figure>

<h2 id="Flask实例化配置"><a href="#Flask实例化配置" class="headerlink" title="Flask实例化配置"></a><code>Flask</code>实例化配置</h2><p>这是针对一个已经实例化的<code>app</code>进行的配置</p>
<p>那么在Flask实例化的时候,传递的参数是什么鬼呢?</p>
<p>其实可以理解为对Flask实例进行的初始配置,这里面的参数是非常好理解,注意关键字是非常非常非常好理解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static_folder &#x3D; &#39;static&#39;,  # 静态文件目录的路径 默认当前项目中的static目录</span><br><span class="line">static_host &#x3D; None,  # 指定远程静态文件所用的Host地址,默认为空</span><br><span class="line">static_url_path &#x3D; None,  # 静态文件目录的url路径 默认不写是与static_folder同名,远程静态文件时复用</span><br><span class="line"># host_matching是否开启host主机位匹配,是要与static_host一起使用,如果配置了static_host, 则必须赋值为True</span><br><span class="line"># 这里要说明一下,@app.route(&quot;&#x2F;&quot;,host&#x3D;&quot;localhost:5000&quot;) 就必须要这样写</span><br><span class="line"># host&#x3D;&quot;localhost:5000&quot; 如果主机头不是 localhost:5000 则无法通过当前的路由</span><br><span class="line">host_matching &#x3D; False,  # 如果不是特别需要的话,慎用,否则所有的route 都需要host&#x3D;&quot;&quot;的参数</span><br><span class="line">subdomain_matching &#x3D; False,  # 理论上来说是用来限制SERVER_NAME子域名的,但是目前还没有感觉出来区别在哪里</span><br><span class="line">template_folder &#x3D; &#39;templates&#39;  # template模板目录, 默认当前项目中的 templates 目录</span><br><span class="line">instance_path &#x3D; None,  # 指向另一个Flask实例的路径</span><br><span class="line">instance_relative_config &#x3D; False  # 是否加载另一个实例的配置</span><br><span class="line">root_path &#x3D; None  # 主模块所在的目录的绝对路径,默认项目目录</span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置模板目录为temp， 静态文件目录为static</span><br><span class="line">app &#x3D; Flask(__name__， template_folder&#x3D;‘temp’, static_folder &#x3D; &#39;static&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="Flask对象配置"><a href="#Flask对象配置" class="headerlink" title="Flask对象配置"></a><code>Flask</code>对象配置</h2><p>应用会需要某种配置。你可能会需要根据应用环境更改不同的设置，比如切换调试模式、设置密钥、或是别的设定环境的东西。</p>
<p>Flask 被设计为需要配置来启动应用。你可以在代码中硬编码配置，这对于小的应用并不坏，但是有更好的方法。</p>
<p>跟你如何载入配置无关，会有一个可用的配置对象保存着载入的配置值: <code>Flask</code>对象的 <code>config</code>属性。这是 Flask 自己放置特定配置值的地方，也是扩展可以存储配置值的地方。但是，你也可以把自己的配置保存到这个对象里。</p>
<p>flask对象配置项有如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;DEBUG&#39;: False,  # 是否开启Debug模式</span><br><span class="line">    &#39;TESTING&#39;: False,  # 是否开启测试模式</span><br><span class="line">    &#39;PROPAGATE_EXCEPTIONS&#39;: None,  # 异常传播(是否在控制台打印LOG) 当Debug或者testing开启后,自动为True</span><br><span class="line">    &#39;PRESERVE_CONTEXT_ON_EXCEPTION&#39;: None,  # 一两句话说不清楚,一般不用它</span><br><span class="line">    &#39;SECRET_KEY&#39;: None,  # 之前遇到过,在启用Session的时候,一定要有它</span><br><span class="line">    &#39;PERMANENT_SESSION_LIFETIME&#39;: 31,  # days , Session的生命周期(天)默认31天</span><br><span class="line">    &#39;USE_X_SENDFILE&#39;: False,  # 是否弃用 x_sendfile</span><br><span class="line">    &#39;LOGGER_NAME&#39;: None,  # 日志记录器的名称</span><br><span class="line">    &#39;LOGGER_HANDLER_POLICY&#39;: &#39;always&#39;,</span><br><span class="line">    &#39;SERVER_NAME&#39;: None,  # 服务访问域名</span><br><span class="line">    &#39;APPLICATION_ROOT&#39;: None,  # 项目的完整路径</span><br><span class="line">    &#39;SESSION_COOKIE_NAME&#39;: &#39;session&#39;,  # 在cookies中存放session加密字符串的名字</span><br><span class="line">    &#39;SESSION_COOKIE_DOMAIN&#39;: None,  # 在哪个域名下会产生session记录在cookies中</span><br><span class="line">    &#39;SESSION_COOKIE_PATH&#39;: None,  # cookies的路径</span><br><span class="line">    &#39;SESSION_COOKIE_HTTPONLY&#39;: True,  # 控制 cookie 是否应被设置 httponly 的标志，</span><br><span class="line">    &#39;SESSION_COOKIE_SECURE&#39;: False,  # 控制 cookie 是否应被设置安全标志</span><br><span class="line">    &#39;SESSION_REFRESH_EACH_REQUEST&#39;: True,  # 这个标志控制永久会话如何刷新</span><br><span class="line">    &#39;MAX_CONTENT_LENGTH&#39;: None,  # 如果设置为字节数， Flask 会拒绝内容长度大于此值的请求进入，并返回一个 413 状态码</span><br><span class="line">    &#39;SEND_FILE_MAX_AGE_DEFAULT&#39;: 12,  # hours 默认缓存控制的最大期限</span><br><span class="line">    &#39;TRAP_BAD_REQUEST_ERRORS&#39;: False,</span><br><span class="line">    # 如果这个值被设置为 True ，Flask不会执行 HTTP 异常的错误处理，而是像对待其它异常一样，</span><br><span class="line">    # 通过异常栈让它冒泡地抛出。这对于需要找出 HTTP 异常源头的可怕调试情形是有用的。</span><br><span class="line">    &#39;TRAP_HTTP_EXCEPTIONS&#39;: False,</span><br><span class="line">    # Werkzeug 处理请求中的特定数据的内部数据结构会抛出同样也是“错误的请求”异常的特殊的 key errors 。</span><br><span class="line">    # 同样地，为了保持一致，许多操作可以显式地抛出 BadRequest 异常。</span><br><span class="line">    # 因为在调试中，你希望准确地找出异常的原因，这个设置用于在这些情形下调试。</span><br><span class="line">    # 如果这个值被设置为 True ，你只会得到常规的回溯。</span><br><span class="line">    &#39;EXPLAIN_TEMPLATE_LOADING&#39;: False,</span><br><span class="line">    &#39;PREFERRED_URL_SCHEME&#39;: &#39;http&#39;,  # 生成URL的时候如果没有可用的 URL 模式话将使用这个值</span><br><span class="line">    &#39;JSON_AS_ASCII&#39;: True,</span><br><span class="line">    # 默认情况下 Flask 使用 ascii 编码来序列化对象。如果这个值被设置为 False ，</span><br><span class="line">    # Flask不会将其编码为 ASCII，并且按原样输出，返回它的 unicode 字符串。</span><br><span class="line">    # 比如 jsonfiy 会自动地采用 utf-8 来编码它然后才进行传输。</span><br><span class="line">    &#39;JSON_SORT_KEYS&#39;: True,</span><br><span class="line">    #默认情况下 Flask 按照 JSON 对象的键的顺序来序来序列化它。</span><br><span class="line">    # 这样做是为了确保键的顺序不会受到字典的哈希种子的影响，从而返回的值每次都是一致的，不会造成无用的额外 HTTP 缓存。</span><br><span class="line">    # 你可以通过修改这个配置的值来覆盖默认的操作。但这是不被推荐的做法因为这个默认的行为可能会给你在性能的代价上带来改善。</span><br><span class="line">    &#39;JSONIFY_PRETTYPRINT_REGULAR&#39;: True,</span><br><span class="line">    &#39;JSONIFY_MIMETYPE&#39;: &#39;application&#x2F;json&#39;,</span><br><span class="line">    &#39;TEMPLATES_AUTO_RELOAD&#39;: None,</span><br></pre></td></tr></table></figure>

<p>以上配置项使用方式有三种：</p>
<h3 id="对象-gt-属性"><a href="#对象-gt-属性" class="headerlink" title="对象-&gt;属性"></a>对象-&gt;属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.secret_key &#x3D; &#39;123456&#39;</span><br><span class="line">app.debug &#x3D; True</span><br></pre></td></tr></table></figure>

<h3 id="对象-gt-config-属性"><a href="#对象-gt-config-属性" class="headerlink" title="对象-&gt;config[属性]"></a>对象-&gt;<code>config</code>[属性]</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.config[&#39;SECRET_KEY&#39;] &#x3D; &#39;123456&#39;</span><br><span class="line">app.config[&#39;DEBUG&#39;] &#x3D; True</span><br></pre></td></tr></table></figure>

<h3 id="使用类的方式导入"><a href="#使用类的方式导入" class="headerlink" title="使用类的方式导入"></a>使用类的方式导入</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>根目录创建一个<code>flask_setting.py</code>文件</p>
<h4 id="写入代码"><a href="#写入代码" class="headerlink" title="写入代码"></a>写入代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class FlaskDebug:</span><br><span class="line">    DEBUG &#x3D; True</span><br><span class="line">    SECRET_KEY &#x3D; &quot;Debug_secret_key&quot;</span><br><span class="line">    SESSION_COOKIE_NAME &#x3D; &#39;Debug_session&#39;</span><br><span class="line"></span><br><span class="line">class FlaskTesting:</span><br><span class="line">    DEBUG &#x3D; True</span><br><span class="line">    SECRET_KEY &#x3D; &quot;Testing_secret_key&quot;</span><br><span class="line">    SESSION_COOKIE_NAME &#x3D; &#39;Testing_session&#39;</span><br></pre></td></tr></table></figure>

<h4 id="主页面使用改配置"><a href="#主页面使用改配置" class="headerlink" title="主页面使用改配置"></a>主页面使用改配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import flask_setting</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"># 使用debug模式配置文件</span><br><span class="line">app.config.from_object(flask_setting.FlaskDebug)</span><br><span class="line"># app.config.from_object(flask_setting.FlaskTesting)</span><br></pre></td></tr></table></figure>

<h2 id="消息闪现flash"><a href="#消息闪现flash" class="headerlink" title="消息闪现flash"></a>消息闪现<code>flash</code></h2><p><code>Flask</code> 提供了消息闪现系统，可以简单地给用户反馈。 消息闪现系统通常会在请求结束时记录信息，并在下一个（且仅在下一个）请求中访问记录的信息。展现这些消息通常结合要模板布局。</p>
<p><code>flash</code>基于<code>session</code>、<code>cookie</code>，所以必须开启<code>SECRET_KEY</code>，读取一次(部分或全部)，全部删除</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request, flash, get_flashed_messages</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.debug &#x3D; True</span><br><span class="line">app.secret_key &#x3D; &#39;123456&#39;</span><br><span class="line">@app.route(&#39;&#x2F;flash1&#39;)</span><br><span class="line"># 写入flash</span><br><span class="line">def flash1():</span><br><span class="line">    flash(&#39;刘德华&#39;, &#39;hk&#39;)</span><br><span class="line">    flash(&#39;张学友&#39;, &#39;hk&#39;)</span><br><span class="line">    flash(&#39;周杰伦&#39;, &#39;tw&#39;)</span><br><span class="line">    flash(&#39;车易迅&#39;, &#39;tw&#39;)</span><br><span class="line">    flash(&#39;天安门&#39;, &#39;bj&#39;)</span><br><span class="line">    flash(&#39;店门&#39;, &#39;bj&#39;)</span><br><span class="line">    return &#39;我是flash1&#39;</span><br><span class="line">    </span><br><span class="line"># 读取flash，过滤读取category为hk和bj的数据</span><br><span class="line">@app.route(&#39;&#x2F;flash2&#39;)</span><br><span class="line">def flash2():</span><br><span class="line">    print(get_flashed_messages(category_filter&#x3D;[&#39;hk&#39;, &#39;bj&#39;]))</span><br><span class="line">    return &#39;我是flash2&#39;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><p><code>Flask</code> 用 <em>蓝图（<code>blueprints</code>）</em> 的概念来在一个应用中或跨应用制作应用组件和支持通用的模式。蓝图很好地简化了大型应用工作的方式，并提供给 <code>Flask</code> 扩展在应用上注册操作的核心方法。一个 <code>Blueprint</code> 对象与 <code>Flask</code> 应用对象的工作方式很像，但它确实不是一个应用，而是一个描述如何构建或扩展应用的 <em>蓝图</em> 。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>把一个应用分解为一个蓝图的集合。这对大型应用是理想的。一个项目可以实例化一个应用对象，初始化几个扩展，并注册一集合的蓝图。</li>
<li>以 URL 前缀和/或子域名，在应用上注册一个蓝图。 URL 前缀/子域名中的参数即成为这个蓝图下的所有视图函数的共同的视图参数（默认情况下）。</li>
<li>在一个应用中用不同的 URL 规则多次注册一个蓝图。</li>
<li>通过蓝图提供模板过滤器、静态文件、模板和其它功能。一个蓝图不一定要实现应用或者视图函数。</li>
<li>初始化一个 Flask 扩展时，在这些情况中注册一个蓝图。</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目录结构</span><br><span class="line">app.py</span><br><span class="line">users</span><br><span class="line">	|- view.py</span><br><span class="line">	|- temp</span><br><span class="line">		|- index.html</span><br></pre></td></tr></table></figure>

<h4 id="文件代码"><a href="#文件代码" class="headerlink" title="文件代码"></a>文件代码</h4><h5 id="users-view-py"><a href="#users-view-py" class="headerlink" title="users/view.py"></a><code>users/view.py</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Blueprint, render_template</span><br><span class="line"># 注册一个蓝图，默认html模板目录为temp</span><br><span class="line">user &#x3D; Blueprint(&#39;user&#39;, __name__, template_folder&#x3D;&#39;temp&#39;)</span><br><span class="line"></span><br><span class="line"># index视图函数</span><br><span class="line">@user.route(&#39;&#x2F;index&#39;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="user-temp-index-html"><a href="#user-temp-index-html" class="headerlink" title="user/temp/index.html"></a><code>user/temp/index.html</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;我是user蓝图中的index视图函数&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a><code>app.py</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from users.view import user</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.debug &#x3D; True</span><br><span class="line"># 注册蓝图，且蓝图url前缀为&#39;&#x2F;user&#39;</span><br><span class="line">app.register_blueprint(user, url_prefix&#x3D;&#39;&#x2F;user&#39;)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><p>访问127.0.0.1:5000/user/index</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190918154631.png"></p>
<h2 id="特殊装饰器"><a href="#特殊装饰器" class="headerlink" title="特殊装饰器"></a>特殊装饰器</h2><p>类似于<code>Django</code>的中间件</p>
<p><code>@app.before_request</code></p>
<p>请求进入视图之前，返回<code>None</code>或不用<code>return</code>继续向下执行</p>
<p><code>@app.after_request</code></p>
<p>响应返回给客户端之前，含参，该参数即<code>Response</code>对象，响应前可修改响应体或响应头</p>
<p>如：<code>b1/b2/b3</code>三个请求前方法， <code>a1/a2/a3</code>三个请求后方法，正常请求流程为：<code>b1-&gt;b2-&gt;b3-&gt;a3-&gt;a2-&gt;a1</code>，</p>
<p>异常情况，如<code>b1</code>执行被返回了：<code>b1-&gt;a3-&gt;a2-&gt;a1</code></p>
<p><code>@app.errorhandler()</code></p>
<p>装饰器含参，参数为请求代码：404,201等等，视图也包含参数，参数为默认的<code>str</code>消息</p>
<h2 id="AssertionError"><a href="#AssertionError" class="headerlink" title="AssertionError"></a><code>AssertionError</code></h2><p>日常开发中很多路由需要验证用户是否登录，<code>python</code>让我们很方便的利用装饰器实现这种场景。</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, render_template, jsonify, send_file, request, session</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器，验证用户是否已登录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkLogin</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">res</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;uname&#x27;</span>):</span><br><span class="line">            print(<span class="string">&#x27;您当前未登录&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="meta">@checkLogin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这里是首页&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户页面</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/users&#x27;)</span></span><br><span class="line"><span class="meta">@checkLogin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这里是用户页面&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 登录页面</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">&#x27;uname&#x27;</span>)==<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&#x27;pwd&#x27;</span>) == <span class="string">&#x27;admin888&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;uname&#x27;</span>] = request.form.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们运行该段代码直接报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AssertionError: View function mapping is overwriting an existing endpoint function: res</span><br></pre></td></tr></table></figure>

<p>原因是我们写的验证器最后返回的函数是<code>res</code>，首页路由返回的函数为<code>res</code>，用户路由返回的也是<code>res</code>，重名导致出现该错误，这就如同我们写了两个同名的<code>index</code>路由，解决该问题有两种方法。</p>
<h3 id="导入functools包"><a href="#导入functools包" class="headerlink" title="导入functools包"></a>导入<code>functools</code>包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, render_template, jsonify, send_file, request, session</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器，验证用户是否已登录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkLogin</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">res</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;uname&#x27;</span>):</span><br><span class="line">            print(<span class="string">&#x27;您当前未登录&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="meta">@checkLogin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这里是首页&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户页面</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/users&#x27;)</span></span><br><span class="line"><span class="meta">@checkLogin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;z这里是用户页面&#x27;</span></span><br><span class="line"><span class="comment"># 登录页面</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">&#x27;uname&#x27;</span>)==<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&#x27;pwd&#x27;</span>) == <span class="string">&#x27;admin888&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;uname&#x27;</span>] = request.form.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时就会返回原始函数名，不会出现该问题。</p>
<h3 id="flask自带的endport"><a href="#flask自带的endport" class="headerlink" title="flask自带的endport"></a><code>flask</code>自带的<code>endport</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, render_template, jsonify, send_file, request, session</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器，验证用户是否已登录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkLogin</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">res</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;uname&#x27;</span>):</span><br><span class="line">            print(<span class="string">&#x27;您当前未登录&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, endpoint=&#x27;index&#x27;)</span></span><br><span class="line"><span class="meta">@checkLogin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这里是首页&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户页面</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/users&#x27;, endpoint=&#x27;users&#x27;)</span></span><br><span class="line"><span class="meta">@checkLogin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;z这里是用户页面&#x27;</span></span><br><span class="line"><span class="comment"># 登录页面</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">&#x27;uname&#x27;</span>)==<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&#x27;pwd&#x27;</span>) == <span class="string">&#x27;admin888&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;uname&#x27;</span>] = request.form.get(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask路由</tag>
        <tag>Flask request</tag>
        <tag>flask response</tag>
        <tag>flask实例化配置</tag>
        <tag>flask对象配置</tag>
        <tag>flask flash</tag>
        <tag>flask闪现</tag>
        <tag>flask蓝图</tag>
        <tag>blueprint</tag>
        <tag>before_request</tag>
        <tag>after_request</tag>
        <tag>errorhandler</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫系列之requests模块</title>
    <url>/60bd9920.html</url>
    <content><![CDATA[<p>之前用<code>php</code>的时候也爬取过别人网站的数据，那时候采集数据，感觉自从<code>python</code>火起来之后就变为爬虫了，甚至让人觉得一说到爬虫代指的就是<code>python</code>了，不过想想来看使用<code>python</code>制作爬虫比当年使用<code>php</code>采集简直容易简单的太多了，<code>php</code>那时候只能自个写正则进行繁琐的匹配，<code>python</code>不光可以使用正则，第三方库使用<code>xpath</code>和<code>BeautifulSoup</code>进行目标解析让我不用正则就能轻松爬取到想要的数据，一个字“太爽了”！！！</p>
<a id="more"></a>

<p><code>Requests</code> 唯一的一个<strong>非转基因</strong>的 <code>Python HTTP</code> 库，人类可以安全享用。</p>
<p><strong>警告</strong>：非专业使用其他 <code>HTTP</code> 库会导致危险的副作用，包括：安全缺陷症、冗余代码症、重新发明轮子症、啃文档症、抑郁、头疼、甚至死亡。</p>
<h2 id="Requests简介"><a href="#Requests简介" class="headerlink" title="Requests简介"></a>Requests简介</h2><p>requests模块是python中原生的基于网络请求的模块，其主要作用是用来模拟浏览器发起请求。功能强大，用法简洁高效。在爬虫领域中占据着半壁江山的地位。</p>
<h3 id="requests与urllib模块对比"><a href="#requests与urllib模块对比" class="headerlink" title="requests与urllib模块对比"></a>requests与urllib模块对比</h3><table>
<thead>
<tr>
<th><code>urllib</code></th>
<th><code>requests</code></th>
</tr>
</thead>
<tbody><tr>
<td>手动处理<code>url</code>编码</td>
<td>自动处理<code>url</code>编码</td>
</tr>
<tr>
<td>手动处理post请求参数</td>
<td>自动处理post请求参数</td>
</tr>
<tr>
<td>处理cookie和代理操作繁琐</td>
<td>简化cookie和代理操作</td>
</tr>
</tbody></table>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>requests.request()</code></td>
<td>构造一个请求，支持以下各种方法</td>
</tr>
<tr>
<td><code>requests.get()</code></td>
<td>获取<code>html</code>的主要方法</td>
</tr>
<tr>
<td><code>requests.head()</code></td>
<td>获取<code>html</code>头部信息的主要方法</td>
</tr>
<tr>
<td><code>requests.post()</code></td>
<td>向<code>html</code>网页提交<code>post</code>请求的方法</td>
</tr>
<tr>
<td><code>requests.put()</code></td>
<td>向<code>html</code>网页提交<code>put</code>请求的方法</td>
</tr>
<tr>
<td><code>requests.patch()</code></td>
<td>向<code>html</code>提交局部修改的请求</td>
</tr>
<tr>
<td><code>requests.delete()</code></td>
<td>向<code>html</code>提交删除请求</td>
</tr>
</tbody></table>
<h4 id="requests-get"><a href="#requests-get" class="headerlink" title="requests.get()"></a><code>requests.get()</code></h4><p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get(url,params,**kwargs)</span><br><span class="line"><span class="comment"># url: 需要爬取的网站地址。</span></span><br><span class="line"><span class="comment"># params: 翻译过来就是参数， url中的额外参数，字典或者字节流格式，可选。</span></span><br><span class="line"><span class="comment"># **kwargs : 12个控制访问的参数</span></span><br></pre></td></tr></table></figure>

<h5 id="url"><a href="#url" class="headerlink" title="url"></a><code>url</code></h5><p>要请求的目标地址</p>
<h5 id="params"><a href="#params" class="headerlink" title="params"></a><code>params</code></h5><p>字典或字节序列， 作为参数增加到<code>url</code>中,使用这个参数可以把一些键值对以<code>?key1=value1&amp;key2=value2</code>的模式增加到<code>url</code>中</p>
<h5 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a><code>**kwargs</code></h5><p>  例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kv = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27; values&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;values&#x27;</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;[http:www.python123.io/ws](http://www.python123.io/ws)&#x27;</span>, params=kw)</span><br></pre></td></tr></table></figure>



<ul>
<li><p><code>data</code>：字典，字节序或文件对象，重点作为向服务器提供或提交资源是提交，，作为<code>request</code>的内容，与<code>params</code>不同的是，<code>data</code>提交的数据并不放在<code>url</code>链接里， 而是放在<code>url</code>链接对应位置的地方作为数据来存储。，它也可以接受一个字符串对象。</p>
</li>
<li><p><code>json</code>：<code>json</code>格式的数据， <code>json</code>合适在相关的<code>html</code>，<code>http</code>相关的<code>web</code>开发中非常常见， 也是<code>http</code>最经常使用的数据格式， 他是作为内容部分可以向服务器提交。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kv = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://python123.io/ws&#x27;</span>, json=kv)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>headers</code>：字典是<code>http</code>的相关语，对应了向某个<code>url</code>访问时所发起的~的头i字段， 可以用这个字段来定义<code>http</code>的访问的<code>http</code>头，可以用来模拟任何我们想模拟的浏览器来对<code>url</code>发起访问。</p>
<p> 例子： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hd = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Chrome/10&#x27;</span>&#125; </span><br><span class="line">r = requests.post(<span class="string">&#x27;http://python123.io/ws&#x27;</span>, headers=hd)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>cookies</code>：字典或<code>CookieJar</code>，指的是从<code>http</code>中解析<code>cookie</code></p>
</li>
<li><p><code>auth</code>：元组，用来支持<code>http</code>认证功能</p>
</li>
<li><p><code>files</code>：字典， 是用来向服务器传输文件时使用的字段。</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fs = &#123;<span class="string">&#x27;files&#x27;</span>: open(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125; </span><br><span class="line">r = requests.post(<span class="string">&#x27;http://python123.io/ws&#x27;</span>, files=fs)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>timeout</code>: 用于设定超时时间， 单位为秒，当发起一个<code>get</code>请求时可以设置一个<code>timeout</code>时间， 如果在<code>timeout</code>时间内请求内容没有返回， 将产生一个<code>timeout</code>的异常。</p>
</li>
<li><p><code>proxies</code>：字典， 用来设置访问代理服务器。</p>
</li>
<li><p><code>allow_redirects</code>: 开关， 表示是否允许对<code>url</code>进行重定向， 默认为<code>True</code>。</p>
</li>
<li><p><code>stream</code>: 开关， 指是否对获取内容进行立即下载， 默认为<code>True</code>。</p>
</li>
<li><p><code>verify</code>：开关， 用于认证<code>SSL</code>证书， 默认为<code>True</code>。</p>
</li>
<li><p><code>cert</code>： 用于设置保存本地<code>SSL</code>证书路径</p>
</li>
</ul>
<h5 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h5><table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>r.status_code</code></td>
<td><code>http</code>请求的返回状态，若为<code>200</code>则表示请求成功。</td>
</tr>
<tr>
<td><code>r.text</code></td>
<td><code>http</code>响应内容的字符串形式，即返回的页面内容</td>
</tr>
<tr>
<td><code>r.encoding</code></td>
<td>从<code>http header</code> 中猜测的相应内容编码方式</td>
</tr>
<tr>
<td><code>r.apparent_encoding</code></td>
<td>从内容中分析出的响应内容编码方式（备选编码方式）</td>
</tr>
<tr>
<td><code>r.content</code></td>
<td><code>http</code>响应内容的二进制形式</td>
</tr>
</tbody></table>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r=requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line">r.encoding</span><br><span class="line"><span class="string">&#x27;ISO-8859-1&#x27;</span></span><br><span class="line">r.apparent_encoding</span><br><span class="line"><span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">r.text</span><br><span class="line"><span class="string">&#x27;&lt;!DOCTYPE html&gt;\r\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;ipt&gt; &lt;a href=//www.baidu.com/more/ name=tj_briicon class=bri style=&quot;display: block;&quot;&gt;æ\x9b´å¤\x9aäº§å\x93\x81&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=ftCon&gt; &lt;div id=ftConw&gt; &lt;p id=lh&gt; &lt;a com/ class=cp-feedback&gt;æ\x84\x8fè§\x81å\x8f\x8dé¦\x88&lt;/a&gt;&amp;nbsp;äº¬ICPè¯\x81030173å\x8f·&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;\r\n&#x27;</span></span><br><span class="line">r.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">r.text</span><br><span class="line"><span class="string">&#x27;&lt;!DOCTYPE html&gt;\r\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta chref=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css=&quot;h读&lt;/a&gt;&amp;nbsp; &lt;a href=http://jianyi.baidu.com/ class=cp-feedback&gt;意见反馈&lt;/a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;\r\n&#x27;</span></span><br></pre></td></tr></table></figure>

<p>request库异常</p>
<p>注意<code>requests</code>库有时会产生异常，比如网络连接错误、<code>http</code>错误异常、重定向异常、请求<code>url</code>超时异常等等。所以我们需要判断<code>r.status_codes</code>是否是200，在这里我们怎么样去捕捉异常呢？</p>
<p>这里我们可以利用<code>r.raise_for_status()</code> 语句去捕捉异常，该语句在方法内部判断<code>r.status_code</code>是否等于200，如果不等于，则抛出异常。</p>
<p>于是在这里我们有一个爬取网页的通用代码框架：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r=requests.get(url,timeout=<span class="number">30</span>)<span class="comment">#请求超时时间为30秒</span></span><br><span class="line">    r.raise_for_status()<span class="comment">#如果状态不是200，则引发异常</span></span><br><span class="line">    r.encoding=r.apparent_encoding <span class="comment">#配置编码</span></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;产生异常&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="request-head"><a href="#request-head" class="headerlink" title="request.head()"></a><code>request.head()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.head(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line">r.headers</span><br><span class="line"> &#123;<span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;Server&#x27;</span>: <span class="string">&#x27;meinheld/0.6.1&#x27;</span>, <span class="string">&#x27;Date&#x27;</span>: <span class="string">&#x27;Mon, 20 Nov 2017 08:08:46 GMT&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>: <span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;X-Powered-By&#x27;</span>: <span class="string">&#x27;Flask&#x27;</span>, <span class="string">&#x27;X-Processed-Time&#x27;</span>: <span class="string">&#x27;0.000658988952637&#x27;</span>, <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;268&#x27;</span>, <span class="string">&#x27;Via&#x27;</span>: <span class="string">&#x27;1.1 vegur&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="requests-post"><a href="#requests-post" class="headerlink" title="requests.post()"></a><code>requests.post()</code></h4><h5 id="post一个字典"><a href="#post一个字典" class="headerlink" title="post一个字典"></a>post一个字典</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=&#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>,<span class="string">&quot;key2&quot;</span>:<span class="string">&quot;value2&quot;</span>&#125;</span><br><span class="line">r=requests.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>,data=payload)</span><br><span class="line">print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;key1&quot;</span>: <span class="string">&quot;value1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;23&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.18.4&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;218.197.153.150&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="post字符串"><a href="#post字符串" class="headerlink" title="post字符串"></a>post字符串</h5><h5 id="自动编码为data"><a href="#自动编码为data" class="headerlink" title="自动编码为data"></a>自动编码为data</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.post(<span class="string">&quot;URL地址&quot;</span>,data=<span class="string">&#x27;helloworld&#x27;</span>)</span><br><span class="line">print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;helloworld&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;10&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.18.4&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;218.197.153.150&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;URL地址&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="post一个文件"><a href="#post一个文件" class="headerlink" title="post一个文件"></a>post一个文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">files = &#123;<span class="string">&#x27;files&#x27;</span>:open(<span class="string">&#x27;F:\\python\\test\\test_case\\files.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>,files=files)</span><br><span class="line">print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;args&quot;</span>:&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;files&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;files&quot;</span>:<span class="string">&quot;hello worle!&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;form&quot;</span>:&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;headers&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>:<span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>:<span class="string">&quot;close&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Length&quot;</span>:<span class="string">&quot;158&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;multipart/form-data; boundary=d2fb307f28aeb57b932d867f80f2f600&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;httpbin.org&quot;</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;python-requests/2.19.1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;json&quot;</span>:null,</span><br><span class="line">    <span class="string">&quot;origin&quot;</span>:<span class="string">&quot;113.65.2.187&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>:<span class="string">&quot;https://httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>put和patch与post类似，故不再做示例。</p>
<h2 id="requests代理"><a href="#requests代理" class="headerlink" title="requests代理"></a><code>requests</code>代理</h2><ul>
<li>什么是代理<ul>
<li>代理就是第三方代替本体处理相关事务。例如：生活中的代理：代购，中介，微商……</li>
</ul>
</li>
<li>爬虫中为什么需要使用代理<ul>
<li>一些网站会有相应的反爬虫措施，例如很多网站会检测某一段时间某个<code>IP</code>的访问次数，如果访问频率太快以至于看起来不像正常访客，它可能就会会禁止这个<code>IP</code>的访问。所以我们需要设置一些代理<code>IP</code>，每隔一段时间换一个代理<code>IP</code>，就算<code>IP</code>被禁止，依然可以换个<code>IP</code>继续爬取。</li>
</ul>
</li>
<li>代理的分类：<ul>
<li>正向代理：代理客户端获取数据。正向代理是为了保护客户端防止被追究责任。</li>
<li>反向代理：代理服务器提供数据。反向代理是为了保护服务器或负责负载均衡。</li>
</ul>
</li>
<li>免费代理<code>ip</code>提供网站<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5nb3ViYW5qaWEuY29tLw==">http://www.goubanjia.com/<i class="fa fa-external-link-alt"></i></span></li>
<li>西祠代理</li>
<li>快代理</li>
</ul>
</li>
</ul>
<p>百度<code>IP</code>，测试是否代理<code>ip</code>成功</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#不同浏览器的UA</span></span><br><span class="line">    header_list = [</span><br><span class="line">        <span class="comment"># 遨游</span></span><br><span class="line">        &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)&quot;</span>&#125;,</span><br><span class="line">        <span class="comment"># 火狐</span></span><br><span class="line">        &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;</span>&#125;,</span><br><span class="line">        <span class="comment"># 谷歌</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">#不同的代理IP</span></span><br><span class="line">    proxy_list = [</span><br><span class="line">        &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;112.115.57.20:3128&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;121.41.171.223:3128&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">#随机获取UA和代理IP</span></span><br><span class="line">    header = random.choice(header_list)</span><br><span class="line">    proxy = random.choice(proxy_list)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;http://www.baidu.com/s?ie=UTF-8&amp;wd=ip&#x27;</span></span><br><span class="line">    <span class="comment">#参数3：设置代理</span></span><br><span class="line">    response = requests.get(url=url,headers=header,proxies=proxy)</span><br><span class="line">    response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;daili.html&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(response.content)</span><br><span class="line">    <span class="comment">#切换成原来的IP</span></span><br><span class="line">    requests.get(url, proxies=&#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h2><p> 会话对象让你能够跨请求保持某些参数。它也会在同一个 <code>Session</code> 实例发出的所有请求之间保持 <code>cookie</code>， 简单的说，如果你要爬取的页面是登录后才能查看的网页，那么就要像浏览器访问一样，保持其登录状态，者就用到了<code>session</code></p>
<h3 id="登录人人网"><a href="#登录人人网" class="headerlink" title="登录人人网"></a>登录人人网</h3><p>登录人人网，如果有验证码要识别其验证码，登录后下载其个人主页页面。在这里着重说下验证码吧，很多网站登录都需要验证码，人人网也一样，可能是在你多次输入账号密码错误的时候才会让你填写验证码。关于识别验证码我们这里使用到了第三方的<code>API</code>，云打码，市面上有很多类似的产品，大概原理就是访问登录页面时，将页面上的验证码下载下来，使用第三方<code>api</code>识别然后进行登录，具体的第三方都会提供文档和示例代码，这里就不详细解释。</p>
<h4 id="识别验证码文件"><a href="#识别验证码文件" class="headerlink" title="识别验证码文件"></a>识别验证码文件</h4><p><code>CodeDemo.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.client, mimetypes, urllib, json, time, requests</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YDMHttp</span>:</span></span><br><span class="line"></span><br><span class="line">    apiurl = <span class="string">&#x27;http://api.yundama.com/api.php&#x27;</span></span><br><span class="line">    username = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    appid = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    appkey = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, username, password, appid, appkey</span>):</span></span><br><span class="line">        self.username = username  </span><br><span class="line">        self.password = password</span><br><span class="line">        self.appid = str(appid)</span><br><span class="line">        self.appkey = appkey</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, fields, files=[]</span>):</span></span><br><span class="line">        response = self.post_url(self.apiurl, fields, files)</span><br><span class="line">        response = json.loads(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;balance&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password, <span class="string">&#x27;appid&#x27;</span>: self.appid, <span class="string">&#x27;appkey&#x27;</span>: self.appkey&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">&#x27;ret&#x27;</span>] <span class="keyword">and</span> response[<span class="string">&#x27;ret&#x27;</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">&#x27;ret&#x27;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">&#x27;balance&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password, <span class="string">&#x27;appid&#x27;</span>: self.appid, <span class="string">&#x27;appkey&#x27;</span>: self.appkey&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">&#x27;ret&#x27;</span>] <span class="keyword">and</span> response[<span class="string">&#x27;ret&#x27;</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">&#x27;ret&#x27;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">&#x27;uid&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">self, filename, codetype, timeout</span>):</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;upload&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password, <span class="string">&#x27;appid&#x27;</span>: self.appid, <span class="string">&#x27;appkey&#x27;</span>: self.appkey, <span class="string">&#x27;codetype&#x27;</span>: str(codetype), <span class="string">&#x27;timeout&#x27;</span>: str(timeout)&#125;</span><br><span class="line">        file = &#123;<span class="string">&#x27;file&#x27;</span>: filename&#125;</span><br><span class="line">        response = self.request(data, file)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">&#x27;ret&#x27;</span>] <span class="keyword">and</span> response[<span class="string">&#x27;ret&#x27;</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">&#x27;ret&#x27;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">&#x27;cid&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span>(<span class="params">self, cid</span>):</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;result&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password, <span class="string">&#x27;appid&#x27;</span>: self.appid, <span class="string">&#x27;appkey&#x27;</span>: self.appkey, <span class="string">&#x27;cid&#x27;</span>: str(cid)&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">return</span> response <span class="keyword">and</span> response[<span class="string">&#x27;text&#x27;</span>] <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">self, filename, codetype, timeout</span>):</span></span><br><span class="line">        cid = self.upload(filename, codetype, timeout)</span><br><span class="line">        <span class="keyword">if</span> (cid &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, timeout):</span><br><span class="line">                result = self.result(cid)</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">                    <span class="keyword">return</span> cid, result</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-3003</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cid, <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report</span>(<span class="params">self, cid</span>):</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;report&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password, <span class="string">&#x27;appid&#x27;</span>: self.appid, <span class="string">&#x27;appkey&#x27;</span>: self.appkey, <span class="string">&#x27;cid&#x27;</span>: str(cid), <span class="string">&#x27;flag&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">&#x27;ret&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_url</span>(<span class="params">self, url, fields, files=[]</span>):</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> files:</span><br><span class="line">            files[key] = open(files[key], <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">        res = requests.post(url, files=files, data=fields)</span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码不用理解其意思，就是第三方给我们提供的示例，拿来可以直接使用</p>
<h4 id="主代码"><a href="#主代码" class="headerlink" title="主代码"></a>主代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> CodeDemo <span class="keyword">import</span> YDMHttp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">captcha</span>(<span class="params">username, password,appid,appkey, code_img=<span class="string">&#x27;getcode.jpg&#x27;</span>, codetype=<span class="number">1004</span></span>):</span></span><br><span class="line">    <span class="comment"># 超时时间，秒</span></span><br><span class="line">    timeout = <span class="number">60</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查</span></span><br><span class="line">    <span class="keyword">if</span> (username == <span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        print(<span class="string">&#x27;请设置好相关参数再测试&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        yundama = YDMHttp(username, password, appid, appkey)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登陆云打码</span></span><br><span class="line">        uid = yundama.login();</span><br><span class="line">        print(<span class="string">&#x27;uid: %s&#x27;</span> % uid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询余额</span></span><br><span class="line">        balance = yundama.balance();</span><br><span class="line">        print(<span class="string">&#x27;balance: %s&#x27;</span> % balance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></span><br><span class="line">        cid, result = yundama.decode(code_img, codetype, timeout);</span><br><span class="line">        print(<span class="string">&#x27;cid: %s, result: %s&#x27;</span> % (cid, result))</span><br><span class="line">        <span class="comment"># 此处应该做判断，如果识别不出来返回空</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># 要保持会话的页面我们使用session.get/post之类的就可以了</span></span><br><span class="line">session = requests.session()</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 登录视图页面</span></span><br><span class="line">login_view_url = <span class="string">&quot;http://www.renren.com/&quot;</span></span><br><span class="line"><span class="comment"># 获取登录视图源码</span></span><br><span class="line">login_view = requests.get(url=login_view_url, headers=headers).text</span><br><span class="line">tree = etree.HTML(login_view)</span><br><span class="line"><span class="comment"># 解析验证码图像地址</span></span><br><span class="line">code_url = tree.xpath(<span class="string">&#x27;//*[@id=&quot;verifyPic_login&quot;]/@src&#x27;</span>)</span><br><span class="line"><span class="comment"># 验证码</span></span><br><span class="line">code_num=<span class="literal">None</span></span><br><span class="line"><span class="comment"># 判断验证码是否存在，存在则识别验证码，不存在则跳过识别</span></span><br><span class="line"><span class="keyword">if</span> code_url:</span><br><span class="line">    <span class="comment"># 获取图片内容</span></span><br><span class="line">    code_img_content = requests.get(url=code_url[<span class="number">0</span>], headers=headers).content</span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;getcode.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(code_img_content)</span><br><span class="line">    <span class="comment"># 获取验证码软件id， 软件key</span></span><br><span class="line">    code_num = captcha(username = <span class="string">&#x27;云打码普通用户名&#x27;</span>, password = <span class="string">&#x27;云打码普通用户密码&#x27;</span>, appid = <span class="number">9398</span>, appkey = <span class="string">&#x27;d34d4bc4bbbccf47f90f346d40a32aa2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录数据</span></span><br><span class="line"><span class="comment"># 登录数据这里是加密的，自己用浏览器登陆下，使用fiddler等抓包工具看下请求的数有哪些，并且看下加密后的密码</span></span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">&#x27;email&#x27;</span> : <span class="string">&#x27;646547989@qq.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;icode&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;origURL&#x27;</span>:<span class="string">&#x27;http://www.renren.com/home&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;domain&#x27;</span>:<span class="string">&#x27;renren.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;key_id&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;captcha_type&#x27;</span>:<span class="string">&#x27;web_login&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;6196c549890d45f3495cd55dcd0bb1e883dbdb1578be1ede58ceb57381df0850&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;rkey&#x27;</span>:<span class="string">&#x27;088f9ddffb887cffe8956a6f85956689&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#登录url</span></span><br><span class="line">login_url = <span class="string">&#x27;http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=2019105950868&#x27;</span></span><br><span class="line"><span class="comment"># 登录网站</span></span><br><span class="line">session.post(url=login_url, data=data, headers=headers)</span><br><span class="line"><span class="comment"># 个人主页</span></span><br><span class="line">person_url = <span class="string">&#x27;http://www.renren.com/858420730/profile&#x27;</span></span><br><span class="line"><span class="comment"># 访问个人主页</span></span><br><span class="line">ret = session.get(url=person_url, headers=headers).content</span><br><span class="line"><span class="comment"># 下载个人主页</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;renren.html&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(ret)</span><br><span class="line">print(<span class="string">&#x27;可以了&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="登录古诗文网"><a href="#登录古诗文网" class="headerlink" title="登录古诗文网"></a>登录古诗文网</h3><p>我们依然要用到识别验证码，上述代码中的识别验证码部分这里就不上了，直接主体部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment"># 导入云打码类</span></span><br><span class="line"><span class="keyword">from</span> CodeDemo <span class="keyword">import</span> YDMHttp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">captcha</span>(<span class="params">username, password,appid,appkey, code_img=<span class="string">&#x27;getcode.jpg&#x27;</span>, codetype=<span class="number">1004</span></span>):</span></span><br><span class="line">    <span class="comment"># 超时时间，秒</span></span><br><span class="line">    timeout = <span class="number">60</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查</span></span><br><span class="line">    <span class="keyword">if</span> (username == <span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        print(<span class="string">&#x27;请设置好相关参数再测试&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        yundama = YDMHttp(username, password, appid, appkey)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登陆云打码</span></span><br><span class="line">        uid = yundama.login();</span><br><span class="line">        print(<span class="string">&#x27;uid: %s&#x27;</span> % uid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询余额</span></span><br><span class="line">        balance = yundama.balance();</span><br><span class="line">        print(<span class="string">&#x27;balance: %s&#x27;</span> % balance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></span><br><span class="line">        cid, result = yundama.decode(code_img, codetype, timeout);</span><br><span class="line">        print(<span class="string">&#x27;cid: %s, result: %s&#x27;</span> % (cid, result))</span><br><span class="line">        <span class="comment"># 此处应该做判断，如果识别不出来返回空</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 登录视图页面</span></span><br><span class="line">login_view_url = <span class="string">&quot;https://so.gushiwen.org/user/login.aspx&quot;</span></span><br><span class="line"><span class="comment"># 获取登录视图源码</span></span><br><span class="line">login_view = requests.get(url=login_view_url, headers=headers).text</span><br><span class="line">tree = etree.HTML(login_view)</span><br><span class="line"><span class="comment"># 解析验证码图像地址</span></span><br><span class="line">code_url = <span class="string">&#x27;https://so.gushiwen.org/&#x27;</span>+tree.xpath(<span class="string">&#x27;//*[@id=&quot;imgCode&quot;]/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">code_num = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 判断验证码是否存在，存在则识别验证码，不存在则跳过识别</span></span><br><span class="line"><span class="keyword">if</span> code_url:</span><br><span class="line">    <span class="comment"># 获取图片内容</span></span><br><span class="line">    code_img_content = session.get(url=code_url, headers=headers).content</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;getcode.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(code_img_content)</span><br><span class="line">    code_num = captcha(username = <span class="string">&#x27;云打码普通用户名&#x27;</span>, password = <span class="string">&#x27;云打码普通密码&#x27;</span>, appid = <span class="number">9398</span>, appkey = <span class="string">&#x27;d34d4bc4bbbccf47f90f346d40a32aa2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录数据</span></span><br><span class="line"><span class="comment"># 同样使用抓包工具看下请求的数据都有哪些，__VIEWSTATE其实就是登陆表单中的表单令牌，密码呢这里没有先加密，填入你自己的密码就可以了</span></span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">&#x27;__VIEWSTATE&#x27;</span> :	<span class="string">&#x27;yEtGeGM9HT6bkfg7wOcpOXeXOr9S95S6ZRAVjyb7gUkABub2sKT687x3F07JHTOYv6UFDTIj7nYLJsaScMl3Wq75yPUrbD3wbOhC8q+yNJDWFL3KKHRPPLwiz0E=&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;__VIEWSTATEGENERATOR&#x27;</span>:	<span class="string">&#x27;C93BE1AE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;from&#x27;</span>:	<span class="string">&#x27;http://so.gushiwen.org/user/collect.aspx&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;646547989@qq.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pwd&#x27;</span>:	<span class="string">&#x27;你的密码&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;code&#x27;</span>:	code_num,</span><br><span class="line"><span class="string">&#x27;denglu&#x27;</span>:	<span class="string">&#x27;登录&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 登陆请求地址</span></span><br><span class="line">login_url = <span class="string">&#x27;https://so.gushiwen.org/user/login.aspx&#x27;</span></span><br><span class="line"><span class="comment"># 登陆网站</span></span><br><span class="line">session.post(url=login_url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人主页</span></span><br><span class="line">person_url = <span class="string">&#x27;https://so.gushiwen.org/user/collect.aspx&#x27;</span></span><br><span class="line"><span class="comment"># 访问个人收藏主页</span></span><br><span class="line">ret = session.get(url=person_url, headers=headers).content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;gsw.html&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(ret)</span><br><span class="line">print(<span class="string">&#x27;可以了&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>我们这里使用多线程爬取视频。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests, re, time</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"><span class="comment">#我的电脑8核的，我们这里就开一个8线程的线程池</span></span><br><span class="line">pool = Pool(<span class="number">8</span>)</span><br><span class="line">url =<span class="string">&#x27;https://www.pearvideo.com/category_8&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url=url, headers = headers).text</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(res)</span><br><span class="line"><span class="comment"># 获取视频详情链接</span></span><br><span class="line">li_htmls = tree.xpath(<span class="string">&#x27;//ul[@id=&quot;listvideoListUl&quot;]/li/div/a/@href&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频下载链接列表</span></span><br><span class="line">video_url_lis=[]</span><br><span class="line"><span class="comment"># 解析视频下载链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_url</span>(<span class="params">video_detail_url</span>):</span></span><br><span class="line">    video_detail = requests.get(url=<span class="string">&#x27;https://www.pearvideo.com/&#123;url&#125;&#x27;</span>.format(url=video_detail_url), headers=headers).text</span><br><span class="line">    video_url = re.findall(<span class="string">&#x27;srcUrl=&quot;(.*?)&quot;,vdoUrl&#x27;</span>, video_detail, re.S)[<span class="number">0</span>]</span><br><span class="line">    video_url_lis.append(video_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频内容列表</span></span><br><span class="line">video_content_lis=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_content</span>(<span class="params">video_url</span>):</span></span><br><span class="line">    video_content = requests.get(video_url, headers=headers).content</span><br><span class="line">    video_content_lis.append(video_content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载视频</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_video</span>(<span class="params">video_content</span>):</span></span><br><span class="line">    filename= <span class="string">&#x27;video/&#x27;</span>+str(uuid4())+<span class="string">&#x27;.mp4&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(video_content)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment"># 获取视频下载链接</span></span><br><span class="line">pool.map(get_video_url, li_htmls)</span><br><span class="line">print(video_url_lis)</span><br><span class="line"><span class="comment"># 获取视频内容</span></span><br><span class="line">pool.map(get_video_content, video_url_lis)</span><br><span class="line"><span class="comment"># 下载视频</span></span><br><span class="line">pool.map(download_video, video_content_lis)</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">&#x27;总用时：&#x27;</span>, end-start)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="这里"><a href="#这里" class="headerlink" title="这里"></a>这里</h2><h3 id="爬取搜狗"><a href="#爬取搜狗" class="headerlink" title="爬取搜狗"></a>爬取搜狗</h3><p>请求载体身份标识的伪装：</p>
<ul>
<li><code>User-Agent</code>：请求载体身份标识，通过浏览器发起的请求，请求载体为浏览器，则该请求的<code>User-Agent</code>为浏览器的身份标识，使用爬虫程序发起的请求，则该请求的载体为爬虫程序，则该请求的<code>User-Agent</code>为爬虫程序的身份标识。可以通过判断该值来获知该请求的载体究竟是基于哪款浏览器还是基于爬虫程序。</li>
<li>反爬机制：某些门户网站会对访问该网站的请求中的<code>User-Agent</code>进行捕获和判断，如果该请求的<code>UA</code>为爬虫程序，则拒绝向该请求提供数据。</li>
<li>反反爬策略：将爬虫程序的<code>UA</code>伪装成某一款浏览器的身份标识。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#指定搜索关键字</span></span><br><span class="line">word = input(<span class="string">&#x27;enter a word you want to search:&#x27;</span>)</span><br><span class="line"><span class="comment">#自定义请求头信息</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#指定url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.sogou.com/web&#x27;</span></span><br><span class="line"><span class="comment">#封装get请求参数</span></span><br><span class="line">prams = &#123;</span><br><span class="line">    <span class="string">&#x27;query&#x27;</span>:word,</span><br><span class="line">    <span class="string">&#x27;ie&#x27;</span>:<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#发起请求</span></span><br><span class="line">response = requests.get(url=url,params=param)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取响应数据</span></span><br><span class="line">page_text = response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;./sougou.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br></pre></td></tr></table></figure>

<h3 id="豆瓣电影排行榜"><a href="#豆瓣电影排行榜" class="headerlink" title="豆瓣电影排行榜"></a>豆瓣电影排行榜</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#指定ajax-get请求的url（通过抓包进行获取）</span></span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定制请求头信息，相关的头信息必须封装在字典结构中</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="comment">#定制请求头中的User-Agent参数，当然也可以定制请求头中其他的参数</span></span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定制get请求携带的参数(从抓包工具中获取)</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;interval_id&#x27;</span>:<span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>:<span class="string">&#x27;20&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#发起get请求，获取响应对象</span></span><br><span class="line">    response = requests.get(url=url,headers=headers,params=param)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取响应内容：响应内容为json串</span></span><br><span class="line">    print(response.text)</span><br></pre></td></tr></table></figure>

<h3 id="豆瓣登录数据"><a href="#豆瓣登录数据" class="headerlink" title="豆瓣登录数据"></a>豆瓣登录数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">&#x27;https://accounts.douban.com/login&#x27;</span></span><br><span class="line"><span class="comment">#封装请求参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="string">&quot;redir&quot;</span>: <span class="string">&quot;https://movie.douban.com/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;form_email&quot;</span>: <span class="string">&quot;用户名&quot;</span>,</span><br><span class="line">    <span class="string">&quot;form_password&quot;</span>: <span class="string">&quot;密码&quot;</span>,</span><br><span class="line">    <span class="string">&quot;login&quot;</span>: <span class="string">&quot;登录&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#自定义请求头信息</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">response = requests.post(url=url,data=data)</span><br><span class="line">page_text = response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;./douban111.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br></pre></td></tr></table></figure>



<h3 id="药监局"><a href="#药监局" class="headerlink" title="药监局"></a>药监局</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="comment"># 随机设备标识，应对反爬虫</span></span><br><span class="line">ua = UserAgent(use_cache_server=<span class="literal">False</span>,verify_ssl=<span class="literal">False</span>).random</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:ua</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class="line">pageNum = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">5</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page&#x27;</span>: str(page),</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;productName&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;conditionType&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;applyname&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;applysn&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    json_text = requests.post(url=url,data=data,headers=headers).json()</span><br><span class="line">    all_id_list = []</span><br><span class="line">    <span class="keyword">for</span> dict <span class="keyword">in</span> json_text[<span class="string">&#x27;list&#x27;</span>]:</span><br><span class="line">        id = dict[<span class="string">&#x27;ID&#x27;</span>]<span class="comment">#用于二级页面数据获取</span></span><br><span class="line">        <span class="comment">#下列详情信息可以在二级页面中获取</span></span><br><span class="line">        <span class="comment"># name = dict[&#x27;EPS_NAME&#x27;]</span></span><br><span class="line">        <span class="comment"># product = dict[&#x27;PRODUCT_SN&#x27;]</span></span><br><span class="line">        <span class="comment"># man_name = dict[&#x27;QF_MANAGER_NAME&#x27;]</span></span><br><span class="line">        <span class="comment"># d1 = dict[&#x27;XC_DATE&#x27;]</span></span><br><span class="line">        <span class="comment"># d2 = dict[&#x27;XK_DATE&#x27;]</span></span><br><span class="line">        all_id_list.append(id)</span><br><span class="line">    <span class="comment">#该url是一个ajax的post请求</span></span><br><span class="line">    post_url = <span class="string">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> id <span class="keyword">in</span>  all_id_list:</span><br><span class="line">        post_data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>:id</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url=post_url,data=post_data,headers=headers)</span><br><span class="line">        <span class="comment">#该请求响应回来的数据有两个，一个是基于text，一个是基于json的，所以可以根据content-type,来获取指定的响应数据</span></span><br><span class="line">        <span class="keyword">if</span> response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] == <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>:</span><br><span class="line">            <span class="comment">#print(response.json())</span></span><br><span class="line">            <span class="comment">#进行json解析</span></span><br><span class="line">            json_text = response.json()</span><br><span class="line">            print(json_text[<span class="string">&#x27;businessPerson&#x27;</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>爬虫</tag>
        <tag>requests爬虫</tag>
        <tag>requests模块</tag>
        <tag>python模拟访问网址</tag>
        <tag>python模拟登录</tag>
        <tag>requests.get</tag>
        <tag>requests.post</tag>
        <tag>requests代理</tag>
        <tag>requests代理ip</tag>
        <tag>requests伪装代理</tag>
        <tag>requests伪装ip</tag>
        <tag>爬虫代理ip</tag>
        <tag>python代理ip</tag>
        <tag>爬取豆瓣</tag>
        <tag>模拟会话</tag>
        <tag>保持会话</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis初体验</title>
    <url>/bb7338e0.html</url>
    <content><![CDATA[<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>
<p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>
<a id="more"></a>

<h2 id="一、Redis安装和基本使用"><a href="#一、Redis安装和基本使用" class="headerlink" title="一、Redis安装和基本使用"></a>一、Redis安装和基本使用</h2><h4 id="下载安装与编译"><a href="#下载安装与编译" class="headerlink" title="下载安装与编译"></a>下载安装与编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.0.6.tar.gz</span><br><span class="line">tar xzf redis-3.0.6.tar.gz</span><br><span class="line">cd redis-3.0.6</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">src/redis<span class="literal">-server</span></span><br></pre></td></tr></table></figure>

<h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">src/redis-cli</span><br></pre></td></tr></table></figure>

<h2 id="二、Python操作Redis"><a href="#二、Python操作Redis" class="headerlink" title="二、Python操作Redis"></a>二、Python操作Redis</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip install redis</span><br><span class="line">or</span><br><span class="line">sudo easy_install redis</span><br><span class="line">or</span><br><span class="line">源码安装</span><br><span class="line"> </span><br><span class="line">详见：https://github.com/WoLpH/redis-py</span><br></pre></td></tr></table></figure>

<h4 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h4><p>redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"> </span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;10.211.55.4&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line">r.set(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;Bar&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> r.get(<span class="string">&#x27;foo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"> </span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&#x27;10.211.55.4&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"> </span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.set(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;Bar&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> r.get(<span class="string">&#x27;foo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="String操作"><a href="#String操作" class="headerlink" title="String操作"></a>String操作</h5><p>redis中的String在在内存中按照一个name对应一个value来存储。如图：</p>
<p><img data-src="/images/425762-20160222213200645-359371350.png" alt="img"></p>
<h6 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：set(name, value, ex=None, px=None, nx=False, xx=False)</span></span><br><span class="line"><span class="comment"># 在Redis中设置值，默认，不存在则创建，存在则修改</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">     <span class="comment"># ex，过期时间（秒）</span></span><br><span class="line">     <span class="comment"># px，过期时间（毫秒）</span></span><br><span class="line">     <span class="comment"># nx，如果设置为True，则只有name不存在时，当前set操作才执行</span></span><br><span class="line">     <span class="comment"># xx，如果设置为True，则只有name存在时，岗前set操作才执行</span></span><br></pre></td></tr></table></figure>

<h6 id="setnx"><a href="#setnx" class="headerlink" title="setnx()"></a>setnx()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：setnx(name, value)</span></span><br><span class="line"><span class="comment"># 设置值，只有name不存在时，执行设置操作（添加）</span></span><br></pre></td></tr></table></figure>

<h6 id="setex"><a href="#setex" class="headerlink" title="setex()"></a>setex()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：setex(name, value, time)</span></span><br><span class="line"><span class="comment"># 设置值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># time，过期时间（数字秒 或 timedelta对象）</span></span><br></pre></td></tr></table></figure>

<h6 id="psetex"><a href="#psetex" class="headerlink" title="psetex()"></a>psetex()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：psetex(name, time_ms, value)</span></span><br><span class="line"><span class="comment"># 设置值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># time_ms，过期时间（数字毫秒 或 timedelta对象）</span></span><br></pre></td></tr></table></figure>

<h6 id="mset"><a href="#mset" class="headerlink" title="mset()"></a>mset()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：mset(*args, **kwargs)</span></span><br><span class="line"><span class="comment"># 批量设置值</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># mset(k1=&#x27;v1&#x27;, k2=&#x27;v2&#x27;)</span></span><br><span class="line">    <span class="comment"># 或</span></span><br><span class="line">    <span class="comment"># mget(&#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;)</span></span><br></pre></td></tr></table></figure>

<h6 id="get-name"><a href="#get-name" class="headerlink" title="get(name)"></a>get(name)</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：get(name)</span></span><br><span class="line">获取值</span><br></pre></td></tr></table></figure>

<h6 id="mget"><a href="#mget" class="headerlink" title="mget()"></a>mget()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：mget(keys, *args)</span></span><br><span class="line"><span class="comment"># 批量获取</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># mget(&#x27;ylr&#x27;, &#x27;wupeiqi&#x27;)</span></span><br><span class="line">    <span class="comment"># 或</span></span><br><span class="line">    <span class="comment"># r.mget([&#x27;ylr&#x27;, &#x27;wupeiqi&#x27;])</span></span><br></pre></td></tr></table></figure>

<h6 id="getset"><a href="#getset" class="headerlink" title="getset()"></a>getset()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：getset(name, value)</span></span><br><span class="line"><span class="comment"># 设置新值并获取原来的值</span></span><br></pre></td></tr></table></figure>

<h6 id="getrange"><a href="#getrange" class="headerlink" title="getrange()"></a>getrange()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：getrange(key, start, end)</span></span><br><span class="line"><span class="comment"># 获取子序列（根据字节获取，非字符）</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，Redis 的 name</span></span><br><span class="line">    <span class="comment"># start，起始位置（字节）</span></span><br><span class="line">    <span class="comment"># end，结束位置（字节）</span></span><br><span class="line"><span class="comment"># 如： &quot;武沛齐&quot; ，0-3表示 &quot;武&quot;</span></span><br></pre></td></tr></table></figure>

<h6 id="setrange"><a href="#setrange" class="headerlink" title="setrange()"></a>setrange()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：setrange(name, offset, value)</span></span><br><span class="line"><span class="comment"># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># offset，字符串的索引，字节（一个汉字三个字节）</span></span><br><span class="line">    <span class="comment"># value，要设置的值</span></span><br></pre></td></tr></table></figure>

<h6 id="setbit"><a href="#setbit" class="headerlink" title="setbit()"></a>setbit()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：setbit(name, offset, value)</span></span><br><span class="line"><span class="comment"># 对name对应值的二进制表示的位进行操作</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># offset，位的索引（将值变换成二进制后再进行索引）</span></span><br><span class="line">    <span class="comment"># value，值只能是 1 或 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，</span></span><br><span class="line"><span class="comment"># 那么字符串foo的二进制表示为：01100110 01101111 01101111</span></span><br><span class="line"><span class="comment"># 所以，如果执行 setbit(&#x27;n1&#x27;, 7, 1)，则就会将第7位设置为1，</span></span><br><span class="line"><span class="comment"># 那么最终二进制则变成 01100111 01101111 01101111，即：&quot;goo&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 扩展，转换二进制表示：</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># source = &quot;武沛齐&quot;</span></span><br><span class="line">    source = <span class="string">&quot;foo&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> source:</span><br><span class="line">        num = ord(i)</span><br><span class="line">        <span class="keyword">print</span> bin(num).replace(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 特别的，如果source是汉字 &quot;武沛齐&quot;怎么办？</span></span><br><span class="line">    <span class="comment"># 答：对于utf-8，每一个汉字占 3 个字节，那么 &quot;武沛齐&quot; 则有 9个字节</span></span><br><span class="line">       <span class="comment"># 对于汉字，for循环时候会按照 字节 迭代，那么在迭代时，将每一个字节转换 十进制数，然后再将十进制数转换成二进制</span></span><br><span class="line">        <span class="comment"># 11100110 10101101 10100110 11100110 10110010 10011011 11101001 10111101 10010000</span></span><br></pre></td></tr></table></figure>

<h6 id="getbit"><a href="#getbit" class="headerlink" title="getbit()"></a>getbit()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：getbit(name, offset)</span></span><br><span class="line"><span class="comment"># 获取name对应的值的二进制表示中的某位的值 （0或1）</span></span><br></pre></td></tr></table></figure>

<h6 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount()"></a>bitcount()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：bitcount(key, start=None, end=None)</span></span><br><span class="line"><span class="comment"># 获取name对应的值的二进制表示中 1 的个数</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># key，Redis的name</span></span><br><span class="line">    <span class="comment"># start，位起始位置</span></span><br><span class="line">    <span class="comment"># end，位结束位置</span></span><br></pre></td></tr></table></figure>

<h6 id="bitop"><a href="#bitop" class="headerlink" title="bitop()"></a>bitop()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：bitop(operation, dest, *keys)</span></span><br><span class="line"><span class="comment"># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）</span></span><br><span class="line">    <span class="comment"># dest, 新的Redis的name</span></span><br><span class="line">    <span class="comment"># *keys,要查找的Redis的name</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># bitop(&quot;AND&quot;, &#x27;new_name&#x27;, &#x27;n1&#x27;, &#x27;n2&#x27;, &#x27;n3&#x27;)</span></span><br><span class="line">    <span class="comment"># 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</span></span><br></pre></td></tr></table></figure>

<h6 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：strlen(name)</span></span><br><span class="line"><span class="comment"># 返回name对应值的字节长度（一个汉字3个字节）</span></span><br></pre></td></tr></table></figure>

<h6 id="incr"><a href="#incr" class="headerlink" title="incr()"></a>incr()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：incr(self, name, amount=1)</span></span><br><span class="line"><span class="comment"># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name,Redis的name</span></span><br><span class="line">    <span class="comment"># amount,自增数（必须是整数）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注：同incrby</span></span><br></pre></td></tr></table></figure>

<h6 id="incrbyfloat"><a href="#incrbyfloat" class="headerlink" title="incrbyfloat()"></a>incrbyfloat()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：incrbyfloat(self, name, amount=1.0)</span></span><br><span class="line"><span class="comment"># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name,Redis的name</span></span><br><span class="line">    <span class="comment"># amount,自增数（浮点型）</span></span><br></pre></td></tr></table></figure>

<h6 id="decr"><a href="#decr" class="headerlink" title="decr()"></a>decr()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：decr(self, name, amount=1)</span></span><br><span class="line"><span class="comment"># 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name,Redis的name</span></span><br><span class="line">    <span class="comment"># amount,自减数（整数）</span></span><br></pre></td></tr></table></figure>

<h6 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：append(key, value)</span></span><br><span class="line"><span class="comment"># 在redis name对应的值后面追加内容</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># key, redis的name</span></span><br><span class="line">    <span class="comment"># value, 要追加的字符串</span></span><br></pre></td></tr></table></figure>

<h5 id="Hash操作"><a href="#Hash操作" class="headerlink" title="Hash操作"></a>Hash操作</h5><p>redis中Hash在内存中的存储格式如下图：</p>
<p><img data-src="/images/425762-20160223115506630-113443460.png" alt="img"></p>
<h6 id="hset"><a href="#hset" class="headerlink" title="hset()"></a>hset()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hset(name, key, value)</span></span><br><span class="line"><span class="comment"># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># key，name对应的hash中的key</span></span><br><span class="line">    <span class="comment"># value，name对应的hash中的value</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注：</span></span><br><span class="line">    <span class="comment"># hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</span></span><br></pre></td></tr></table></figure>

<h6 id="hmset"><a href="#hmset" class="headerlink" title="hmset()"></a>hmset()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hmset(name, mapping)</span></span><br><span class="line"><span class="comment"># 在name对应的hash中批量设置键值对</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># mapping，字典，如：&#123;&#x27;k1&#x27;:&#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># r.hmset(&#x27;xx&#x27;, &#123;&#x27;k1&#x27;:&#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;)</span></span><br></pre></td></tr></table></figure>

<h6 id="hget"><a href="#hget" class="headerlink" title="hget()"></a>hget()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hget(name,key)</span></span><br><span class="line"><span class="comment"># 在name对应的hash中获取根据key获取value</span></span><br></pre></td></tr></table></figure>

<h6 id="hmget"><a href="#hmget" class="headerlink" title="hmget()"></a>hmget()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hmget(name, keys, *args)</span></span><br><span class="line"><span class="comment"># 在name对应的hash中获取多个key的值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，reids对应的name</span></span><br><span class="line">    <span class="comment"># keys，要获取key集合，如：[&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;k3&#x27;]</span></span><br><span class="line">    <span class="comment"># *args，要获取的key，如：k1,k2,k3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># r.mget(&#x27;xx&#x27;, [&#x27;k1&#x27;, &#x27;k2&#x27;])</span></span><br><span class="line">    <span class="comment"># 或</span></span><br><span class="line">    <span class="comment"># print r.hmget(&#x27;xx&#x27;, &#x27;k1&#x27;, &#x27;k2&#x27;)</span></span><br></pre></td></tr></table></figure>

<h6 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall()"></a>hgetall()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hgetall(name)</span></span><br><span class="line"><span class="comment"># 获取name对应hash的所有键值</span></span><br></pre></td></tr></table></figure>

<h6 id="hlen"><a href="#hlen" class="headerlink" title="hlen()"></a>hlen()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hlen(name)</span></span><br><span class="line"><span class="comment"># 获取name对应的hash中键值对的个数</span></span><br></pre></td></tr></table></figure>

<h6 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys()"></a>hkeys()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hkeys(name)</span></span><br><span class="line"><span class="comment"># 获取name对应的hash中所有的key的值</span></span><br></pre></td></tr></table></figure>

<h6 id="hvals"><a href="#hvals" class="headerlink" title="hvals()"></a>hvals()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hvals(name)</span></span><br><span class="line"><span class="comment"># 获取name对应的hash中所有的value的值</span></span><br></pre></td></tr></table></figure>

<h6 id="hexists"><a href="#hexists" class="headerlink" title="hexists()"></a>hexists()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hexists(name, key)</span></span><br><span class="line"><span class="comment"># 检查name对应的hash是否存在当前传入的key</span></span><br></pre></td></tr></table></figure>

<h6 id="hdel"><a href="#hdel" class="headerlink" title="hdel()"></a>hdel()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hdel(name,*keys)</span></span><br><span class="line"><span class="comment"># 将name对应的hash中指定key的键值对删除</span></span><br></pre></td></tr></table></figure>

<h6 id="hincrby"><a href="#hincrby" class="headerlink" title="hincrby()"></a>hincrby()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hincrby(name, key, amount=1)</span></span><br><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis中的name</span></span><br><span class="line">    <span class="comment"># key， hash对应的key</span></span><br><span class="line">    <span class="comment"># amount，自增数（整数）</span></span><br></pre></td></tr></table></figure>

<h6 id="hincrbyfloat"><a href="#hincrbyfloat" class="headerlink" title="hincrbyfloat()"></a>hincrbyfloat()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hincrbyfloat(name, key, amount=1.0)</span></span><br><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis中的name</span></span><br><span class="line">    <span class="comment"># key， hash对应的key</span></span><br><span class="line">    <span class="comment"># amount，自增数（浮点数）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自增name对应的hash中的指定key的值，不存在则创建key=amount</span></span><br></pre></td></tr></table></figure>

<h6 id="hscan"><a href="#hscan" class="headerlink" title="hscan()"></a>hscan()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hscan(name, cursor=0, match=None, count=None)</span></span><br><span class="line"><span class="comment"># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># cursor，游标（基于游标分批取获取数据）</span></span><br><span class="line">    <span class="comment"># match，匹配指定key，默认None 表示所有的key</span></span><br><span class="line">    <span class="comment"># count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># 第一次：cursor1, data1 = r.hscan(&#x27;xx&#x27;, cursor=0, match=None, count=None)</span></span><br><span class="line">    <span class="comment"># 第二次：cursor2, data1 = r.hscan(&#x27;xx&#x27;, cursor=cursor1, match=None, count=None)</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="comment"># 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</span></span><br></pre></td></tr></table></figure>

<h6 id="hscan-iter"><a href="#hscan-iter" class="headerlink" title="hscan_iter()"></a>hscan_iter()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：hscan_iter(name, match=None, count=None)</span></span><br><span class="line"><span class="comment"># 利用yield封装hscan创建生成器，实现分批去redis中获取数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># match，匹配指定key，默认None 表示所有的key</span></span><br><span class="line">    <span class="comment"># count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># for item in r.hscan_iter(&#x27;xx&#x27;):</span></span><br><span class="line">    <span class="comment">#     print item</span></span><br></pre></td></tr></table></figure>

<h5 id="List操作"><a href="#List操作" class="headerlink" title="List操作"></a>List操作</h5><p>redis中的List在在内存中按照一个name对应一个List来存储。如图：</p>
<p><img data-src="/images/425762-20160223172249115-189393001.png" alt="img"></p>
<h6 id="lpush"><a href="#lpush" class="headerlink" title="lpush()"></a>lpush()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：lpush(name,values)</span></span><br><span class="line"><span class="comment"># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># r.lpush(&#x27;oo&#x27;, 11,22,33)</span></span><br><span class="line">    <span class="comment"># 保存顺序为: 33,22,11</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 扩展：</span></span><br><span class="line">    <span class="comment"># rpush(name, values) 表示从右向左操作</span></span><br></pre></td></tr></table></figure>

<h6 id="lpushx"><a href="#lpushx" class="headerlink" title="lpushx()"></a>lpushx()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：lpushx(name,value)</span></span><br><span class="line"><span class="comment"># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># rpushx(name, value) 表示从右向左操作</span></span><br></pre></td></tr></table></figure>

<h6 id="llen"><a href="#llen" class="headerlink" title="llen()"></a>llen()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：llen(name)</span></span><br><span class="line"><span class="comment"># name对应的list元素的个数</span></span><br></pre></td></tr></table></figure>

<h6 id="linsert"><a href="#linsert" class="headerlink" title="linsert()"></a>linsert()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：linsert(name, where, refvalue, value))</span></span><br><span class="line"><span class="comment"># 在name对应的列表的某一个值前或后插入一个新值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># where，BEFORE或AFTER</span></span><br><span class="line">    <span class="comment"># refvalue，标杆值，即：在它前后插入数据</span></span><br><span class="line">    <span class="comment"># value，要插入的数据</span></span><br></pre></td></tr></table></figure>

<h6 id="lset"><a href="#lset" class="headerlink" title="lset()"></a>lset()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：lset(name, index, value)</span></span><br><span class="line"><span class="comment"># 对name对应的list中的某一个索引位置重新赋值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># index，list的索引位置</span></span><br><span class="line">    <span class="comment"># value，要设置的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="lrem"><a href="#lrem" class="headerlink" title="lrem()"></a>lrem()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：lrem(name, value, num)</span></span><br><span class="line"><span class="comment"># 在name对应的list中删除指定的值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># value，要删除的值</span></span><br><span class="line">    <span class="comment"># num，  num=0，删除列表中所有的指定值；</span></span><br><span class="line">           <span class="comment"># num=2,从前到后，删除2个；</span></span><br><span class="line">           <span class="comment"># num=-2,从后向前，删除2个</span></span><br></pre></td></tr></table></figure>

<h6 id="lpop"><a href="#lpop" class="headerlink" title="lpop()"></a>lpop()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：lpop(name)</span></span><br><span class="line"><span class="comment"># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># rpop(name) 表示从右向左操作</span></span><br></pre></td></tr></table></figure>

<h6 id="lindex"><a href="#lindex" class="headerlink" title="lindex()"></a>lindex()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：lindex(name, index)</span></span><br><span class="line"><span class="comment"># 在name对应的列表中根据索引获取列表元素</span></span><br></pre></td></tr></table></figure>

<h6 id="lrange"><a href="#lrange" class="headerlink" title="lrange()"></a>lrange()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：lrange(name, start, end)</span></span><br><span class="line"><span class="comment"># 在name对应的列表分片获取数据</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># start，索引的起始位置</span></span><br><span class="line">    <span class="comment"># end，索引结束位置</span></span><br></pre></td></tr></table></figure>

<h6 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim()"></a>ltrim()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：ltrim(name, start, end)</span></span><br><span class="line"><span class="comment"># 在name对应的列表中移除没有在start-end索引之间的值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># start，索引的起始位置</span></span><br><span class="line">    <span class="comment"># end，索引结束位置</span></span><br></pre></td></tr></table></figure>

<h6 id="rpoplpush"><a href="#rpoplpush" class="headerlink" title="rpoplpush()"></a>rpoplpush()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：rpoplpush(src, dst)</span></span><br><span class="line"><span class="comment"># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># src，要取数据的列表的name</span></span><br><span class="line">    <span class="comment"># dst，要添加数据的列表的name</span></span><br></pre></td></tr></table></figure>

<h6 id="blpopbc"><a href="#blpopbc" class="headerlink" title="blpopbc()"></a>blpopbc()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：blpop(keys, timeout)</span></span><br><span class="line"><span class="comment"># 将多个列表排列，按照从左到右去pop对应列表的元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># keys，redis的name的集合</span></span><br><span class="line">    <span class="comment"># timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># r.brpop(keys, timeout)，从右向左获取数据</span></span><br></pre></td></tr></table></figure>

<h6 id="brpoplpush"><a href="#brpoplpush" class="headerlink" title="brpoplpush()"></a>brpoplpush()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：brpoplpush(src, dst, timeout=0)</span></span><br><span class="line"><span class="comment"># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># src，取出并要移除元素的列表对应的name</span></span><br><span class="line">    <span class="comment"># dst，要插入元素的列表对应的name</span></span><br><span class="line">    <span class="comment"># timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</span></span><br></pre></td></tr></table></figure>

<h6 id="自定义增量迭代"><a href="#自定义增量迭代" class="headerlink" title="自定义增量迭代"></a>自定义增量迭代</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span></span><br><span class="line">    <span class="comment"># 1、获取name对应的所有列表</span></span><br><span class="line">    <span class="comment"># 2、循环列表</span></span><br><span class="line"><span class="comment"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_iter</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义redis列表增量迭代</span></span><br><span class="line"><span class="string">    :param name: redis中的name，即：迭代name对应的列表</span></span><br><span class="line"><span class="string">    :return: yield 返回 列表元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    list_count = r.llen(name)</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> xrange(list_count):</span><br><span class="line">        <span class="keyword">yield</span> r.lindex(name, index)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_iter(<span class="string">&#x27;pp&#x27;</span>):</span><br><span class="line">    <span class="keyword">print</span> item</span><br></pre></td></tr></table></figure>

<h5 id="Set操作"><a href="#Set操作" class="headerlink" title="Set操作"></a>Set操作</h5><p>Set集合就是不允许重复的列表</p>
<h6 id="sadd"><a href="#sadd" class="headerlink" title="sadd()"></a>sadd()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sadd(name,values)</span></span><br><span class="line"><span class="comment"># name对应的集合中添加元素</span></span><br></pre></td></tr></table></figure>

<h6 id="scard"><a href="#scard" class="headerlink" title="scard()"></a>scard()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：scard(name)</span></span><br><span class="line"><span class="comment"># 获取name对应的集合中元素个数</span></span><br></pre></td></tr></table></figure>

<h6 id="sdiff"><a href="#sdiff" class="headerlink" title="sdiff()"></a>sdiff()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sdiff(keys, *args)</span></span><br><span class="line"><span class="comment"># 在第一个name对应的集合中且不在其他name对应的集合的元素集合</span></span><br></pre></td></tr></table></figure>

<h6 id="sdiffstore"><a href="#sdiffstore" class="headerlink" title="sdiffstore()"></a>sdiffstore()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sdiffstore(dest, keys, *args)</span></span><br><span class="line"><span class="comment"># 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中</span></span><br></pre></td></tr></table></figure>

<h6 id="sinter"><a href="#sinter" class="headerlink" title="sinter()"></a>sinter()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sinter(keys, *args)</span></span><br><span class="line"><span class="comment"># 获取多一个name对应集合的并集</span></span><br></pre></td></tr></table></figure>

<h6 id="sinterstore"><a href="#sinterstore" class="headerlink" title="sinterstore()"></a>sinterstore()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sinterstore(dest, keys, *args)</span></span><br><span class="line"><span class="comment"># 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中</span></span><br></pre></td></tr></table></figure>

<h6 id="sismember"><a href="#sismember" class="headerlink" title="sismember()"></a>sismember()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sismember(name, value)</span></span><br><span class="line"><span class="comment"># 检查value是否是name对应的集合的成员</span></span><br></pre></td></tr></table></figure>

<h6 id="smembers"><a href="#smembers" class="headerlink" title="smembers()"></a>smembers()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：smembers(name)</span></span><br><span class="line"><span class="comment"># 获取name对应的集合的所有成员</span></span><br></pre></td></tr></table></figure>

<h6 id="smove"><a href="#smove" class="headerlink" title="smove()"></a>smove()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：smove(src, dst, value)</span></span><br><span class="line"><span class="comment"># 将某个成员从一个集合中移动到另外一个集合</span></span><br></pre></td></tr></table></figure>

<h6 id="spop"><a href="#spop" class="headerlink" title="spop()"></a>spop()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：spop(name)</span></span><br><span class="line"><span class="comment"># 从集合的右侧（尾部）移除一个成员，并将其返回</span></span><br></pre></td></tr></table></figure>

<h6 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember()"></a>srandmember()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：srandmember(name, numbers)</span></span><br><span class="line"><span class="comment"># 从name对应的集合中随机获取 numbers 个元素</span></span><br></pre></td></tr></table></figure>

<h6 id="srem"><a href="#srem" class="headerlink" title="srem()"></a>srem()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：srem(name, values)</span></span><br><span class="line"><span class="comment"># 在name对应的集合中删除某些值</span></span><br></pre></td></tr></table></figure>

<h6 id="sunion"><a href="#sunion" class="headerlink" title="sunion()"></a>sunion()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sunion(keys, *args)</span></span><br><span class="line"><span class="comment"># 获取多一个name对应的集合的并集</span></span><br></pre></td></tr></table></figure>

<h6 id="sunionstore"><a href="#sunionstore" class="headerlink" title="sunionstore()"></a>sunionstore()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sunionstore(dest,keys, *args)</span></span><br><span class="line"><span class="comment"># 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中</span></span><br></pre></td></tr></table></figure>

<h6 id="sscan-and-sscan-iter"><a href="#sscan-and-sscan-iter" class="headerlink" title="sscan() and sscan_iter()"></a>sscan() and sscan_iter()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：sscan(name, cursor=0, match=None, count=None)</span></span><br><span class="line"><span class="comment"># 语法：sscan_iter(name, match=None, count=None)</span></span><br><span class="line"><span class="comment"># 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大</span></span><br></pre></td></tr></table></figure>

<h5 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h5><p>在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。</p>
<h6 id="zadd"><a href="#zadd" class="headerlink" title="zadd()"></a>zadd()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zadd(name, *args, **kwargs)</span></span><br><span class="line"><span class="comment"># 在name对应的有序集合中添加元素</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">     <span class="comment"># zadd(&#x27;zz&#x27;, &#x27;n1&#x27;, 1, &#x27;n2&#x27;, 2)</span></span><br><span class="line">     <span class="comment"># 或</span></span><br><span class="line">     <span class="comment"># zadd(&#x27;zz&#x27;, n1=11, n2=22)</span></span><br></pre></td></tr></table></figure>

<h6 id="zcard"><a href="#zcard" class="headerlink" title="zcard()"></a>zcard()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zcard(name)</span></span><br><span class="line"><span class="comment"># 获取name对应的有序集合元素的数量</span></span><br></pre></td></tr></table></figure>

<h6 id="zcount"><a href="#zcount" class="headerlink" title="zcount()"></a>zcount()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zcount(name, min, max)</span></span><br><span class="line"><span class="comment"># 获取name对应的有序集合中分数 在 [min,max] 之间的个数</span></span><br></pre></td></tr></table></figure>

<h6 id="zincrby"><a href="#zincrby" class="headerlink" title="zincrby()"></a>zincrby()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zincrby(name, value, amount)</span></span><br><span class="line"><span class="comment"># 自增name对应的有序集合的 name 对应的分数</span></span><br></pre></td></tr></table></figure>

<h6 id="zrange"><a href="#zrange" class="headerlink" title="zrange()"></a>zrange()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)</span></span><br><span class="line"><span class="comment"># 按照索引范围获取name对应的有序集合的元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># start，有序集合索引起始位置（非分数）</span></span><br><span class="line">    <span class="comment"># end，有序集合索引结束位置（非分数）</span></span><br><span class="line">    <span class="comment"># desc，排序规则，默认按照分数从小到大排序</span></span><br><span class="line">    <span class="comment"># withscores，是否获取元素的分数，默认只获取元素的值</span></span><br><span class="line">    <span class="comment"># score_cast_func，对分数进行数据转换的函数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># 从大到小排序</span></span><br><span class="line">    <span class="comment"># zrevrange(name, start, end, withscores=False, score_cast_func=float)</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 按照分数范围获取name对应的有序集合的元素</span></span><br><span class="line">    <span class="comment"># zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)</span></span><br><span class="line">    <span class="comment"># 从大到小排序</span></span><br><span class="line">    <span class="comment"># zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)</span></span><br></pre></td></tr></table></figure>

<h6 id="zrank"><a href="#zrank" class="headerlink" title="zrank()"></a>zrank()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zrank(name, value)</span></span><br><span class="line"><span class="comment"># 获取某个值在 name对应的有序集合中的排行（从 0 开始）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># zrevrank(name, value)，从大到小排序</span></span><br></pre></td></tr></table></figure>

<h6 id="zrangebylex"><a href="#zrangebylex" class="headerlink" title="zrangebylex()"></a>zrangebylex()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zrangebylex(name, min, max, start=None, num=None)</span></span><br><span class="line"><span class="comment"># 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员</span></span><br><span class="line"><span class="comment"># 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line">    <span class="comment"># name，redis的name</span></span><br><span class="line">    <span class="comment"># min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间</span></span><br><span class="line">    <span class="comment"># min，右区间（值）</span></span><br><span class="line">    <span class="comment"># start，对结果进行分片处理，索引位置</span></span><br><span class="line">    <span class="comment"># num，对结果进行分片处理，索引后面的num个元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">    <span class="comment"># ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga</span></span><br><span class="line">    <span class="comment"># r.zrangebylex(&#x27;myzset&#x27;, &quot;-&quot;, &quot;[ca&quot;) 结果为：[&#x27;aa&#x27;, &#x27;ba&#x27;, &#x27;ca&#x27;]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># 从大到小排序</span></span><br><span class="line">    <span class="comment"># zrevrangebylex(name, max, min, start=None, num=None)</span></span><br></pre></td></tr></table></figure>

<h6 id="zrem"><a href="#zrem" class="headerlink" title="zrem()"></a>zrem()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zrem(name, values)</span></span><br><span class="line"><span class="comment"># 删除name对应的有序集合中值是values的成员</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 如：zrem(&#x27;zz&#x27;, [&#x27;s1&#x27;, &#x27;s2&#x27;])</span></span><br></pre></td></tr></table></figure>

<h6 id="zremrangebyrank"><a href="#zremrangebyrank" class="headerlink" title="zremrangebyrank()"></a>zremrangebyrank()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zremrangebyrank(name, min, max)</span></span><br><span class="line"><span class="comment"># 根据排行范围删除</span></span><br></pre></td></tr></table></figure>

<h6 id="zremrangebyscore"><a href="#zremrangebyscore" class="headerlink" title="zremrangebyscore()"></a>zremrangebyscore()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zremrangebyscore(name, min, max)</span></span><br><span class="line"><span class="comment"># 根据分数范围删除</span></span><br></pre></td></tr></table></figure>

<h6 id="zremrangebylex"><a href="#zremrangebylex" class="headerlink" title="zremrangebylex()"></a>zremrangebylex()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zremrangebylex(name, min, max)</span></span><br><span class="line"><span class="comment"># 根据值返回删除</span></span><br></pre></td></tr></table></figure>

<h6 id="zscore"><a href="#zscore" class="headerlink" title="zscore()"></a>zscore()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zscore(name, value)</span></span><br><span class="line"><span class="comment"># 获取name对应有序集合中 value 对应的分数</span></span><br></pre></td></tr></table></figure>

<h6 id="zinterstore"><a href="#zinterstore" class="headerlink" title="zinterstore()"></a>zinterstore()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zinterstore(dest, keys, aggregate=None)</span></span><br><span class="line"><span class="comment"># 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作</span></span><br><span class="line"><span class="comment"># aggregate的值为:  SUM  MIN  MAX</span></span><br></pre></td></tr></table></figure>

<h6 id="zunionstore"><a href="#zunionstore" class="headerlink" title="zunionstore()"></a>zunionstore()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zunionstore(dest, keys, aggregate=None)</span></span><br><span class="line"><span class="comment"># 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作</span></span><br><span class="line"><span class="comment"># aggregate的值为:  SUM  MIN  MAX</span></span><br></pre></td></tr></table></figure>

<h6 id="zscan-和-zscan-iter"><a href="#zscan-和-zscan-iter" class="headerlink" title="zscan() 和 zscan_iter()"></a>zscan() 和 zscan_iter()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：zscan(name, cursor=0, match=None, count=None, score_cast_func=float)</span></span><br><span class="line"><span class="comment"># 语法：zscan_iter(name, match=None, count=None,score_cast_func=float)</span></span><br><span class="line"><span class="comment"># 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作</span></span><br></pre></td></tr></table></figure>

<h5 id="其他常用操作"><a href="#其他常用操作" class="headerlink" title="其他常用操作"></a>其他常用操作</h5><h6 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：delete(*names)</span></span><br><span class="line"><span class="comment"># 根据删除redis中的任意数据类型</span></span><br></pre></td></tr></table></figure>

<h6 id="exists"><a href="#exists" class="headerlink" title="exists()"></a>exists()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：exists(name)</span></span><br><span class="line"><span class="comment"># 检测redis的name是否存在</span></span><br></pre></td></tr></table></figure>

<h6 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：keys(pattern=&#x27;*&#x27;)</span></span><br><span class="line"><span class="comment"># 根据模型获取redis的name</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更多：</span></span><br><span class="line">    <span class="comment"># KEYS * 匹配数据库中所有 key 。</span></span><br><span class="line">    <span class="comment"># KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</span></span><br><span class="line">    <span class="comment"># KEYS h*llo 匹配 hllo 和 heeeeello 等。</span></span><br><span class="line">    <span class="comment"># KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo</span></span><br></pre></td></tr></table></figure>

<h6 id="expire"><a href="#expire" class="headerlink" title="expire()"></a>expire()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：expire(name ,time)</span></span><br><span class="line"><span class="comment"># 为某个redis的某个name设置超时时间</span></span><br></pre></td></tr></table></figure>

<h6 id="rename"><a href="#rename" class="headerlink" title="rename()"></a>rename()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：rename(src, dst)	</span></span><br><span class="line"><span class="comment"># 对redis的name重命名为</span></span><br></pre></td></tr></table></figure>

<h6 id="move"><a href="#move" class="headerlink" title="move()"></a>move()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：move(name, db))</span></span><br><span class="line"><span class="comment"># 将redis的某个值移动到指定的db下</span></span><br></pre></td></tr></table></figure>

<h6 id="randomkey"><a href="#randomkey" class="headerlink" title="randomkey()"></a>randomkey()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：randomkey()</span></span><br><span class="line"><span class="comment"># 随机获取一个redis的name（不删除）</span></span><br></pre></td></tr></table></figure>

<h6 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：type(name)</span></span><br><span class="line"><span class="comment"># 获取name对应值的类型</span></span><br></pre></td></tr></table></figure>

<h6 id="scan-和scan-iter"><a href="#scan-和scan-iter" class="headerlink" title="scan()和scan_iter()"></a>scan()和scan_iter()</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：scan(cursor=0, match=None, count=None)</span></span><br><span class="line"><span class="comment"># 语法：scan_iter(match=None, count=None)</span></span><br><span class="line"><span class="comment"># 同字符串操作，用于增量迭代获取key</span></span><br></pre></td></tr></table></figure>

<h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>redis-py默认在执行每次请求都会创建（连接池申请连接）和断开（归还连接池）一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"> </span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&#x27;10.211.55.4&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"> </span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># pipe = r.pipeline(transaction=False)</span></span><br><span class="line">pipe = r.pipeline(transaction=<span class="literal">True</span>)</span><br><span class="line">pipe.multi()</span><br><span class="line">pipe.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line">pipe.set(<span class="string">&#x27;role&#x27;</span>, <span class="string">&#x27;sb&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">pipe.execute()</span><br></pre></td></tr></table></figure>

<h6 id="实现计数器"><a href="#实现计数器" class="headerlink" title="实现计数器"></a>实现计数器</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">conn = redis.Redis(host=<span class="string">&#x27;192.168.1.41&#x27;</span>,port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line">conn.set(<span class="string">&#x27;count&#x27;</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> conn.pipeline() <span class="keyword">as</span> pipe:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先监视，自己的值没有被修改过</span></span><br><span class="line">    conn.watch(<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事务开始</span></span><br><span class="line">    pipe.multi()</span><br><span class="line">    old_count = conn.get(<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line">    count = int(old_count)</span><br><span class="line">    <span class="keyword">if</span> count &gt; <span class="number">0</span>:  <span class="comment"># 有库存</span></span><br><span class="line">        pipe.set(<span class="string">&#x27;count&#x27;</span>, count - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行，把所有命令一次性推送过去</span></span><br><span class="line">    pipe.execute()</span><br></pre></td></tr></table></figure>

<h4 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h4><p><img data-src="/images/425762-20160121152411125-1838441844.png" alt="img"></p>
<p>发布者：服务器</p>
<p>订阅者：Dashboad和数据处理</p>
<h6 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisHelper</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__conn = redis.Redis(host=<span class="string">&#x27;10.211.55.4&#x27;</span>)</span><br><span class="line">        self.chan_sub = <span class="string">&#x27;fm104.5&#x27;</span></span><br><span class="line">        self.chan_pub = <span class="string">&#x27;fm104.5&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        self.__conn.publish(self.chan_pub, msg)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subscribe</span>(<span class="params">self</span>):</span></span><br><span class="line">        pub = self.__conn.pubsub()</span><br><span class="line">        pub.subscribe(self.chan_sub)</span><br><span class="line">        pub.parse_response()</span><br><span class="line">        <span class="keyword">return</span> pub</span><br><span class="line"></span><br><span class="line">RedisHelper</span><br></pre></td></tr></table></figure>

<h6 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> monitor.RedisHelper <span class="keyword">import</span> RedisHelper</span><br><span class="line"> </span><br><span class="line">obj = RedisHelper()</span><br><span class="line">redis_sub = obj.subscribe()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg= redis_sub.parse_response()</span><br><span class="line">    <span class="keyword">print</span> msg</span><br></pre></td></tr></table></figure>

<h6 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> monitor.RedisHelper <span class="keyword">import</span> RedisHelper</span><br><span class="line"> </span><br><span class="line">obj = RedisHelper()</span><br><span class="line">obj.public(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="sentinel"><a href="#sentinel" class="headerlink" title="sentinel"></a>sentinel</h4><p>redis重的sentinel主要用于在redis主从复制中，如果master顾上，则自动将slave替换成master</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis.sentinel <span class="keyword">import</span> Sentinel</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 连接哨兵服务器(主机名也可以用域名)</span></span><br><span class="line">sentinel = Sentinel([(<span class="string">&#x27;10.211.55.20&#x27;</span>, <span class="number">26379</span>),</span><br><span class="line">                     (<span class="string">&#x27;10.211.55.20&#x27;</span>, <span class="number">26380</span>),</span><br><span class="line">                     ],</span><br><span class="line">                    socket_timeout=<span class="number">0.5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># # 获取主服务器地址</span></span><br><span class="line"><span class="comment"># master = sentinel.discover_master(&#x27;mymaster&#x27;)</span></span><br><span class="line"><span class="comment"># print(master)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # # 获取从服务器地址</span></span><br><span class="line"><span class="comment"># slave = sentinel.discover_slaves(&#x27;mymaster&#x27;)</span></span><br><span class="line"><span class="comment"># print(slave)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # # 获取主服务器进行写入</span></span><br><span class="line"><span class="comment"># master = sentinel.master_for(&#x27;mymaster&#x27;)</span></span><br><span class="line"><span class="comment"># master.set(&#x27;foo&#x27;, &#x27;bar&#x27;)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># # # # 获取从服务器进行读取（默认是round-roubin）</span></span><br><span class="line"><span class="comment"># slave = sentinel.slave_for(&#x27;mymaster&#x27;, password=&#x27;redis_auth_pass&#x27;)</span></span><br><span class="line"><span class="comment"># r_ret = slave.get(&#x27;foo&#x27;)</span></span><br><span class="line"><span class="comment"># print(r_ret)</span></span><br></pre></td></tr></table></figure>

<p>更多参见：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FuZHltY2N1cmR5L3JlZGlzLXB5Lw==">https://github.com/andymccurdy/redis-py/<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tLw==">http://doc.redisfans.com/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>db</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>数据库</tag>
        <tag>连接池</tag>
        <tag>操作模式</tag>
        <tag>string操作</tag>
        <tag>hash操作</tag>
        <tag>list操作</tag>
        <tag>set操作</tag>
        <tag>有序集合操作</tag>
        <tag>管道</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架基本使用</title>
    <url>/16bf34e6.html</url>
    <content><![CDATA[<p><code>Vue</code> (读音 <code>/vjuː/</code>，类似于 <strong><code>view</code></strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，<code>Vue</code> 被设计为可以自底向上逐层应用。<code>Vue</code> 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvc2luZ2xlLWZpbGUtY29tcG9uZW50cy5odG1s">现代化的工具链<i class="fa fa-external-link-alt"></i></span>以及各种<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL2F3ZXNvbWUtdnVlI2xpYnJhcmllcy0tcGx1Z2lucw==">支持类库<i class="fa fa-external-link-alt"></i></span>结合使用时，<code>Vue</code> 也完全能够为复杂的单页应用提供驱动。</p>
<a id="more"></a>

<h2 id="前端框架和库的区别"><a href="#前端框架和库的区别" class="headerlink" title="前端框架和库的区别"></a>前端框架和库的区别</h2><h3 id="功能上的不同"><a href="#功能上的不同" class="headerlink" title="功能上的不同"></a>功能上的不同</h3><p><code>jquery</code>库：包含<code>DOM</code>(操作<code>DOM</code>)+请求，就是一块功能。<br><code>art-template</code>库：模板引擎渲染，高性能的渲染<code>DOM</code>    (我们后端的一种模板  跟<code>python</code>的模板类似)<br>框架：大而全的概念，简易的<code>DOM</code>体验+请求处理+模板引擎<br>在<code>KFC</code>的世界里，库就是一个小套餐，框架就是全家桶。</p>
<h3 id="代码上的不同"><a href="#代码上的不同" class="headerlink" title="代码上的不同"></a>代码上的不同</h3><p>一般使用库的代码，是调用某个函数或者直接使用抛出来的对象，我们自己处理库中的代码。<br>一般使用框架，其框架本身提供的好的成套的工具帮我们运行我们编写好的代码。</p>
<h3 id="框架的使用"><a href="#框架的使用" class="headerlink" title="框架的使用"></a>框架的使用</h3><ul>
<li><p>初始化自身的一些行为</p>
</li>
<li><p>执行你所编写的代码</p>
</li>
<li><p>释放一些资源</p>
</li>
</ul>
<h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><ol>
<li><p>去官网<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==">https://nodejs.org/en/download/<i class="fa fa-external-link-alt"></i></span> 下载 安装(傻瓜式安装)</p>
</li>
<li><p>打开终端 <code>cmd</code> : 执行<code>node -v</code> 如果出现版本号，证明安装<code>node</code>成功 ，跟安装<code>python</code>雷同</p>
</li>
<li><p>下载完<code>node</code>之后，会自带包管理器 <code>npm</code>，好比 是<code>python</code>中 <code>pip3</code>包管理器。<code>pip3 install xxx</code></p>
</li>
<li><p>使用<code>npm</code></p>
<p>4.1 要初始化<code>npm</code>的项目 :</p>
<p><code>npm init --yes</code> 自动生成一个<code>package.json文</code>件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;vue_lesson&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;这是我的vue的第一个项目&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo &quot;</span>Error: no test specified<span class="string">&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Tony&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.5.16&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>4.2 下载依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue --save`</span><br><span class="line">`npm install jquery --save</span><br></pre></td></tr></table></figure>

<p>4.3 卸载包 <code>npm uninstall vue --save</code></p>
<p>4.4 下载所有的依赖包 <code>npm install</code></p>
</li>
</ol>
<h2 id="vue的起步"><a href="#vue的起步" class="headerlink" title="vue的起步"></a><code>vue</code>的起步</h2><ul>
<li>引包:</li>
<li>创建实例化对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">&#x27;#app&#x27;</span>,<span class="comment">//目的地</span></span><br><span class="line">data:&#123;</span><br><span class="line">    msg:<span class="string">&quot;hello Vue&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;&#123;&#125;&#125;: 模板语法插值</span></span><br><span class="line"><span class="comment">    &#123;&#123;变量&#125;&#125;</span></span><br><span class="line"><span class="comment">    &#123;&#123;1+1&#125;&#125;</span></span><br><span class="line"><span class="comment">    &#123;&#123;&#x27;hello&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">    &#123;&#123;函数的调用&#125;&#125;</span></span><br><span class="line"><span class="comment">    &#123;&#123;1==1?&#x27;真的&#x27;:&#x27;假的&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以用 <code>v-else</code> 添加一个“else 块”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>另一个用于根据条件展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 <code>CSS</code> 属性 <code>display</code>。</p>
<div class="note danger"><p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p>
</div>

<h4 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><code>v-if</code> vs <code>v-show</code></h4><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br><code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。<br>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 <code>CSS</code> 进行切换。<br>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p>
<h3 id="v-on-v-bind-v-for"><a href="#v-on-v-bind-v-for" class="headerlink" title="v-on v-bind v-for"></a>v-on v-bind v-for</h3><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><ul>
<li><p><strong>缩写</strong>：<code>@</code></p>
</li>
<li><p><strong>预期</strong>：<code>Function | Inline Statement | Object</code></p>
</li>
<li><p><strong>参数</strong>：<code>event</code></p>
</li>
<li><p><strong>修饰符</strong>：</p>
<ul>
<li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li>
<li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li>
<li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li>
<li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>
<li><code>.&#123;keyCode | keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调。</li>
<li><code>.native</code> - 监听组件根元素的原生事件。</li>
<li><code>.once</code> - 只触发一次回调。</li>
<li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li>
<li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li>
<li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li>
<li><code>.passive</code> - (2.3.0) 以 <code>&#123; passive: true &#125;</code> 模式添加侦听器</li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<p>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</p>
<p>用在普通元素上时，只能监听<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events"><strong>原生 DOM 事件</strong></a>。用在自定义元素组件上时，也可以监听子组件触发的<strong>自定义事件</strong>。</p>
<p>在监听原生 <code>DOM</code> 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event</code> 属性：<code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>。</p>
<p>从 <code>2.4.0</code> 开始，<code>v-on</code> 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 方法处理器 --&gt;</span><br><span class="line">&lt;button v-on:click&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态事件 (2.6.0+) --&gt;</span><br><span class="line">&lt;button v-on:[event]&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联语句 --&gt;</span><br><span class="line">&lt;button v-on:click&#x3D;&quot;doThat(&#39;hello&#39;, $event)&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态事件缩写 (2.6.0+) --&gt;</span><br><span class="line">&lt;button @[event]&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 停止冒泡 --&gt;</span><br><span class="line">&lt;button @click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 阻止默认行为 --&gt;</span><br><span class="line">&lt;button @click.prevent&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span><br><span class="line">&lt;form @submit.prevent&gt;&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--  串联修饰符 --&gt;</span><br><span class="line">&lt;button @click.stop.prevent&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 键修饰符，键别名 --&gt;</span><br><span class="line">&lt;input @keyup.enter&#x3D;&quot;onEnter&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 键修饰符，键代码 --&gt;</span><br><span class="line">&lt;input @keyup.13&#x3D;&quot;onEnter&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 点击回调只会触发一次 --&gt;</span><br><span class="line">&lt;button v-on:click.once&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 对象语法 (2.4.0+) --&gt;</span><br><span class="line">&lt;button v-on&#x3D;&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;&gt;&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<p>在子组件上监听自定义事件 (当子组件触发“<code>my-event</code>”时将调用事件处理器)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;my-component @my-event&#x3D;&quot;handleThis&quot;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联语句 --&gt;</span><br><span class="line">&lt;my-component @my-event&#x3D;&quot;handleThis(123, $event)&quot;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件中的原生事件 --&gt;</span><br><span class="line">&lt;my-component @click.native&#x3D;&quot;onClick&quot;&gt;&lt;&#x2F;my-component&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><ul>
<li><p><strong>缩写</strong>：<code>:</code></p>
</li>
<li><p><strong>预期</strong>：<code>any (with argument) | Object (without argument)</code></p>
</li>
<li><p><strong>参数</strong>：<code>attrOrProp (optional)</code></p>
</li>
<li><p><strong>修饰符</strong>：</p>
<ul>
<li><code>.prop</code> - 被用于绑定 <code>DOM</code> 属性 (<code>property</code>)。(<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAwMzgxOS9wcm9wZXJ0aWVzLWFuZC1hdHRyaWJ1dGVzLWluLWh0bWwjYW5zd2VyLTYwMDQwMjg=">差别在哪里？<i class="fa fa-external-link-alt"></i></span>)</li>
<li><code>.camel</code> - (2.1.0+) 将 <code>kebab-case</code> 特性名转换为 <code>camelCase</code>. (从 2.1.0 开始支持)</li>
<li><code>.sync</code> (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 <code>v-on</code> 侦听器。</li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<p>动态地绑定一个或多个特性，或一个组件 prop 到表达式。</p>
<p>在绑定 <code>class</code> 或 <code>style</code> 特性时，支持其它类型的值，如数组或对象。可以通过下面的教程链接查看详情。</p>
<p>在绑定 <code>prop</code> 时，<code>prop</code> 必须在子组件中声明。可以用修饰符指定不同的绑定类型。</p>
<p>没有参数时，可以绑定到一个包含键值对的对象。注意此时 <code>class</code> 和 <code>style</code> 绑定不支持数组和对象。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 绑定一个属性 --&gt;</span><br><span class="line">&lt;img v-bind:src&#x3D;&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态特性名 (2.6.0+) --&gt;</span><br><span class="line">&lt;button v-bind:[key]&#x3D;&quot;value&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;img :src&#x3D;&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态特性名缩写 (2.6.0+) --&gt;</span><br><span class="line">&lt;button :[key]&#x3D;&quot;value&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联字符串拼接 --&gt;</span><br><span class="line">&lt;img :src&#x3D;&quot;&#39;&#x2F;path&#x2F;to&#x2F;images&#x2F;&#39; + fileName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- class 绑定 --&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;&#123; red: isRed &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;[classA, classB]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- style 绑定 --&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123; fontSize: size + &#39;px&#39; &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;[styleObjectA, styleObjectB]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定一个有属性的对象 --&gt;</span><br><span class="line">&lt;div v-bind&#x3D;&quot;&#123; id: someProp, &#39;other-attr&#39;: otherProp &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --&gt;</span><br><span class="line">&lt;div v-bind:text-content.prop&#x3D;&quot;text&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span><br><span class="line">&lt;my-component :prop&#x3D;&quot;someThing&quot;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span><br><span class="line">&lt;child-component v-bind&#x3D;&quot;$props&quot;&gt;&lt;&#x2F;child-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- XLink --&gt;</span><br><span class="line">&lt;svg&gt;&lt;a :xlink:special&#x3D;&quot;foo&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>

<p><code>.camel</code> 修饰符允许在使用 <code>DOM</code> 模板时将 <code>v-bind</code> 属性名称驼峰化，例如 <code>SVG</code> 的 <code>viewBox</code> 属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;svg :view-box.camel&#x3D;&quot;viewBox&quot;&gt;&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>

<p>在使用字符串模板或通过 <code>vue-loader</code>/<code>vueify</code> 编译时，无需使用 <code>.camel</code>。</p>
</li>
</ul>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul>
<li><p><strong>预期</strong>：<code>Array | Object | number | string | Iterable (2.6 新增)</code></p>
</li>
<li><p><strong>用法</strong>：</p>
<p>基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 <code>alias in expression</code> ，为当前遍历的元素提供别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;item in items&quot;&gt;</span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>另外也可以为数组索引指定别名 (或者用于对象的键)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;(item, index) in items&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-for&#x3D;&quot;(val, key) in object&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-for&#x3D;&quot;(val, name, index) in object&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><code>v-for</code> 默认行为试着不改变整体，而是替换元素。迫使其重新排序的元素，你需要提供一个 <code>key</code> 的特殊属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>从 2.6 起，<code>v-for</code> 也可以在实现了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvSXRlcmF0aW9uX3Byb3RvY29scyMlRTUlOEYlQUYlRTglQkYlQUQlRTQlQkIlQTMlRTUlOEQlOEYlRTglQUUlQUU=">可迭代协议<i class="fa fa-external-link-alt"></i></span>的值上使用，包括原生的 <code>Map</code> 和 <code>Set</code>。不过应该注意的是 <code>Vue 2.x</code> 目前并不支持可响应的 <code>Map</code> 和 <code>Set</code> 值，所以无法自动探测变更。</p>
<div class="note danger"><p>当和 <code>v-if</code> 一起使用时，<code>v-for</code> 的优先级比 <code>v-if</code> 更高。</p>
</div>
</li>
<li><p><strong>示例</strong>：</p>
<p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;item in items&quot;&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<div class="note danger"><ul>
<li><p>Foo</p>
</li>
<li><p>Bar</p>
</li>
</ul>
</div>

</li>
</ul>
<h2 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h2><h3 id="局部组件的使用"><a href="#局部组件的使用" class="headerlink" title="局部组件的使用"></a>局部组件的使用</h3><p> 打油诗: 1.声子 2.挂子 3.用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.声子</span><br><span class="line">var App &#x3D; &#123;</span><br><span class="line"> tempalte:&#96;</span><br><span class="line">   &lt;div class&#x3D;&#39;app&#39;&gt;&lt;&#x2F;div&gt;&#96;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line"> el:&quot;#app&quot;,</span><br><span class="line"> &#x2F;&#x2F;3.用子  </span><br><span class="line"> template:&lt;App &#x2F;&gt;</span><br><span class="line"> &#x2F;&#x2F;2.挂子</span><br><span class="line"> components:&#123;</span><br><span class="line">    App</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="1-父组件向子组件传递数据-通过Prop"><a href="#1-父组件向子组件传递数据-通过Prop" class="headerlink" title="(1)父组件向子组件传递数据:通过Prop"></a>(1)父组件向子组件传递数据:通过Prop</h4><p>1.在子组件自定义特性。props:[‘自定义的属性1’,’自定义属性2’]<br>当一个值传递给一个 prop 特性的时候，它就变成了那个组件实例的一个属性,那么我们就可以像访问data中的值一样<br>2.要在父组件中导入的子组件内部 绑定自定义的属性 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Vheader :title = <span class="string">&#x27;父组件中data声明的数据属性&#x27;</span>/&gt;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>注意:一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。</p>
</div>

<h4 id="2-如何从子组件传递数据到父组件"><a href="#2-如何从子组件传递数据到父组件" class="headerlink" title="(2)如何从子组件传递数据到父组件"></a>(2)如何从子组件传递数据到父组件</h4><p>1.给子组件中的某个按钮绑定原声事件,。我们可以调用内建的 <code>this.$emit(&#39;自定义的事件名&#39;,&#39;传递的数据&#39;)</code>，来向父级组件触发一个自定义的事件.<br>2.在父组件中的子组件标签中 要绑定自定义的事件,</p>
<h3 id="全局组件的使用"><a href="#全局组件的使用" class="headerlink" title="全局组件的使用"></a>全局组件的使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;全局组件的名字&#x27;</span>,&#123;</span><br><span class="line"> 跟<span class="keyword">new</span> Vue() 实例化对象中的options是一样，但是要注意：</span><br><span class="line"> 不管是公共组件还是局部组件 data必须是个函数 函数一定要返回 &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;slot&gt; 元素作为承载分发内容的出口</span><br></pre></td></tr></table></figure>

<h2 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h2><h3 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//1.注册局部过滤器 在组件对象中定义</span></span><br><span class="line">filters:&#123;</span><br><span class="line">    <span class="string">&#x27;过滤器的名字&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.使用过滤器 使用管道符 | </span></span><br><span class="line">&#123;&#123;price  | <span class="string">&#x27;过滤器的名字&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册全局的过滤器</span></span><br><span class="line"><span class="comment">//第一个参数是过滤器的名字，第二个参数是执行的操作</span></span><br><span class="line"></span><br><span class="line">Vue.filter(<span class="string">&#x27;reverse&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> value.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用跟 局部过滤器一样</span></span><br></pre></td></tr></table></figure>

<h2 id="计算属性computed和侦听器（watch）"><a href="#计算属性computed和侦听器（watch）" class="headerlink" title="计算属性computed和侦听器（watch）"></a>计算属性computed和侦听器（watch）</h2><h3 id="侦听的是单个属性"><a href="#侦听的是单个属性" class="headerlink" title="侦听的是单个属性"></a>侦听的是单个属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line"></span><br><span class="line">    数据属性的名字：function(value)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    数据属性的名字2：function(value)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="侦听多个属性-计算属性-computed"><a href="#侦听多个属性-计算属性-computed" class="headerlink" title="侦听多个属性:计算属性 computed"></a>侦听多个属性:计算属性 computed</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算属性 :默认只有getter方法</span></span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">    name:<span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compuetd:&#123;</span><br><span class="line">      key:value</span><br><span class="line">      计算属性的方法名:funtion()&#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;<span class="built_in">this</span>.name&#125;他的年龄是$&#123;<span class="built_in">this</span>.age&#125;岁</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> musicData = [</span><br><span class="line">      &#123;</span><br><span class="line">        id:<span class="number">1</span>,</span><br><span class="line">        name:<span class="string">&#x27;于荣光 - 少林英雄&#x27;</span>,</span><br><span class="line">        author:<span class="string">&#x27;于荣光&#x27;</span>,</span><br><span class="line">        songSrc:<span class="string">&#x27;./static/于荣光 - 少林英雄.mp3&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id:<span class="number">2</span>,</span><br><span class="line">        name:<span class="string">&#x27;Joel Adams - Please Dont Go&#x27;</span>,</span><br><span class="line">        author:<span class="string">&#x27;Joel Adams&#x27;</span>,</span><br><span class="line">        songSrc:<span class="string">&#x27;./static/Joel Adams - Please Dont Go.mp3&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id:<span class="number">3</span>,</span><br><span class="line">        name:<span class="string">&#x27;MKJ - Time&#x27;</span>,</span><br><span class="line">        author:<span class="string">&#x27;MKJ&#x27;</span>,</span><br><span class="line">        songSrc:<span class="string">&#x27;./static/MKJ - Time.mp3&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id:<span class="number">4</span>,</span><br><span class="line">        name:<span class="string">&#x27;Russ - Psycho (Pt. 2)&#x27;</span>,</span><br><span class="line">        author:<span class="string">&#x27;Russ&#x27;</span>,</span><br><span class="line">        songSrc:<span class="string">&#x27;./static/Russ - Psycho (Pt. 2).mp3&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure>

<h2 id="生命周期-钩子函数"><a href="#生命周期-钩子函数" class="headerlink" title="生命周期(钩子函数)"></a>生命周期(钩子函数)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beforeCreate()&#123;</span><br><span class="line">    <span class="comment">// 组件创建之前</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">created()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件创建之后</span></span><br><span class="line">    <span class="comment">// 使用该组件，就会触发以上的钩子函数，created中可以操作数据，发送ajax，并且可以实现vue==》页面的影响  应用：发送ajax请求</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg);</span><br><span class="line">    <span class="comment">// this.msg = &#x27;嘿嘿黑&#x27;;</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeMount()&#123;</span><br><span class="line">    <span class="comment">// 装载数据到DOM之前会调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>));</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">mounted()&#123;</span><br><span class="line">    <span class="comment">// 这个地方可以操作DOM</span></span><br><span class="line">    <span class="comment">// 装载数据到DOM之后会调用 可以获取到真实存在的DOM元素，vue操作以后的DOM</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>));</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeUpdate()&#123;</span><br><span class="line">    <span class="comment">// 在更新之前，调用此钩子，应用：获取原始的DOM</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).innerHTML);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">updated()&#123;</span><br><span class="line">    <span class="comment">// 在更新之前，调用此钩子，应用：获取最新的DOM</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).innerHTML);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeDestroy()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;beforeDestroy&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">destroyed()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;destroyed&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">activated()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;组件被激活了&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">deactivated()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;组件被停用了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性"><a href="#属性" class="headerlink" title="$属性"></a>$属性</h2><ul>
<li><code>$refs</code>获取组件内的元素</li>
<li><code>$parent</code>:获取当前组件的父组件</li>
<li><code>$children</code>:获取当前组件的子组件</li>
<li><code>$root</code>:获取<code>New Vue</code>的实例化对象</li>
<li><code>$el</code>:获取组件对象的<code>DOM</code>元素</li>
</ul>
<h2 id="获取更新之后的dom添加事件的特殊情况"><a href="#获取更新之后的dom添加事件的特殊情况" class="headerlink" title="获取更新之后的dom添加事件的特殊情况"></a>获取更新之后的dom添加事件的特殊情况</h2><p><code>$nextTick</code> 是在下次<code>Dom</code>更新循环结束之后执行的延迟回调，在修改数据之后使用<code>$nextTick</code> ，则可以在回调中获取更新之后的<code>DOM</code></p>
]]></content>
      <categories>
        <category>fe</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>组件</tag>
        <tag>指令</tag>
        <tag>过滤器</tag>
        <tag>计算属性</tag>
        <tag>生命周期</tag>
        <tag>钩子函数</tag>
        <tag>v-show</tag>
        <tag>v-bind</tag>
        <tag>v-if</tag>
        <tag>v-for</tag>
        <tag>v-on</tag>
        <tag>prop</tag>
        <tag>computed</tag>
        <tag>watch</tag>
      </tags>
  </entry>
  <entry>
    <title>linux文件和目录基本常用命令</title>
    <url>/b298fb75.html</url>
    <content><![CDATA[<p><code>linux</code>命令是什么，就是一个可执行的二进制程序</p>
<p><code>linux命令</code>是对<code>Linux</code>系统进行管理的命令。对于<code>Linux</code>系统来说，无论是中央处理器、内存、磁盘驱动器、键盘、鼠标，还是用户等都是文件，<code>Linux</code>系统管理的命令是它正常运行的核心，与之前的<code>DOS</code>命令类似。<code>linux</code>命令在系统中有两种类型：内置<code>Shell</code>命令和<code>Linux</code>命令。</p>
<a id="more"></a>

<h2 id="目录树架构示意图"><a href="#目录树架构示意图" class="headerlink" title="目录树架构示意图"></a>目录树架构示意图</h2><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190806120435.png" alt="img"></p>
<p>以下是对这些目录的解释：</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190806121759.png"></p>
<ul>
<li><p>**<code>/bin</code>**：<br>bin是<code>Binary</code>的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong><code>/boot</code>：</strong><br>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong><code>/dev</code> ：</strong><br><code>dev</code>是<code>Device</code>(设备)的缩写, 该目录下存放的是<code>Linux</code>的外部设备，在<code>Linux</code>中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p><strong><code>/etc</code>：</strong><br>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>
</li>
<li><p>**<code>/home</code>**：<br>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p>
</li>
<li><p>**<code>/lib</code>**：<br>这个目录里存放着系统最基本的动态连接共享库，其作用类似于<code>Windows</code>里的<code>DLL</code>文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p>**<code>/lost+found</code>**：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p>**<code>/media</code>**：<br><code>linux</code>系统会自动识别一些设备，例如U盘、光驱等等，当识别后，<code>linux</code>会把识别的设备挂载到这个目录下。</p>
</li>
<li><p>**<code>/mnt</code>**：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在<code>/mnt/</code>上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p>**<code>/opt</code>**：<br> 这是给主机额外安装软件所摆放的目录。比如你安装一个<code>ORACLE</code>数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p>**<code>/proc</code>**：<br>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="number">1</span> &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>/root</code>**：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p>
</li>
<li><p>**<code>/sbin</code>**：<br><code>s</code>就是<code>Super User</code>的意思，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p>**<code>/selinux</code>**：<br> 这个目录是<code>Redhat/CentOS</code>所特有的目录，<code>Selinux</code>是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放<code>selinux</code>相关的文件的。</p>
</li>
<li><p>**<code>/srv</code>**：<br> 该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p>**<code>/sys</code>**：<br> 这是<code>linux2.6</code>内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 <code>sysfs</code> 。</p>
<p><code>sysfs</code>文件系统集成了下面3种文件系统的信息：针对进程信息的<code>proc</code>文件系统、针对设备的<code>devfs</code>文件系统以及针对伪终端的<code>devpts</code>文件系统。</p>
</li>
</ul>
<p>  该文件系统是内核设备树的一个直观反映。</p>
<p>  当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
<ul>
<li><p>**<code>/tmp</code>**：<br>这个目录是用来存放一些临时文件的。</p>
</li>
<li><p>**<code>/usr</code>**：<br> 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于<code>windows</code>下的<code>program files</code>目录。</p>
</li>
<li><p><strong><code>/usr/bin</code>：</strong><br>系统用户使用的应用程序。</p>
</li>
<li><p><strong><code>/usr/sbin</code>：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong><code>/usr/src</code>：</strong>内核源代码默认的放置目录。</p>
</li>
<li><p>**<code>/var</code>**：<br>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>
</li>
</ul>
<p>在<code>linux</code>系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p>
<p><code>/etc</code>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p>
<p><code>/bin</code>, <code>/sbin</code>, <code>/usr/bin</code>, <code>/usr/sbin</code>: 这是系统预设的执行文件的放置目录，比如 ls 就是在<code>/bin/ls</code> 目录下的。</p>
<p>值得提出的是，<code>/bin</code>, <code>/usr/bin</code> 是给系统用户使用的指令（除<code>root</code>外的通用户），而<code>/sbin</code>, <code>/usr/sbin</code> 则是给<code>root</code>使用的指令。</p>
<p><code>/var</code>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在<code>/var/log</code> 目录下，另外<code>mail</code>的预设放置也是在这里。</p>
<h2 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h4><p><strong><code>mkdir</code>命令</strong>用来创建目录。该命令创建由<code>dirname</code>命名的目录。如果在目录名的前面没有加任何路径名，则在当前目录下创建由<code>dirname</code>指定的目录；如果给出了一个已经存在的路径，将会在该目录下创建一个指定的目录。在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。 </p>
<p>注意：在创建文件时，不要把所有的文件都存放在主目录中，可以创建子目录，通过它们来更有效地组织文件。最好采用前后一致的命名方式来区分文件和目录。例如，目录名可以以大写字母开头，这样，在目录列表中目录名就出现在前面。</p>
<p>在一个子目录中应包含类型相似或用途相近的文件。例如，应建立一个子目录，它包含所有的数据库文件，另有一个子目录应包含电子表格文件，还有一个子目录应包含文字处理文档，等等。目录也是文件，它们和普通文件一样遵循相同的命名规则，并且利用全路径可以唯一地指定一个目录。</p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir (选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Z：设置安全上下文，当使用SELinux时有效；</span><br><span class="line">-m&lt;目标属性&gt;或--mode&lt;目标属性&gt;建立目录的同时设置目录的权限；</span><br><span class="line">-p或--parents 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；</span><br><span class="line">--version 显示版本信息。</span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>目录：指定要创建的目录列表，多个目录之间用空格隔开。</p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>在/media/tony/数据，使用绝对路径创建子目录test，并且只有文件主有读、写和执行权限，其他人无权访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -m 700 /media/tony/数据/test</span><br></pre></td></tr></table></figure>

<p>在当前目录中创建parent/child目录，权限设置为文件主可读、写、执行，同组用户可读和执行，其他用户无权访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p -m 750 parent/child</span><br></pre></td></tr></table></figure>

<h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h4><p><strong>touch命令</strong>有两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件。</p>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a：或--time=atime或--time=access或--time=use  只更改存取时间；</span><br><span class="line">-c：或--no-create  不建立任何文件；</span><br><span class="line">-d：&lt;时间日期&gt; 使用指定的日期时间，而非现在的时间；</span><br><span class="line">-f：此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题；</span><br><span class="line">-m：或--time=mtime或--time=modify  只更该变动时间；</span><br><span class="line">-r：&lt;参考文件或目录&gt;  把指定文件或目录的日期时间，统统设成和参考文件或目录的日期时间相同；</span><br><span class="line">-t：&lt;日期时间&gt;  使用指定的日期时间，而非现在的时间；</span><br><span class="line">--help：在线帮助；</span><br><span class="line">--version：显示版本信息。</span><br></pre></td></tr></table></figure>

<h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><p>文件：指定要设置时间属性的文件列表。</p>
<h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch tests</span><br></pre></td></tr></table></figure>

<p>在当前目录下建立一个空文件<code>tests</code>，然后，利用<code>ls -l</code>命令可以发现文件<code>tests</code>的大小为0，表示它是空文件。</p>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><p><strong><code>rm</code>命令</strong>可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。</p>
<p>注意：使用rm命令要格外小心。因为一旦删除了一个文件，就无法再恢复它。所以，在删除文件之前，最好再看一下文件的内容，确定是否真要删除。rm命令可以用-i选项，这个选项在使用文件扩展名字符删除多个文件时特别有用。使用这个选项，系统会要求你逐一确定是否要删除。这时，必须输入y并按Enter键，才能删除文件。如果仅按Enter键或其他字符，文件不会被删除。</p>
<h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm (选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-d：直接把欲删除的目录的硬连接数据删除成0，删除该目录；</span><br><span class="line">-f：强制删除文件或目录；</span><br><span class="line">-i：删除已有文件或目录之前先询问用户；</span><br><span class="line">-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；</span><br><span class="line">--preserve-root：不对根目录进行递归操作；</span><br><span class="line">-v：显示指令的详细执行过程。</span><br></pre></td></tr></table></figure>

<h5 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h5><p>文件：指定被删除的文件列表，如果参数中含有目录，则必须加上<code>-r</code>或者<code>-R</code>选项。</p>
<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><p>交互式删除当前目录下的文件<code>tests</code>和<code>tests1</code>文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> <span class="literal">-i</span> tests tests1</span><br><span class="line">Remove tests ?n（不删除文件tests)</span><br><span class="line">Remove tests1 ?y（删除文件tests1)</span><br></pre></td></tr></table></figure>

<p>删除当前目录下除隐含文件外的所有文件和子目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rm -r *</span></span><br></pre></td></tr></table></figure>

<p>应注意，这样做是非常危险的!</p>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h4><p>**<code>mv命令</code>**用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。<code>source</code>表示源文件或目录，<code>target</code>表示目标文件或目录。如果将一个文件移到一个已经存在的目标文件中，则目标文件的内容将被覆盖。</p>
<p><code>mv</code>命令可以用来将源文件移至一个目标文件中，或将一组文件移至一个目标目录中。源文件被移至目标文件有两种不同的结果：</p>
<ol>
<li>如果目标文件是到某一目录文件的路径，源文件会被移到此目录下，且文件名不变。</li>
<li>如果目标文件不是目录文件，则源文件名（只能有一个）会变为此目标文件名，并覆盖己存在的同名文件。如果源文件和目标文件在同一个目录下，<code>mv</code>的作用就是改文件名。当目标文件是目录文件时，源文件或目录参数可以有多个，则所有的源文件都会被移至目标文件中。所有移到该目录下的文件都将保留以前的文件名。</li>
</ol>
<p>注意事项：<code>mv</code>与<code>cp</code>的结果不同，<code>mv</code>好像文件“搬家”，文件个数并未增加。而<code>cp</code>对文件进行复制，文件个数增加了。</p>
<h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span>(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-b</span>：当文件存在时，覆盖前，为其创建一个备份；</span><br><span class="line"><span class="operator">-f</span>：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录；</span><br><span class="line"><span class="literal">-i</span>：交互式操作，覆盖前先行询问用户，如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入”y”，表示将覆盖目标文件；输入”n”，表示取消对源文件的移动。这样可以避免误将文件覆盖。</span><br><span class="line">-<span class="literal">-strip</span><span class="literal">-trailing</span><span class="literal">-slashes</span>：删除源文件中的斜杠“/”；</span><br><span class="line"><span class="literal">-S</span>&lt;后缀&gt;：为备份文件指定后缀，而不使用默认的后缀；</span><br><span class="line">-<span class="literal">-target</span><span class="literal">-directory</span>=&lt;目录&gt;：指定源文件要移动到目标目录；</span><br><span class="line"><span class="literal">-u</span>：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</span><br></pre></td></tr></table></figure>

<h5 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h5><ul>
<li>源文件：源文件列表。</li>
<li>目标文件：如果“目标文件”是文件名则在移动文件的同时，将其改名为“目标文件”；如果“目标文件”是目录名则将源文件移动到“目标文件”下。</li>
</ul>
<h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><p>将文件<code>ex3</code>改名为<code>new1</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> ex3 new1</span><br></pre></td></tr></table></figure>

<p>将目录<code>/usr/men</code>中的所有文件移到当前目录（用<code>.</code>表示）中：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /usr/men/* .</span><br></pre></td></tr></table></figure>

<h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h4><p>**<code>cd命令</code>**用来切换工作目录至<code>dirname</code>。 其中<code>dirName</code>表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的<code>home directory</code>(也就是刚<code>login</code>时所在的目录)。另外，<code>~</code>也表示为<code>home directory</code>的意思，<code>.</code>则是表示目前所在的目录，<code>..</code>则表示目前目录位置的上一层目录。</p>
<h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> (选项) (参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-4"><a href="#选项-4" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-p</span> 如果要切换到的目标目录是一个符号连接，直接切换到符号连接指向的目标目录</span><br><span class="line"><span class="literal">-L</span> 如果要切换的目标目录是一个符号的连接，直接切换到字符连接名代表的目录，而非符号连接所指向的目标目录。</span><br><span class="line">- 当仅实用<span class="string">&quot;-&quot;</span>一个选项时，当前工作目录将被切换到环境变量<span class="string">&quot;OLDPWD&quot;</span>所表示的目录。</span><br></pre></td></tr></table></figure>

<h5 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>    进入用户主目录；</span><br><span class="line"><span class="built_in">cd</span> ~  进入用户主目录；</span><br><span class="line"><span class="built_in">cd</span> -  返回进入此目录之前所在的目录；</span><br><span class="line"><span class="built_in">cd</span> ..  返回上级目录（若当前目录为“/“，则执行完后还在“/<span class="string">&quot;；&quot;</span>..<span class="string">&quot;为上级目录的意思）；</span></span><br><span class="line"><span class="string">cd ../..  返回上两级目录；</span></span><br><span class="line"><span class="string">cd !<span class="variable">$</span>  把上个命令的参数作为cd参数使用。</span></span><br></pre></td></tr></table></figure>

<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h4><p>**<code>ls命令</code>**用来显示目标列表，在<code>Linux</code>中是使用率较高的命令。<code>ls</code>命令的输出信息可以进行彩色加亮显示，以分区不同类型的文件。</p>
<h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span>（选项）（参数）</span><br></pre></td></tr></table></figure>

<h5 id="选项-5"><a href="#选项-5" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-a</span>：显示所有档案及目录（<span class="built_in">ls</span>内定将档案名或目录名称为“.”的视为影藏，不会列出）；</span><br><span class="line"><span class="literal">-A</span>：显示除影藏文件“.”和“..”以外的所有文件列表；</span><br><span class="line"><span class="literal">-C</span>：多列显示输出结果。这是默认选项；</span><br><span class="line"><span class="literal">-l</span>：与“<span class="literal">-C</span>”选项功能相反，所有输出信息用单列格式输出，不输出为多列；</span><br><span class="line"><span class="operator">-F</span>：在每个输出项后追加文件的类型标识符，具体含义：“*”表示具有可执行权限的普通文件，“/”表示目录，“<span class="selector-tag">@</span>”表示符号链接，“|”表示命令管道FIFO，“=”表示sockets套接字。当文件为普通文件时，不输出任何标识符；</span><br><span class="line"><span class="literal">-b</span>：将文件中的不可输出的字符以反斜线“”加字符编码的方式输出；</span><br><span class="line"><span class="literal">-c</span>：与“<span class="operator">-lt</span>”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与“<span class="literal">-l</span>”选项连用时，则排序的一句是文件的状态改变时间；</span><br><span class="line"><span class="literal">-d</span>：仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表；</span><br><span class="line"><span class="operator">-f</span>：此参数的效果和同时指定“aU”参数相同，并关闭“lst”参数的效果；</span><br><span class="line"><span class="literal">-i</span>：显示文件索引节点号（inode）。一个索引节点代表一个文件；</span><br><span class="line">-<span class="operator">-file</span><span class="literal">-type</span>：与“<span class="operator">-F</span>”选项的功能相同，但是不显示“*”；</span><br><span class="line"><span class="literal">-k</span>：以KB（千字节）为单位显示文件大小；</span><br><span class="line"><span class="literal">-l</span>：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；</span><br><span class="line"><span class="literal">-m</span>：用“,”号区隔每个文件和目录的名称；</span><br><span class="line"><span class="literal">-n</span>：以用户识别码和群组识别码替代其名称；</span><br><span class="line"><span class="literal">-r</span>：以文件名反序排列并输出目录内容列表；</span><br><span class="line"><span class="literal">-s</span>：显示文件和目录的大小，以区块为单位；</span><br><span class="line"><span class="literal">-t</span>：用文件和目录的更改时间排序；</span><br><span class="line"><span class="literal">-L</span>：如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录；</span><br><span class="line"><span class="literal">-R</span>：递归处理，将指定目录下的所有文件及子目录一并处理；</span><br><span class="line">-<span class="literal">-full</span><span class="literal">-time</span>：列出完整的日期与时间；</span><br><span class="line">-<span class="literal">-color</span>[=<span class="type">WHEN</span>]：使用不同的颜色高亮显示不同类型的。</span><br></pre></td></tr></table></figure>

<h5 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h5><p>目录：指定要显示列表的目录，也可以是具体的文件。</p>
<h5 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h5><p>显示当前目录下非影藏文件与目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">Desktop    Downloads  PhpstormProjects  PycharmProjects  模板</span><br><span class="line">Documents  Music      Pictures          Videos</span><br></pre></td></tr></table></figure>

<p>显示当前目录下包括影藏文件在内的所有文件列表</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-a</span></span><br><span class="line">.              Documents   .kingsoft         .Public            .viminfo</span><br><span class="line">..             Downloads   .local            .PyCharmCE2017.<span class="number">1</span>   .vscode</span><br><span class="line">.bash_history  .ew.json    Music             PycharmProjects    .w<span class="built_in">get-hsts</span></span><br><span class="line">.bash_logout   .gconf      .navicat64        .python_history    .Xauthority</span><br><span class="line">.bashrc        .gnome      .PhpStorm2017.<span class="number">2</span>   .rediscli_history  .xinputrc</span><br><span class="line">.cache         .gnupg      PhpstormProjects  .sogouinput        .xsession<span class="literal">-errors</span></span><br><span class="line">.config        .gtkrc<span class="literal">-2</span>.<span class="number">0</span>  Pictures          .Templates         .xsession<span class="literal">-errors</span>.old</span><br><span class="line">.dbus          .icons      .pki              .themes            模板</span><br><span class="line">.deepinwine    .imwheelrc  .presage          .var</span><br><span class="line">Desktop        .java       .profile          Videos</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出长格式列表</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-1</span></span><br><span class="line">Desktop</span><br><span class="line">Documents</span><br><span class="line">Downloads</span><br><span class="line">Music</span><br><span class="line">PhpstormProjects</span><br><span class="line">Pictures</span><br><span class="line">PycharmProjects</span><br><span class="line">Videos</span><br><span class="line">模板</span><br></pre></td></tr></table></figure>

<p>显示文件的<code>inode</code>信息</p>
<p>索引节点（<code>index inode</code>简称为“<code>inode</code>”）是<code>Linux</code>中一个特殊的概念，具有相同的索引节点号的两个文本本质上是同一个文件（除文件名不同外）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tony@tony-PC:&#x2F;media&#x2F;tony&#x2F;数据&#x2F;bbb$ ls -i -l hello hello~</span><br><span class="line">144 -rwxrwxrwx 1 tony tony 27 8月   6 10:11 hello</span><br><span class="line">184 -rwxrwxrwx 1 tony tony 27 8月   6 10:14 hello~</span><br></pre></td></tr></table></figure>

<p>水平输出文件列表</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-m</span></span><br><span class="line">Desktop, Documents, Downloads, Music, PhpstormProjects, Pictures, PycharmProjects, Videos, 模板</span><br></pre></td></tr></table></figure>

<p>修改最后一次编辑的文件</p>
<p>最近修改的文件显示在最上面。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-t</span></span><br><span class="line">Desktop   Videos           PhpstormProjects  Music  Documents</span><br><span class="line">Pictures  PycharmProjects  Downloads         模板</span><br></pre></td></tr></table></figure>

<p>显示递归文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-R</span></span><br><span class="line">.:</span><br><span class="line">Desktop    Downloads  PhpstormProjects  PycharmProjects  模板</span><br><span class="line">Documents  Music      Pictures          Videos</span><br><span class="line"></span><br><span class="line">./Desktop:</span><br><span class="line"></span><br><span class="line">./Documents:</span><br><span class="line"><span class="string">&#x27;Tencent Files&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;./Documents/Tencent Files&#x27;</span>:</span><br><span class="line"><span class="string">&#x27;All Users&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;./Documents/Tencent Files/All Users&#x27;</span>:</span><br><span class="line">QQ</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;./Documents/Tencent Files/All Users/QQ&#x27;</span>:</span><br><span class="line">History.db  Misc  Perfre.db  Registry.db</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;./Documents/Tencent Files/All Users/QQ/Misc&#x27;</span>:</span><br><span class="line"></span><br><span class="line">./Downloads:</span><br><span class="line"></span><br><span class="line">./Music:</span><br><span class="line">bensound<span class="literal">-sunny</span>.mp3</span><br><span class="line"></span><br><span class="line">./PhpstormProjects:</span><br><span class="line">untitled</span><br><span class="line"></span><br><span class="line">./PhpstormProjects/untitled:</span><br><span class="line"></span><br><span class="line">./Pictures:</span><br><span class="line">Autumn_in_Kanas_by_Wang_Jinyu.jpg    Hummingbird_by_Shu_Le.jpg</span><br><span class="line">Balloon_by_Matt_Benson.jpg           Overlooking_by_Lance_Asper.jpg</span><br><span class="line">Beach_by_Samuel_Scrimshaw.jpg        Paper_Architecture_by_Dmitri_Popov.jpg</span><br><span class="line">desktop.jpg                          Reflection_of_the_Kanas_Lake_by_Wang_Jinyu.jpg</span><br><span class="line">Flowing_Ribbon.jpg                   Scenery_in_Plateau_by_Arto_Marttinen.jpg</span><br><span class="line">Flying_Whale_by_Shu_Le.jpg           Sunset_of_the_Lake_Nam_by_Wang_Jinyu.jpg</span><br><span class="line">Grassland_Scenery_by_Shi_Yuejun.jpg</span><br><span class="line"></span><br><span class="line">./PycharmProjects:</span><br><span class="line">untitled</span><br><span class="line"></span><br><span class="line">./PycharmProjects/untitled:</span><br><span class="line">wangluobiancheng  wangluobiancheng.py</span><br><span class="line"></span><br><span class="line">./PycharmProjects/untitled/wangluobiancheng:</span><br><span class="line">aaa.py      deepin.mp4              ssh_client.py  users_ftp_client.py</span><br><span class="line">bbb.py      __init__.py             ssh_server.py  wordsss.doc</span><br><span class="line">deepin.jpg  socketserver_client.py  txt.txt</span><br><span class="line"></span><br><span class="line">./Videos:</span><br><span class="line"></span><br><span class="line">./模板:</span><br><span class="line"><span class="string">&#x27;DOCX 文档.docx&#x27;</span>  <span class="string">&#x27;PPTX 演示文稿.pptx&#x27;</span>  <span class="string">&#x27;XLSX 工作表.xlsx&#x27;</span></span><br><span class="line"><span class="string">&#x27;DOC 文档.doc&#x27;</span>    <span class="string">&#x27;PPT 演示文稿.ppt&#x27;</span>    <span class="string">&#x27;XLS 工作表.xls&#x27;</span></span><br></pre></td></tr></table></figure>

<p>打印文件的UID和GID</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-n</span></span><br><span class="line">总用量 <span class="number">36</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">7</span>月  <span class="number">30</span> <span class="number">14</span>:<span class="number">13</span> Desktop</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">2</span>月  <span class="number">22</span> <span class="number">17</span>:<span class="number">47</span> Documents</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Downloads</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Music</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">2</span>月  <span class="number">25</span> <span class="number">13</span>:<span class="number">02</span> PhpstormProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">52</span> Pictures</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">4</span>月  <span class="number">15</span> <span class="number">14</span>:<span class="number">39</span> PycharmProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">51</span> Videos</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> 模板</span><br></pre></td></tr></table></figure>

<p>列出文件和文件夹的详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-l</span></span><br><span class="line">总用量 <span class="number">36</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">7</span>月  <span class="number">30</span> <span class="number">14</span>:<span class="number">13</span> Desktop</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">22</span> <span class="number">17</span>:<span class="number">47</span> Documents</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Downloads</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Music</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">25</span> <span class="number">13</span>:<span class="number">02</span> PhpstormProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">52</span> Pictures</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">15</span> <span class="number">14</span>:<span class="number">39</span> PycharmProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">51</span> Videos</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> 模板</span><br></pre></td></tr></table></figure>

<p>列出可读文件和文件夹详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-lh</span></span><br><span class="line">总用量 <span class="number">36</span>K</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4.0</span>K <span class="number">7</span>月  <span class="number">30</span> <span class="number">14</span>:<span class="number">13</span> Desktop</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4.0</span>K <span class="number">2</span>月  <span class="number">22</span> <span class="number">17</span>:<span class="number">47</span> Documents</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4.0</span>K <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Downloads</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4.0</span>K <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Music</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4.0</span>K <span class="number">2</span>月  <span class="number">25</span> <span class="number">13</span>:<span class="number">02</span> PhpstormProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4.0</span>K <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">52</span> Pictures</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4.0</span>K <span class="number">4</span>月  <span class="number">15</span> <span class="number">14</span>:<span class="number">39</span> PycharmProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4.0</span>K <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">51</span> Videos</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4.0</span>K <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> 模板</span><br></pre></td></tr></table></figure>

<p>显示文件夹信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:/media/tony/数据<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-ld</span> /media/</span><br><span class="line"></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">5</span> root root <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">46</span> /media/</span><br></pre></td></tr></table></figure>

<p>按时间列出文件和文件夹详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="operator">-lt</span></span><br><span class="line"></span><br><span class="line">总用量 <span class="number">36</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">7</span>月  <span class="number">30</span> <span class="number">14</span>:<span class="number">13</span> Desktop</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">52</span> Pictures</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">51</span> Videos</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">15</span> <span class="number">14</span>:<span class="number">39</span> PycharmProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">25</span> <span class="number">13</span>:<span class="number">02</span> PhpstormProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Downloads</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Music</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> 模板</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">22</span> <span class="number">17</span>:<span class="number">47</span> Documents</span><br></pre></td></tr></table></figure>

<p>按修改时间列出文件和文件夹详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-ltr</span></span><br><span class="line"></span><br><span class="line">总用量 <span class="number">36</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">22</span> <span class="number">17</span>:<span class="number">47</span> Documents</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> 模板</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Music</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> Downloads</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">2</span>月  <span class="number">25</span> <span class="number">13</span>:<span class="number">02</span> PhpstormProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">3</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">15</span> <span class="number">14</span>:<span class="number">39</span> PycharmProjects</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">51</span> Videos</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">4</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">52</span> Pictures</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> tony tony <span class="number">4096</span> <span class="number">7</span>月  <span class="number">30</span> <span class="number">14</span>:<span class="number">13</span> Desktop</span><br></pre></td></tr></table></figure>

<p>按照特殊字符对文件进行分类</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> <span class="operator">-F</span></span><br><span class="line"></span><br><span class="line">Desktop/    Downloads/  PhpstormProjects/  PycharmProjects/  模板/</span><br><span class="line">Documents/  Music/      Pictures/          Videos/</span><br></pre></td></tr></table></figure>

<p>列出文件并标记颜色分类</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tony@tony<span class="literal">-PC</span>:~<span class="variable">$</span> <span class="built_in">ls</span> -<span class="literal">-color</span>=auto</span><br><span class="line"></span><br><span class="line">Desktop    Downloads  PhpstormProjects  PycharmProjects  模板</span><br><span class="line">Documents  Music      Pictures          Videos</span><br></pre></td></tr></table></figure>

<h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h4><p><strong>cat命令</strong>连接文件并打印到标准输出设备上，<code>cat</code>经常用来显示文件的内容，类似于下的<code>type</code>命令。</p>
<p>注意：当文件较大时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容。因此，一般用<code>more</code>等命令分屏显示。为了控制滚屏，可以按<kbd>Ctrl</kbd>+<kbd>S</kbd>键，停止滚屏；按<kbd>Ctrl</kbd>+<kbd>Q</kbd>键可以恢复滚屏。按<kbd>Ctrl</kbd>+<kbd>C</kbd>（中断）键可以终止该命令的执行，并且返回Shell提示符状态。</p>
<h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span>(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-6"><a href="#选项-6" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-n</span>或<span class="literal">-number</span>：有<span class="number">1</span>开始对所有输出的行数编号；</span><br><span class="line"><span class="literal">-b</span>或-<span class="literal">-number</span><span class="literal">-nonblank</span>：和<span class="literal">-n</span>相似，只不过对于空白行不编号；</span><br><span class="line"><span class="literal">-s</span>或-<span class="literal">-squeeze</span><span class="literal">-blank</span>：当遇到有连续两行以上的空白行，就代换为一行的空白行；</span><br><span class="line"><span class="literal">-A</span>：显示不可打印字符，行尾显示“<span class="variable">$</span>”；</span><br><span class="line"><span class="literal">-e</span>：等价于<span class="string">&quot;-vE&quot;</span>选项；</span><br><span class="line"><span class="literal">-t</span>：等价于<span class="string">&quot;-vT&quot;</span>选项；</span><br></pre></td></tr></table></figure>

<h5 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h5><p>文件列表：指定要连接的文件列表。</p>
<h5 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h5><p>设<code>ml</code>和<code>m2</code>是当前目录下的两个文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> m1 （在屏幕上显示文件ml的内容）</span><br><span class="line"><span class="built_in">cat</span> <span class="literal">-n</span> m1(在屏幕上显示文件m1内容并每行前显示行号)</span><br><span class="line"><span class="built_in">cat</span> m1 m2 （同时显示文件ml和m2的内容）</span><br><span class="line"><span class="built_in">cat</span> m1 m2 &gt; file （将文件ml和m2合并后放入文件file中）</span><br></pre></td></tr></table></figure>

<h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h4><p><strong><code>pwd</code>命令</strong>以绝对路径的方式显示用户当前工作目录。命令将当前目录的全路径名称（从根目录）写入标准输出。全部目录使用<code>/</code>分隔。第一个<code>/</code>表示根目录，最后一个目录是当前目录。执行<code>pwd</code>命令可立刻得知您目前所在的工作目录的绝对路径名称。</p>
<h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span>（选项）</span><br></pre></td></tr></table></figure>

<h5 id="选项-7"><a href="#选项-7" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">-<span class="literal">-help</span>：显示帮助信息；</span><br><span class="line">-<span class="literal">-version</span>：显示版本信息。</span><br></pre></td></tr></table></figure>

<h5 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure>

<h2 id="Linux的文件系统"><a href="#Linux的文件系统" class="headerlink" title="Linux的文件系统"></a>Linux的文件系统</h2><p>用户在硬件存储设备中执行的文件建立，写入，读取，修改，转存与控制等操作都是依赖文件系统完成的。文件系统的作用是合理规划硬盘，保证用户正常使用。</p>
<p>Linux系统支持数十种文件系统，常见文件系统如下。</p>
<ul>
<li><code>Ext3</code> 是一款日志文件系统，能够在系统异常宕机时避免文件系统资料丢失，并能 自动修复数据的不一致与错误。</li>
<li><code>Ext4</code>     <code>Ext3</code> 的改进版本，作为 <code>RHEL 6</code> 系统中的默认文件管理系统，它支持的存储容 量高达 <code>1EB</code>(<code>1EB</code>=1,073,741,<code>824GB</code>)，且能够有无限多的子目录。另外，<code>Ext4</code> 文件系统能够批量分配 <code>block</code> 块，从而极大地提高了读写效率。</li>
<li><code>XFS</code>     是一种高性能的日志文件系统，而且是 <code>RHEL 7</code> 中默认的文件管理系统，它的优势在发生意外宕机后尤其明显，即可以快速地恢复可能被破坏的文件，而且强大的 日志功能只用花费极低的计算和存储性能。并且它最大可支持的存储容量为 <code>18EB</code>， 这几乎满足了所有需求。</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/etc/fstab是用来存放文件系统的静态信息的文件</span><br><span class="line"><span class="built_in">cat</span> /etc/fstab <span class="comment">#检查linux的文件系统</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>linux命令</tag>
        <tag>shell命令</tag>
        <tag>dos</tag>
        <tag>dos命令</tag>
        <tag>mkdir</tag>
        <tag>rm</tag>
        <tag>touch</tag>
        <tag>mv</tag>
        <tag>cd</tag>
        <tag>ls</tag>
        <tag>cat</tag>
        <tag>pwd</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx安装及配置多域名初体验</title>
    <url>/b5f2e1e2.html</url>
    <content><![CDATA[<p>提供 <code>Web</code> 网络服务的程序有 <code>IIS</code>、<code>Nginx</code> 和 <code>Apache</code> 等。其中，<code>IIS</code>(<code>Internet Information Services</code>，互联网信息服务)是 <code>Windows</code> 系统中默认的 <code>Web</code> 服务程序</p>
<p> <code>Nginx</code> 程序作为一款轻量级的网站服务软件，因其稳定性和丰富的功能而快速占领服务器市 场，但 <code>Nginx</code> 最被认可的还当是系统资源消耗低且并发能力强，因此得到了国内诸如新浪、 网易、腾讯等门户站的青睐。</p>
<a id="more"></a>

<h2 id="nginx介绍"><a href="#nginx介绍" class="headerlink" title="nginx介绍"></a><code>nginx</code>介绍</h2><p><code>nginx</code>是一个开源的，支持高性能，高并发的<code>www</code>服务和代理服务软件。它是一个俄罗斯人<code>lgor sysoev</code>开发的，作者将源代码开源出来供全球使用。<br><code>nginx</code>比它大哥<code>apache</code>性能改进许多，<code>nginx</code>占用的系统资源更少，支持更高的并发连接，有更高的访问效率。<br><code>nginx</code>不但是一个优秀的<code>web</code>服务软件，还可以作为反向代理，负载均衡，以及缓存服务使用。<br>安装更为简单，方便，灵活。</p>
<p>优点：</p>
<ul>
<li>支持高并发，能支持几万并发连接</li>
<li>资源消耗少，在3万并发连接下开启10个<code>nginx</code>线程消耗的内存不到<code>200M</code></li>
<li>可以做<code>http</code>反向代理和负载均衡</li>
<li>支持异步网络<code>i/o</code>事件模型<code>epoll</code></li>
</ul>
<p><code>Tengine</code>是由淘宝网发起的Web服务器项目。它在<code>Nginx</code>的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。<code>Tengine</code>的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的<code>Web</code>平台。</p>
<h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>一. <code>gcc</code> 安装<br>安装 <code>nginx</code> 需要先将官网下载的源码进行编译，编译依赖 <code>gcc</code> 环境，如果没有 <code>gcc</code> 环境，则需要安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install gcc<span class="literal">-c</span>++</span><br></pre></td></tr></table></figure>

<p>二. <code>PCRE pcre-devel</code> 安装<br><code>PCRE(Perl Compatible Regular Expressions)</code> 是一个<code>Perl</code>库，包括 <code>perl</code> 兼容的正则表达式库。<code>nginx</code> 的 <code>http</code> 模块使用 <code>pcre</code> 来解析正则表达式，所以需要在 <code>linux</code> 上安装 <code>pcre</code> 库，<code>pcre-devel</code> 是使用 <code>pcre</code> 开发的一个二次开发库。<code>nginx</code>也需要此库。命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> pcre pcre<span class="literal">-devel</span></span><br></pre></td></tr></table></figure>

<p>三. <code>zlib</code> 安装<br><code>zlib</code> 库提供了很多种压缩和解压缩的方式， <code>nginx</code> 使用 <code>zlib</code> 对 <code>http</code> 包的内容进行 <code>gzip</code> ，所以需要在 <code>Centos</code> 上安装 <code>zlib</code> 库。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> zlib zlib<span class="literal">-devel</span></span><br></pre></td></tr></table></figure>

<p>四. <code>OpenSSL</code> 安装<br><code>OpenSSL</code> 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 <code>SSL</code> 协议，并提供丰富的应用程序供测试或其它目的使用。<br><code>nginx</code> 不仅支持 <code>http</code> 协议，还支持 <code>https</code>（即在<code>ssl</code>协议上传输<code>http</code>），所以需要在 <code>Centos</code> 安装 <code>OpenSSL</code> 库。</p>
<p>小白安装<code>nginx</code>前可以直接执行以下代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install gcc patch libffi<span class="literal">-devel</span> python<span class="literal">-devel</span>  zlib<span class="literal">-devel</span> bzip2<span class="literal">-devel</span> openssl<span class="literal">-devel</span> ncurses<span class="literal">-devel</span> sqlite<span class="literal">-devel</span> readline<span class="literal">-devel</span> tk<span class="literal">-devel</span> gdbm<span class="literal">-devel</span> db4<span class="literal">-devel</span> libpcap<span class="literal">-devel</span> xz<span class="literal">-devel</span> openssl openssl<span class="literal">-devel</span> <span class="literal">-y</span></span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>按照方式两种：</p>
<p>使用yum 或者apt-get方式：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">或</span><br><span class="line">apt<span class="literal">-get</span> install nginx</span><br></pre></td></tr></table></figure>

<p>使用源码安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.下载源码包</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-c</span> https://nginx.org/download/nginx<span class="literal">-1</span>.<span class="number">12.0</span>.tar.gz</span><br><span class="line"><span class="comment"># 2.解压缩源码</span></span><br><span class="line">tar <span class="literal">-zxvf</span> nginx<span class="literal">-1</span>.<span class="number">12.0</span>.tar.gz</span><br><span class="line"><span class="comment"># 3.配置，编译安装  开启nginx状态监测功能</span></span><br><span class="line">./configure -<span class="literal">-prefix</span>=/opt/nginx1<span class="literal">-12</span>/ -<span class="literal">-with</span><span class="literal">-http_ssl_module</span> -<span class="literal">-with</span><span class="literal">-http_stub_status_module</span> </span><br><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4.启动nginx，进入sbin目录,找到nginx启动命令</span></span><br><span class="line"><span class="built_in">cd</span> sbin</span><br><span class="line">./nginx <span class="comment">#启动</span></span><br><span class="line">./nginx <span class="literal">-s</span> stop <span class="comment">#关闭</span></span><br><span class="line">./nginx <span class="literal">-s</span> reload <span class="comment">#重新加载</span></span><br></pre></td></tr></table></figure>

<h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -tunlp |grep 80</span><br><span class="line">curl -I 127.0.0.1</span><br><span class="line">#如果访问不了，检查selinux，iptables防火墙</span><br></pre></td></tr></table></figure>

<h2 id="Nginx的目录结构"><a href="#Nginx的目录结构" class="headerlink" title="Nginx的目录结构"></a><code>Nginx</code>的目录结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_59_235_centos nginx]# ls</span><br><span class="line">client_body_temp  conf  fastcgi_temp  html  logs  proxy_temp  sbin  scgi_temp  uwsgi_temp</span><br></pre></td></tr></table></figure>

<ul>
<li><code>conf</code> 存放<code>nginx</code>所有配置文件的目录,主要<code>nginx.conf</code></li>
<li><code>html</code> 存放<code>nginx</code>默认站点的目录，如<code>index.html</code>、<code>error.html</code>等</li>
<li><code>logs</code> 存放<code>nginx</code>默认日志的目录，如<code>error.log</code> <code>access.log</code></li>
<li><code>sbin</code> 存放<code>nginx</code>主命令的目录,<code>sbin/nginx</code></li>
</ul>
<h2 id="Nginx主配置文件解析"><a href="#Nginx主配置文件解析" class="headerlink" title="Nginx主配置文件解析"></a><code>Nginx</code>主配置文件解析</h2><p><code>Nginx</code>主配置文件<code>nginx.conf</code>是一个纯文本类型的文件，整个配置文件是以区块的形式组织的。一般，每个区块以一对大括号<code>&#123;&#125;</code>来表示开始与结束。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line"><span class="attribute">user</span> www www;</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class="line"><span class="attribute">error_log</span> /usr/local/nginx/logs/error.log <span class="literal">info</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#进程pid文件</span></span><br><span class="line"><span class="attribute">pid</span> /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="comment">#工作模式与连接数上限</span></span><br><span class="line"><span class="comment">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="comment">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span></span><br><span class="line"><span class="comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span></span><br><span class="line">    <span class="comment">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line">    <span class="comment">#补充说明：</span></span><br><span class="line">    <span class="comment">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class="line">    <span class="comment">#A）标准事件模型</span></span><br><span class="line">    <span class="comment">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class="line">    <span class="comment">#B）高效事件模型</span></span><br><span class="line">    <span class="comment">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class="line">    <span class="comment">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class="line">    <span class="comment">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class="line">    <span class="comment">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line">    <span class="comment">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive超时时间。</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">    <span class="comment">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class="line">    <span class="comment">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class="line">    <span class="comment">#4096</span></span><br><span class="line">    <span class="comment">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">    <span class="attribute">open_file_cache</span> max=<span class="number">65535</span> inactive=<span class="number">60s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class="line">    <span class="attribute">open_file_cache_valid</span> <span class="number">80s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class="line">    <span class="attribute">open_file_cache_min_uses</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span></span><br><span class="line">    <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认文件类型</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认编码</span></span><br><span class="line">    <span class="comment">#charset utf-8;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line">    <span class="comment">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class="line">    <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设定通过nginx上传文件的大小</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">8m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">    <span class="comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class="line">    <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_temp_file_write_size</span> <span class="number">128k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip模块设置</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment">#开启gzip压缩输出</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;    <span class="comment">#最小压缩文件大小</span></span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;    <span class="comment">#压缩缓冲区</span></span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>;    <span class="comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;    <span class="comment">#压缩等级</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;    <span class="comment">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line">    <span class="comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#负载均衡配置</span></span><br><span class="line">    <span class="attribute">upstream</span> jh.w3cschool.cn &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.121:80</span> weight=<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.122:80</span> weight=<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.123:80</span> weight=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx的upstream目前支持4种方式的分配</span></span><br><span class="line">        <span class="comment">#1、轮询（默认）</span></span><br><span class="line">        <span class="comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class="line">        <span class="comment">#2、weight</span></span><br><span class="line">        <span class="comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14 weight=10;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15 weight=10;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#2、ip_hash</span></span><br><span class="line">        <span class="comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14:88;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15:80;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#3、fair（第三方）</span></span><br><span class="line">        <span class="comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server server1;</span></span><br><span class="line">        <span class="comment">#    server server2;</span></span><br><span class="line">        <span class="comment">#    fair;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#4、url_hash（第三方）</span></span><br><span class="line">        <span class="comment">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class="line">        <span class="comment">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server squid1:3128;</span></span><br><span class="line">        <span class="comment">#    server squid2:3128;</span></span><br><span class="line">        <span class="comment">#    hash $request_uri;</span></span><br><span class="line">        <span class="comment">#    hash_method crc32;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#tips:</span></span><br><span class="line">        <span class="comment">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:9090 down;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:8080 weight=2;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:6060;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:7070 backup;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#每个设备的状态设置为:</span></span><br><span class="line">        <span class="comment">#1.down表示单前的server暂时不参与负载</span></span><br><span class="line">        <span class="comment">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class="line">        <span class="comment">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class="line">        <span class="comment">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class="line">        <span class="comment">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class="line">        <span class="comment">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class="line">        <span class="comment">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class="line">        <span class="comment">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">#虚拟主机的配置</span></span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">#监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">        <span class="attribute">server_name</span> www.w3cschool.cn w3cschool.cn;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">        <span class="attribute">root</span> /data/www/w3cschool;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#对******进行负载均衡</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(php|php5)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">            <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#图片缓存时间设置</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">10d</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">1h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#日志格式设定</span></span><br><span class="line">        <span class="comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class="line">        <span class="comment">#$remote_user：用来记录客户端用户名称；</span></span><br><span class="line">        <span class="comment">#$time_local： 用来记录访问时间与时区；</span></span><br><span class="line">        <span class="comment">#$request： 用来记录请求的url与http协议；</span></span><br><span class="line">        <span class="comment">#$status： 用来记录请求状态；成功是200，</span></span><br><span class="line">        <span class="comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line">        <span class="comment">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line">        <span class="comment">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line">        <span class="comment">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class="line">        <span class="attribute">log_format</span> access <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; <span class="variable">$http_x_forwarded_for</span>&#x27;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">        <span class="attribute">access_log</span>  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        <span class="attribute">access_log</span>  /usr/local/nginx/logs/host.access.<span class="number">404</span>.log  log404;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#对 &quot;/&quot; 启用反向代理</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> <span class="number">127.0.0.1:88</span>;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">            <span class="comment">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class="line">            <span class="comment">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span></span><br><span class="line">            <span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class="line">            <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">            <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            <span class="comment">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">            <span class="comment">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class="line">            <span class="attribute">proxy_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">            <span class="comment">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class="line">            <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">            <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class="line">            <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">            <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        <span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line">        <span class="attribute">location</span> /NginxStatus &#123;</span><br><span class="line">            <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">            <span class="attribute">access_log</span> <span class="literal">on</span>;</span><br><span class="line">            <span class="attribute">auth_basic</span> <span class="string">&quot;NginxStatus&quot;</span>;</span><br><span class="line">            <span class="attribute">auth_basic_user_file</span> confpasswd;</span><br><span class="line">            <span class="comment">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line">        <span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .(jsp|jspx|do)?$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span></span><br><span class="line"><span class="regexp"></span>        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">15d</span>; </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">1h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Nginx虚拟主机"><a href="#Nginx虚拟主机" class="headerlink" title="Nginx虚拟主机"></a><code>Nginx</code>虚拟主机</h2><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815170332.png"></p>
<p>如果每台<code>linux</code>服务器只运行了一个小网站，那么人气低，流量小的草根站长需要承担高额的服务器租赁费，也造成了硬件资源浪费。</p>
<p>虚拟主机就是将一台服务器分割成多个“虚拟服务器”，每个站点使用各自的硬盘空间，由于省资源，省钱，众多网站都使用虚拟主机来部署网站。</p>
<p>虚拟主机的概念就是在<code>web</code>服务里的一个独立的网站站点，这个站点对应独立的域名（<code>IP</code>），具有独立的程序和资源目录，可以独立的对外提供服务。<br>这个独立的站点配置是在<code>nginx.conf</code>中使用<code>server&#123;&#125;</code>代码块标签来表示一个虚拟主机。<br><code>Nginx</code>支持多个<code>server&#123;&#125;</code>标签，即支持多个虚拟主机站点。</p>
<p><strong>虚拟主机类型</strong></p>
<ol>
<li><p>基于域名的虚拟主机<br>通过不同的域名区分不同的虚拟主机，是企业应用最广的虚拟主机。</p>
</li>
<li><p>基于端口的虚拟主机<br>通过不同的端口来区分不同的虚拟主机，一般用作企业内部网站，不对外直接提供服务的后台，例如<a href="http://www.diandian100.cn:9000/">www.diandian100.cn:9000</a></p>
</li>
<li><p>基于<code>IP</code>的虚拟主机<br>通过不同的<code>IP</code>区分不同的虚拟主机，此类比较少见，一般业务需要多IP的常见都会在负载均衡中绑定VIP</p>
</li>
</ol>
<h2 id="基于域名的多虚拟主机实战"><a href="#基于域名的多虚拟主机实战" class="headerlink" title="基于域名的多虚拟主机实战"></a>基于域名的多虚拟主机实战</h2><p><code>nginx</code>可以自动识别用户请求的域名，根据不同的域名请求服务器传输不同的内容，只需要保证服务器上有一个可用的<code>ip</code>地址，配置好<code>dns</code>解析服务。</p>
<p><code>/etc/hosts</code>是<code>linux</code>系统中本地<code>dns</code>解析的配置文件，同样可以达到域名访问效果</p>
<h3 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改<code>nginx.conf</code></h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> tony1.to;</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="attribute">root</span> /tmp/web/tony1;</span><br><span class="line">			<span class="attribute">index</span> index.html;</span><br><span class="line">		&#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> tony2.to;</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="attribute">root</span> /tmp/web/tony2;</span><br><span class="line">			<span class="attribute">index</span> index.html;</span><br><span class="line">		&#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码配置了2个域名分别为<code>tony1.to</code>、<code>tony2.to</code>的站点，虚拟主机的部分就是<code>server&#123;&#125;</code>里的内容</p>
<h3 id="修改网站文件"><a href="#修改网站文件" class="headerlink" title="修改网站文件"></a>修改网站文件</h3><p>测试用所以本人没有按照<code>html</code>标准代码规范写，甚至没有写编码格式，访问中文会乱码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;tmp&#x2F;web&#x2F;tony1&#x2F;index.html</span><br><span class="line"># 文件内容</span><br><span class="line">&lt;h1&gt;我是tony1&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;tmp&#x2F;web&#x2F;tony2&#x2F;index.html</span><br><span class="line"># 文件内容</span><br><span class="line">&lt;h1&gt;我是tony2&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>



<h3 id="验证配置并启动nginx"><a href="#验证配置并启动nginx" class="headerlink" title="验证配置并启动nginx"></a>验证配置并启动<code>nginx</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_59_235_centos conf]# ../sbin/nginx -t</span><br><span class="line">nginx: the configuration file /tmp/www/nginx//conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /tmp/www/nginx//conf/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line">[root@VM_59_235_centos conf]# ../sbin/nginx</span><br></pre></td></tr></table></figure>

<h3 id="修改访问主机etc"><a href="#修改访问主机etc" class="headerlink" title="修改访问主机etc"></a>修改访问主机<code>etc</code></h3><p><code>linux</code>配置的<code>nginx</code>，使用本地<code>windows</code>进行访问测试；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改hosts文件，windows系统hosts目录为C:&#x2F;windows&#x2F;system32&#x2F;driver&#x2F;etc&#x2F;hosts</span><br><span class="line"># 加入以下两条配置</span><br><span class="line">111.231.99.120 tony1.to</span><br><span class="line">111.231.99.120 tony2.to</span><br></pre></td></tr></table></figure>

<h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815172447.png"></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815172503.png"></p>
<p>成功！！！</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>nginx配置</tag>
        <tag>nginx安装</tag>
        <tag>nginx域名</tag>
        <tag>nginx多域名</tag>
        <tag>Tengine</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-cluster集群设置</title>
    <url>/eb5223a5.html</url>
    <content><![CDATA[<p> <code>Redis</code>集群是一个可以在多个<code>Redis</code>节点之间进行数据共享的设施( <code>installation</code> )。</p>
<p><code>Redis</code>集群不支持那些需要同时处理多个键的<code>Redis</code>命令，因为执行这些命令需要在多个<code>Redis</code>节点之间移动数据，并且在高负载的情况下，这些命令将降低<code>Redis</code>集群的性能，并导致不可预测的行为。</p>
<p><code>Redis</code>集群通过分区( <code>partition</code> )来提供一定程度的可用性( <code>availability</code> ) : 即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。</p>
<p>将数据自动切分( <code>split</code>) 到多个节点的能力。</p>
<p>当集群中的一部分节点失效或者无法进行通讯时，仍然可以继续处理命令请求的能力。</p>
<a id="more"></a>

<h2 id="为什么要用redis-cluster"><a href="#为什么要用redis-cluster" class="headerlink" title="为什么要用redis-cluster"></a>为什么要用<code>redis-cluster</code></h2><h3 id="解决并发"><a href="#解决并发" class="headerlink" title="解决并发"></a>解决并发</h3><p><code>redis</code>官方生成可以达到 10万/每秒,每秒执行10万条命令<br>假如业务需要每秒100万的命令执行呢？</p>
<h3 id="数据量太大"><a href="#数据量太大" class="headerlink" title="数据量太大"></a>数据量太大</h3><p>一台服务器内存正常是<code>16~256G</code>，假如你的业务需要<code>500G</code>内存，</p>
<p>新浪微博作为世界上最大的<code>redis</code>存储，就超过<code>1TB</code>的数据，去哪买这么大的内存条？各大公司有自己的解决方案，推出各自的集群功能，核心思想都是将数据分片（<code>sharding</code>）存储在多个<code>redis</code>实例中，每一片就是一个<code>redis</code>实例。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li><p>配置一个超级牛逼的计算机，超大内存，超强<code>cpu</code>，但是问题是。。。。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815105731.png"></p>
</li>
<li><p>正确的应该是考虑分布式，加机器，把数据分到不同的位置，分摊集中式的压力，<strong>一堆机器做一件事</strong></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815105742.png"></p>
</li>
</ol>
<h3 id="客户端分片"><a href="#客户端分片" class="headerlink" title="客户端分片"></a>客户端分片</h3><p><code>redis3.0</code>集群采用<code>P2P</code>模式，完全去中心化，将<code>redis</code>所有的<code>key</code>分成了<code>16384</code>个槽位，每个<code>redis</code>实例负责一部分<code>slot</code>，集群中的所有信息通过节点数据交换而更新。</p>
<p><code>redis</code>实例集群主要思想是将<code>redis</code>数据的<code>key</code>进行散列，通过<code>hash</code>函数特定的<code>key</code>会映射到指定的<code>redis</code>节点上</p>
<h3 id="数据分布理论"><a href="#数据分布理论" class="headerlink" title="数据分布理论"></a>数据分布理论</h3><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815110021.png"></p>
<p>分布式数据库首要解决把整个数据集按照分区规则映射到多个节点的问题，即把数据集划分到多个节点上，每个节点负责整个数据的一个子集。</p>
<p>常见的分区规则有哈希分区和顺序分区。<code>Redis Cluster</code>采用哈希分区规则，因此接下来会讨论哈希分区规则。</p>
<ul>
<li>节点取余分区</li>
<li>一致性哈希分区</li>
<li><strong>虚拟槽分区(<code>redis-cluster</code>采用的方式)</strong></li>
</ul>
<h4 id="顺序分区"><a href="#顺序分区" class="headerlink" title="顺序分区"></a>顺序分区</h4><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815110142.png"></p>
<h4 id="哈希分区"><a href="#哈希分区" class="headerlink" title="哈希分区"></a>哈希分区</h4><p>节点取余</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815110215.png"></p>
<p>例如按照节点取余的方式，分三个节点</p>
<p>1~100的数据对3取余，可以分为三类</p>
<ul>
<li>余数为0</li>
<li>余数为1</li>
<li>余数为2</li>
</ul>
<p>那么同样的分4个节点就是hash(key)%4</p>
<p>节点取余的优点是简单，客户端分片直接是哈希+取余</p>
<h4 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h4><p>客户端进行分片，哈希+顺时针取余</p>
<h4 id="虚拟槽分区"><a href="#虚拟槽分区" class="headerlink" title="虚拟槽分区"></a>虚拟槽分区</h4><p><code>Redis Cluster</code>采用虚拟槽分区</p>
<p>虚拟槽分区巧妙地使用了哈希空间，使用分散度良好的哈希函数把所有的数据映射到一个固定范围内的整数集合，整数定义为槽（<code>slot</code>）。</p>
<p><code>Redis Cluster</code>槽的范围是<code>0 ～ 16383</code>。</p>
<p>槽是集群内数据管理和迁移的基本单位。采用大范围的槽的主要目的是为了方便数据的拆分和集群的扩展，</p>
<p>每个节点负责一定数量的槽。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190815110428.png"></p>
<h2 id="搭建redis-cluster"><a href="#搭建redis-cluster" class="headerlink" title="搭建redis cluster"></a>搭建<code>redis cluster</code></h2><p>搭建集群分为几部</p>
<ul>
<li>准备节点（几匹马儿）</li>
<li>节点通信（几匹马儿分配主从）</li>
<li>分配槽位给节点（<code>slot</code>分配给马儿）</li>
</ul>
<p><code>redis-cluster</code>集群架构</p>
<p>多个服务端，负责读写，彼此通信，<code>redis</code>指定了<code>16384</code>个槽。</p>
<p>多匹马儿，负责运输数据，马儿分配<code>16384</code>个槽位，管理数据。</p>
<p><code>ruby</code>的脚本自动就把分配槽位这事做了</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="ruby安装"><a href="#ruby安装" class="headerlink" title="ruby安装"></a>ruby安装</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">apt<span class="literal">-get</span> install ruby</span><br></pre></td></tr></table></figure>

<h4 id="安装ruby-gem-包管理工具"><a href="#安装ruby-gem-包管理工具" class="headerlink" title="安装ruby gem 包管理工具"></a>安装<code>ruby gem</code> 包管理工具</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">gem install <span class="literal">-l</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看gem有哪些包</span></span><br><span class="line">gem list -- check redis gem</span><br></pre></td></tr></table></figure>

<h4 id="安装redis-trib-rb命令"><a href="#安装redis-trib-rb命令" class="headerlink" title="安装redis-trib.rb命令"></a>安装<code>redis-trib.rb</code>命令</h4><p>安装好<code>gem redis</code>包会生成<code>redis-trib.rb</code>命令，如果你执行提示没有该命令说明不在环境变量中，使用<code>find</code>查找该命令位置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># find /usr -name redis-trib.rb</span></span><br><span class="line">/usr/share/doc/redis<span class="literal">-tools</span>/examples/redis<span class="literal">-trib</span>.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以将其加入到环境变量</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment">#cp /usr/share/doc/redis-tools/examples/redis-trib.rb /usr/local/bin/</span></span><br></pre></td></tr></table></figure>

<h4 id="准备redis-server配置文件"><a href="#准备redis-server配置文件" class="headerlink" title="准备redis-server配置文件"></a>准备<code>redis-server</code>配置文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cluster<span class="literal">-8001</span>.conf  <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line">cluster<span class="literal">-8002</span>.conf  <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span></span><br><span class="line">cluster<span class="literal">-8003</span>.conf  <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line">cluster<span class="literal">-8004</span>.conf  <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8004</span></span><br><span class="line">cluster<span class="literal">-8005</span>.conf  <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8005</span></span><br><span class="line">cluster<span class="literal">-8006</span>.conf  <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8006</span></span><br></pre></td></tr></table></figure>

<h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># touch cluster-8001.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># vim cluster-8001.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">port <span class="number">8001</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> /tmp/cluster</span><br><span class="line">logfile <span class="number">8001</span>.log</span><br><span class="line">dbfilename <span class="number">8001</span>.rdb</span><br><span class="line">cluster<span class="literal">-enabled</span> yes   <span class="comment">#开启集群模式</span></span><br><span class="line">cluster<span class="literal">-config</span><span class="operator">-file</span> nodes<span class="literal">-8001</span>.conf　　<span class="comment">#集群内部的配置文件</span></span><br><span class="line">cluster<span class="literal">-require</span><span class="literal">-full</span><span class="literal">-coverage</span> no　　<span class="comment">#redis cluster需要16384个slot都正常的时候才能对外提供服务，换句话说，只要任何一个slot异常那么整个cluster不对外提供服务。 因此生产环境一般为no</span></span><br></pre></td></tr></table></figure>

<h5 id="编辑其他配置文件"><a href="#编辑其他配置文件" class="headerlink" title="编辑其他配置文件"></a>编辑其他配置文件</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># sed &#x27;s/8001/8002/g&#x27; cluster-8001.conf &gt; cluster-8002.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">port <span class="number">8002</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> /tmp/cluster</span><br><span class="line">logfile <span class="number">8002</span>.log</span><br><span class="line">dbfilename <span class="number">8002</span>.rdb</span><br><span class="line">cluster<span class="literal">-enabled</span> yes</span><br><span class="line">cluster<span class="literal">-config</span><span class="operator">-file</span> nodes<span class="literal">-8002</span>.conf</span><br><span class="line">cluster<span class="literal">-require</span><span class="literal">-full</span><span class="literal">-coverage</span> no </span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># sed &#x27;s/8001/8003/g&#x27; cluster-8001.conf &gt; cluster-8003.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">port <span class="number">8003</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> /tmp/cluster</span><br><span class="line">logfile <span class="number">8003</span>.log</span><br><span class="line">dbfilename <span class="number">8003</span>.rdb</span><br><span class="line">cluster<span class="literal">-enabled</span> yes</span><br><span class="line">cluster<span class="literal">-config</span><span class="operator">-file</span> nodes<span class="literal">-8003</span>.conf</span><br><span class="line">cluster<span class="literal">-require</span><span class="literal">-full</span><span class="literal">-coverage</span> no </span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># sed &#x27;s/8001/8004/g&#x27; cluster-8001.conf &gt; cluster-8004.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">port <span class="number">8004</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> /tmp/cluster</span><br><span class="line">logfile <span class="number">8004</span>.log</span><br><span class="line">dbfilename <span class="number">8004</span>.rdb</span><br><span class="line">cluster<span class="literal">-enabled</span> yes</span><br><span class="line">cluster<span class="literal">-config</span><span class="operator">-file</span> nodes<span class="literal">-8004</span>.conf</span><br><span class="line">cluster<span class="literal">-require</span><span class="literal">-full</span><span class="literal">-coverage</span> no </span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># sed &#x27;s/8001/8005/g&#x27; cluster-8001.conf &gt; cluster-8005.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">port <span class="number">8005</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> /tmp/cluster</span><br><span class="line">logfile <span class="number">8005</span>.log</span><br><span class="line">dbfilename <span class="number">8005</span>.rdb</span><br><span class="line">cluster<span class="literal">-enabled</span> yes</span><br><span class="line">cluster<span class="literal">-config</span><span class="operator">-file</span> nodes<span class="literal">-8005</span>.conf</span><br><span class="line">cluster<span class="literal">-require</span><span class="literal">-full</span><span class="literal">-coverage</span> no </span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># sed &#x27;s/8001/8006/g&#x27; cluster-8001.conf &gt; cluster-8006.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">port <span class="number">8006</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">dir</span> /tmp/cluster</span><br><span class="line">logfile <span class="number">8006</span>.log</span><br><span class="line">dbfilename <span class="number">8006</span>.rdb</span><br><span class="line">cluster<span class="literal">-enabled</span> yes</span><br><span class="line">cluster<span class="literal">-config</span><span class="operator">-file</span> nodes<span class="literal">-8006</span>.conf</span><br><span class="line">cluster<span class="literal">-require</span><span class="literal">-full</span><span class="literal">-coverage</span> no </span><br></pre></td></tr></table></figure>

<h3 id="运行redis-server"><a href="#运行redis-server" class="headerlink" title="运行redis-server"></a>运行<code>redis-server</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-server cluster-8001.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-server cluster-8002.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-server cluster-8003.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-server cluster-8004.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-server cluster-8005.conf</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-server cluster-8006.conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      <span class="number">8131</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">22</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">8001</span> [<span class="type">cluster</span>]</span><br><span class="line">root      <span class="number">8140</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">22</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">8002</span> [<span class="type">cluster</span>]</span><br><span class="line">root      <span class="number">8148</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">22</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">8003</span> [<span class="type">cluster</span>]</span><br><span class="line">root      <span class="number">8156</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">22</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">8004</span> [<span class="type">cluster</span>]</span><br><span class="line">root      <span class="number">8164</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">22</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">8005</span> [<span class="type">cluster</span>]</span><br><span class="line">root      <span class="number">8171</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">22</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis<span class="literal">-server</span> *:<span class="number">8006</span> [<span class="type">cluster</span>]</span><br><span class="line">root      <span class="number">8179</span>  <span class="number">5341</span>  <span class="number">0</span> <span class="number">10</span>:<span class="number">23</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep redis</span><br></pre></td></tr></table></figure>

<p>此时启动<code>redis-cli</code>，集群还不能用，未提供<code>hsah</code>槽</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-cli -c -p 8001</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span>&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span>&gt; <span class="built_in">set</span> name tony</span><br><span class="line">(error) CLUSTERDOWN Hash slot not served</span><br></pre></td></tr></table></figure>

<h3 id="开启redis-cluster集群"><a href="#开启redis-cluster集群" class="headerlink" title="开启redis-cluster集群"></a>开启<code>redis-cluster</code>集群</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个主节点，有一个从节点，代表--replicas 1</span></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-trib.rb create --replicas 1 127.0.0.1:8001 127.0.0.1:8002 127.0.0.1:8003 127.0.0.1:8004 127.0.0.1:8005 127.0.0.1:8006</span></span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on <span class="number">6</span> nodes...</span><br><span class="line"><span class="keyword">Using</span> 3 masters:</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line">Adding replica <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8005</span> to <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line">Adding replica <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8006</span> to <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span></span><br><span class="line">Adding replica <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8004</span> to <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti<span class="literal">-affinity</span></span><br><span class="line">[<span class="type">WARNING</span>] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line">M: e1654cae78b3c314deeb8c9741d7fbcc4606469c <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line">   slots:<span class="number">0</span><span class="literal">-5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line">M: <span class="number">0</span>fdb6c8423c25ffd8841cf67d25ed6ff5934ebb6 <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span></span><br><span class="line">   slots:<span class="number">5461</span><span class="literal">-10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line">M: <span class="number">07239385</span>ba365d456cc9d7d7c60274eb894f4ebc <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line">   slots:<span class="number">10923</span><span class="literal">-16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line">S: <span class="number">98</span>ab1b39b41a3588ab0102098915a92bb2b67203 <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8004</span></span><br><span class="line">   replicates <span class="number">0</span>fdb6c8423c25ffd8841cf67d25ed6ff5934ebb6</span><br><span class="line">S: dd8b553ce03137892578e59629f7b6ec483135a4 <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8005</span></span><br><span class="line">   replicates <span class="number">07239385</span>ba365d456cc9d7d7c60274eb894f4ebc</span><br><span class="line">S: <span class="number">6</span>df2f0ecbff311dd3289764ff9d9d789ad1cef6e <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8006</span></span><br><span class="line">   replicates e1654cae78b3c314deeb8c9741d7fbcc4606469c</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): yes</span><br><span class="line"><span class="comment"># 提示是否应用以上配置，同意yes</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join......</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (<span class="keyword">using</span> node 127.0.0.1:8001)</span><br><span class="line">M: e1654cae78b3c314deeb8c9741d7fbcc4606469c <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line">   slots:<span class="number">0</span><span class="literal">-5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line">S: dd8b553ce03137892578e59629f7b6ec483135a4 <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8005</span></span><br><span class="line">   slots: (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates <span class="number">07239385</span>ba365d456cc9d7d7c60274eb894f4ebc</span><br><span class="line">S: <span class="number">98</span>ab1b39b41a3588ab0102098915a92bb2b67203 <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8004</span></span><br><span class="line">   slots: (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates <span class="number">0</span>fdb6c8423c25ffd8841cf67d25ed6ff5934ebb6</span><br><span class="line">S: <span class="number">6</span>df2f0ecbff311dd3289764ff9d9d789ad1cef6e <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8006</span></span><br><span class="line">   slots: (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates e1654cae78b3c314deeb8c9741d7fbcc4606469c</span><br><span class="line">M: <span class="number">07239385</span>ba365d456cc9d7d7c60274eb894f4ebc <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line">   slots:<span class="number">10923</span><span class="literal">-16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line">M: <span class="number">0</span>fdb6c8423c25ffd8841cf67d25ed6ff5934ebb6 <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span></span><br><span class="line">   slots:<span class="number">5461</span><span class="literal">-10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line">[<span class="type">OK</span>] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[<span class="type">OK</span>] All <span class="number">16384</span> slots covered.</span><br></pre></td></tr></table></figure>

<p>开启成功，集群自动分配主从关系  8001、8006、8003为 8004、8005、8006 主动关系</p>
<h3 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7000</span> cluster info  </span><br><span class="line"></span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7000</span> cluster nodes  <span class="comment">#等同于查看nodes-7000.conf文件节点信息</span></span><br><span class="line"></span><br><span class="line">集群主节点状态</span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7000</span> cluster nodes | grep master</span><br><span class="line">集群从节点状态</span><br><span class="line">redis<span class="literal">-cli</span> <span class="literal">-p</span> <span class="number">7000</span> cluster nodes | grep slave</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-cli -c -p 8001</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">1</span></span><br><span class="line">slave0:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">8006</span>,state=online,offset=<span class="number">1134</span>,lag=<span class="number">1</span></span><br><span class="line">master_replid:<span class="number">6914</span>abc6a11f70134a2d1e2446a21665539babcd</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1134</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">1134</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-cli -c -p 8002</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">1</span></span><br><span class="line">slave0:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">8004</span>,state=online,offset=<span class="number">1134</span>,lag=<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">8497</span>b92f1b109a90dda607f0b629e031edde9842</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1134</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">1134</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-cli -c -p 8003</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">1</span></span><br><span class="line">slave0:ip=<span class="number">127.0</span>.<span class="number">0.1</span>,port=<span class="number">8005</span>,state=online,offset=<span class="number">1162</span>,lag=<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">5</span>e35aa5d820ccb34dfabbd2868bbe62379c44da8</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1162</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">1162</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-cli -c -p 8004</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8004</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">8002</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">2</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">1162</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">8497</span>b92f1b109a90dda607f0b629e031edde9842</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1162</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">1162</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-cli -c -p 8005</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8005</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">8003</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">6</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">1176</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">5</span>e35aa5d820ccb34dfabbd2868bbe62379c44da8</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1176</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">1176</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@Tony<span class="literal">-PC</span>:/tmp/cluster<span class="comment"># redis-cli -c -p 8006</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8006</span>&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">master_port:<span class="number">8001</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">10</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">1176</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">6914</span>abc6a11f70134a2d1e2446a21665539babcd</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">1176</span></span><br><span class="line">second_repl_offset:<span class="literal">-1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">1176</span></span><br></pre></td></tr></table></figure>

<h3 id="测试写入数据"><a href="#测试写入数据" class="headerlink" title="测试写入数据"></a>测试写入数据</h3><p><strong>测试写入集群数据，登录集群必须使用<code>redis-cli -c -p 8001</code>必须加上<code>-c</code>参数</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里会将key自动的重定向，放到某一个节点的slot槽位中</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span>&gt; <span class="built_in">set</span> a <span class="number">1</span></span><br><span class="line">-&gt; Redirected to slot [<span class="number">15495</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span>&gt; <span class="built_in">set</span> b <span class="number">2</span></span><br><span class="line">-&gt; Redirected to slot [<span class="number">3300</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span>&gt; <span class="built_in">set</span> c <span class="number">3</span></span><br><span class="line">-&gt; Redirected to slot [<span class="number">7365</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span>&gt; <span class="built_in">set</span> d <span class="number">4</span></span><br><span class="line">-&gt; Redirected to slot [<span class="number">11298</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span>&gt; <span class="built_in">set</span> e <span class="number">5</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span>&gt; <span class="built_in">set</span> f <span class="number">6</span></span><br><span class="line">-&gt; Redirected to slot [<span class="number">3168</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span>&gt; get a</span><br><span class="line">-&gt; Redirected to slot [<span class="number">15495</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span>&gt; get b</span><br><span class="line">-&gt; Redirected to slot [<span class="number">3300</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span>&gt; get c</span><br><span class="line">-&gt; Redirected to slot [<span class="number">7365</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span></span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span>&gt; get d</span><br><span class="line">-&gt; Redirected to slot [<span class="number">11298</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span></span><br><span class="line"><span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span>&gt; get e</span><br><span class="line"><span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span>&gt; get f</span><br><span class="line">-&gt; Redirected to slot [<span class="number">3168</span>] located at <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;f&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8002</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8003</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;e&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8004</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8005</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;e&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8006</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure>

<p>集群<code>ok</code></p>
<p>工作原理：</p>
<p><code>redis</code>客户端任意访问一个<code>redis</code>实例，如果数据不在该实例中，通过重定向引导客户端访问所需要的<code>redis</code>实例</p>
]]></content>
      <categories>
        <category>db</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis-cluster</tag>
        <tag>集群</tag>
        <tag>cluster</tag>
        <tag>redis-trib.rb</tag>
        <tag>redis-trib</tag>
        <tag>ruby gem</tag>
        <tag>集群状态</tag>
      </tags>
  </entry>
  <entry>
    <title>saltstack简单部署</title>
    <url>/241c0e00.html</url>
    <content><![CDATA[<p><code>Salt</code>是一个分布式远程执行系统，用来在远程节点上执行命令和查询数据。学习环境下我们也许没有那么多服务器可以用来学习，使用虚拟机效率又太低下，这时我们可利用之前文章学的<a href="https://www.diandian100.cn/cf791c57.html">Docker</a>来进行部署学习。</p>
<a id="more"></a>

<h2 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h2><p>在安装<code>salt</code>之前，先理解<code>salt</code>架构中各个角色，主要区分是<code>salt-master</code>和<code>salt-minion</code>，顾名思义master是中心控制系统，<code>minion</code>是被管理的客户端。</p>
<p><code>salt</code>架构中的一种就是<code>master &gt; minion</code>。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190917151958.png"></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><table>
<thead>
<tr>
<th>服务器环境</th>
<th><code>centos7</code></th>
<th><code>centos7</code></th>
<th><code>centos7</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>ip</code>地址</td>
<td>172.17.0.2</td>
<td>172.17.0.3</td>
<td>172.17.0.4</td>
</tr>
<tr>
<td>身份</td>
<td><code>master</code></td>
<td><code>slave</code></td>
<td><code>slave</code></td>
</tr>
<tr>
<td>软件包</td>
<td><code>salt-master</code></td>
<td><code>salt-minion</code></td>
<td><code>salt-minion</code></td>
</tr>
</tbody></table>
<p>使用<code>docker</code>开启以上三个镜像并在三个镜像中<code>hosts</code>文件都添加以下三行，关于如何下载和运行镜像参考之前的文章<a href="https://www.diandian100.cn/cf791c57.html">Docker基础使用</a>，后面会有坑，也在后面填坑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">172.17.0.2	master</span><br><span class="line">172.17.0.3	slave1</span><br><span class="line">172.17.0.4	slave2</span><br></pre></td></tr></table></figure>

<p>记得也要关闭防火墙</p>
<h2 id="安装saltstack"><a href="#安装saltstack" class="headerlink" title="安装saltstack"></a>安装saltstack</h2><p> <code>salt</code>软件包需要<code>epel</code>源的支持，那么下载</p>
<p><code>EPEL</code>的全称叫 <code>Extra Packages for Enterprise Linux</code> 。<code>EPEL</code>是由 Fedora 社区打造，为 <code>RHEL</code> 及衍生发行版如 <code>CentOS</code>、<code>Scientific Linux</code> 等提供高质量软件包的项目。装上了 <code>EPEL</code>之后，就相当于添加了一个第三方源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br><span class="line">yum clean all #清空缓存</span><br><span class="line">yum makecache #生成yum缓存</span><br></pre></td></tr></table></figure>

<p>安装好<code>epel</code>源就可以开始安装<code>salt</code>了</p>
<p>主机安装<code>salt-master</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install salt-master -y</span><br></pre></td></tr></table></figure>

<p>从机安装<code>salt-minion</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install salt-minion -y</span><br></pre></td></tr></table></figure>

<h2 id="salt端口"><a href="#salt端口" class="headerlink" title="salt端口"></a><code>salt</code>端口</h2><p>安装好salt之后开始配置，salt-master默认监听两个端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4505   publish_port 提供远程命令发送功能</span><br><span class="line">4506   ret_port     提供认证，文件服务，结果收集等功能</span><br><span class="line"># 确保客户端可以通信服务器的此2个端口，保证防火墙允许端口通过。因此在测试环境直接关闭防火墙。</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">salt-master的配置文件是&#x2F;etc&#x2F;salt&#x2F;master</span><br><span class="line">salt-minion的配置文件是&#x2F;etc&#x2F;salt&#x2F;minion</span><br><span class="line">配置文件中包含了大量可调整的参数，这些参数控制master和minion各个方面</span><br></pre></td></tr></table></figure>

<h3 id="salt-master常用配置"><a href="#salt-master常用配置" class="headerlink" title="salt-master常用配置"></a><code>salt-master</code>常用配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># salt运行的用户，影响到salt的执行权限</span><br><span class="line">user: root</span><br><span class="line"></span><br><span class="line">#s alt的运行线程，开的线程越多一般处理的速度越快，但一般不要超过CPU的个数</span><br><span class="line">worker_threads: 10</span><br><span class="line"></span><br><span class="line"># master的管理端口</span><br><span class="line">publish_port : 4505</span><br><span class="line"></span><br><span class="line"># master跟minion的通讯端口，用于文件服务，认证，接受返回结果等</span><br><span class="line">ret_port : 4506</span><br><span class="line"></span><br><span class="line"># 如果这个master运行的salt-syndic连接到了一个更高层级的master,那么这个参数需要配置成连接到的这个高层级master的监听端口</span><br><span class="line">syndic_master_port : 4506</span><br><span class="line"></span><br><span class="line"># 指定pid文件位置</span><br><span class="line">pidfile: &#x2F;var&#x2F;run&#x2F;salt-master.pid</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="salt-slave常用配置"><a href="#salt-slave常用配置" class="headerlink" title="salt-slave常用配置"></a><code>salt-slave</code>常用配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># minion的识别ID，可以是IP，域名，或是可以通过DNS解析的字符串</span><br><span class="line">id: slave</span><br><span class="line"> </span><br><span class="line"># salt运行的用户权限</span><br><span class="line">user: root</span><br><span class="line"> </span><br><span class="line"># master的识别ID，可以是IP，域名，或是可以通过DNS解析的字符串</span><br><span class="line">master : master</span><br><span class="line"> </span><br><span class="line"># master通信端口</span><br><span class="line">master_port: 4506</span><br><span class="line"> </span><br><span class="line"># 备份模式，minion是本地备份，当进行文件管理时的文件备份模式</span><br><span class="line">backup_mode: minion</span><br><span class="line"> </span><br><span class="line"># 执行salt-call时候的输出方式</span><br><span class="line">output: nested</span><br><span class="line"> </span><br><span class="line"># minion等待master接受认证的时间</span><br><span class="line">acceptance_wait_time: 10</span><br><span class="line"> </span><br><span class="line"># 失败重连次数，0表示无限次，非零会不断尝试到设置值后停止尝试</span><br><span class="line">acceptance_wait_time_max: 0</span><br><span class="line"> </span><br><span class="line"># 重新认证延迟时间，可以避免因为master的key改变导致minion需要重新认证的syn风暴</span><br><span class="line">random_reauth_delay: 60</span><br><span class="line"> </span><br><span class="line"># 日志文件位置</span><br><span class="line">log_file: &#x2F;var&#x2F;logs&#x2F;salt_minion.log</span><br></pre></td></tr></table></figure>

<h3 id="本人主从机配置"><a href="#本人主从机配置" class="headerlink" title="本人主从机配置"></a>本人主从机配置</h3><h4 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 绑定到本地的0.0.0.0地址</span><br><span class="line">interface: 0.0.0.0</span><br><span class="line"># 管理端口，命令发送</span><br><span class="line">publish_port: 4505</span><br><span class="line"># 运行salt进程的用户</span><br><span class="line">user: root</span><br><span class="line"># salt运行线程数，线程越多处理速度越快，不要超过cpu个数</span><br><span class="line">worker_threads: 5</span><br><span class="line"># 执行结果返回端口</span><br><span class="line">ret_port: 4506</span><br><span class="line"># pid文件位置</span><br><span class="line">pidfile: &#x2F;var&#x2F;run&#x2F;salt-master.pid</span><br><span class="line"># 日志文件地址</span><br><span class="line">log_file: &#x2F;var&#x2F;log&#x2F;salt&#x2F;master</span><br><span class="line"># 自动接收minion的key</span><br><span class="line"># auto_accept: False</span><br></pre></td></tr></table></figure>

<h4 id="从机1配置"><a href="#从机1配置" class="headerlink" title="从机1配置"></a>从机1配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 主机hosts解析字符串</span><br><span class="line">master: master</span><br><span class="line"># master通信端口</span><br><span class="line">master_port: 4506</span><br><span class="line"># salt运行的用户权限</span><br><span class="line">user: root</span><br><span class="line"># minion的识别ID，可以是IP，域名，或是可以通过DNS解析的字符串</span><br><span class="line">id: slave1</span><br><span class="line"># minion等待master接受认证的时间</span><br><span class="line">acceptance_wait_time: 10</span><br><span class="line"># 日志文件位置</span><br><span class="line">log_file: &#x2F;var&#x2F;log&#x2F;salt&#x2F;minion</span><br></pre></td></tr></table></figure>

<h4 id="从机2配置"><a href="#从机2配置" class="headerlink" title="从机2配置"></a>从机2配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 主机hosts解析字符串</span><br><span class="line">master: master</span><br><span class="line"># master通信端口</span><br><span class="line">master_port: 4506</span><br><span class="line"># salt运行的用户权限</span><br><span class="line">user: root</span><br><span class="line"># minion的识别ID，可以是IP，域名，或是可以通过DNS解析的字符串</span><br><span class="line">id: slave2</span><br><span class="line"># minion等待master接受认证的时间</span><br><span class="line">acceptance_wait_time: 10</span><br><span class="line"># 日志文件位置</span><br><span class="line">log_file: &#x2F;var&#x2F;log&#x2F;salt&#x2F;minion</span><br></pre></td></tr></table></figure>

<h2 id="启动salt"><a href="#启动salt" class="headerlink" title="启动salt"></a>启动<code>salt</code></h2><p>主从机上分别启动<code>salt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start salt-minion</span><br><span class="line">systemctl start salt-master</span><br></pre></td></tr></table></figure>

<p>此处有坑：</p>
<p>本人启动<code>salt</code>时出现以下错误：Failed to get D-Bus connection: Operation not permitted</p>
<p>起初以为是<code>docker</code>中使用<code>salt</code>出现的问题，百度后发现是这样解释的。出错的原因是因为在<code>docker</code>中使用了<code>systemctl</code>命令。<code>systemd</code>，这个套件已经成为主流<code>Linux</code>发行版（比如<code>CentOS7</code>、<code>Ubuntu14+</code>）默认的服务管理，取代了传统的<code>SystemV</code>风格服务管理。<code>systemd</code>维护系统服务程序，它需要特权去会访问<code>Linux</code>内核。而容器并不是一个完整的操作系统，只有一个文件系统，而且默认启动只是普通用户这样的权限访问<code>Linux</code>内核，也就是没有特权，所以自然就用不了！</p>
<p>因此，请遵守容器设计原则，一个容器里运行一个前台服务！我们可以利用特权模式来启动该容器。启动流程如下：</p>
<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># xxx代表容器id前三位，也可写容器名称</span><br><span class="line">docker run --privileged -it xxx init</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># xxx代表运行中的容器id前三位</span><br><span class="line">docker exec -it xxx bash</span><br></pre></td></tr></table></figure>

<p>此时<code>systemctl</code>可以正常使用了，我们使用<code>start</code>分别启动三台服务器上的<code>salt</code>，查看下状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@e23e0da47946 &#x2F;]# systemctl status salt-master</span><br><span class="line">● salt-master.service - The Salt Master Server</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;salt-master.service; disabled; vendor preset: </span><br><span class="line">disabled)   Active: active (running) since Tue 2019-09-17 07:01:25 UTC; 50min ago</span><br><span class="line"> Main PID: 234 (salt-master)</span><br><span class="line">   CGroup: &#x2F;docker&#x2F;e23e0da479464a1206b9450a5556dfec6b02ba25adaec97057f4b00deb287233&#x2F;syste</span><br><span class="line">m.slice&#x2F;salt-master.service           ├─234 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─242 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─243 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─244 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─248 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─250 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─251 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─254 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─257 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ├─260 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           └─265 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line">           ‣ 234 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-master</span><br><span class="line"></span><br><span class="line">Sep 17 07:01:25 e23e0da47946 systemd[1]: Starting The Salt Master Server...</span><br><span class="line">Sep 17 07:01:25 e23e0da47946 systemd[1]: Started The Salt Master Server.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@8d6a7a1f159f &#x2F;]# systemctl status salt-minion</span><br><span class="line">● salt-minion.service - The Salt Minion</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;salt-minion.service; disabled; vendor preset: </span><br><span class="line">disabled)   Active: active (running) since Tue 2019-09-17 07:05:25 UTC; 47min ago</span><br><span class="line"> Main PID: 398 (salt-minion)</span><br><span class="line">   CGroup: &#x2F;docker&#x2F;8d6a7a1f159f329e2c1d26f1f5ba976dc3541ef779f05a3f61d7ec5935ba191d&#x2F;syste</span><br><span class="line">m.slice&#x2F;salt-minion.service           ├─398 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">           └─401 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">           ‣ 398 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@8efbb15347d0 &#x2F;]# systemctl status salt-minion</span><br><span class="line">● salt-minion.service - The Salt Minion</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;salt-minion.service; disable</span><br><span class="line">d; vendor preset: disabled)   Active: active (running) since Tue 2019-09-17 07:05:35 UTC; 12s ago</span><br><span class="line"> Main PID: 228 (salt-minion)</span><br><span class="line">   CGroup: &#x2F;docker&#x2F;8efbb15347d081b3a36b30c7e024ccf97d54bd5596830b9bd122</span><br><span class="line">e33a8823517f&#x2F;system.slice&#x2F;salt-minion.service           ├─228 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">           └─231 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">           ‣ 228 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>三台服务器运行正常。</p>
<h2 id="主机接收从机密匙"><a href="#主机接收从机密匙" class="headerlink" title="主机接收从机密匙"></a>主机接收从机密匙</h2><p>在<code>minion</code>启动后连接<code>master</code>会请求<code>master</code>为其签发证书，等待证书签发完成后，<code>master</code>可以信任<code>minion</code>，并且<code>minion</code>和<code>master</code>之间的通信是加密的。</p>
<p>在<code>salt-master</code>执行</p>
<p><code>salt-key</code>命令用于管理<code>mionion</code>秘钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@e23e0da47946 &#x2F;]# salt-key -L</span><br><span class="line">Accepted Keys:</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">Rejected Keys:</span><br></pre></td></tr></table></figure>

<p>此时两个从机已经出现在<code>unaccepted keys</code>中，说明<code>minion</code>已经和<code>master</code>联系，并且<code>master</code>已经获取了<code>minion</code>的公钥，等待下一步指令。</p>
<h2 id="检查master和minion的秘钥匹配"><a href="#检查master和minion的秘钥匹配" class="headerlink" title="检查master和minion的秘钥匹配"></a>检查master和minion的秘钥匹配</h2><p>在<code>master</code>上执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@e23e0da47946 &#x2F;]# salt-key -F</span><br><span class="line">Local Keys:</span><br><span class="line">Accepted Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">slave1:  09:d0:95:28:41:21:d7:0b:1a:81:8f:42:e0:a7:77:1a</span><br><span class="line">slave2:  4c:18:d8:2f:3e:de:4d:33:a9:84:82:2f:a0:4f:09:00</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在从机上获取密匙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@8d6a7a1f159f &#x2F;]# salt-call --local key.finger</span><br><span class="line">local:</span><br><span class="line">    09:d0:95:28:41:21:d7:0b:1a:81:8f:42:e0:a7:77:1a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@8efbb15347d0 salt]# salt-call --local key.finger</span><br><span class="line">local:</span><br><span class="line">    4c:18:d8:2f:3e:de:4d:33:a9:84:82:2f:a0:4f:09:00</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主从机显示一致，在<code>master</code>上接收密匙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@e23e0da47946 &#x2F;]# salt-key -a slave1</span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">slave1</span><br><span class="line">Proceed? [n&#x2F;Y] y</span><br><span class="line">Key for minion slave1 accepted.</span><br><span class="line"></span><br><span class="line">[root@e23e0da47946 &#x2F;]# salt-key -a slave2</span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">slave2</span><br><span class="line">Proceed? [n&#x2F;Y] y</span><br><span class="line">Key for minion slave2 accepted.</span><br></pre></td></tr></table></figure>

<p>确认接收秘钥后，检验<code>minion</code>秘钥是否被接收</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@e23e0da47946 &#x2F;]# salt-key -L</span><br><span class="line">Accepted Keys:</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br></pre></td></tr></table></figure>

<p>两个从机接收成功</p>
<h2 id="salt-key"><a href="#salt-key" class="headerlink" title="salt-key"></a>salt-key</h2><h3 id="常用参数："><a href="#常用参数：" class="headerlink" title="常用参数："></a>常用参数：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@linux-node1 ~]# salt-key -L</span><br><span class="line">Accepted Keys：  #已经接受的key</span><br><span class="line">Denied Keys：    #拒绝的key</span><br><span class="line">Unaccepted Keys：#未加入的key</span><br><span class="line">Rejected Keys：#吊销的key</span><br><span class="line"></span><br><span class="line">#常用参数</span><br><span class="line">-L  #查看KEY状态</span><br><span class="line">-A  #允许所有</span><br><span class="line">-D  #删除所有</span><br><span class="line">-a  #认证指定的key</span><br><span class="line">-d  #删除指定的key</span><br><span class="line">-r  #注销掉指定key（该状态为未被认证）</span><br><span class="line"></span><br><span class="line">#在master端&#x2F;etc&#x2F;salt&#x2F;master配置</span><br><span class="line">auto_accept: True   #如果对Minion信任,可以配置master自动接受请求</span><br></pre></td></tr></table></figure>

<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#列出当前所有的key</span><br><span class="line">[root@salt0-master ~]# salt-key </span><br><span class="line">Accepted Keys:</span><br><span class="line">salt1-minion.example.com</span><br><span class="line">salt2-minion.example.com</span><br><span class="line">salt3-minion.example.com</span><br><span class="line">salt4-minion.example.com</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br><span class="line"></span><br><span class="line">#添加指定minion的key</span><br><span class="line">[root@salt0-master ~]# salt-key  -a salt1-minion.example.com -y</span><br><span class="line">#添加所有minion的key</span><br><span class="line">[root@salt0-master ~]# salt-key  -A  -y</span><br><span class="line"></span><br><span class="line">#删除指定的key</span><br><span class="line">[root@salt0-master ~]# salt-key -d salt1-minion.example.com -y</span><br><span class="line">#删除所有的key</span><br><span class="line">[root@salt0-master ~]# salt-key -D -y</span><br></pre></td></tr></table></figure>

<h3 id="已安装文件说明"><a href="#已安装文件说明" class="headerlink" title="已安装文件说明"></a>已安装文件说明</h3><p>首先知道master和minion都安装了什么文件，然后才知道怎么操作</p>
<p><strong>master端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ql salt-master</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;salt&#x2F;master      # salt master主配置文件</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;salt           #salt master 核心操作命令</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;salt-cp       #salt 文件传输命令</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;salt-key    #salt证书管理</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;salt-master    #salt master 服务命令</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;salt-run          #salt master runner命令</span><br></pre></td></tr></table></figure>

<p><strong>slave端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@slave  ~]$rpm -ql salt-minion</span><br><span class="line">&#x2F;etc&#x2F;salt&#x2F;minion     #minion配置文件</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;salt-call    #拉取命令</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;salt-minion   #minion服务命令</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;salt-minion.service   #minion启动脚本</span><br></pre></td></tr></table></figure>

<h2 id="测试salt命令"><a href="#测试salt命令" class="headerlink" title="测试salt命令"></a>测试<code>salt</code>命令</h2><p>这是条很简单的探测minion主机存活命令，也是远程执行命令，我们通过master发送消息给”*”所有的minion，并且告诉他们运行salt内置的命令（也是python模块中的一个函数），返回true表示slave机器监控存活。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># salt 是一个命令 </span><br><span class="line"># * 表示目标主机, 在这里代表所有目标主机 </span><br><span class="line"># test.ping是salt远程执行的一个模块下面的方法。</span><br><span class="line">[root@master &#x2F;]# salt &#39;*&#39; test.ping</span><br><span class="line">slave1:</span><br><span class="line">    True</span><br><span class="line">slave2:</span><br><span class="line">	True</span><br></pre></td></tr></table></figure>

<p>test模块其他函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master etc]# salt &#39;*&#39; sys.list_functions test</span><br><span class="line">slave2:</span><br><span class="line">    - test.arg</span><br><span class="line">    - test.arg_repr</span><br><span class="line">    - test.arg_type</span><br><span class="line">    - test.assertion</span><br><span class="line">    - test.attr_call</span><br><span class="line">    - test.collatz</span><br><span class="line">    - test.conf_test</span><br><span class="line">    - test.cross_test</span><br><span class="line">    - test.echo</span><br><span class="line">    - test.exception</span><br><span class="line">    - test.fib</span><br><span class="line">    - test.get_opts</span><br><span class="line">    - test.kwarg</span><br><span class="line">    - test.module_report</span><br><span class="line">    - test.not_loaded</span><br><span class="line">    - test.opts_pkg</span><br><span class="line">    - test.outputter</span><br><span class="line">    - test.ping</span><br><span class="line">    - test.provider</span><br><span class="line">    - test.providers</span><br><span class="line">    - test.rand_sleep</span><br><span class="line">    - test.rand_str</span><br><span class="line">    - test.retcode</span><br><span class="line">    - test.sleep</span><br><span class="line">    - test.stack</span><br><span class="line">    - test.try_</span><br><span class="line">    - test.tty</span><br><span class="line">    - test.version</span><br><span class="line">    - test.versions_information</span><br><span class="line">    - test.versions_report</span><br><span class="line">slave1:</span><br><span class="line">    - test.arg</span><br><span class="line">    - test.arg_repr</span><br><span class="line">    - test.arg_type</span><br><span class="line">    - test.assertion</span><br><span class="line">    - test.attr_call</span><br><span class="line">    - test.collatz</span><br><span class="line">    - test.conf_test</span><br><span class="line">    - test.cross_test</span><br><span class="line">    - test.echo</span><br><span class="line">    - test.exception</span><br><span class="line">    - test.fib</span><br><span class="line">    - test.get_opts</span><br><span class="line">    - test.kwarg</span><br><span class="line">    - test.module_report</span><br><span class="line">    - test.not_loaded</span><br><span class="line">    - test.opts_pkg</span><br><span class="line">    - test.outputter</span><br><span class="line">    - test.ping</span><br><span class="line">    - test.provider</span><br><span class="line">    - test.providers</span><br><span class="line">    - test.rand_sleep</span><br><span class="line">    - test.rand_str</span><br><span class="line">    - test.retcode</span><br><span class="line">    - test.sleep</span><br><span class="line">    - test.stack</span><br><span class="line">    - test.try_</span><br><span class="line">    - test.tty</span><br><span class="line">    - test.version</span><br><span class="line">    - test.versions_information</span><br><span class="line">    - test.versions_report</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>示例打印字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master etc]# salt &#39;*&#39; test.echo &#39;tony 666&#39;</span><br><span class="line">slave2:</span><br><span class="line">    tony 666</span><br><span class="line">slave1:</span><br><span class="line">    tony 666</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>示例生成斐波那切数列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@e23e0da47946 etc]# salt &#39;*&#39; test.fib 50</span><br><span class="line">slave2:</span><br><span class="line">    |_</span><br><span class="line">      - 0</span><br><span class="line">      - 1</span><br><span class="line">      - 1</span><br><span class="line">      - 2</span><br><span class="line">      - 3</span><br><span class="line">      - 5</span><br><span class="line">      - 8</span><br><span class="line">      - 13</span><br><span class="line">      - 21</span><br><span class="line">      - 34</span><br><span class="line">    - 1.90734863281e-06</span><br><span class="line">slave1:</span><br><span class="line">    |_</span><br><span class="line">      - 0</span><br><span class="line">      - 1</span><br><span class="line">      - 1</span><br><span class="line">      - 2</span><br><span class="line">      - 3</span><br><span class="line">      - 5</span><br><span class="line">      - 8</span><br><span class="line">      - 13</span><br><span class="line">      - 21</span><br><span class="line">      - 34</span><br><span class="line">    - 1.90734863281e-06</span><br></pre></td></tr></table></figure>

<h2 id="salt命令结构"><a href="#salt命令结构" class="headerlink" title="salt命令结构"></a><code>salt</code>命令结构</h2><p>命令行输入的命令叫做执行模块，而把命令写入到文件中就叫做状态模块。</p>
<p><code>salt</code>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master 192.168.199.155 ~]$salt --help</span><br><span class="line">Usage: salt [options] &#39;&lt;target&gt;&#39; &lt;function&gt; [arguments]</span><br><span class="line"></span><br><span class="line"># salt命令 参数 目标 salt模块的函数 远程执行的参数</span><br></pre></td></tr></table></figure>

<h4 id="打印从机hostname"><a href="#打印从机hostname" class="headerlink" title="打印从机hostname"></a>打印从机<code>hostname</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#--summary参数显示salt命令的概要</span><br><span class="line">[root@master etc]# salt --summary &#39;*&#39; cmd.run &#39;hostname&#39;</span><br><span class="line">slave1:</span><br><span class="line">    8d6a7a1f159f</span><br><span class="line">slave2:</span><br><span class="line">    8efbb15347d0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Summary</span><br><span class="line">-------------------------------------------</span><br><span class="line"># of Minions Targeted: 2</span><br><span class="line"># of Minions Returned: 2</span><br><span class="line"># of Minions Did Not Return: 0</span><br><span class="line">-------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="列出从机sys模块"><a href="#列出从机sys模块" class="headerlink" title="列出从机sys模块"></a>列出从机<code>sys</code>模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master etc]# salt &#39;*&#39; sys.list_modules</span><br></pre></td></tr></table></figure>

<h4 id="查看从机python进程"><a href="#查看从机python进程" class="headerlink" title="查看从机python进程"></a>查看从机python进程</h4><p><code>cmd</code>是超级模块，所有shell命令都能执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@e23e0da47946 etc]# salt &#39;*&#39; cmd.run &#39;ps -ef | grep python&#39;</span><br><span class="line">slave1:</span><br><span class="line">    root       398     1  0 07:05 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">    root       401   398  0 07:05 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">    root      1306     1  0 08:23 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">    root      1307  1306  0 08:23 ?        00:00:00 &#x2F;bin&#x2F;sh -c ps -ef | grep python</span><br><span class="line">    root      1309  1307  0 08:23 ?        00:00:00 grep python</span><br><span class="line">slave2:</span><br><span class="line">    root       228     1  0 07:05 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">    root       231   228  0 07:05 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">    root      1190     1  0 08:23 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;salt-minion</span><br><span class="line">    root      1191  1190  0 08:23 ?        00:00:00 &#x2F;bin&#x2F;sh -c ps -ef | grep python</span><br><span class="line">    root      1193  1191  0 08:23 ?        00:00:00 grep python</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="远程操作从机nginx"><a href="#远程操作从机nginx" class="headerlink" title="远程操作从机nginx"></a>远程操作从机<code>nginx</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 从机全部安装nginx</span><br><span class="line">[root@e23e0da47946 etc]# salt &#39;*&#39; pkg.install &#39;nginx&#39;</span><br><span class="line"># 所有从机卸载nginx</span><br><span class="line">[root@e23e0da47946 etc]# salt &#39;*&#39; pkg.install &#39;nginx&#39;</span><br><span class="line"># 查看所有从机pkg包版本</span><br><span class="line">[root@e23e0da47946 etc]# salt &#39;*&#39; pkg.version &quot;nginx&quot;</span><br><span class="line">slave2:</span><br><span class="line">    1:1.12.2-3.el7</span><br><span class="line">slave1:</span><br><span class="line">    1:1.12.2-3.el7</span><br></pre></td></tr></table></figure>

<h4 id="远程管理服务模块"><a href="#远程管理服务模块" class="headerlink" title="远程管理服务模块"></a><strong>远程管理服务模块</strong></h4><p>管理服务是系统管理员的重要任务，通过<code>salt</code>管理<code>minion</code>服务会很简单，使用<code>service</code>模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动nginx</span><br><span class="line">[root@e23e0da47946 etc]# salt &#39;*&#39; service.start &#39;nginx&#39;</span><br><span class="line">slave1:</span><br><span class="line">    True</span><br><span class="line">slave2:</span><br><span class="line">    False</span><br><span class="line"></span><br><span class="line"># 停止nginx</span><br><span class="line">[root@e23e0da47946 etc]# salt &#39;*&#39; service.stop &quot;nginx&quot;</span><br><span class="line">slave2:</span><br><span class="line">    True</span><br><span class="line">slave1:</span><br><span class="line">    True</span><br><span class="line">    </span><br><span class="line"># 查看nginx状态</span><br><span class="line">[root@e23e0da47946 etc]# salt &#39;*&#39; service.status &quot;nginx&quot;</span><br><span class="line">slave2:</span><br><span class="line">    True</span><br><span class="line">slave1:</span><br><span class="line">    True</span><br></pre></td></tr></table></figure>

<h4 id="out控制salt输出格式"><a href="#out控制salt输出格式" class="headerlink" title="--out控制salt输出格式"></a><code>--out</code>控制<code>salt</code>输出格式</h4><p>分别用<code>json</code>和<code>yaml</code>格式显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master etc]# salt --out&#x3D;json &#39;*&#39; cmd.run_all &#39;hostname&#39;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;slave1&quot;: &#123;</span><br><span class="line">        &quot;pid&quot;: 1545, </span><br><span class="line">        &quot;retcode&quot;: 0, </span><br><span class="line">        &quot;stderr&quot;: &quot;&quot;, </span><br><span class="line">        &quot;stdout&quot;: &quot;8d6a7a1f159f&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;slave2&quot;: &#123;</span><br><span class="line">        &quot;pid&quot;: 1445, </span><br><span class="line">        &quot;retcode&quot;: 0, </span><br><span class="line">        &quot;stderr&quot;: &quot;&quot;, </span><br><span class="line">        &quot;stdout&quot;: &quot;8efbb15347d0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@master etc]# salt --out&#x3D;yaml &#39;*&#39; cmd.run_all &#39;hostname&#39;</span><br><span class="line">slave1:</span><br><span class="line">  pid: 1551</span><br><span class="line">  retcode: 0</span><br><span class="line">  stderr: &#39;&#39;</span><br><span class="line">  stdout: 8d6a7a1f159f</span><br><span class="line">slave2:</span><br><span class="line">  pid: 1451</span><br><span class="line">  retcode: 0</span><br><span class="line">  stderr: &#39;&#39;</span><br><span class="line">  stdout: 8efbb15347d0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关于<code>yaml</code>语言格式参考阮一峰博客：<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDcveWFtbC5odG1s">http://www.ruanyifeng.com/blog/2016/07/yaml.html<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="目标定位字符串（类似正则）"><a href="#目标定位字符串（类似正则）" class="headerlink" title="目标定位字符串（类似正则）"></a>目标定位字符串（类似正则）</h4><p>使用目标定位字符串目的就是当要管理的服务器数量很多，精确定位某一台或有规律的某几台服务器进行操作。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190917163322.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.全局匹配</span><br><span class="line">[root@master ~]$salt &#39;*&#39; test.ping</span><br><span class="line">slave:</span><br><span class="line">    True</span><br><span class="line"></span><br><span class="line">Linux通配符</span><br><span class="line">*               代表任意字符，或空字符串</span><br><span class="line">?               代表一个字符，不可以为空</span><br><span class="line">[a-z] [0-9]     代表任何一个小写字母</span><br><span class="line"></span><br><span class="line">[root@master ~]$salt &#39;slav?&#39; test.ping</span><br><span class="line">slave1:</span><br><span class="line">    True</span><br><span class="line">slave2:</span><br><span class="line">    True  </span><br><span class="line">    </span><br><span class="line">[root@master ~]$salt &#39;[a-z]lave1&#39; test.ping</span><br><span class="line">slave1:</span><br><span class="line">    True  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>saltstack部署</tag>
        <tag>salt-master</tag>
        <tag>salt-minion</tag>
        <tag>salt端口</tag>
        <tag>docker部署salt</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之forms组件</title>
    <url>/f8dd282d.html</url>
    <content><![CDATA[<p>在常规表单开发中，我们常用的做法是手动编写表单至<code>html</code>模板中，请求数据到视图中处理，如果有多个表单就要多次这样操作，视图中也要多次处理验证这些数据，有一个字段要修改就要去所有与表单关联的地方处理，<code>Django</code>为我们提供了<code>Froms</code>组件帮助我们解决这种问题，统一管理统一处理。</p>
<a id="more"></a>

<p>类似模型，<code>Django</code>表单也由各种字段组成。表单可以自定义(<code>forms.Form</code>)，也可以由模型Models创建(<code>forms.ModelForm</code>)。值得注意的是模型里用的是<code>verbose_name</code>来描述一个字段, 而表单用的是<code>label</code>。这两种方式其实只在<code>forms</code>中有区别，视图和模板中使用方式一致，我们这里就先将自定义表单，不同的地方会讲下模型表单。</p>
<p><code>Django</code>的常用做法是在<code>app</code>文件夹下创建一个<code>forms.py</code>，专门存放<code>app</code>中所定义的各种表单，这样方便集中管理表单。如果要使用上述表单，我们可以在视图<code>views.py</code>里把它们像模型一样<code>import</code>进来直接使用。我们这里统一在我们的<code>wechat</code>应用下创建<code>forms.py</code>文件，来存放我们的自定义表单</p>
<h3 id="表单字段类型"><a href="#表单字段类型" class="headerlink" title="表单字段类型"></a>表单字段类型</h3><p>讲到表单之前我们先讲下表单字段的类型：</p>
<p>西面的<code>StudentForm</code>类只有一个字段，字段类型是<code>CharField</code>，对应的<code>HTML</code>元素是<br><code>&lt;input type＝”text ” ...＞</code> ，这里的<code>HTML</code>元素叫作字段的<code>Widget</code>。除此之外， <code>Django</code> 的<code>Form</code> 类<br>还提供了几十种字段类型， 每种类型分别对应不同的<code>HTML</code> 元素，下面对这些类型进行简<br>单介绍。如果需要更详细的表单字段介绍，可以参考<code>Django</code> 官网： <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL2VuLzIuMC9yZWYvZm9ybXMvZmllbGRz">https://docs.djangoproject.com/en/2.0/ref/forms/fields<i class="fa fa-external-link-alt"></i></span> 。</p>
<ol>
<li><code>BooleanField</code><br><code>Widget</code>: <code>Checkboxlnput( &lt; input type＝checkbox ” ...＞）</code> 。<br>空值： <code>False</code> 。<br>标惟值： <code>True</code> 、<code>False</code> 。<br>验证：如果设置了<code>required =True</code> ， 则验证字段值是否为<code>True</code> 。<br>验证点： <code>required</code> 。</li>
<li><code>CharField</code><br><code>Widget</code> : <code>Textlnput( &lt; input type=&quot; text ” ...＞ ）</code> 。<br>空值： <code>empty_value</code> 。<br>标准值： 字符串。<br>验证： 如果设置了<code>max_length</code>, <code>min_length</code> ，则验证字段长度是再符合要求，否则不验证。<br>验证点： <code>required</code> , <code>max_length</code> , <code>min_length</code> 。</li>
<li><code>ChoiceField</code><br><code>Widget</code>: <code>Select( &lt;select&gt;&lt;option ...&gt; ... &lt;/select＞）</code> 。<br>空值：””。<br>标准值： 字符串。<br>验证： 验证字段值是否存在。<br>验证点： <code>required</code>, <code>invalid_choice</code></li>
<li><code>DateField</code><br><code>Widget</code>: <code>Datelnput( &lt; input type=&quot;text” ...＞）</code> 。<br>空值： <code>None</code> 。<br>标准值： <code>Python</code> <code>datetime.date</code>巳对象。<br>验证：验证字段值是否是正确的时间格式字符串、<code>datetime .date</code> 对象、<code>datetime.datetime</code><br>对象。<br>验证点： <code>required</code>, <code>invalid</code> 。</li>
<li><code>DateTimeField</code><br><code>Widget</code>: <code>Datelnput( &lt; input type=&quot; text&quot; ... ＞ ）</code> 。<br>空值： <code>None</code><br>标准值： <code>Python</code> <code>datetime. datetime</code>对象。<br>验证： 验证字段值是否是正确的时间格式字符串、<code>datetime.date</code> 对象、<code>datetime.datetime</code><br>对象。<br>验证点： <code>required</code> , <code>invalid</code> 。</li>
<li><code>DecimalField</code><br><code>Widget</code>：当<code>Field.localize=False</code>时对应<code>Numberlnput(&lt;input type＝”number”...&gt;)</code>，否则对<br>应<code>Textlnput(&lt;inputtype=&quot;text” ...&gt;)</code>。<br>空值：<code>None</code>。<br>标准值：<code>Python decimal</code>对象。<br>验证：验证字段值是否是数值类型。<br>验证点：<code>required</code>,<code>invalid</code>,<code>max_value</code>,<code>min_value</code>,<code>max_digits</code>,<code>max_decimal_places</code>,<code>max_whole_digits</code>。</li>
<li><code>FileField</code><br><code>Widget</code>:<code>ClearableFilelnput(&lt;input type=&quot;file”...&gt;)</code>。<br>空值：<code>None</code>。<br>标准值：包含文件内容与文件名的<code>UploadedFile</code>对象。<br>验证：空文件或者没有选择文件。<br>验证点：<code>required</code>,<code>invalid</code>,<code>missing</code>,<code>empty</code>,<code>max_length</code>。</li>
<li><code>FilePathField</code><br><code>Widget</code>:<code>Select(&lt;select&gt;&lt;option ...&gt; ...&lt;/select&gt;)</code>。<br>空值：<code>None</code>。<br>标准值：字符串。<br>验证：选中的选项是否存在于下拉列表中。<br>验证点：<code>required</code>,<code>invalid_choice</code>。</li>
<li><code>lmageField</code><br><code>Widget</code>:<code>ClearableFilelnput(&lt;input type＝&quot;file” ...&gt;)</code>。<br>空值：<code>None</code>。<br>标准值：包含文件内容与文件名的<code>UploadedFile</code>对象。<br>验证：空文件或者没有选择文件。<br>验证点：<code>required</code>,<code>invalid</code>,<code>missiing</code>，<code>empty</code>,<code>invalid_image</code>。</li>
<li><code>lntegerField</code><br><code>Widget</code>：当<code>Field.localize=False</code>时对应<code>Numberlnput(&lt;inputtype=&quot;number” ...&gt;)</code>，否则对<br>应<code>Textlnput(&lt;inputtype＝”text” ...&gt;)</code>。<br>空值：<code>None</code>。<br>标准值： <code>Python integer</code> 对象。<br>验证：验证宇段值是否是一个整数。<br>验证点： <code>required</code>, <code>invalid</code>, <code>max_value</code>, <code>min_value</code> 。</li>
<li><code>MultipleChoiceField</code><br><code>Widget</code>: <code>SelectMultiple(&lt;select multiple=&quot;multiple”&gt; ... &lt;/select&gt;)</code> 。<br>空值： <code>[]</code>（空列表）。<br>标准值：一组字符串。<br>验证：所有选中值存在于下拉列表中。<br>验证点： <code>required</code>, <code>invalid_ choice</code>, <code>invalid_list</code> 。</li>
</ol>
<h3 id="表单通用属性"><a href="#表单通用属性" class="headerlink" title="表单通用属性"></a>表单通用属性</h3><ol>
<li><code>required</code><br>默认情况下，所有的表单字段都是必填字段，这样如果提交表单时没有为字段赋值，则<br>会抛出<code>ValidationError</code> 异常。<br>对于非必填宇段可以设置<code>required=False</code> 避免验证错误，例如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">forms.CharField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p><code>label</code><br>为表单字段指定一个<code>label</code> 元素用于显示字段信息，如上面<code>your_name</code>字段将会额外显<br>示一个<code>label</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;your name&quot;&gt;Your name : &lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>

<p><code>initial</code><br>为宇段设置初始值。</p>
<p><code>help_ text</code><br>为字段添加帮助性文字。</p>
<p><code>error_messages</code><br>重写字段的默认错误提示信息， <code>error_messages</code> 是一个字典类型。<br>例如设置当<code>CharField</code> 的<code>required</code>验证失败时显示‘请输入你的名字’：</p>
<ol>
<li><pre><code class="python">name= forms.CharField(error_messages=&#123;&#39;required&#39;:&#39;请输入你的名字可&#39;&#125;)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. &#96;localize&#96;</span><br><span class="line">   设置表单宇段是否启用本地化。</span><br><span class="line"></span><br><span class="line">3. &#96;disabled&#96;</span><br><span class="line">   当设置&#96;disabled＝True&#96; 时，使用&#96;HTML disabled&#96; 属性禁用字段。</span><br><span class="line"></span><br><span class="line">### 自定义表单</span><br><span class="line"></span><br><span class="line">#### 编写自定义表单</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">from django import forms</span><br><span class="line">from .models import Student</span><br><span class="line"></span><br><span class="line">CLASSES_CHOICES &#x3D; (&#39;软件二班&#39;, &#39;图像一班&#39;, &#39;师范一班&#39;)</span><br><span class="line">class StudentForm(forms.Form):</span><br><span class="line">    name &#x3D; forms.CharField(min_length&#x3D;4, required&#x3D;True, label&#x3D;&#39;姓名&#39;)</span><br><span class="line">    age &#x3D; forms.IntegerField()</span><br><span class="line">    score &#x3D; forms.DecimalField()</span><br><span class="line">    classes &#x3D; forms.ChoiceField(choices&#x3D;CLASSES_CHOICES)</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
<h4 id="表单实例化"><a href="#表单实例化" class="headerlink" title="表单实例化"></a>表单实例化</h4><p>下面方法可以实例化一个空表单，但里面没有任何数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">form &#x3D; StudentForm()</span><br></pre></td></tr></table></figure>

<p>用户提交的数据可以通过以下方法与表单结合，生成与数据结合过的表单(<code>Bound forms</code>)。<code>Django</code>只能对<code>Bound forms</code>进行验证。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">form &#x3D; StudentForm(data&#x3D;request.POST, files&#x3D;request.FILES)</span><br></pre></td></tr></table></figure>

<p>我们暂时的视图代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line">from .forms import StudentForm</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    # 实例化自定义表单</span><br><span class="line">    form &#x3D; StudentForm()</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        form &#x3D; StudentForm(request.POST)</span><br><span class="line">    # form传给前端做渲染</span><br><span class="line">    return render(request, &#39;index.html&#39;, &#123;&#39;form&#39;:form&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="模板使用表单"><a href="#模板使用表单" class="headerlink" title="模板使用表单"></a>模板使用表单</h4><p>模板文件中我们可以通过<code>,</code> <code>和</code>中渲染表单。如果使用<code>则默认等于使用了</code>。</p>
<h5 id="或"><a href="#或" class="headerlink" title=" 或"></a><code> 或</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;layout.html&#39; %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;uk-container&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&#123;% url &#39;wechat:index&#39; %&#125;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &#123;&#123; form &#125;&#125;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>渲染后的页面为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html lang&#x3D;&quot;zh&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;uikit@3.2.2&#x2F;dist&#x2F;css&#x2F;uikit.min.css&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;div class&#x3D;&quot;uk-container&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&#x2F;wechat&#x2F;index&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;csrfmiddlewaretoken&quot; value&#x3D;&quot;j4mMZkPNIjVGEwr4wc8u1iywfuIMFOu300iU1gmOjP8FJdJmMSiNHhxxPzPP6kKZ&quot;&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;&lt;label for&#x3D;&quot;id_name&quot;&gt;姓名:&lt;&#x2F;label&gt;&lt;&#x2F;th&gt;&lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; minlength&#x3D;&quot;4&quot; required id&#x3D;&quot;id_name&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;&lt;label for&#x3D;&quot;id_age&quot;&gt;Age:&lt;&#x2F;label&gt;&lt;&#x2F;th&gt;&lt;td&gt;&lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;age&quot; required id&#x3D;&quot;id_age&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;&lt;label for&#x3D;&quot;id_score&quot;&gt;Score:&lt;&#x2F;label&gt;&lt;&#x2F;th&gt;&lt;td&gt;&lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;score&quot; step&#x3D;&quot;any&quot; required id&#x3D;&quot;id_score&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;&lt;label for&#x3D;&quot;id_classes&quot;&gt;Classes:&lt;&#x2F;label&gt;&lt;&#x2F;th&gt;&lt;td&gt;&lt;select name&#x3D;&quot;classes&quot; id&#x3D;&quot;id_classes&quot;&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;软件二班&quot;&gt;软件二班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;option value&#x3D;&quot;图像一班&quot;&gt;图像一班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;option value&#x3D;&quot;师范一班&quot;&gt;师范一班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;select&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- UIkit JS --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;uikit@3.2.2&#x2F;dist&#x2F;js&#x2F;uikit.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;uikit@3.2.2&#x2F;dist&#x2F;js&#x2F;uikit-icons.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="使用-渲染"><a href="#使用-渲染" class="headerlink" title="使用``渲染"></a>使用``渲染</h5><p>表单部分生成的结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;p&gt;&lt;label for&#x3D;&quot;id_name&quot;&gt;姓名:&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; minlength&#x3D;&quot;4&quot; required id&#x3D;&quot;id_name&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;label for&#x3D;&quot;id_age&quot;&gt;Age:&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;age&quot; required id&#x3D;&quot;id_age&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;label for&#x3D;&quot;id_score&quot;&gt;Score:&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;score&quot; step&#x3D;&quot;any&quot; required id&#x3D;&quot;id_score&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;label for&#x3D;&quot;id_classes&quot;&gt;Classes:&lt;&#x2F;label&gt; &lt;select name&#x3D;&quot;classes&quot; id&#x3D;&quot;id_classes&quot;&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;软件二班&quot;&gt;软件二班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;option value&#x3D;&quot;图像一班&quot;&gt;图像一班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;option value&#x3D;&quot;师范一班&quot;&gt;师范一班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;select&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h5 id="使用-渲染-1"><a href="#使用-渲染-1" class="headerlink" title="使用``渲染"></a>使用``渲染</h5><p>表单部分生成的结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;label for&#x3D;&quot;id_name&quot;&gt;姓名:&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; minlength&#x3D;&quot;4&quot; required id&#x3D;&quot;id_name&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;li&gt;&lt;label for&#x3D;&quot;id_age&quot;&gt;Age:&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;age&quot; required id&#x3D;&quot;id_age&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;li&gt;&lt;label for&#x3D;&quot;id_score&quot;&gt;Score:&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;score&quot; step&#x3D;&quot;any&quot; required id&#x3D;&quot;id_score&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;li&gt;&lt;label for&#x3D;&quot;id_classes&quot;&gt;Classes:&lt;&#x2F;label&gt; &lt;select name&#x3D;&quot;classes&quot; id&#x3D;&quot;id_classes&quot;&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;软件二班&quot;&gt;软件二班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;option value&#x3D;&quot;图像一班&quot;&gt;图像一班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;option value&#x3D;&quot;师范一班&quot;&gt;师范一班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;select&gt;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure>

<p>如果你想详细控制每个<code>field</code>的格式，你可以采取以下方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;layout.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;uk-container&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&#123;% url &#39;wechat:index&#39; %&#125;&quot; method&#x3D;&quot;post&quot; novalidate&gt;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &#123;% for field in form %&#125;</span><br><span class="line">                &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;&#123;&#123; field.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                        &#123;&#123; field &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                    &#123;% if field.help_text %&#125;</span><br><span class="line">                        &lt;p class&#x3D;&quot;help&quot;&gt;&#123;&#123; field.help_text|safe &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    &#123;&#123; field.errors &#125;&#125;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;button class&#x3D;&quot;uk-button uk-button-primary &quot; type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>发起<code>post</code>请求后渲染出的表单部分为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;姓名&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; minlength&#x3D;&quot;4&quot; required id&#x3D;&quot;id_name&quot;&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                    </span><br><span class="line">                    &lt;ul class&#x3D;&quot;errorlist&quot;&gt;&lt;li&gt;这个字段是必填项。&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;Age&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;age&quot; value&#x3D;&quot;23&quot; required id&#x3D;&quot;id_age&quot;&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;Score&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;score&quot; step&#x3D;&quot;any&quot; required id&#x3D;&quot;id_score&quot;&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                    </span><br><span class="line">                    &lt;ul class&#x3D;&quot;errorlist&quot;&gt;&lt;li&gt;这个字段是必填项。&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;Classes&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                        &lt;select name&#x3D;&quot;classes&quot; id&#x3D;&quot;id_classes&quot;&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;软件二班&quot; selected&gt;软件二班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;option value&#x3D;&quot;图像一班&quot;&gt;图像一班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;option value&#x3D;&quot;师范一班&quot;&gt;师范一班&lt;&#x2F;option&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>我们通常将自定义表单写入到<code>forms.py</code>中，当然你也可以不用新建<code>forms.py</code>而直接在<code>html</code>模板里写表单，但我并不建议这么做。用<code>forms.py</code>的好处显而易见:</p>
<ul>
<li>所有的表单在一个文件里，非常便于后期维护，比如增添或修订字段。</li>
<li><code>forms.py</code>可通过<code>clean</code>方法自定义表单验证，非常便捷（见后文）。</li>
</ul>
<p>继续刚才我们的视图，我们对用户提交的数据进行验证。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line">from .forms import StudentForm</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    # 实例化自定义表单</span><br><span class="line">    form &#x3D; StudentForm()</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        form &#x3D; StudentForm(request.POST)</span><br><span class="line">        if form.is_valid():</span><br><span class="line">            name &#x3D; form.cleaned_data[&#39;name&#39;]</span><br><span class="line">            age &#x3D; form.cleaned_data[&#39;age&#39;]</span><br><span class="line">            score &#x3D; form.cleaned_data[&#39;score&#39;]</span><br><span class="line">            classes &#x3D; form.cleaned_data[&#39;classes&#39;]</span><br><span class="line">            stu_obj &#x3D; Student.objects.create(name&#x3D;name, age&#x3D;age, score&#x3D;score, classes&#x3D;classes)</span><br><span class="line">            return HttpResponse(&#39;学生《%s》创建成功&#39; % name)</span><br><span class="line">    # form传给前端做渲染</span><br><span class="line">    return render(request, &#39;index.html&#39;, &#123;&#39;form&#39;:form&#125;)</span><br></pre></td></tr></table></figure>

<p>我们来理下<code>StudentForm</code>整个流程:</p>
<ul>
<li>当用户通过<code>POST</code>方法提交表单，我们将提交的数据与<code>StudentForm</code>结合，然后验证表单<code>StudentForm</code>的数据是否有效。</li>
<li>如果表单数据有效，我们创建<code>student</code>对象。用户通过一张表单提交数据。</li>
<li>如果添加学员成功，我们通过<code>HttpResponse</code>返回页面学生添加成功提示</li>
<li>如果用户没有提交表单或不是通过POST方法提交表单，我们转到添加页面，生成一张空的<code>StudentForm</code></li>
</ul>
<h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><p>每个<code>forms</code>类可以通过<code>clean</code>方法自定义表单验证。如果你只想对某些字段进行验证，你可以通过<code>clean_字段名</code>方式自定义表单验证。如果用户提交的数据未通过验证，会返回<code>ValidationError</code>，并呈现给用户。如果用户提交的数据有效<code>form.is_valid()</code>，则会将数据存储在<code>cleaned_data</code>里。</p>
<p>在上述添加学员的案例里，我们在<code>StudentForm``通过``clean</code>方法添加了姓名验证，年龄验证和分数验证。代码如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import forms</span><br><span class="line">from .models import Student</span><br><span class="line"></span><br><span class="line">CLASSES_CHOICES &#x3D; (</span><br><span class="line">                   (&#39;软件二班&#39;, &#39;软件二班&#39;),</span><br><span class="line">                   (&#39;图像一班&#39;, &#39;图像一班&#39;),</span><br><span class="line">                   (&#39;师范一班&#39;, &#39;师范一班&#39;)</span><br><span class="line">                   )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class StudentForm(forms.Form):</span><br><span class="line">    name &#x3D; forms.CharField(label&#x3D;&#39;姓名&#39;)</span><br><span class="line">    age &#x3D; forms.IntegerField()</span><br><span class="line">    score &#x3D; forms.DecimalField()</span><br><span class="line">    classes &#x3D; forms.ChoiceField(choices&#x3D;CLASSES_CHOICES)</span><br><span class="line">    def clean_name(self):</span><br><span class="line">        name &#x3D; self.cleaned_data.get(&#39;name&#39;)</span><br><span class="line"></span><br><span class="line">        # 判断姓名长度及是否存在</span><br><span class="line">        if len(name)&lt;2:</span><br><span class="line">            raise forms.ValidationError(&#39;你的名字也太短了，蒙我的吧！&#39;)</span><br><span class="line">        elif len(name)&gt;10:</span><br><span class="line">            raise forms.ValidationError(&#39;这么长的名字？滚犊子！&#39;)</span><br><span class="line">        else:</span><br><span class="line">            stu_obj &#x3D; Student.objects.filter(name__exact&#x3D;name)</span><br><span class="line">            if len(stu_obj)&gt;0:</span><br><span class="line">                raise forms.ValidationError(&#39;这学生报过名了，你走开！&#39;)</span><br><span class="line">        return name</span><br><span class="line"></span><br><span class="line">    def clean_age(self):</span><br><span class="line">        age &#x3D; self.cleaned_data.get(&#39;age&#39;)</span><br><span class="line"></span><br><span class="line">        if age&lt;1 or age&gt;120:</span><br><span class="line">            raise  forms.ValidationError(&#39;你这年龄绝了，拒绝！&#39;)</span><br><span class="line">        return age</span><br><span class="line">    def clean_score(self):</span><br><span class="line">        score &#x3D; self.cleaned_data.get(&#39;score&#39;)</span><br><span class="line"></span><br><span class="line">        if score&lt;0 or score&gt;120:</span><br><span class="line">            raise forms.ValidationError(&#39;啥情况啊，分页能飞啊！&#39;)</span><br><span class="line">        return score</span><br></pre></td></tr></table></figure>

<h4 id="自定义widget"><a href="#自定义widget" class="headerlink" title="自定义widget"></a>自定义<code>widget</code></h4><p><code>Django forms</code>的每个字段你都可以选择你喜欢的输入<code>widget</code>，比如多选，复选框。你还可以定义每个<code>widget</code>的<code>css</code>属性。如果你不指定，<code>Django</code>会使用默认的<code>widget</code>，有时比较丑。</p>
<p>比如下面这段代码定义了表单姓名字段的输入控件为<code>Textarea</code>，还指定了其样式<code>css</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class StudentForm(forms.Form):</span><br><span class="line">    name &#x3D; forms.CharField(label&#x3D;&#39;姓名&#39;, widget&#x3D;forms.Textarea(</span><br><span class="line">        attrs&#x3D;&#123;</span><br><span class="line">            &#39;class&#39;:&#39;uk-textarea&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    ))</span><br></pre></td></tr></table></figure>

<p>模板渲染出来的结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;textarea name&#x3D;&quot;name&quot; cols&#x3D;&quot;40&quot; rows&#x3D;&quot;10&quot; class&#x3D;&quot;uk-textarea&quot; required id&#x3D;&quot;id_name&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>设置<code>widget</code>可以是你的表单大大美化，方便用户选择输入。比如下面案例里对年份使用了<code>SelectDateWidget</code>，颜色则使用了复选框<code>CheckboxSelectMultiple</code>。单选可以用<code>RadioSelect</code>和<code>Select</code>。常见文本输入可以用<code>TextInput</code>和<code>TextArea</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BIRTH_YEAR_CHOICES &#x3D; (&#39;1980&#39;, &#39;1981&#39;, &#39;1982&#39;)</span><br><span class="line">COLORS_CHOICES &#x3D; (</span><br><span class="line">    (&#39;blue&#39;, &#39;Blue&#39;),</span><br><span class="line">    (&#39;green&#39;, &#39;Green&#39;),</span><br><span class="line">    (&#39;black&#39;, &#39;Black&#39;),</span><br><span class="line">)</span><br><span class="line">GENDER_CHOICES &#x3D; (</span><br><span class="line">    (&#39;male&#39;, &#39;男&#39;),</span><br><span class="line">    (&#39;female&#39;, &#39;女&#39;)</span><br><span class="line">)</span><br><span class="line">class SimpleForm(forms.Form):</span><br><span class="line">    birth_year &#x3D; forms.DateField(widget&#x3D;forms.SelectDateWidget(years&#x3D;BIRTH_YEAR_CHOICES))</span><br><span class="line">    favorite_colors &#x3D; forms.MultipleChoiceField(</span><br><span class="line">        required&#x3D;False,</span><br><span class="line">        widget&#x3D;forms.CheckboxSelectMultiple(</span><br><span class="line">            attrs&#x3D;&#123;</span><br><span class="line">                &#39;class&#39;:&#39;uk-checkbox&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        choices&#x3D;COLORS_CHOICES,</span><br><span class="line">    )</span><br><span class="line">    gender &#x3D; forms.CharField(widget&#x3D;forms.RadioSelect(</span><br><span class="line">        choices&#x3D;GENDER_CHOICES,</span><br><span class="line">        attrs&#x3D;&#123;</span><br><span class="line">            &#39;class&#39;: &#39;uk-radio&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    ))</span><br></pre></td></tr></table></figure>

<p>渲染结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;Birth year&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                        &lt;select name&#x3D;&quot;birth_year_year&quot; required id&#x3D;&quot;id_birth_year_year&quot;&gt;&lt;option value&#x3D;&quot;1980&quot;&gt;1980&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;1981&quot;&gt;1981&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;1982&quot;&gt;1982&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;select name&#x3D;&quot;birth_year_month&quot; required id&#x3D;&quot;id_birth_year_month&quot;&gt;&lt;option value&#x3D;&quot;1&quot;&gt;一月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;2&quot;&gt;二月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;3&quot;&gt;三月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;4&quot;&gt;四月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;5&quot;&gt;五月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;6&quot;&gt;六月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;7&quot;&gt;七月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;8&quot;&gt;八月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;9&quot;&gt;九月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;10&quot;&gt;十月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;11&quot;&gt;十一月&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;12&quot;&gt;十二月&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;select name&#x3D;&quot;birth_year_day&quot; required id&#x3D;&quot;id_birth_year_day&quot;&gt;&lt;option value&#x3D;&quot;1&quot;&gt;1&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;2&quot;&gt;2&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;3&quot;&gt;3&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;4&quot;&gt;4&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;5&quot;&gt;5&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;6&quot;&gt;6&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;7&quot;&gt;7&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;8&quot;&gt;8&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;9&quot;&gt;9&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;10&quot;&gt;10&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;11&quot;&gt;11&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;12&quot;&gt;12&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;13&quot;&gt;13&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;14&quot;&gt;14&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;15&quot;&gt;15&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;16&quot;&gt;16&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;17&quot;&gt;17&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;18&quot;&gt;18&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;19&quot;&gt;19&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;20&quot;&gt;20&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;21&quot;&gt;21&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;22&quot;&gt;22&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;23&quot;&gt;23&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;24&quot;&gt;24&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;25&quot;&gt;25&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;26&quot;&gt;26&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;27&quot;&gt;27&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;28&quot;&gt;28&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;29&quot;&gt;29&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;30&quot;&gt;30&lt;&#x2F;option&gt;&lt;option value&#x3D;&quot;31&quot;&gt;31&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;Favorite colors&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                        &lt;ul id&#x3D;&quot;id_favorite_colors&quot; class&#x3D;&quot;uk-checkbox&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;label for&#x3D;&quot;id_favorite_colors_0&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;favorite_colors&quot; value&#x3D;&quot;blue&quot; class&#x3D;&quot;uk-checkbox&quot; id&#x3D;&quot;id_favorite_colors_0&quot;&gt;</span><br><span class="line"> Blue&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label for&#x3D;&quot;id_favorite_colors_1&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;favorite_colors&quot; value&#x3D;&quot;green&quot; class&#x3D;&quot;uk-checkbox&quot; id&#x3D;&quot;id_favorite_colors_1&quot;&gt;</span><br><span class="line"> Green&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label for&#x3D;&quot;id_favorite_colors_2&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;favorite_colors&quot; value&#x3D;&quot;black&quot; class&#x3D;&quot;uk-checkbox&quot; id&#x3D;&quot;id_favorite_colors_2&quot;&gt;</span><br><span class="line"> Black&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            </span><br><span class="line">                &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                    &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;Gender&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                        &lt;ul id&#x3D;&quot;id_gender&quot; class&#x3D;&quot;uk-radio&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;label for&#x3D;&quot;id_gender_0&quot;&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;male&quot; class&#x3D;&quot;uk-radio&quot; required id&#x3D;&quot;id_gender_0&quot;&gt;</span><br><span class="line"> 男&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label for&#x3D;&quot;id_gender_1&quot;&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;female&quot; class&#x3D;&quot;uk-radio&quot; required id&#x3D;&quot;id_gender_1&quot;&gt;</span><br><span class="line"> 女&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="自定义属性和错误信息"><a href="#自定义属性和错误信息" class="headerlink" title="自定义属性和错误信息"></a>自定义属性和错误信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line">class LoginForm(forms.Form):  </span><br><span class="line">    username &#x3D; forms.CharField(</span><br><span class="line">        required&#x3D;True,</span><br><span class="line">        max_length&#x3D;20,</span><br><span class="line">        min_length&#x3D;6,</span><br><span class="line">        error_messages&#x3D;&#123;</span><br><span class="line">            &#39;required&#39;: &#39;用户名不能为空&#39;,</span><br><span class="line">            &#39;max_length&#39;: &#39;用户名长度不得超过20个字符&#39;,</span><br><span class="line">            &#39;min_length&#39;: &#39;用户名长度不得少于6个字符&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    password &#x3D; forms.CharField(</span><br><span class="line">        required&#x3D;True,</span><br><span class="line">        max_length&#x3D;20,</span><br><span class="line">        min_length&#x3D;6,</span><br><span class="line">        error_messages&#x3D;&#123;</span><br><span class="line">            &#39;required&#39;: &#39;密码不能为空&#39;,</span><br><span class="line">            &#39;max_length&#39;: &#39;密码长度不得超过20个字符&#39;,</span><br><span class="line">            &#39;min_length&#39;: &#39;密码长度不得少于6个字符&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<h4 id="表单数据初始化"><a href="#表单数据初始化" class="headerlink" title="表单数据初始化**"></a>表单数据初始化**</h4><p>有时我们需要对表单设置一些初始数据，我们可以通过initial方法，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(request):</span><br><span class="line">    # 实例化自定义表单</span><br><span class="line">    form &#x3D; StudentForm(initial&#x3D;&#123;</span><br><span class="line">        &#39;name&#39;:&#39;默认叫张三吧&#39;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>渲染结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;textarea name&#x3D;&quot;name&quot; cols&#x3D;&quot;40&quot; rows&#x3D;&quot;10&quot; class&#x3D;&quot;uk-textarea&quot; required id&#x3D;&quot;id_name&quot;&gt;</span><br><span class="line">默认叫张三吧&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure>

<h3 id="模型表单"><a href="#模型表单" class="headerlink" title="模型表单"></a>模型表单</h3><p>自定义表单时我们简单提了一下模型表单，跟自定义表单最大的区别就是定义表单的部分，视图及模板没有任何改变。</p>
<h4 id="定义模型表单"><a href="#定义模型表单" class="headerlink" title="定义模型表单"></a>定义模型表单</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import forms</span><br><span class="line">from .models import Student</span><br><span class="line">class StudentForm(forms.ModelForm):</span><br><span class="line">    class Meta:</span><br><span class="line">        # 绑定的模型</span><br><span class="line">        model &#x3D; Student</span><br><span class="line">        # 要显示的字段</span><br><span class="line">        fields &#x3D; (&#39;name&#39;, &#39;age&#39;, &#39;score&#39;, &#39;classes&#39;)</span><br><span class="line">        widgets &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:forms.TextInput(attrs&#x3D;&#123;</span><br><span class="line">                &#39;class&#39;:&#39;你好&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        error_messages &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:&#123;</span><br><span class="line">                &#39;max_length&#39;:&#39;太长了&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>视图和模板我们不做任何改变，正常渲染结果</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200424143202.png" alt="img"></p>
<h4 id="表单数据初始化-1"><a href="#表单数据初始化-1" class="headerlink" title="表单数据初始化"></a>表单数据初始化</h4><p>除了跟自定义表单中视图示例初始化使用<code>initial</code>外，我们还可以初始化一个学员对象，比如我们编辑的时候就经常会显示原来数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line">from .forms import StudentForm</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    stu_obj &#x3D; Student.objects.first()</span><br><span class="line">    # 实例化自定义表单</span><br><span class="line">    form &#x3D; StudentForm(instance&#x3D;stu_obj)</span><br><span class="line">    return render(request, &#39;index.html&#39;, &#123;&#39;form&#39;:form&#125;)</span><br></pre></td></tr></table></figure>

<p>模板渲染结果：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200424143834.png" alt="img"></p>
<h3 id="FormSet"><a href="#FormSet" class="headerlink" title="FormSet"></a><code>FormSet</code></h3><p><code>Formset</code>(表单集)是多个表单的集合。<code>Formset</code>在<code>Web</code>开发中应用很普遍，它可以让用户在同一个页面上提交多张表单，一键添加多个数据，比如一个页面上添加多个学员。</p>
<h4 id="Formset的分类"><a href="#Formset的分类" class="headerlink" title="Formset的分类"></a><strong><code>Formset</code>的分类</strong></h4><p><code>Django</code>针对不同的<code>formset</code>提供了3种方法: <code>formset_factory</code>, <code>modelformset_factory</code>和<code>inlineformset_factory</code>。我们接下来分别看下如何使用它们。</p>
<h5 id="formset-factory"><a href="#formset-factory" class="headerlink" title="formset_factory"></a><code>formset_factory</code></h5><p>对于继承<code>forms.Form</code>的自定义表单，我们可以使用<code>formset_factory</code>。我们可以通过设置<code>extra</code>和<code>max_num</code>属性来确定我们想要展示的表单数量。注意: <code>max_num</code>优先级高于<code>extra</code>。比如下例中，我们想要显示3个空表单(extra=3)，但最后只会显示2个空表单，因为<code>max_num=2</code>。</p>
<p><code>forms.py</code>自定义表单文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import forms</span><br><span class="line">from .models import Student</span><br><span class="line"></span><br><span class="line">class StudentForm(forms.ModelForm):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Student</span><br><span class="line">        fields &#x3D; (&#39;name&#39;,)</span><br><span class="line">        widgets &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:forms.TextInput(attrs&#x3D;&#123;</span><br><span class="line">                &#39;class&#39;:&#39;你好&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        error_messages &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:&#123;</span><br><span class="line">                &#39;max_length&#39;:&#39;太长了&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"># extra: 额外的空表单数量</span><br><span class="line"># max_num: 包含表单数量（不含空表单)</span><br><span class="line">StudentFormSet &#x3D; forms.formset_factory(</span><br><span class="line">    form&#x3D;StudentForm,</span><br><span class="line">    extra&#x3D;3,</span><br><span class="line">    max_num&#x3D;2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>view视图文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line">from .models import Student</span><br><span class="line">from .forms import StudentFormSet</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    formset &#x3D; StudentFormSet()</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        formset &#x3D; StudentFormSet(request.POST)</span><br><span class="line">        # 判断表单验证是否通过</span><br><span class="line">        if formset.is_valid():</span><br><span class="line">            # 循环每个form数据</span><br><span class="line">            for form_data in formset.cleaned_data:</span><br><span class="line">                # 依次打散添加至数据库</span><br><span class="line">                Student.objects.create(**form_data)</span><br><span class="line">            return HttpResponse(&#39;都添加成功了&#39;)</span><br><span class="line">        return render(request, &#39;index.html&#39;, &#123;&#39;formset&#39;:formset&#125;)</span><br><span class="line">    # formset传给前端做渲染</span><br><span class="line">    return render(request, &#39;index.html&#39;, &#123;&#39;formset&#39;:formset&#125;)</span><br></pre></td></tr></table></figure>

<p>template模板文件：</p>
<p>方式一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;layout.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;uk-container&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&#123;% url &#39;wechat:index&#39; %&#125;&quot; method&#x3D;&quot;post&quot; novalidate&gt;</span><br><span class="line">            &#123;&#123; formset.management_form &#125;&#125;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &#123;&#123; formset &#125;&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;uk-button uk-button-primary &quot; type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;layout.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;uk-container&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&#123;% url &#39;wechat:index&#39; %&#125;&quot; method&#x3D;&quot;post&quot; novalidate&gt;</span><br><span class="line">            &#123;&#123; formset.management_form &#125;&#125;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &#123;% for form in formset %&#125;</span><br><span class="line">               &#123;&#123; form &#125;&#125;</span><br><span class="line">                &lt;hr&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;uk-button uk-button-primary &quot; type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>方式三：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;layout.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;uk-container&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&#123;% url &#39;wechat:index&#39; %&#125;&quot; method&#x3D;&quot;post&quot; novalidate&gt;</span><br><span class="line">            &#123;&#123; formset.management_form &#125;&#125;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &#123;% for form in formset %&#125;</span><br><span class="line"></span><br><span class="line">                &#123;% for field in form %&#125;</span><br><span class="line">                    &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                        &lt;label class&#x3D;&quot;uk-form-label&quot; for&#x3D;&quot;form-horizontal-text&quot;&gt;&#123;&#123; field.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;uk-form-controls&quot;&gt;</span><br><span class="line">                            &#123;&#123; field &#125;&#125;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &#123;% if field.help_text %&#125;</span><br><span class="line">                            &lt;p class&#x3D;&quot;help&quot;&gt;&#123;&#123; field.help_text|safe &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">                        &#123;% endif %&#125;</span><br><span class="line">                        &#123;&#123; field.errors &#125;&#125;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                &lt;hr&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;uk-button uk-button-primary &quot; type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>提交后的渲染结果：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200426104924.png" alt="img"></p>
<h5 id="modelformset-factory"><a href="#modelformset-factory" class="headerlink" title="modelformset_factory"></a><code>modelformset_factory</code></h5><p><code>Formset</code>也可以直接由模型<code>model</code>创建，这时你需要使用<code>modelformset_factory</code>。你可以指定需要显示的字段和表单数量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import forms</span><br><span class="line">from .models import Student</span><br><span class="line"></span><br><span class="line">StudentFormSet &#x3D; forms.modelformset_factory(</span><br><span class="line">    model&#x3D;Student,</span><br><span class="line">    fields&#x3D;(&#39;name&#39;, &#39;age&#39;),</span><br><span class="line">    extra&#x3D;3,</span><br><span class="line">    max_num&#x3D;2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>当然上面方法并不推荐，因为对单个表单添加验证方法非常不方便。我更喜欢的方式先创建自定义的<code>ModelForm</code>，添加单个表单验证，然后再利用<code>modelformset_factory</code>创建<code>formset</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import forms</span><br><span class="line">from .models import Student</span><br><span class="line"></span><br><span class="line">class StudentForm(forms.ModelForm):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Student</span><br><span class="line">        fields &#x3D; (&#39;name&#39;,)</span><br><span class="line">        widgets &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:forms.TextInput(attrs&#x3D;&#123;</span><br><span class="line">                &#39;class&#39;:&#39;你好&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        error_messages &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:&#123;</span><br><span class="line">                &#39;max_length&#39;:&#39;太长了&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"># extra: 额外的空表单数量</span><br><span class="line"># max_num: 包含表单数量（不含空表单)</span><br><span class="line">StudentFormSet &#x3D; forms.modelformset_factory(</span><br><span class="line">    model&#x3D;Student,</span><br><span class="line">  	form &#x3D; StudentForm,</span><br><span class="line">    extra&#x3D;3,</span><br><span class="line">    max_num&#x3D;2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="inlineformset-factory"><a href="#inlineformset-factory" class="headerlink" title="inlineformset_factory"></a><code>inlineformset_factory</code></h5><p>试想我们有如下<code>province</code>模型，<code>province</code>与<code>city</code>是单对多的关系。一般的<code>formset</code>只允许我们一次性提交多个<code>province</code>或多个<code>city</code>。但如果我们希望同一个页面上添加一个省份(<code>province</code>)和多个城市(<code>city</code>)，这时我们就需要用使用<code>inlineformset</code>了。</p>
<h6 id="模型models-py"><a href="#模型models-py" class="headerlink" title="模型models.py"></a>模型<code>models.py</code></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Province(models.Model):</span><br><span class="line">    id &#x3D; models.AutoField(primary_key &#x3D; True)</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;10, verbose_name&#x3D;&#39;省份&#39;)</span><br><span class="line">    desc &#x3D; models.CharField(max_length&#x3D;255, verbose_name&#x3D;&#39;介绍&#39;)</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &#39;省份&#39;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line">class City(models.Model):</span><br><span class="line">    id &#x3D; models.AutoField(primary_key &#x3D; True)</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;20, verbose_name&#x3D;&#39;城市&#39;)</span><br><span class="line">    desc &#x3D; models.CharField(max_length&#x3D;255, verbose_name&#x3D;&#39;介绍&#39;)</span><br><span class="line">    province &#x3D; models.ForeignKey(to&#x3D;Province, verbose_name&#x3D;&#39;省份&#39;, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &#39;城市&#39;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br></pre></td></tr></table></figure>

<h6 id="自定义表单form-py"><a href="#自定义表单form-py" class="headerlink" title="自定义表单form.py"></a>自定义表单<code>form.py</code></h6><p>利用<code>inlineformset_factory</code>创建<code>formset</code>的方法如下所示。该方法的第一个参数和第二个参数都是模型，其中第一个参数必需是<code>ForeignKey</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import forms</span><br><span class="line">from .models import Province</span><br><span class="line">from .models import City</span><br><span class="line"></span><br><span class="line">class ProvinceForm(forms.ModelForm):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Province</span><br><span class="line">        fields &#x3D; (&#39;name&#39;, &#39;desc&#39;)</span><br><span class="line">        widgets &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:forms.TextInput(attrs&#x3D;&#123;</span><br><span class="line">                &#39;class&#39;:&#39;你好&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        error_messages &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:&#123;</span><br><span class="line">                &#39;max_length&#39;:&#39;太长了&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">CityFormSet &#x3D; forms.inlineformset_factory(</span><br><span class="line">    parent_model&#x3D;Province,</span><br><span class="line">    model&#x3D;City,</span><br><span class="line">    fields&#x3D;(&#39;name&#39;, ),</span><br><span class="line">    extra&#x3D;3,</span><br><span class="line">    max_num&#x3D;2,</span><br><span class="line">    can_delete&#x3D;False</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h6 id="视图views-py"><a href="#视图views-py" class="headerlink" title="视图views.py"></a>视图<code>views.py</code></h6><p><code>views.py</code>中使用<code>formset</code>创建和更新<code>province</code>的代码如下。在对<code>IngredientFormSet</code>进行实例化的时候，必需指定province的实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line">from .models import Province</span><br><span class="line">from .models import City</span><br><span class="line"></span><br><span class="line">from .forms import ProvinceForm</span><br><span class="line">from .forms import CityFormSet</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    form &#x3D; ProvinceForm()</span><br><span class="line">    city_formset &#x3D; CityFormSet()</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        form &#x3D; ProvinceForm(request.POST)</span><br><span class="line">        # 判断省份验证是否通过</span><br><span class="line">        if form.is_valid():</span><br><span class="line">            # 保存提交的省份数据，返回添加的省份对象</span><br><span class="line">            province &#x3D; form.save()</span><br><span class="line">            city_formset &#x3D; CityFormSet(request.POST, instance &#x3D; province)</span><br><span class="line">            # 判断城市验证是否通过</span><br><span class="line">            if city_formset.is_valid():</span><br><span class="line">                # 保存城市</span><br><span class="line">                city_formset.save()</span><br><span class="line">        return render(request, &#39;index.html&#39;, &#123;&#39;form&#39;:form, &#39;city_formset&#39;:city_formset&#125;)</span><br><span class="line">    # form传给前端做渲染</span><br><span class="line">    return render(request, &#39;index.html&#39;, &#123;&#39;form&#39;:form, &#39;city_formset&#39;:city_formset&#125;)</span><br><span class="line"></span><br><span class="line">def update(request):</span><br><span class="line">    # 取出pk等于3的省份对象</span><br><span class="line">    province_obj &#x3D; Province.objects.get(pk&#x3D;3)</span><br><span class="line">    # 实例化自定义表单和formset，指定示例</span><br><span class="line">    form &#x3D; ProvinceForm(instance&#x3D;province_obj)</span><br><span class="line">    city_formset &#x3D; CityFormSet(instance&#x3D;province_obj)</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        form &#x3D; ProvinceForm(request.POST, instance&#x3D;province_obj)</span><br><span class="line">        # 判断省份验证是否通过</span><br><span class="line">        if form.is_valid():</span><br><span class="line">            # 保存提交的省份数据，返回添加的省份对象</span><br><span class="line">            province &#x3D; form.save()</span><br><span class="line">            city_formset &#x3D; CityFormSet(request.POST, instance &#x3D; province)</span><br><span class="line">            # 判断城市验证是否通过</span><br><span class="line">            if city_formset.is_valid():</span><br><span class="line">                # 保存城市</span><br><span class="line">                city_formset.save()</span><br><span class="line">        return render(request, &#39;index.html&#39;, &#123;&#39;form&#39;:form, &#39;city_formset&#39;:city_formset&#125;)</span><br><span class="line">    # form传给前端做渲染</span><br><span class="line">    return render(request, &#39;index.html&#39;, &#123;&#39;form&#39;:form, &#39;city_formset&#39;:city_formset&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="模板templates"><a href="#模板templates" class="headerlink" title="模板templates"></a>模板templates</h6><p><code>action</code>添加和更新请修改<code>url</code>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;layout.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;uk-container&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&#123;% url &#39;wechat:index&#39; %&#125;&quot; method&#x3D;&quot;post&quot; novalidate&gt;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">           &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            &lt;legend&gt;添加城市&lt;&#x2F;legend&gt;</span><br><span class="line">            &#123;&#123; city_formset.management_form &#125;&#125;</span><br><span class="line">            &#123;&#123; city_formset.non_form_errors &#125;&#125;</span><br><span class="line">            &#123;% for city_form in city_formset %&#125;</span><br><span class="line">                &#123;&#123; city_form &#125;&#125;</span><br><span class="line">                &lt;hr&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;uk-margin&quot;&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;uk-button uk-button-primary &quot; type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>渲染效果：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200426134329.png" alt="img"></p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django之forms组件</tag>
        <tag>forms</tag>
        <tag>forms组件</tag>
        <tag>formset</tag>
        <tag>forms.Form</tag>
        <tag>forms.ModelForm</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之模型关联</title>
    <url>/16b9a853.html</url>
    <content><![CDATA[<p>多表关联是模型层的重要功能之一, <code>Django</code>提供了一套基于关联字段独特的解决方案.那就是用：<code>OneToOneField</code>，<code>ForeignKey</code>，<code>ManyToMany</code></p>
<a id="more"></a>

<p>先来区分一下什么是一对一、一对多、多对多<br><strong>一对一：</strong>子表从母表中选出一条数据一一对应，母表中选出来一条就少一条，子表不可以再选择母表中已被选择的那条数据<br><strong>一对多：</strong>子表从母表中选出一条数据一一对应，但母表的这条数据还可以被其他子表数据选择<br>共同点是在<code>admin</code>中添加数据的话，都会出现一个select选框，但只能单选，因为不论一对一还是一对多，自己都是“一”<br><strong>多对多：</strong><br>比如有多个孩子，和多种颜色、<br>每个孩子可以喜欢多种颜色，一种颜色可以被多个孩子喜欢，对于双向均是可以有多个选择<br><strong>应用场景：</strong><br><strong>一对一(<code>OneToOneField</code>)：</strong>一般用于某张表的补充，比如用户基本信息是一张表，但并非每一个用户都需要有登录的权限，不需要记录用户名和密码，此时，合理的做法就是新建一张记录登录信息的表，与用户信息进行一对一的关联，可以方便的从子表查询母表信息或反向查询<br><strong>外键(<code>ForeignKey</code>)：</strong>有很多的应用场景，比如每个员工归属于一个部门，那么就可以让员工表的部门字段与部门表进行一对多关联，可以查询到一个员工归属于哪个部门，也可反向查出某一部门有哪些员工<br><strong>多对多(<code>ManyToMany</code>)：</strong>如很多公司，一台服务器可能会有多种用途，归属于多个产品线当中，那么服务器与产品线之间就可以做成对多对，多对多在A表添加<code>manytomany</code>字段或者从B表添加，效果一致.</p>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>实例：我们来假定下面这些概念，字段和关系</p>
<p>作者模型：一个作者有姓名和年龄。</p>
<p>作者详细模型：把作者的详情放到详情表，包含生日，手机号，家庭住址等信息。作者详情模型和作者模型之间是一对一的关系（one-to-one）</p>
<p>出版商模型：出版商有名称，所在城市以及email。</p>
<p>书籍模型： 书籍有书名和出版日期，一本书可能会有多个作者，一个作者也可以写多本书，所以作者和书籍的关系就是多对多的关联关系(many-to-many);一本书只应该由一个出版商出版，所以出版商和书籍是一对多关联关系(one-to-many)。</p>
<p>模型建立如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作者表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    id= models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">    age = models.IntegerField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    <span class="comment"># 关联作者详情表一对一</span></span><br><span class="line">    intro = models.OneToOneField(to=<span class="string">&#x27;Intro&#x27;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;简介&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;作者&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;作者表&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Intro</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    作者详情</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    id= models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    phone = models.BigIntegerField()</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">100</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    avatar = models.ImageField(upload_to=<span class="string">&#x27;static/ups/&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> str(self.phone)</span><br><span class="line">    <span class="comment"># 只是为了Django Admin显示友好，排序之类有要求的也可以写入下方元数据</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name=<span class="string">&#x27;作者详情&#x27;</span></span><br><span class="line">        verbose_name_plural=<span class="string">&quot;作者详情表&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    文章</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">&#x27;文章标题&#x27;</span>)</span><br><span class="line">    body = models.TextField(verbose_name=<span class="string">&#x27;文章内容&#x27;</span>)</span><br><span class="line">    cratetd_time = models.DateTimeField(<span class="string">&#x27;发布时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 关联作者，多对一，外键保存在多的表中</span></span><br><span class="line">    author = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;articles&#x27;</span>, verbose_name=<span class="string">&#x27;作者&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;文章&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;文章表&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    角色表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;角色名&#x27;</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>, related_name=<span class="string">&#x27;roles&#x27;</span>, verbose_name=<span class="string">&#x27;角色&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;角色&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;角色表&#x27;</span></span><br></pre></td></tr></table></figure>

<p>生成的表结构：</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200421105708.png" alt="img"></p>
<p>注意事项：</p>
<ul>
<li>表的名称<code>myapp_modelName</code>，是根据 模型中的元数据自动生成的，也可以覆写为别的名称　　</li>
<li><code>id</code> 字段是自动添加的</li>
<li>对于外键字段，<code>Django</code> 会在字段名上添加<code>&quot;_id&quot;</code> 来创建数据库中的列名</li>
<li>这个例子中的<code>CREATE TABLE</code> <code>SQL</code> 语句使用<code>PostgreSQL</code> 语法格式，要注意的是<code>Django</code> 会根据<code>settings</code> 中指定的数据库类型来使用相应的<code>SQL</code> 语句。</li>
<li>定义好模型之后，你需要告诉<code>Django</code> _使用_这些模型。你要做的就是修改配置文件中的<code>INSTALL_APPSZ</code>中设置，在其中添加<code>models.py</code>所在应用的名称。</li>
<li>外键字段 <code>ForeignKey</code> 有一个 <code>null=True</code> 的设置(它允许外键接受空值 <code>NULL</code>)，你可以赋给它空值 <code>None</code> 。</li>
</ul>
<h3 id="添加表记录"><a href="#添加表记录" class="headerlink" title="添加表记录"></a>添加表记录</h3><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">  <span class="comment"># 首先获取作者对象</span></span><br><span class="line">  author_obj = Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">  <span class="comment"># 添加文章并关联作者</span></span><br><span class="line">  article_obj = Article.objects.create(title=<span class="string">&#x27;孙悟空之新野猴戏&#x27;</span>, body=<span class="string">&#x27;新野出土的大量汉画砖，除了杂技、游戏之外，猴子、狗和人在一起狩猎、嬉戏的精彩画面屡见不鲜。到了南北朝时期，猴戏已在新野盛行。明清时期，新野民间玩猴就已经较为流行。&#x27;</span>, author= author_obj)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 方式二</span></span><br><span class="line">  <span class="comment"># 直接指定关联的作者主键</span></span><br><span class="line">  article_obj2 = Article.objects.create(title=<span class="string">&#x27;猪八戒之身世来历&#x27;</span>, body=<span class="string">&#x27;根据《西游记》故事，猪八戒原是天庭中统领八万天河水兵的天蓬元帅，由于蟠桃会上喝酒醉后调戏月宫的霓裳仙子，打了两千锤后被贬下凡，又投错胎变成猪模样，入赘高老庄。&#x27;</span>, author_id=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200421111304.png" alt="img"></p>
<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>作者表现有数据</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200421111731.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先添加角色</span></span><br><span class="line">role_obj = Role.objects.create(name=<span class="string">&#x27;歌手&#x27;</span>)</span><br><span class="line"><span class="comment"># 查询出要关联的两个作者</span></span><br><span class="line">andy = Author.objects.filter(name=<span class="string">&#x27;刘德华&#x27;</span>).first()</span><br><span class="line">jay = Author.objects.filter(name=<span class="string">&#x27;周杰伦&#x27;</span>).first()</span><br><span class="line"><span class="comment"># 绑定多对多关系, 即向关系表role_authors中添加纪录</span></span><br><span class="line">role_obj.authors.add(andy, jay)</span><br></pre></td></tr></table></figure>

<p>生成后的数据</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200421112230.png" alt="img"></p>
<h3 id="对象关联查询"><a href="#对象关联查询" class="headerlink" title="对象关联查询"></a>对象关联查询</h3><h4 id="一对一-Author-与-Intro"><a href="#一对一-Author-与-Intro" class="headerlink" title="一对一(Author 与 Intro)"></a>一对一(Author 与 Intro)</h4><h5 id="正向查询"><a href="#正向查询" class="headerlink" title="正向查询"></a>正向查询</h5><p>按字段：intro（Author模型中的字段）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询刘德华的电话和地址</span></span><br><span class="line">andy = Author.objects.filter(name=<span class="string">&#x27;刘德华&#x27;</span>).first()</span><br><span class="line">print(andy.name, andy.intro.phone, andy.intro.addr)</span><br><span class="line"><span class="comment"># 输出：刘德华 15155555555 香港贵妃榻</span></span><br></pre></td></tr></table></figure>

<h5 id="反向查询"><a href="#反向查询" class="headerlink" title="反向查询"></a>反向查询</h5><p>按表名：(模型名小写 author)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询手机号为15154545454的作者姓名</span></span><br><span class="line">intro_obj = Intro.objects.filter(phone=<span class="number">15154545454</span>).first()</span><br><span class="line">print(intro_obj, intro_obj.author.name)</span><br><span class="line"><span class="comment"># 输出：15154545454 小白龙</span></span><br></pre></td></tr></table></figure>

<h4 id="一对多-Author-与-Article"><a href="#一对多-Author-与-Article" class="headerlink" title="一对多(Author 与 Article)"></a>一对多(Author 与 Article)</h4><h5 id="正向查询-1"><a href="#正向查询-1" class="headerlink" title="正向查询"></a>正向查询</h5><p>按字段：author（Article模型中的字段）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询文章主键为5的作者姓名</span></span><br><span class="line">article_obj = Article.objects.filter(pk=<span class="number">5</span>).first()</span><br><span class="line">print(<span class="string">&quot;《%s》&quot;</span> % article_obj.title, article_obj.author.name)</span><br><span class="line"><span class="comment"># 输出：《猪八戒之人物形象》 猪八戒</span></span><br></pre></td></tr></table></figure>

<h5 id="反向查询-1"><a href="#反向查询-1" class="headerlink" title="反向查询"></a>反向查询</h5><h6 id="按表名"><a href="#按表名" class="headerlink" title="按表名"></a>按表名</h6><p>(模型名小写 article_set)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询作者主键为3发布的文章</span></span><br><span class="line">author_obj = Author.objects.filter(pk=<span class="number">3</span>).first()</span><br><span class="line">print(author_obj.article_set.all())</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&lt;Article: 沙悟净之人物评价&gt;, &lt;Article: 沙悟净之形象分析&gt;]&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="按related-name"><a href="#按related-name" class="headerlink" title="按related_name"></a>按<code>related_name</code></h6><p>Arcticle模型author字段中我们设置了参数related_name，这个参数主要就是用来做反向查询的，我们这里设置了反向查询名称为<code>articles</code>，此时在使用上方的article_set，就会报错：`’Author’ object has no attribute ‘article_set’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关联作者，多对一，外键保存在多的表中</span></span><br><span class="line">author = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;articles&#x27;</span>, verbose_name=<span class="string">&#x27;作者&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时按我们自己设置的反向查询参数来查，得到一样的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询作者主键为3发布的文章</span></span><br><span class="line">author_obj = Author.objects.filter(pk=<span class="number">3</span>).first()</span><br><span class="line">print(author_obj.articles.all())</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&lt;Article: 沙悟净之人物评价&gt;, &lt;Article: 沙悟净之形象分析&gt;]&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="多对多-Author-与-Role"><a href="#多对多-Author-与-Role" class="headerlink" title="多对多(Author 与 Role)"></a>多对多(Author 与 Role)</h4><h5 id="正向查询-2"><a href="#正向查询-2" class="headerlink" title="正向查询"></a>正向查询</h5><p>按字段：<code>Role</code>模型中的字段<code>authors</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询角色名为歌手的作者姓名及电话</span></span><br><span class="line">role_obj = Role.objects.filter(name=<span class="string">&#x27;歌手&#x27;</span>).first()</span><br><span class="line">authors = role_obj.authors.all()</span><br><span class="line">print(authors)</span><br><span class="line"><span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line">print(author.name, author.intro.phone)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&lt;Author: 刘德华&gt;, &lt;Author: 周杰伦&gt;]&gt;</span></span><br><span class="line"><span class="comment"># 刘德华 15155555555</span></span><br><span class="line"><span class="comment"># 周杰伦 15156565656</span></span><br></pre></td></tr></table></figure>

<h5 id="反向查询-2"><a href="#反向查询-2" class="headerlink" title="反向查询"></a>反向查询</h5><h6 id="按表名-1"><a href="#按表名-1" class="headerlink" title="按表名"></a>按表名</h6><p>(模型名小写 <code>role_set</code>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询主键为2的作者的角色名称</span></span><br><span class="line">author_obj = Author.objects.filter(pk=<span class="number">2</span>).first()</span><br><span class="line">print(author_obj)</span><br><span class="line">print(author_obj.role_set.all())</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 猪八戒</span></span><br><span class="line"><span class="comment"># &lt;QuerySet [&lt;Role: 神仙&gt;, &lt;Role: 将军&gt;]&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="按related-name-1"><a href="#按related-name-1" class="headerlink" title="按related_name"></a>按<code>related_name</code></h6><p>role模型authors字段中我们设置了参数related_name，这个参数主要就是用来做反向查询的，我们这里设置了反向查询名称为<code>roles</code>，此时在使用上方的<code>role_set</code>，就会报错：`’Author’ object has no attribute ‘role_set’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询主键为2的作者的角色名称</span></span><br><span class="line">author_obj = Author.objects.filter(pk=<span class="number">2</span>).first()</span><br><span class="line">print(author_obj)</span><br><span class="line">print(author_obj.roles.all())</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 猪八戒</span></span><br><span class="line"><span class="comment"># &lt;QuerySet [&lt;Role: 神仙&gt;, &lt;Role: 将军&gt;]&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="双下划线关联查询"><a href="#双下划线关联查询" class="headerlink" title="双下划线关联查询"></a>双下划线关联查询</h3><p><code>Django</code> 还提供了一种直观而高效的方式在查询(<code>lookups</code>)中表示关联关系，它能自动确认 <code>SQL JOIN</code> 联系。要做跨关系查询，就使用两个下划线来链接模型(<code>model</code>)间关联字段的名称，直到最终链接到你想要的<code>model</code> 为止。</p>
<blockquote>
<p>注意：正向查询按字段,反向查询按表名小写用来告诉<code>ORM</code>引擎<code>join</code>哪张表，反向查询时，如果定义了related_name ，则用related_name替换表名。</p>
</blockquote>
<h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><h5 id="正向查询-3"><a href="#正向查询-3" class="headerlink" title="正向查询"></a>正向查询</h5><p>按字段，<code>Author</code>模型中的<code>intro</code>字段后跟双下划线关联的<code>Intro</code>模型中的<code>phone</code>字段。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询刘德华的手机号</span></span><br><span class="line">andy = Author.objects.filter(name=<span class="string">&#x27;刘德华&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;intro__phone&#x27;</span>)</span><br><span class="line">print(andy)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;刘德华&#x27;, &#x27;intro__phone&#x27;: 15155555555&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="反向查询-3"><a href="#反向查询-3" class="headerlink" title="反向查询"></a>反向查询</h5><p>关联的表名小写后跟双下划线加字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询刘德华的手机号</span></span><br><span class="line">intro_obj = Intro.objects.filter(author__name=<span class="string">&#x27;刘德华&#x27;</span>).values(<span class="string">&#x27;author__name&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>)</span><br><span class="line">print(intro_obj)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;author__name&#x27;: &#x27;刘德华&#x27;, &#x27;phone&#x27;: 15155555555&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="一对多-1"><a href="#一对多-1" class="headerlink" title="一对多"></a>一对多</h4><h5 id="正向查询-4"><a href="#正向查询-4" class="headerlink" title="正向查询"></a>正向查询</h5><p>按字段：<code>author</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询猪八戒发表过的文章</span></span><br><span class="line">articles = Article.objects.filter(author__name=<span class="string">&#x27;猪八戒&#x27;</span>).values_list(<span class="string">&#x27;author__name&#x27;</span>, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">print(articles)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [(&#x27;猪八戒&#x27;, &#x27;猪八戒自我介绍&#x27;), (&#x27;猪八戒&#x27;, &#x27;猪八戒之人物形象&#x27;), (&#x27;猪八戒&#x27;, &#x27;猪八戒之性格特点&#x27;), (&#x27;猪八戒&#x27;, &#x27;猪八戒之外貌形象&#x27;), (&#x27;猪八戒&#x27;, &#x27;猪八戒之身世来历&#x27;)]&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="反向查询-4"><a href="#反向查询-4" class="headerlink" title="反向查询"></a>反向查询</h5><p>按表名：<code>article</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询猪八戒发表过的文章</span></span><br><span class="line">query_result = Author.objects.filter(name=<span class="string">&#x27;猪八戒&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;articles__title&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒自我介绍&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒之人物形象&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒之性格特点&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒之外貌形象&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒之身世来历&#x27;&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处我们使用的是<code>articles__title</code>，并没有使用上面说明的表名<code>article</code>，原因在于我们文章中定义<code>author</code>关联字段时使用了<code>related_name</code>字段，将其设置为了<code>articles</code>，故这里使用<code>articles</code></p>
<h4 id="多对多-1"><a href="#多对多-1" class="headerlink" title="多对多"></a>多对多</h4><h5 id="正向查询-5"><a href="#正向查询-5" class="headerlink" title="正向查询"></a>正向查询</h5><p>按字段：<code>authors</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询角色为神仙的作者</span></span><br><span class="line">query_result = Role.objects.filter(name=<span class="string">&#x27;神仙&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;authors__name&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;神仙&#x27;, &#x27;authors__name&#x27;: &#x27;孙悟空&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;神仙&#x27;, &#x27;authors__name&#x27;: &#x27;猪八戒&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;神仙&#x27;, &#x27;authors__name&#x27;: &#x27;沙悟净&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;神仙&#x27;, &#x27;authors__name&#x27;: &#x27;小白龙&#x27;&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="反向查询-5"><a href="#反向查询-5" class="headerlink" title="反向查询"></a>反向查询</h5><p>按表名：<code>role</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询角色为神仙的作者</span></span><br><span class="line">query_result = Author.objects.filter(roles__name=<span class="string">&#x27;神仙&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;roles__name&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;孙悟空&#x27;, &#x27;roles__name&#x27;: &#x27;神仙&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;roles__name&#x27;: &#x27;神仙&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;沙悟净&#x27;, &#x27;roles__name&#x27;: &#x27;神仙&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;小白龙&#x27;, &#x27;roles__name&#x27;: &#x27;神仙&#x27;&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处我们使用的是<code>roles__name</code>，并没有使用上面说明的表名<code>role</code>，原因在于我们<code>Role</code>模型中中定义<code>authors</code>关联字段时使用了<code>related_name</code>字段，将其设置为了<code>roles</code>，故这里使用<code>roles</code>。</p>
<h4 id="连续跨表查询"><a href="#连续跨表查询" class="headerlink" title="连续跨表查询"></a>连续跨表查询</h4><h5 id="正向查询-6"><a href="#正向查询-6" class="headerlink" title="正向查询"></a>正向查询</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询角色为将军的所有作者名字及作者发表的文章</span></span><br><span class="line">query_result = Article.objects.filter(author__roles__name=<span class="string">&#x27;将军&#x27;</span>).values(<span class="string">&#x27;author__roles__name&#x27;</span>, <span class="string">&#x27;author__name&#x27;</span>, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;author__roles__name&#x27;: &#x27;将军&#x27;, &#x27;author__name&#x27;: &#x27;猪八戒&#x27;, &#x27;title&#x27;: &#x27;猪八戒自我介绍&#x27;&#125;, &#123;&#x27;author__roles__name&#x27;: &#x27;将军&#x27;, &#x27;author__name&#x27;: &#x27;猪八戒&#x27;, &#x27;title&#x27;: &#x27;猪八戒之人物形象&#x27;&#125;, &#123;&#x27;author__roles__name&#x27;: &#x27;将军&#x27;, &#x27;author__name&#x27;: &#x27;猪八戒&#x27;, &#x27;title&#x27;: &#x27;猪八戒之性格特点&#x27;&#125;, &#123;&#x27;author__roles__name&#x27;: &#x27;将军&#x27;, &#x27;author__name&#x27;: &#x27;猪八戒&#x27;, &#x27;title&#x27;: &#x27;猪八戒之外貌形象&#x27;&#125;, &#123;&#x27;author__roles__name&#x27;: &#x27;将军&#x27;, &#x27;author__name&#x27;: &#x27;猪八戒&#x27;, &#x27;title&#x27;: &#x27;猪八戒之身世来历&#x27;&#125;, &#123;&#x27;author__roles__name&#x27;: &#x27;将军&#x27;, &#x27;author__name&#x27;: &#x27;沙悟净&#x27;, &#x27;title&#x27;: &#x27;沙悟净之人物评价&#x27;&#125;, &#123;&#x27;author__roles__name&#x27;: &#x27;将军&#x27;, &#x27;author__name&#x27;: &#x27;沙悟净&#x27;, &#x27;title&#x27;: &#x27;沙悟净之形象分析&#x27;&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="反向查询-6"><a href="#反向查询-6" class="headerlink" title="反向查询"></a>反向查询</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询角色为将军的所有作者名字及作者发表的文章</span></span><br><span class="line">query_result = Role.objects.filter(name=<span class="string">&#x27;将军&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;authors__name&#x27;</span>, <span class="string">&#x27;authors__articles__title&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;将军&#x27;, &#x27;authors__name&#x27;: &#x27;猪八戒&#x27;, &#x27;authors__articles__title&#x27;: &#x27;猪八戒自我介绍&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;将军&#x27;, &#x27;authors__name&#x27;: &#x27;猪八戒&#x27;, &#x27;authors__articles__title&#x27;: &#x27;猪八戒之人物形象&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;将军&#x27;, &#x27;authors__name&#x27;: &#x27;猪八戒&#x27;, &#x27;authors__articles__title&#x27;: &#x27;猪八戒之性格特点&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;将军&#x27;, &#x27;authors__name&#x27;: &#x27;猪八戒&#x27;, &#x27;authors__articles__title&#x27;: &#x27;猪八戒之外貌形象&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;将军&#x27;, &#x27;authors__name&#x27;: &#x27;猪八戒&#x27;, &#x27;authors__articles__title&#x27;: &#x27;猪八戒之身世来历&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;将军&#x27;, &#x27;authors__name&#x27;: &#x27;沙悟净&#x27;, &#x27;authors__articles__title&#x27;: &#x27;沙悟净之人物评价&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;将军&#x27;, &#x27;authors__name&#x27;: &#x27;沙悟净&#x27;, &#x27;authors__articles__title&#x27;: &#x27;沙悟净之形象分析&#x27;&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="中间表查询"><a href="#中间表查询" class="headerlink" title="中间表查询"></a>中间表查询</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询角色为将军的所有作者名字及作者发表的文章</span></span><br><span class="line">query_result = Author.objects.filter(roles__name=<span class="string">&#x27;将军&#x27;</span>).values(<span class="string">&#x27;roles__name&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;articles__title&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;roles__name&#x27;: &#x27;将军&#x27;, &#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒自我介绍&#x27;&#125;, &#123;&#x27;roles__name&#x27;: &#x27;将军&#x27;, &#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒之人物形象&#x27;&#125;, &#123;&#x27;roles__name&#x27;: &#x27;将军&#x27;, &#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒之性格特点&#x27;&#125;, &#123;&#x27;roles__name&#x27;: &#x27;将军&#x27;, &#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒之外貌形象&#x27;&#125;, &#123;&#x27;roles__name&#x27;: &#x27;将军&#x27;, &#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;articles__title&#x27;: &#x27;猪八戒之身世来历&#x27;&#125;, &#123;&#x27;roles__name&#x27;: &#x27;将军&#x27;, &#x27;name&#x27;: &#x27;沙悟净&#x27;, &#x27;articles__title&#x27;: &#x27;沙悟净之人物评价&#x27;&#125;, &#123;&#x27;roles__name&#x27;: &#x27;将军&#x27;, &#x27;name&#x27;: &#x27;沙悟净&#x27;, &#x27;articles__title&#x27;: &#x27;沙悟净之形象分析&#x27;&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="模糊查询示例"><a href="#模糊查询示例" class="headerlink" title="模糊查询示例"></a>模糊查询示例</h4><p>模糊双下滑查询，依然可以正向、反向、中间表进行查询。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询手机号码以15154开头的作者以及作者发表过的文章</span></span><br><span class="line">query_result = Intro.objects.filter(phone__regex=<span class="string">&#x27;15154&#x27;</span>).values(<span class="string">&#x27;author__name&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;author__articles__title&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;author__name&#x27;: &#x27;小白龙&#x27;, &#x27;phone&#x27;: 15154545454, &#x27;author__articles__title&#x27;: &#x27;小白龙之角色解读&#x27;&#125;, &#123;&#x27;author__name&#x27;: &#x27;小白龙&#x27;, &#x27;phone&#x27;: 15154545454, &#x27;author__articles__title&#x27;: &#x27;白龙马之原著记载&#x27;&#125;]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># 查询手机号码以15154开头的作者以及作者发表过的文章</span></span><br><span class="line">query_result = Intro.objects.filter(phone__startswith=<span class="string">&#x27;15154&#x27;</span>).values(<span class="string">&#x27;author__name&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;author__articles__title&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;author__name&#x27;: &#x27;小白龙&#x27;, &#x27;phone&#x27;: 15154545454, &#x27;author__articles__title&#x27;: &#x27;小白龙之角色解读&#x27;&#125;, &#123;&#x27;author__name&#x27;: &#x27;小白龙&#x27;, &#x27;phone&#x27;: 15154545454, &#x27;author__articles__title&#x27;: &#x27;白龙马之原著记载&#x27;&#125;]&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><p>语法：<code>aggregate(*args, **kwargs)</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line"><span class="comment"># 查询所有文章的平均查看数</span></span><br><span class="line">query_result = Article.objects.all().aggregate(Avg(<span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&#123;&#x27;views__avg&#x27;: 2156.0&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>aggregate()</code>是<code>QuerySet</code> 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定一个名称，可以向聚合子句提供它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line"><span class="comment"># 查询所有文章的平均查看数</span></span><br><span class="line">query_result = Article.objects.all().aggregate(avg_views = Avg(<span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&#123;&#x27;avg_views&#x27;: 2156.0&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果你希望生成不止一个聚合，你可以向<code>aggregate()</code>子句中添加另一个参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Min</span><br><span class="line"><span class="comment"># 查询所有文章的平均查看数，最大查看数，最小查看数</span></span><br><span class="line">query_result = Article.objects.all().aggregate(avg_views = Avg(<span class="string">&#x27;views&#x27;</span>), max_views=Max(<span class="string">&#x27;views&#x27;</span>), min_views=Min(<span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&#123;&#x27;avg_views&#x27;: 2156.0, &#x27;max_views&#x27;: 9595, &#x27;min_views&#x27;: 34&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>单表查询每一个班级对应的学生数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">query_result = Student.objects.values(<span class="string">&#x27;classes&#x27;</span>).annotate(nums = Count(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;classes&#x27;: &#x27;软件二班&#x27;, &#x27;nums&#x27;: 4&#125;, &#123;&#x27;classes&#x27;: &#x27;图像一班&#x27;, &#x27;nums&#x27;: 4&#125;, &#123;&#x27;classes&#x27;: &#x27;师范一班&#x27;, &#x27;nums&#x27;: 3&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_student`.`classes`, COUNT(`wechat_student`.`id`) AS `nums` FROM `wechat_student` GROUP BY `wechat_student`.`classes` ORDER BY NULL LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p>多表联合分组查询每个作者及其对应发布的文章数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">query_result = Author.objects.values(<span class="string">&#x27;id&#x27;</span>).annotate(sums = Count(<span class="string">&#x27;articles&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sums&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;孙悟空&#x27;, &#x27;sums&#x27;: 6&#125;, &#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;sums&#x27;: 5&#125;, &#123;&#x27;name&#x27;: &#x27;沙悟净&#x27;, &#x27;sums&#x27;: 2&#125;, &#123;&#x27;name&#x27;: &#x27;小白龙&#x27;, &#x27;sums&#x27;: 2&#125;, &#123;&#x27;name&#x27;: &#x27;刘德华&#x27;, &#x27;sums&#x27;: 0&#125;, &#123;&#x27;name&#x27;: &#x27;周杰伦&#x27;, &#x27;sums&#x27;: 0&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_author`.`name`, COUNT(`wechat_article`.`id`) AS `sums` FROM `wechat_author` LEFT OUTER JOIN `wechat_article` ON (`wechat_author`.`id` = `wechat_article`.`author_id`) GROUP BY `wechat_author`.`id` ORDER BY NULL LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<h3 id="分组聚合查询示例"><a href="#分组聚合查询示例" class="headerlink" title="分组聚合查询示例"></a>分组聚合查询示例</h3><p><strong>查询每个作者发表的文章最少查看数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Min</span><br><span class="line">query_result = Author.objects.annotate(min_views=Min(<span class="string">&#x27;articles__views&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> author_obj <span class="keyword">in</span> query_result:</span><br><span class="line">	print(author_obj.name, author_obj.min_views)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 孙悟空 56</span></span><br><span class="line"><span class="comment"># 猪八戒 154</span></span><br><span class="line"><span class="comment"># 沙悟净 34</span></span><br><span class="line"><span class="comment"># 小白龙 158</span></span><br><span class="line"><span class="comment"># 刘德华 None</span></span><br><span class="line"><span class="comment"># 周杰伦 None</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_author`.`id`, `wechat_author`.`name`, `wechat_author`.`age`, `wechat_author`.`intro_id`, MIN(`wechat_article`.`views`) AS `min_views` FROM `wechat_author` LEFT OUTER JOIN `wechat_article` ON (`wechat_author`.`id` = `wechat_article`.`author_id`) GROUP BY `wechat_author`.`id` ORDER BY NULL;</span></span><br></pre></td></tr></table></figure>

<p>或者使用<code>values</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Min</span><br><span class="line">query_result = Author.objects.annotate(min_views=Min(<span class="string">&#x27;articles__views&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;min_views&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;孙悟空&#x27;, &#x27;min_views&#x27;: 56&#125;, &#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;min_views&#x27;: 154&#125;, &#123;&#x27;name&#x27;: &#x27;沙悟净&#x27;, &#x27;min_views&#x27;: 34&#125;, &#123;&#x27;name&#x27;: &#x27;小白龙&#x27;, &#x27;min_views&#x27;: 158&#125;, &#123;&#x27;name&#x27;: &#x27;刘德华&#x27;, &#x27;min_views&#x27;: None&#125;, &#123;&#x27;name&#x27;: &#x27;周杰伦&#x27;, &#x27;min_views&#x27;: None&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_author`.`name`, MIN(`wechat_article`.`views`) AS `min_views` FROM `wechat_author` LEFT OUTER JOIN `wechat_article` ON (`wechat_author`.`id` = `wechat_article`.`author_id`) GROUP BY `wechat_author`.`id` ORDER BY NULL LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询每个角色的作者数量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">query_result = Role.objects.annotate(authors_sums = Count(<span class="string">&#x27;authors&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;authors_sums&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment">#输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;神仙&#x27;, &#x27;authors_sums&#x27;: 4&#125;, &#123;&#x27;name&#x27;: &#x27;将军&#x27;, &#x27;authors_sums&#x27;: 2&#125;, &#123;&#x27;name&#x27;: &#x27;大王&#x27;, &#x27;authors_sums&#x27;: 1&#125;, &#123;&#x27;name&#x27;: &#x27;龙族&#x27;, &#x27;authors_sums&#x27;: 1&#125;, &#123;&#x27;name&#x27;: &#x27;歌手&#x27;, &#x27;authors_sums&#x27;: 2&#125;]&gt;</span></span><br><span class="line"><span class="comment">#sql：SELECT `wechat_role`.`name`, COUNT(`wechat_role_authors`.`author_id`) AS `authors_sums` FROM `wechat_role` LEFT OUTER JOIN `wechat_role_authors` ON (`wechat_role`.`id` = `wechat_role_authors`.`role_id`) GROUP BY `wechat_role`.`id` ORDER BY NULL LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p><strong>统计所有以沙开头的作者对应的角色数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">query_result = Author.objects.filter(name__startswith=<span class="string">&#x27;沙&#x27;</span>).annotate(role_sums = Count(<span class="string">&#x27;roles&#x27;</span>)).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;role_sums&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;沙悟净&#x27;, &#x27;role_sums&#x27;: 2&#125;, &#123;&#x27;name&#x27;: &#x27;沙溢&#x27;, &#x27;role_sums&#x27;: 1&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_author`.`name`, COUNT(`wechat_role_authors`.`role_id`) AS `role_sums` FROM `wechat_author` LEFT OUTER JOIN `wechat_role_authors` ON (`wechat_author`.`id` = `wechat_role_authors`.`author_id`) WHERE `wechat_author`.`name` LIKE BINARY &#x27;沙%&#x27; GROUP BY `wechat_author`.`id` ORDER BY NULL LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询不止一个角色身份的作者</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">query_result = Author.objects.annotate(role_sums=Count(<span class="string">&#x27;roles&#x27;</span>)).filter(role_sums__gt = <span class="number">1</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&lt;Author: 孙悟空&gt;, &lt;Author: 猪八戒&gt;, &lt;Author: 沙悟净&gt;, &lt;Author: 小白龙&gt;, &lt;Author: 刘德华&gt;, &lt;Author: 周杰伦&gt;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_author`.`id`, `wechat_author`.`name`, `wechat_author`.`age`, `wechat_author`.`intro_id`, COUNT(`wechat_role_authors`.`role_id`) AS `role_sums` FROM `wechat_author` LEFT OUTER JOIN `wechat_role_authors` ON (`wechat_author`.`id` = `wechat_role_authors`.`author_id`) GROUP BY `wechat_author`.`id` HAVING COUNT(`wechat_role_authors`.`role_id`) &gt; 1 ORDER BY NULL LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询每一个作者，按其对应的角色数量排序</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">query_result = Author.objects.annotate(role_sums = Count(<span class="string">&#x27;roles&#x27;</span>)).order_by(<span class="string">&#x27;role_sums&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;role_sums&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;沙溢&#x27;, &#x27;role_sums&#x27;: 1&#125;, &#123;&#x27;name&#x27;: &#x27;刘德华&#x27;, &#x27;role_sums&#x27;: 2&#125;, &#123;&#x27;name&#x27;: &#x27;周杰伦&#x27;, &#x27;role_sums&#x27;: 2&#125;, &#123;&#x27;name&#x27;: &#x27;小白龙&#x27;, &#x27;role_sums&#x27;: 3&#125;, &#123;&#x27;name&#x27;: &#x27;沙悟净&#x27;, &#x27;role_sums&#x27;: 3&#125;, &#123;&#x27;name&#x27;: &#x27;猪八戒&#x27;, &#x27;role_sums&#x27;: 3&#125;, &#123;&#x27;name&#x27;: &#x27;孙悟空&#x27;, &#x27;role_sums&#x27;: 3&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_author`.`name`, COUNT(`wechat_role_authors`.`role_id`) AS `role_sums` FROM `wechat_author` LEFT OUTER JOIN `wechat_role_authors` ON (`wechat_author`.`id` = `wechat_role_authors`.`author_id`) GROUP BY `wechat_author`.`id` ORDER BY `role_sums` ASC LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<h3 id="F查询"><a href="#F查询" class="headerlink" title="F查询"></a><code>F</code>查询</h3><p>在上面所有的例子中，我们构造的过滤器都只是将字段值与某个常量做比较。如果我们要对两个字段的值做比较，那该怎么做呢？</p>
<p><code>Django</code> 提供 <code>F()</code> 来做这样的比较。<code>F()</code> 的实例可以在查询中引用字段，来比较同一个 <code>model</code> 实例中两个不同字段的值。</p>
<p><strong>查询收藏数大于查看数的文章</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询收藏数大于查看数的文章</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">query_result = Article.objects.filter(fav__gt=F(<span class="string">&#x27;views&#x27;</span>)).values(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;fav&#x27;</span>, <span class="string">&#x27;views&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;孙悟空大闹天宫&#x27;, &#x27;fav&#x27;: 161, &#x27;views&#x27;: 56&#125;, &#123;&#x27;title&#x27;: &#x27;猪八戒自我介绍&#x27;, &#x27;fav&#x27;: 759, &#x27;views&#x27;: 662&#125;, &#123;&#x27;title&#x27;: &#x27;沙悟净之形象分析&#x27;, &#x27;fav&#x27;: 4856, &#x27;views&#x27;: 4565&#125;, &#123;&#x27;title&#x27;: &#x27;白龙马之原著记载&#x27;, &#x27;fav&#x27;: 258, &#x27;views&#x27;: 158&#125;, &#123;&#x27;title&#x27;: &#x27;猪八戒之性格特点&#x27;, &#x27;fav&#x27;: 5638, &#x27;views&#x27;: 2326&#125;, &#123;&#x27;title&#x27;: &#x27;孙悟空之猴王出世&#x27;, &#x27;fav&#x27;: 2626, &#x27;views&#x27;: 356&#125;, &#123;&#x27;title&#x27;: &#x27;孙悟空之形象演变&#x27;, &#x27;fav&#x27;: 2623, &#x27;views&#x27;: 1418&#125;, &#123;&#x27;title&#x27;: &#x27;猪八戒之身世来历&#x27;, &#x27;fav&#x27;: 4154, &#x27;views&#x27;: 965&#125;, &#123;&#x27;title&#x27;: &#x27;沙溢之早年经历&#x27;, &#x27;fav&#x27;: 587, &#x27;views&#x27;: 352&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_article`.`title`, `wechat_article`.`fav`, `wechat_article`.`views` FROM `wechat_article` WHERE `wechat_article`.`fav` &gt; `wechat_article`.`views` LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p><code>Django</code> 支持 F<code>()</code> 对象之间以及 F() 对象和常数之间的加减乘除和取模的操作。</p>
<p><strong>查询收藏数大于查看数2倍的文章</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">query_result = Article.objects.filter(fav__gt=F(<span class="string">&#x27;views&#x27;</span>)*<span class="number">2</span>).values(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;fav&#x27;</span>, <span class="string">&#x27;views&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;孙悟空大闹天宫&#x27;, &#x27;fav&#x27;: 161, &#x27;views&#x27;: 56&#125;, &#123;&#x27;title&#x27;: &#x27;猪八戒之性格特点&#x27;, &#x27;fav&#x27;: 5638, &#x27;views&#x27;: 2326&#125;, &#123;&#x27;title&#x27;: &#x27;孙悟空之猴王出世&#x27;, &#x27;fav&#x27;: 2626, &#x27;views&#x27;: 356&#125;, &#123;&#x27;title&#x27;: &#x27;猪八戒之身世来历&#x27;, &#x27;fav&#x27;: 4154, &#x27;views&#x27;: 965&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_article`.`title`, `wechat_article`.`fav`, `wechat_article`.`views` FROM `wechat_article` WHERE `wechat_article`.`fav` &gt; (`wechat_article`.`views` * 2) LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p><strong>将每篇文章的查看数加100</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">query_result = Article.objects.all().update(views = F(<span class="string">&#x27;views&#x27;</span>)+<span class="number">100</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：17</span></span><br><span class="line"><span class="comment"># sql：UPDATE `wechat_article` SET `views` = (`wechat_article`.`views` + 100);</span></span><br></pre></td></tr></table></figure>

<h3 id="Q查询"><a href="#Q查询" class="headerlink" title="Q查询"></a>Q查询</h3><p><code>filter()</code> 等方法中的关键字参数查询都是一起进行“AND” 的。 如果你需要执行更复杂的查询（例如<code>OR</code> 语句），你可以使用<code>Q 对象</code>。</p>
<p><code>Q</code> 对象可以使用<code>&amp;</code> 和<code>|</code> 操作符组合起来。当一个操作符在两个<code>Q</code> 对象上使用时，它产生一个新的<code>Q</code> 对象。</p>
<p><strong>查询标题以孙悟空或者小白龙开头的文章</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">query_result = Article.objects.filter(Q(title__startswith=<span class="string">&#x27;孙悟空&#x27;</span>)|Q(title__startswith=<span class="string">&#x27;小白龙&#x27;</span>))</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&lt;Article: 孙悟空大闹天宫&gt;, &lt;Article: 小白龙之角色解读&gt;, &lt;Article: 孙悟空之猴王出世&gt;, &lt;Article: 孙悟空之原型结论&gt;, &lt;Article: 孙悟空之形象演变&gt;, &lt;Article: 孙悟空之新野猴戏&gt;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_article`.`id`, `wechat_article`.`title`, `wechat_article`.`body`, `wechat_article`.`cratetd_time`, `wechat_article`.`views`, `wechat_article`.`fav`, `wechat_article`.`author_id` FROM `wechat_article` WHERE (`wechat_article`.`title` LIKE BINARY &#x27;孙悟空%&#x27; OR `wechat_article`.`title` LIKE BINARY &#x27;小白龙%&#x27;) LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询标题以孙悟空且以结论结尾的文章</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">query_result = Article.objects.filter(Q(title__startswith=<span class="string">&#x27;孙悟空&#x27;</span>)&amp;Q(title__endswith=<span class="string">&#x27;结论&#x27;</span>))</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&lt;Article: 孙悟空之原型结论&gt;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_article`.`id`, `wechat_article`.`title`, `wechat_article`.`body`, `wechat_article`.`cratetd_time`, `wechat_article`.`views`, `wechat_article`.`fav`, `wechat_article`.`author_id` FROM `wechat_article` WHERE (`wechat_article`.`title` LIKE BINARY &#x27;孙悟空%&#x27; AND `wechat_article`.`title` LIKE BINARY &#x27;%结论&#x27;) LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p>可以组合<code>&amp;</code> 和<code>|</code> 操作符以及使用括号进行分组来编写任意复杂的<code>Q</code> 对象。同时，<code>Q</code> 对象可以使用<code>~</code> 操作符取反，这允许组合正常的查询和取反(<code>NOT</code>) 查询：</p>
<p><strong>查询标题以孙悟空且时间不为2020年发表的文章</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">query_result = Article.objects.filter(Q(title__startswith=<span class="string">&#x27;孙悟空&#x27;</span>) &amp; ~Q(cratetd_time__year=<span class="number">2020</span>)).values(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;cratetd_time&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;孙悟空之猴王出世&#x27;, &#x27;cratetd_time&#x27;: datetime.datetime(2019, 4, 21, 2, 46, 20, tzinfo=&lt;UTC&gt;)&#125;, &#123;&#x27;title&#x27;: &#x27;孙悟空之形象演变&#x27;, &#x27;cratetd_time&#x27;: datetime.datetime(2019, 4, 21, 3, 7, 19, tzinfo=&lt;UTC&gt;)&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_article`.`title`, `wechat_article`.`cratetd_time` FROM `wechat_article` WHERE (`wechat_article`.`title` LIKE BINARY &#x27;孙悟空%&#x27; AND NOT (`wechat_article`.`cratetd_time` BETWEEN &#x27;2019-12-31 16:00:00&#x27; AND &#x27;2020-12-31 15:59:59.999999&#x27;)) LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<p>查询函数可以混合使用<code>Q 对象</code>和关键字参数。所有提供给查询函数的参数（关键字参数或<code>Q</code> 对象）都将”AND”在一起。但是，如果出现<code>Q</code> 对象，它必须位于所有关键字参数的前面</p>
<p><strong>查询标题以孙悟空且时间不为2020年发表的且标题中包含原型文章</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">query_result = Article.objects.filter(Q(title__startswith=<span class="string">&#x27;孙悟空&#x27;</span>) &amp; ~Q(cratetd_time__year=<span class="number">2020</span>), title__contains=<span class="string">&#x27;原型&#x27;</span>).values(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;cratetd_time&#x27;</span>)</span><br><span class="line">print(query_result)</span><br><span class="line"><span class="comment"># 输出：&lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;孙悟空之原型结论&#x27;, &#x27;cratetd_time&#x27;: datetime.datetime(2018, 4, 21, 2, 46, 48, tzinfo=&lt;UTC&gt;)&#125;, &#123;&#x27;title&#x27;: &#x27;孙悟空之原型形象演变&#x27;, &#x27;cratetd_time&#x27;: datetime.datetime(2019, 4, 21, 3, 7, 19, tzinfo=&lt;UTC&gt;)&#125;]&gt;</span></span><br><span class="line"><span class="comment"># sql：SELECT `wechat_article`.`title`, `wechat_article`.`cratetd_time` FROM `wechat_article` WHERE (`wechat_article`.`title` LIKE BINARY &#x27;孙悟空%&#x27; AND NOT (`wechat_article`.`cratetd_time` BETWEEN &#x27;2019-12-31 16:00:00&#x27; AND &#x27;2020-12-31 15:59:59.999999&#x27;) AND `wechat_article`.`title` LIKE BINARY &#x27;%原型%&#x27;) LIMIT 21;</span></span><br></pre></td></tr></table></figure>

<h3 id="关联管理器"><a href="#关联管理器" class="headerlink" title="关联管理器"></a>关联管理器</h3><p>“关联管理器”是在一对多或者多对多的关联上下文中使用的管理器。它存在于下面两种情况：</p>
<p>一对多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作者表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    id= models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">    age = models.IntegerField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    文章</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">&#x27;文章标题&#x27;</span>)</span><br><span class="line">    <span class="comment"># 关联作者，多对一，外键保存在多的表中</span></span><br><span class="line">    author = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>, on_delete=models.CASCADE, related_name=<span class="string">&#x27;articles&#x27;</span>, verbose_name=<span class="string">&#x27;作者&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，管理器<code>author_obj.articles</code>（默认<code>author_obj.article_set</code>，因为<code>Article</code>模型中使用了<code>related_name</code>，它替代了<code>表名_set</code>方法）拥有下面的方法。</p>
<p>多对多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作者表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    id= models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">    age = models.IntegerField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    角色表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;角色名&#x27;</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>, related_name=<span class="string">&#x27;roles&#x27;</span>, verbose_name=<span class="string">&#x27;角色&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这个例子中，<code>author_obj.roles</code>（默认<code>author_obj.role_set</code>，因为<code>Role</code>模型中使用了<code>related_name</code>，它替代了<code>表名_set</code>方法）和<code>role_obj.authors</code>都拥有下面的方法。</p>
<h4 id="add-obj1-obj2"><a href="#add-obj1-obj2" class="headerlink" title="add(obj1[, obj2, ...])"></a><strong><code>add(obj1[, obj2, ...])</code></strong></h4><p><strong>把指定的模型对象添加到关联对象集中</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询主键为16的文章的文章，其原始作者为沙溢</span></span><br><span class="line">article_obj = Article.objects.filter(pk=<span class="number">16</span>).first()</span><br><span class="line">print(article_obj, article_obj.author.name)</span><br><span class="line"><span class="comment"># 查询主键为6的作者对象</span></span><br><span class="line">author_obj = Author.objects.filter(pk=<span class="number">6</span>).first()</span><br><span class="line">print(author_obj)</span><br><span class="line"><span class="comment"># 将主键为6的作者关联到主键为16的文章对象</span></span><br><span class="line">author_obj.articles.add(article_obj)</span><br><span class="line">print(article_obj, article_obj.author.name)</span><br><span class="line"><span class="comment"># 输出：沙溢之个人介绍 沙溢</span></span><br><span class="line"><span class="comment"># 周杰伦</span></span><br><span class="line"><span class="comment"># 沙溢之个人介绍 周杰伦</span></span><br><span class="line"><span class="comment"># sql：UPDATE `wechat_article` SET `author_id` = 6 WHERE `wechat_article`.`id` IN (16);</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子中，对于<code>ForeignKey</code>关系，<code>article_obj.save()</code>由关联管理器调用，执行更新操作。然而，在多对多关系中使用<code>add()</code>并不会调用任何 <code>save()</code>方法，而是由<code>QuerySet.bulk_create()</code>创建关系。</p>
<p><strong>批量关联对象</strong></p>
<p>批量关联文章到周杰伦下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询姓名为周杰伦的作者</span></span><br><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;周杰伦&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出作者姓名和关联的文章列表</span></span><br><span class="line">print(author_obj.name, author_obj.articles.all())</span><br><span class="line"><span class="comment"># 查询主键大于10小于15的文章</span></span><br><span class="line">article_lists = Article.objects.filter(pk__gt=<span class="number">10</span>, pk__lt=<span class="number">15</span>)</span><br><span class="line">print(article_lists)</span><br><span class="line"><span class="comment"># 将上述查询到的文章关联到作者对象周杰伦</span></span><br><span class="line">author_obj.articles.add(*article_lists)</span><br><span class="line">print(author_obj.name, author_obj.articles.all())</span><br><span class="line"><span class="comment"># 输出：周杰伦 &lt;QuerySet []&gt;</span></span><br><span class="line"><span class="comment"># &lt;QuerySet [&lt;Article: 孙悟空之猴王出世&gt;, &lt;Article: 孙悟空之原型结论&gt;, &lt;Article: 孙悟空之原型形象演变&gt;, &lt;Article: 孙悟空之新野猴戏&gt;]&gt; </span></span><br><span class="line"><span class="comment">#周杰伦 &lt;QuerySet [&lt;Article: 孙悟空之猴王出世&gt;, &lt;Article: 孙悟空之原型结论&gt;, &lt;Article: 孙悟空之原型形象演变&gt;, &lt;Article: 孙悟空之新野猴戏&gt;]&gt;</span></span><br><span class="line"><span class="comment"># sql：UPDATE `wechat_article` SET `author_id` = 6 WHERE `wechat_article`.`id` IN (11, 12, 13, 14); args=(6, 11, 12, 13, 14)</span></span><br></pre></td></tr></table></figure>

<p>给太少老君批量关联角色</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出太上老君对象，可以看出开始没有关联任何角色</span></span><br><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;太上老君&#x27;</span>)</span><br><span class="line">print(author_obj.name, author_obj.roles.all())</span><br><span class="line"><span class="comment"># 取出几个角色列表</span></span><br><span class="line">role_list = Role.objects.filter(pk__lt=<span class="number">3</span>)</span><br><span class="line">print(role_list)</span><br><span class="line"><span class="comment"># 给太上老君关联角色</span></span><br><span class="line">author_obj.roles.add(*role_list)</span><br><span class="line"><span class="comment"># 再次查询太上老君关联的角色</span></span><br><span class="line">print(author_obj.name, author_obj.roles.all())</span><br><span class="line"><span class="comment"># 输出：太上老君 &lt;QuerySet []&gt;</span></span><br><span class="line"><span class="comment"># &lt;QuerySet [&lt;Role: 神仙&gt;, &lt;Role: 将军&gt;]&gt;</span></span><br><span class="line"><span class="comment"># 太上老君 &lt;QuerySet [&lt;Role: 将军&gt;, &lt;Role: 神仙&gt;]&gt;</span></span><br><span class="line"><span class="comment"># sql：INSERT IGNORE INTO `wechat_role_authors` (`role_id`, `author_id`) VALUES (1, 8), (2, 8);</span></span><br></pre></td></tr></table></figure>

<p>或使用主键绑定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出太上老君对象，可以看出开始没有关联任何角色</span></span><br><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;太上老君&#x27;</span>)</span><br><span class="line">print(author_obj.name, author_obj.roles.all())</span><br><span class="line"><span class="comment"># 给太上老君关联主键为1和6的角色</span></span><br><span class="line">author_obj.roles.add(*[<span class="number">1</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment"># 再次查询太上老君关联的角色</span></span><br><span class="line">print(author_obj.name, author_obj.roles.all())</span><br><span class="line"><span class="comment"># 输出：太上老君 &lt;QuerySet []&gt;</span></span><br><span class="line"><span class="comment"># 太上老君 &lt;QuerySet [&lt;Role: 演员&gt;, &lt;Role: 神仙&gt;]&gt;</span></span><br><span class="line"><span class="comment"># sql：INSERT IGNORE INTO `wechat_role_authors` (`role_id`, `author_id`) VALUES (1, 8), (6, 8);</span></span><br></pre></td></tr></table></figure>

<h4 id="create-kwargs"><a href="#create-kwargs" class="headerlink" title="create(\kwargs)**"></a><strong>create(\</strong>kwargs)**</h4><p>创建一个新的对象，保存对象，并将它添加到关联对象集之中。返回新创建的对象：</p>
<p><strong>为太上老君直接创建关联文章</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出作者名为太少老君的对象,并查看其关联的文章</span></span><br><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;太上老君&#x27;</span>)</span><br><span class="line">print(author_obj.name, author_obj.article_set.all())</span><br><span class="line">article_obj = author_obj.article_set.create(title=<span class="string">&#x27;太上老君的炼丹炉&#x27;</span>, body=<span class="string">&#x27;太上老君的炼丹炉被孙悟空踢坏了&#x27;</span>)</span><br><span class="line"><span class="comment"># 再次查看太上老君关联的文章</span></span><br><span class="line">print(author_obj.name, author_obj.article_set.all())</span><br><span class="line"><span class="comment"># 刚才添加的文章对象，模型中使用了__str__方法，故输出结果看起来像文章名称</span></span><br><span class="line">print(article_obj)</span><br><span class="line"><span class="comment"># 输出：太上老君 &lt;QuerySet []&gt;</span></span><br><span class="line">太上老君 &lt;QuerySet [&lt;Article: 太上老君的炼丹炉&gt;]&gt;</span><br><span class="line">太上老君的炼丹炉</span><br><span class="line"><span class="comment"># sql：INSERT INTO `wechat_article` (`title`, `body`, `cratetd_time`, `views`, `fav`, `author_id`) VALUES (&#x27;太上老君的炼丹炉&#x27;, &#x27;太上老君的炼丹炉被孙悟空踢坏了&#x27;, &#x27;2020-04-22 07:44:28.106224&#x27;, 5, 3, 8);</span></span><br></pre></td></tr></table></figure>

<p>上例等价于</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出作者名为太少老君的对象,并查看其关联的文章</span></span><br><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;太上老君&#x27;</span>)</span><br><span class="line">article_obj = Article.objects.create(title=<span class="string">&#x27;太上老君的炼丹炉&#x27;</span>, body=<span class="string">&#x27;太上老君的炼丹炉被孙悟空踢坏了&#x27;</span>, author=author_obj)</span><br></pre></td></tr></table></figure>

<h4 id="remove-obj1-obj2"><a href="#remove-obj1-obj2" class="headerlink" title="remove(obj1[, obj2, ...])"></a><strong><code>remove(obj1[, obj2, ...])</code></strong></h4><p>从关联对象集中移除执行的模型对象：</p>
<p><strong>移除太上老君的神仙角色</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;太上老君&#x27;</span>)</span><br><span class="line"><span class="comment"># 太上老君当前角色演员和神仙</span></span><br><span class="line">print(author_obj.name, author_obj.role_set.all())</span><br><span class="line">role_obj = Role.objects.get(name=<span class="string">&#x27;神仙&#x27;</span>)</span><br><span class="line">author_obj.role_set.remove(role_obj)</span><br><span class="line">print(author_obj.name, author_obj.role_set.all())</span><br><span class="line"><span class="comment"># 输出：太上老君 &lt;QuerySet [&lt;Role: 演员&gt;, &lt;Role: 神仙&gt;]&gt;</span></span><br><span class="line"><span class="comment"># 太上老君 &lt;QuerySet [&lt;Role: 演员&gt;]&gt;</span></span><br><span class="line"><span class="comment"># sql：DELETE FROM `wechat_role_authors` WHERE (`wechat_role_authors`.`author_id` = 8 AND `wechat_role_authors`.`role_id` IN (1));</span></span><br></pre></td></tr></table></figure>

<p><strong>批量移除太上老君的角色</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;太上老君&#x27;</span>)</span><br><span class="line"><span class="comment"># 太上老君当前角色演员和神仙</span></span><br><span class="line">print(author_obj.name, author_obj.role_set.all())</span><br><span class="line"><span class="comment"># 移除太上老君现有角色</span></span><br><span class="line">author_obj.role_set.remove(*author_obj.role_set.all())</span><br><span class="line"><span class="comment"># 打印太上老君现有角色</span></span><br><span class="line">print(author_obj.name, author_obj.role_set.all())</span><br><span class="line"><span class="comment"># 输出：太上老君 &lt;QuerySet [&lt;Role: 演员&gt;, &lt;Role: 神仙&gt;]&gt;</span></span><br><span class="line"><span class="comment"># 太上老君 &lt;QuerySet []&gt;</span></span><br><span class="line"><span class="comment"># sql：DELETE FROM `wechat_role_authors` WHERE (`wechat_role_authors`.`author_id` = 8 AND `wechat_role_authors`.`role_id` IN (1, 6));</span></span><br></pre></td></tr></table></figure>

<h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a><strong><code>clear()</code></strong></h4><p>从关联对象集中移除一切对象。</p>
<p><strong>移除太上老君所有角色</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;太上老君&#x27;</span>)</span><br><span class="line"><span class="comment"># 太上老君当前角色演员和神仙</span></span><br><span class="line">print(author_obj.name, author_obj.role_set.all())</span><br><span class="line">author_obj.role_set.clear()</span><br><span class="line">print(author_obj.name, author_obj.role_set.all())</span><br><span class="line"><span class="comment"># 输出：太上老君 &lt;QuerySet [&lt;Role: 演员&gt;, &lt;Role: 神仙&gt;]&gt;</span></span><br><span class="line"><span class="comment"># 太上老君 &lt;QuerySet []&gt;</span></span><br><span class="line"><span class="comment"># sql：DELETE FROM `wechat_role_authors` WHERE `wechat_role_authors`.`author_id` = 8;</span></span><br></pre></td></tr></table></figure>

<p>注意：这样不会删除对象 —— 只会删除他们之间的关联。</p>
<h4 id="set-方法"><a href="#set-方法" class="headerlink" title="set()方法"></a><strong><code>set()</code>方法</strong></h4><p>先清空，在设置。</p>
<p><strong>给太上老君附上新的角色</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author_obj = Author.objects.get(name=<span class="string">&#x27;太上老君&#x27;</span>)</span><br><span class="line"><span class="comment"># # 太上老君当前角色演员和神仙</span></span><br><span class="line">print(author_obj.name, author_obj.role_set.all())</span><br><span class="line">author_obj.role_set.set([<span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>])</span><br><span class="line">print(author_obj.name, author_obj.role_set.all())</span><br><span class="line"><span class="comment"># 输出：太上老君 &lt;QuerySet [&lt;Role: 演员&gt;, &lt;Role: 神仙&gt;, &lt;Role: 大王&gt;, &lt;Role: 歌手&gt;]&gt;</span></span><br><span class="line"><span class="comment"># 太上老君 &lt;QuerySet [&lt;Role: 演员&gt;, &lt;Role: 龙族&gt;, &lt;Role: 将军&gt;]&gt;</span></span><br><span class="line"><span class="comment"># sql：DELETE FROM `wechat_role_authors` WHERE (`wechat_role_authors`.`author_id` = 8 AND `wechat_role_authors`.`role_id` IN (1, 3, 5));</span></span><br><span class="line"><span class="comment"># INSERT IGNORE INTO `wechat_role_authors` (`role_id`, `author_id`) VALUES (2, 8), (4, 8);</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>Django之模型关联</tag>
        <tag>一对多</tag>
        <tag>多对多</tag>
        <tag>一对一</tag>
        <tag>oneToOne</tag>
        <tag>Foreignkey</tag>
        <tag>ManyToMany</tag>
        <tag>Django Orm</tag>
        <tag>Django关联查询</tag>
        <tag>Django关联更新</tag>
        <tag>RelatedManager</tag>
        <tag>关联管理器</tag>
        <tag>add</tag>
        <tag>set</tag>
        <tag>remove</tag>
        <tag>clear</tag>
        <tag>add()</tag>
        <tag>set()</tag>
        <tag>remove()</tag>
        <tag>clear()</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的进程</title>
    <url>/df26ec49.html</url>
    <content><![CDATA[<p>进程（<code>Process</code>）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>操作系统线程理论</p>
<ul>
<li>​    线程概念的引入背景</li>
<li>​    线程的特点</li>
<li>​    进程和线程的关系</li>
<li>​    使用线程的实际场景</li>
<li>​    用户级线程和内核级线程(了解)</li>
</ul>
<p>线程和<code>python</code></p>
<ul>
<li>​    理论知识</li>
<li>​    线程的创建<code>Threading.Thread</code>类</li>
<li>​    锁</li>
<li>​    队列</li>
<li>​    <code>Python</code>标准模块–<code>concurrent.futures</code></li>
</ul>
<hr>
<h2 id="操作系统线程理论"><a href="#操作系统线程理论" class="headerlink" title="操作系统线程理论"></a>操作系统线程理论</h2><h3 id="线程概念的引入背景"><a href="#线程概念的引入背景" class="headerlink" title="线程概念的引入背景"></a>线程概念的引入背景</h3><p><strong>进程</strong></p>
<p>　　之前我们已经了解了操作系统中进程的概念，程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为进程。程序和进程的区别就在于：程序是指令的集合，它是进程运行的静态描述文本；进程是程序的一次执行活动，属于动态概念。在多道编程中，我们允许多个程序同时加载到内存中，在操作系统的调度下，可以实现并发地执行。这是这样的设计，大大提高了CPU的利用率。进程的出现让每个用户感觉到自己独享CPU，因此，进程就是为了在CPU上实现多道编程而提出的。</p>
<p><strong>有了进程为什么要有线程</strong></p>
<p>　　进程有很多优点，它提供了多道编程，让我们感觉我们每个人都拥有自己的CPU和其他资源，可以提高计算机的利用率。很多人就不理解了，既然进程这么优秀，为什么还要线程呢？其实，仔细观察就会发现进程还是有很多缺陷的，主要体现在两点上：</p>
<ul>
<li>进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。</li>
<li>进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。</li>
</ul>
<p>　　如果这两个缺点理解比较困难的话，举个现实的例子也许你就清楚了：如果把我们上课的过程看成一个进程的话，那么我们要做的是耳朵听老师讲课，手上还要记笔记，脑子还要思考问题，这样才能高效的完成听课的任务。而如果只提供进程这个机制的话，上面这三件事将不能同时执行，同一时间只能做一件事，听的时候就不能记笔记，也不能用脑子思考，这是其一；如果老师在黑板上写演算过程，我们开始记笔记，而老师突然有一步推不下去了，阻塞住了，他在那边思考着，而我们呢，也不能干其他事，即使你想趁此时思考一下刚才没听懂的一个问题都不行，这是其二。</p>
<p>　　现在你应该明白了进程的缺陷了，而解决的办法很简单，我们完全可以让听、写、思三个独立的过程，并行起来，这样很明显可以提高听课的效率。而实际的操作系统中，也同样引入了这种类似的机制——线程。</p>
<p><strong>线程的出现</strong></p>
<p>　　60年代，在OS中能拥有资源和独立运行的基本单位是进程，然而随着计算机技术的发展，进程出现了很多弊端，一是由于进程是资源拥有者，创建、撤消与切换存在较大的时空开销，因此需要引入轻型进程；二是由于对称多处理机（<code>SMP</code>）出现，可以满足多个运行单位，而多个进程并行开销过大。</p>
<p>　　因此在80年代，出现了能独立运行的基本单位——线程（<code>Threads</code>）。　</p>
<h3 id="进程和线程的关系"><a href="#进程和线程的关系" class="headerlink" title="进程和线程的关系"></a>进程和线程的关系</h3><p>线程与进程的区别可以归纳为以下4点：</p>
<ol>
<li>地址空间和其它资源（如打开文件）：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。</li>
<li>通信：进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。</li>
<li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li>
<li>在多线程操作系统中，进程不是一个可执行的实体。</li>
</ol>
<p>　　*<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTMvMDQvcHJvY2Vzc2VzX2FuZF90aHJlYWRzLmh0bWw=">通过阮一峰博客漫画了解线程进程<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="线程的特点"><a href="#线程的特点" class="headerlink" title="线程的特点"></a>线程的特点</h3><p>　在多线程的操作系统中，通常是在一个进程中包括多个线程，每个线程都是作为利用CPU的基本单位，是花费最小开销的实体。线程具有以下属性。</p>
<p>　　1）轻型实体</p>
<p>　　线程中的实体基本上不拥有系统资源，只是有一点必不可少的、能保证独立运行的资源。</p>
<p>　　线程的实体包括程序、数据和<code>TCB</code>。线程是动态概念，它的动态特性由线程控制块<code>TCB</code>（<code>Thread Control Block</code>）描述。</p>
<p><code>TCB</code>包括以下信息：</p>
<ol>
<li>（1）线程状态。</li>
<li>（2）当线程不运行时，被保存的现场资源。</li>
<li>（3）一组执行堆栈。</li>
<li>（4）存放每个线程的局部变量主存区。</li>
<li>（5）访问同一个进程中的主存和其它资源。</li>
</ol>
<p>用于指示被执行指令序列的程序计数器、保留局部变量、少数状态参数和返回地址等的一组寄存器和堆栈。</p>
<p>　　2）独立调度和分派的基本单位。</p>
<p>　　在多线程OS中，线程是能独立运行的基本单位，因而也是独立调度和分派的基本单位。由于线程很“轻”，故线程的切换非常迅速且开销小（在同一进程中的）。</p>
<p>　　3）共享进程资源。</p>
<p>　　线程在同一进程中的各个线程，都可以共享该进程所拥有的资源，这首先表现在：所有线程都具有相同的进程id，这意味着，线程可以访问该进程的每一个内存资源；此外，还可以访问进程所拥有的已打开文件、定时器、信号量机构等。由于同一个进程内的线程共享内存和文件，所以线程之间互相通信不必调用内核。</p>
<p>　　4）可并发执行。</p>
<p>　　在一个进程中的多个线程之间，可以并发执行，甚至允许在一个进程中所有线程都能并发执行；同样，不同进程中的线程也能并发执行，充分利用和发挥了处理机与外围设备并行工作的能力。</p>
<h3 id="使用线程的实际场景"><a href="#使用线程的实际场景" class="headerlink" title="使用线程的实际场景"></a>使用线程的实际场景</h3><p>开启一个字处理软件进程，该进程肯定需要办不止一件事情，比如监听键盘输入，处理文字，定时自动将文字保存到硬盘，这三个任务操作的都是同一块数据，因而不能用多进程。只能在一个进程里并发地开启三个线程,如果是单线程，那就只能是，键盘输入时，不能处理文字和自动保存，自动保存时又不能输入和处理文字。</p>
<h3 id="内存中的线程"><a href="#内存中的线程" class="headerlink" title="内存中的线程"></a>内存中的线程</h3><p>多个线程共享同一个进程的地址空间中的资源，是对一台计算机上多个进程的模拟，有时也称线程为轻量级的进程。</p>
<p>　　而对一台计算机上多个进程，则共享物理内存、磁盘、打印机等其他物理资源。多线程的运行也多进程的运行类似，是cpu在多个线程之间的快速切换。</p>
<p>　　不同的进程之间是充满敌意的，彼此是抢占、竞争cpu的关系，如果迅雷会和QQ抢资源。而同一个进程是由一个程序员的程序创建，所以同一进程内的线程是合作关系，一个线程可以访问另外一个线程的内存地址，大家都是共享的，一个线程干死了另外一个线程的内存，那纯属程序员脑子有问题。</p>
<p>　　类似于进程，每个线程也有自己的堆栈，不同于进程，线程库无法利用时钟中断强制线程让出CPU，可以调用thread_yield运行线程自动放弃cpu，让另外一个线程运行。</p>
<p>　　线程通常是有益的，但是带来了不小程序设计难度，线程的问题是：</p>
<p>　　1. 父进程有多个线程，那么开启的子线程是否需要同样多的线程</p>
<p>　　2. 在同一个进程中，如果一个线程关闭了文件，而另外一个线程正准备往该文件内写内容呢？</p>
<p>　　因此，在多线程的代码中，需要更多的心思来设计程序的逻辑、保护程序的数据。</p>
<h3 id="用户级线程和内核级线程（了解）"><a href="#用户级线程和内核级线程（了解）" class="headerlink" title="用户级线程和内核级线程（了解）"></a>用户级线程和内核级线程（了解）</h3><p>线程的实现可以分为两类：用户级线程(User-Level Thread)和内核线线程(Kernel-Level Thread)，后者又称为内核支持的线程或轻量级进程。在多线程操作系统中，各个系统的实现方式并不相同，在有的系统中实现了用户级线程，有的系统中实现了内核级线程。 </p>
<h4 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h4><p>　　内核的切换由用户态程序自己控制内核切换,不需要内核干涉，少了进出内核态的消耗，但不能很好的利用多核Cpu。</p>
<p>　　在用户空间模拟操作系统对进程的调度，来调用一个进程中的线程，每个进程中都会有一个运行时系统，用来调度线程。此时当该进程获取cpu时，进程内再调度出一个线程去执行，同一时刻只有一个线程执行。</p>
<h4 id="内核级线程"><a href="#内核级线程" class="headerlink" title="内核级线程"></a>内核级线程</h4><p>　　 内核级线程:切换由内核控制，当线程进行切换的时候，由用户态转化为内核态。切换完毕要从内核态返回用户态；可以很好的利用smp，即利用多核cpu。windows线程就是这样的。</p>
<p>　</p>
<h4 id="用户级与内核级线程的对比"><a href="#用户级与内核级线程的对比" class="headerlink" title="用户级与内核级线程的对比"></a>用户级与内核级线程的对比</h4><p>1 内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。</p>
<p>2 用户级线程的创建、撤消和调度不需要OS内核的支持，是在语言（如Java）这一级处理的；而内核支持线程的创建、撤消和调度都需OS内核提供支持，而且与进程的创建、撤消和调度大体是相同的。</p>
<p>3 用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。</p>
<p>4 在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。</p>
<p>5 用户级线程的程序实体是运行在用户态下的程序，而内核支持线程的程序实体则是可以运行在任何状态下的程序。</p>
<p>优点：当有多个处理机时，一个进程的多个线程可以同时执行。</p>
<p>缺点：由内核进行调度。</p>
<p>优点：</p>
<p>线程的调度不需要内核直接参与，控制简单。</p>
<p>可以在不支持线程的操作系统中实现。</p>
<p>创建和销毁线程、线程切换代价等线程管理的代价比内核线程少得多。</p>
<p>允许每个进程定制自己的调度算法，线程管理比较灵活。</p>
<p>线程能够利用的表空间和堆栈空间比内核级线程多。</p>
<p>同一进程中只能同时有一个线程在运行，如果有一个线程使用了系统调用而阻塞，那么整个进程都会被挂起。另外，页面失效也会产生同样的问题。</p>
<p>缺点：</p>
<p>资源调度按照进程进行，多个处理机下，同一个进程中的线程只能在同一个处理机下分时复用</p>
<h4 id="混合实现"><a href="#混合实现" class="headerlink" title="混合实现"></a>混合实现</h4><p>　　用户级与内核级的多路复用，内核同一调度内核线程，每个内核线程对应n个用户线程</p>
<h4 id="linux操作系统的-NPTL"><a href="#linux操作系统的-NPTL" class="headerlink" title="　　linux操作系统的 NPTL　　　　"></a>　　linux操作系统的 NPTL　　　　</h4><p><strong>历史</strong></p>
<p>在内核2.6以前的调度实体都是进程，内核并没有真正支持线程。它是能过一个系统调用clone()来实现的，这个调用创建了一份调用进程的拷贝，跟fork()不同的是,这份进程拷贝完全共享了调用进程的地址空间。<code>LinuxThread</code>就是通过这个系统调用来提供线程在内核级的支持的(许多以前的线程实现都完全是在用户态，内核根本不知道线程的存在)。非常不幸的是，这种方法有相当多的地方没有遵循<code>POSIX</code>标准，特别是在信号处理，调度，进程间通信原语等方面。</p>
<p>很显然，为了改进<code>LinuxThread</code>必须得到内核的支持，并且需要重写线程库。为了实现这个需求，开始有两个相互竞争的项目：IBM启动的<code>NGTP(Next Generation POSIX Threads)</code>项目，以及<code>Redhat</code>公司的<code>NPTL</code>。在2003年的年中，IBM放弃了<code>NGTP</code>，也就是大约那时，<code>Redhat</code>发布了最初的<code>NPTL</code>。</p>
<p><code>NPTL</code>最开始在<code>redhat linux 9</code>里发布，现在从<code>RHEL3</code>起内核2.6起都支持<code>NPTL</code>，并且完全成了GNU C库的一部分。</p>
<p><strong>设计</strong></p>
<p><code>NPTL</code>使用了跟<code>LinuxThread</code>相同的办法，在内核里面线程仍然被当作是一个进程，并且仍然使用了clone()系统调用(在<code>NPTL</code>库里调用)。但是，<code>NPTL</code>需要内核级的特殊支持来实现，比如需要挂起然后再唤醒线程的线程同步原语<code>futex</code>.</p>
<p><code>NPTL</code>也是一个1*1的线程库，就是说，当你使用<code>pthread_create()</code>调用创建一个线程后，在内核里就相应创建了一个调度实体，在<code>linux</code>里就是一个新进程，这个方法最大可能的简化了线程的实现。</p>
<p>除<code>NPTL</code>的1*1模型外还有一个<code>m*n</code>模型，通常这种模型的用户线程数会比内核的调度实体多。在这种实现里，线程库本身必须去处理可能存在的调度，这样在线程库内部的上下文切换通常都会相当的快，因为它避免了系统调用转到内核态。然而这种模型增加了线程实现的复杂性,并可能出现诸如优先级反转的问题，此外，用户态的调度如何跟内核态的调度进行协调也是很难让人满意。</p>
<h2 id="线程和python"><a href="#线程和python" class="headerlink" title="线程和python"></a>线程和python</h2><h3 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h3><h4 id="全局解释器锁GIL"><a href="#全局解释器锁GIL" class="headerlink" title="全局解释器锁GIL"></a>全局解释器锁GIL</h4><p>　　Python代码的执行由Python虚拟机(也叫解释器主循环)来控制。Python在设计之初就考虑到要在主循环中，同时只有一个线程在执行。虽然 Python 解释器中可以“运行”多个线程，但在任意时刻只有一个线程在解释器中运行。</p>
<p>　　对Python虚拟机的访问由全局解释器锁(GIL)来控制，正是这个锁能保证同一时刻只有一个线程在运行。</p>
<p>　　在多线程环境中，Python 虚拟机按以下方式执行：</p>
<p>　　a、设置 GIL；</p>
<p>　　b、切换到一个线程去运行；</p>
<p>　　c、运行指定数量的字节码指令或者线程主动让出控制(可以调用 <code>time.sleep(0)</code>)；</p>
<p>　　d、把线程设置为睡眠状态；</p>
<p>　　e、解锁 GIL；</p>
<p>　　d、再次重复以上所有步骤。</p>
<p>　　在调用外部代码(如 C/C++扩展函数)的时候，GIL将会被锁定，直到这个函数结束为止(由于在这期间没有Python的字节码被运行，所以不会做线程切换)编写扩展的程序员可以主动解锁GIL。</p>
<h4 id="python线程模块的选择"><a href="#python线程模块的选择" class="headerlink" title="python线程模块的选择"></a>python线程模块的选择</h4><p>　　Python提供了几个用于多线程编程的模块，包括<code>thread</code>、<code>threading</code>和<code>Queue</code>等。<code>thread</code>和<code>threading</code>模块允许程序员创建和管理线程。thread模块提供了基本的线程和锁的支持，<code>threading</code>提供了更高级别、功能更强的线程管理的功能。Queue模块允许用户创建一个可以用于多个线程之间共享数据的队列数据结构。</p>
<p>　　避免使用thread模块，因为更高级别的<code>threading</code>模块更为先进，对线程的支持更为完善，而且使用<code>thread</code>模块里的属性有可能会与<code>threading</code>出现冲突；其次低级别的<code>thread</code>模块的同步原语很少(实际上只有一个)，而<code>threading</code>模块则有很多；再者，<code>thread</code>模块中当主线程结束时，所有的线程都会被强制结束掉，没有警告也不会有正常的清除工作，至少<code>threading</code>模块能确保重要的子线程退出后进程才退出。 </p>
<p>　　<code>thread</code>模块不支持守护线程，当主线程退出时，所有的子线程不论它们是否还在工作，都会被强行退出。而<code>threading</code>模块支持守护线程，守护线程一般是一个等待客户请求的服务器，如果没有客户提出请求它就在那等着，如果设定一个线程为守护线程，就表示这个线程是不重要的，在进程退出的时候，不用等待这个线程退出。</p>
<h3 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h3><p><code>multiprocess</code>模块的完全模仿了<code>threading</code>模块的接口，二者在使用层面，有很大的相似性，因而不再详细介绍（官方链接）</p>
<h4 id="线程的创建Threading-Thread类"><a href="#线程的创建Threading-Thread类" class="headerlink" title="线程的创建Threading.Thread类"></a>线程的创建Threading.Thread类</h4><p><strong>线程的创建</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line"></span><br><span class="line">创建线程的方式<span class="number">1</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sayhi</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">&#x27;%s say hello&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Sayhi(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line"></span><br><span class="line">创建线程的方式<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>多线程与多进程</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello&#x27;</span>,os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#part1:在主进程下开启多个线程,每个线程都跟主进程的pid一样</span></span><br><span class="line">    t1=Thread(target=work)</span><br><span class="line">    t2=Thread(target=work)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(<span class="string">&#x27;主线程/主进程pid&#x27;</span>,os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#part2:开多个进程,每个进程都有不同的pid</span></span><br><span class="line">    p1=Process(target=work)</span><br><span class="line">    p2=Process(target=work)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    print(<span class="string">&#x27;主线程/主进程pid&#x27;</span>,os.getpid())</span><br><span class="line"></span><br><span class="line">pid的比较</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#在主进程下开启子进程</span></span><br><span class="line">    t=Process(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">开启效率的较量</span><br><span class="line"><span class="keyword">from</span>  threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># n=100</span></span><br><span class="line">    <span class="comment"># p=Process(target=work)</span></span><br><span class="line">    <span class="comment"># p.start()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line">    <span class="comment"># print(&#x27;主&#x27;,n) #毫无疑问子进程p已经将自己的全局的n改成了0,但改的仅仅是它自己的,查看父进程的n仍然为100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    n=<span class="number">1</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>,n) <span class="comment">#查看结果为0,因为同一进程内的线程之间共享进程内的数据</span></span><br><span class="line">同一进程内的线程共享该进程的数据？</span><br><span class="line"></span><br><span class="line">内存数据的共享问题</span><br></pre></td></tr></table></figure>

<p><strong>练习 ：多线程实现socket</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">conn</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        print(data)</span><br><span class="line">        conn.send(data.upper())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,addr=s.accept()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        p=threading.Thread(target=action,args=(conn,))</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=input(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    s.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data=s.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line">client</span><br></pre></td></tr></table></figure>

<p><strong>Thread类的其他方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Thread实例对象的方法</span><br><span class="line">  <span class="comment"># isAlive(): 返回线程是否活动的。</span></span><br><span class="line">  <span class="comment"># getName(): 返回线程名。</span></span><br><span class="line">  <span class="comment"># setName(): 设置线程名。</span></span><br><span class="line"></span><br><span class="line">threading模块提供的一些方法：</span><br><span class="line">  <span class="comment"># threading.currentThread(): 返回当前的线程变量。</span></span><br><span class="line">  <span class="comment"># threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span></span><br><span class="line">  <span class="comment"># threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(threading.current_thread().getName())</span><br><span class="line">    print(threading.current_thread()) <span class="comment">#主线程</span></span><br><span class="line">    print(threading.enumerate()) <span class="comment">#连同主线程在内有两个运行的线程</span></span><br><span class="line">    print(threading.active_count())</span><br><span class="line">    print(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    MainThread</span></span><br><span class="line"><span class="string">    &lt;_MainThread(MainThread, started 140735268892672)&gt;</span></span><br><span class="line"><span class="string">    [&lt;_MainThread(MainThread, started 140735268892672)&gt;, &lt;Thread(Thread-1, started 123145307557888)&gt;]</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    Thread-1</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">代码示例</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line">    print(t.is_alive())</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    egon say hello</span></span><br><span class="line"><span class="string">    主线程</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">join方法</span><br></pre></td></tr></table></figure>

<p><strong>守护线程</strong></p>
<p><strong>无论是进程还是线程，都遵循：守护xx会等待主xx运行完毕后被销毁。**</strong>需要强调的是：运行完毕并非终止运行**</p>
<p>无论是进程还是线程，都遵循：守护xx会等待主xx运行完毕后被销毁。需要强调的是：运行完毕并非终止运行</p>
<p>#1.对主进程来说，运行完毕指的是主进程代码运行完毕</p>
<p>#2.对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才算运行完毕</p>
<p>#1 主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束，</p>
<p>#2 主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.setDaemon(<span class="literal">True</span>) <span class="comment">#必须在t.start()之前设置</span></span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line">    print(t.is_alive())</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主线程</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">守护线程例<span class="number">1</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&quot;end123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;end456&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1=Thread(target=foo)</span><br><span class="line">t2=Thread(target=bar)</span><br><span class="line"></span><br><span class="line">t1.daemon=<span class="literal">True</span></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">print(<span class="string">&quot;main-------&quot;</span>)</span><br><span class="line"></span><br><span class="line">守护线程例<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="锁与GIL"><a href="#锁与GIL" class="headerlink" title="锁与GIL"></a>锁与GIL</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        p=Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(n) <span class="comment">#结果可能为99</span></span><br><span class="line"></span><br><span class="line">多个线程抢占资源的情况</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">R=threading.Lock()</span><br><span class="line">R.acquire()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">对公共数据的操作</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">R.release()</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line">    lock.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        p=Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(n) <span class="comment">#结果肯定为0，由原来的并发执行变成串行，牺牲了执行效率保证了数据安全</span></span><br><span class="line"></span><br><span class="line">同步锁的引用</span><br><span class="line"><span class="comment">#不加锁:并发执行,速度快,数据不安全</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    print(<span class="string">&#x27;%s is running&#x27;</span> %current_thread().getName())</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    threads=[]</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    print(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 is running</span></span><br><span class="line"><span class="string">Thread-2 is running</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 is running</span></span><br><span class="line"><span class="string">主:0.5216062068939209 n:99</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#不加锁:未加锁部分并发执行,加锁部分串行执行,速度慢,数据安全</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="comment">#未加锁的代码并发运行</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s start to run&#x27;</span> %current_thread().getName())</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="comment">#加锁的代码串行运行</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    threads=[]</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    print(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 is running</span></span><br><span class="line"><span class="string">Thread-2 is running</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 is running</span></span><br><span class="line"><span class="string">主:53.294203758239746 n:0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有的同学可能有疑问:既然加锁会让运行变成串行,那么我在start之后立即使用join,就不用加锁了啊,也是串行的效果啊</span></span><br><span class="line"><span class="comment">#没错:在start之后立刻使用jion,肯定会将100个任务的执行变成串行,毫无疑问,最终n的结果也肯定是0,是安全的,但问题是</span></span><br><span class="line"><span class="comment">#start后立即join:任务内的所有代码都是串行执行的,而加锁,只是加锁的部分即修改共享数据的部分是串行的</span></span><br><span class="line"><span class="comment">#单从保证数据安全方面,二者都可以实现,但很明显是加锁的效率更高.</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s start to run&#x27;</span> %current_thread().getName())</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    print(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 start to run</span></span><br><span class="line"><span class="string">Thread-2 start to run</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 start to run</span></span><br><span class="line"><span class="string">主:350.6937336921692 n:0 #耗时是多么的恐怖</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">）</span><br><span class="line"></span><br><span class="line">互斥锁与join的区别</span><br></pre></td></tr></table></figure>

<h4 id="死锁与递归锁"><a href="#死锁与递归锁" class="headerlink" title="死锁与递归锁"></a>死锁与递归锁</h4><p>进程也有死锁与递归锁，在进程那里忘记说了，放到这里一切说了额</p>
<p>所谓死锁： 是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程，如下就是死锁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock <span class="keyword">as</span> Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">mutexA=Lock()</span><br><span class="line">mutexA.acquire()</span><br><span class="line">mutexA.acquire()</span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line">mutexA.release()</span><br><span class="line">mutexA.release()</span><br><span class="line"></span><br><span class="line">死锁</span><br></pre></td></tr></table></figure>

<p>解决方法，递归锁，在Python中为了支持在同一线程中多次请求同一资源，python提供了可重入锁RLock。</p>
<p>这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次require。直到一个线程所有的acquire都被release，其他的线程才能获得资源。上面的例子如果使用RLock代替Lock，则不会发生死锁：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> RLock <span class="keyword">as</span> Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">mutexA=Lock()</span><br><span class="line">mutexA.acquire()</span><br><span class="line">mutexA.acquire()</span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line">mutexA.release()</span><br><span class="line">mutexA.release()</span><br><span class="line"></span><br><span class="line">递归锁RLock</span><br></pre></td></tr></table></figure>

<p>典型问题：科学家吃面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line">noodle_lock = Lock()</span><br><span class="line">fork_lock = Lock()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat1</span>(<span class="params">name</span>):</span></span><br><span class="line">    noodle_lock.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 抢到了面条&#x27;</span>%name)</span><br><span class="line">    fork_lock.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 抢到了叉子&#x27;</span>%name)</span><br><span class="line">    print(<span class="string">&#x27;%s 吃面&#x27;</span>%name)</span><br><span class="line">    fork_lock.release()</span><br><span class="line">    noodle_lock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat2</span>(<span class="params">name</span>):</span></span><br><span class="line">    fork_lock.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 抢到了叉子&#x27;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    noodle_lock.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 抢到了面条&#x27;</span> % name)</span><br><span class="line">    print(<span class="string">&#x27;%s 吃面&#x27;</span> % name)</span><br><span class="line">    noodle_lock.release()</span><br><span class="line">    fork_lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&#x27;哪吒&#x27;</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;yuan&#x27;</span>]:</span><br><span class="line">    t1 = Thread(target=eat1,args=(name,))</span><br><span class="line">    t2 = Thread(target=eat2,args=(name,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">死锁问题</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,RLock</span><br><span class="line">fork_lock = noodle_lock = RLock()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat1</span>(<span class="params">name</span>):</span></span><br><span class="line">    noodle_lock.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 抢到了面条&#x27;</span>%name)</span><br><span class="line">    fork_lock.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 抢到了叉子&#x27;</span>%name)</span><br><span class="line">    print(<span class="string">&#x27;%s 吃面&#x27;</span>%name)</span><br><span class="line">    fork_lock.release()</span><br><span class="line">    noodle_lock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat2</span>(<span class="params">name</span>):</span></span><br><span class="line">    fork_lock.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 抢到了叉子&#x27;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    noodle_lock.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 抢到了面条&#x27;</span> % name)</span><br><span class="line">    print(<span class="string">&#x27;%s 吃面&#x27;</span> % name)</span><br><span class="line">    noodle_lock.release()</span><br><span class="line">    fork_lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&#x27;哪吒&#x27;</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;yuan&#x27;</span>]:</span><br><span class="line">    t1 = Thread(target=eat1,args=(name,))</span><br><span class="line">    t2 = Thread(target=eat2,args=(name,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">递归锁解决死锁问题</span><br></pre></td></tr></table></figure>

<h3 id="线程队列"><a href="#线程队列" class="headerlink" title="线程队列"></a>线程队列</h3><p><strong>queue队列 ：使用import queue，用法与进程Queue一样</strong></p>
<p>queue is especially useful in threaded programming when information must be exchanged safely between multiple threads.</p>
<p><code>class queue.Queue(maxsize=0)</code> #先进先出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.Queue()</span><br><span class="line">q.put(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">q.put(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">q.put(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果(先进先出):</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">third</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">先进先出</span><br></pre></td></tr></table></figure>

<p><code>class queue.LifoQueue(maxsize=0) #last in fisrt out</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.LifoQueue()</span><br><span class="line">q.put(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">q.put(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">q.put(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果(后进先出):</span></span><br><span class="line"><span class="string">third</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">后进先出</span><br></pre></td></tr></table></figure>

<p>class queue.PriorityQueue(maxsize=0) #存储数据时可设置优先级的队列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.PriorityQueue()</span><br><span class="line"><span class="comment">#put进入一个元组,元组的第一个元素是优先级(通常是数字,也可以是非数字之间的比较),数字越小优先级越高</span></span><br><span class="line">q.put((<span class="number">20</span>,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">q.put((<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">q.put((<span class="number">30</span>,<span class="string">&#x27;c&#x27;</span>))</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果(数字越小优先级越高,优先级高的优先出队):</span></span><br><span class="line"><span class="string">(10, &#x27;b&#x27;)</span></span><br><span class="line"><span class="string">(20, &#x27;a&#x27;)</span></span><br><span class="line"><span class="string">(30, &#x27;c&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">优先级队列</span><br><span class="line">Constructor <span class="keyword">for</span> a priority queue. maxsize <span class="keyword">is</span> an integer that sets the upperbound limit on the number of items that can be placed <span class="keyword">in</span> the queue. Insertion will block once this size has been reached, until queue items are consumed. If maxsize <span class="keyword">is</span> less than <span class="keyword">or</span> equal to zero, the queue size <span class="keyword">is</span> infinite.</span><br><span class="line"></span><br><span class="line">The lowest valued entries are retrieved first (the lowest valued entry <span class="keyword">is</span> the one returned by sorted(list(entries))[<span class="number">0</span>]). A typical pattern <span class="keyword">for</span> entries <span class="keyword">is</span> a tuple <span class="keyword">in</span> the form: (priority_number, data).</span><br><span class="line"></span><br><span class="line">exception queue.Empty</span><br><span class="line">Exception raised when non-blocking get() (<span class="keyword">or</span> get_nowait()) <span class="keyword">is</span> called on a Queue object which <span class="keyword">is</span> empty.</span><br><span class="line"></span><br><span class="line">exception queue.Full</span><br><span class="line">Exception raised when non-blocking put() (<span class="keyword">or</span> put_nowait()) <span class="keyword">is</span> called on a Queue object which <span class="keyword">is</span> full.</span><br><span class="line"></span><br><span class="line">Queue.qsize()</span><br><span class="line">Queue.empty() <span class="comment">#return True if empty  </span></span><br><span class="line">Queue.full() <span class="comment"># return True if full </span></span><br><span class="line">Queue.put(item, block=<span class="literal">True</span>, timeout=<span class="literal">None</span>)</span><br><span class="line">Put item into the queue. If optional args block <span class="keyword">is</span> true <span class="keyword">and</span> timeout <span class="keyword">is</span> <span class="literal">None</span> (the default), block <span class="keyword">if</span> necessary until a free slot <span class="keyword">is</span> available. If timeout <span class="keyword">is</span> a positive number, it blocks at most timeout seconds <span class="keyword">and</span> raises the Full exception <span class="keyword">if</span> no free slot was available within that time. Otherwise (block <span class="keyword">is</span> false), put an item on the queue <span class="keyword">if</span> a free slot <span class="keyword">is</span> immediately available, <span class="keyword">else</span> <span class="keyword">raise</span> the Full exception (timeout <span class="keyword">is</span> ignored <span class="keyword">in</span> that case).</span><br><span class="line"></span><br><span class="line">Queue.put_nowait(item)</span><br><span class="line">Equivalent to put(item, <span class="literal">False</span>).</span><br><span class="line"></span><br><span class="line">Queue.get(block=<span class="literal">True</span>, timeout=<span class="literal">None</span>)</span><br><span class="line">Remove <span class="keyword">and</span> <span class="keyword">return</span> an item <span class="keyword">from</span> the queue. If optional args block <span class="keyword">is</span> true <span class="keyword">and</span> timeout <span class="keyword">is</span> <span class="literal">None</span> (the default), block <span class="keyword">if</span> necessary until an item <span class="keyword">is</span> available. If timeout <span class="keyword">is</span> a positive number, it blocks at most timeout seconds <span class="keyword">and</span> raises the Empty exception <span class="keyword">if</span> no item was available within that time. Otherwise (block <span class="keyword">is</span> false), <span class="keyword">return</span> an item <span class="keyword">if</span> one <span class="keyword">is</span> immediately available, <span class="keyword">else</span> <span class="keyword">raise</span> the Empty exception (timeout <span class="keyword">is</span> ignored <span class="keyword">in</span> that case).</span><br><span class="line"></span><br><span class="line">Queue.get_nowait()</span><br><span class="line">Equivalent to get(<span class="literal">False</span>).</span><br><span class="line"></span><br><span class="line">Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads.</span><br><span class="line"></span><br><span class="line">Queue.task_done()</span><br><span class="line">Indicate that a formerly enqueued task <span class="keyword">is</span> complete. Used by queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task <span class="keyword">is</span> complete.</span><br><span class="line"></span><br><span class="line">If a join() <span class="keyword">is</span> currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received <span class="keyword">for</span> every item that had been put() into the queue).</span><br><span class="line"></span><br><span class="line">Raises a ValueError <span class="keyword">if</span> called more times than there were items placed <span class="keyword">in</span> the queue.</span><br><span class="line"></span><br><span class="line">Queue.join() block直到queue被消费完毕</span><br><span class="line"></span><br><span class="line">更多方法说明</span><br></pre></td></tr></table></figure>

<h3 id="Python标准模块–concurrent-futures"><a href="#Python标准模块–concurrent-futures" class="headerlink" title="Python标准模块–concurrent.futures"></a>Python标准模块–concurrent.futures</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvZGV2L2xpYnJhcnkvY29uY3VycmVudC5mdXR1cmVzLmh0bWw=">https://docs.python.org/dev/library/concurrent.futures.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 介绍</span></span><br><span class="line">concurrent.futures模块提供了高度封装的异步调用接口</span><br><span class="line">ThreadPoolExecutor：线程池，提供异步调用</span><br><span class="line">ProcessPoolExecutor: 进程池，提供异步调用</span><br><span class="line">Both implement the same interface, which <span class="keyword">is</span> defined by the abstract Executor <span class="keyword">class</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 基本方法</span></span><br><span class="line"><span class="comment">#submit(fn, *args, **kwargs)</span></span><br><span class="line">异步提交任务</span><br><span class="line"></span><br><span class="line"><span class="comment">#map(func, *iterables, timeout=None, chunksize=1) </span></span><br><span class="line">取代<span class="keyword">for</span>循环submit的操作</span><br><span class="line"></span><br><span class="line"><span class="comment">#shutdown(wait=True) </span></span><br><span class="line">相当于进程池的pool.close()+pool.join()操作</span><br><span class="line">wait=<span class="literal">True</span>，等待池内所有任务执行完毕回收完资源后才继续</span><br><span class="line">wait=<span class="literal">False</span>，立即返回，并不会等待池内的任务执行完毕</span><br><span class="line">但不管wait参数为何值，整个程序都会等到所有任务执行完毕</span><br><span class="line">submit和map必须在shutdown之前</span><br><span class="line"></span><br><span class="line"><span class="comment">#result(timeout=None)</span></span><br><span class="line">取得结果</span><br><span class="line"></span><br><span class="line"><span class="comment">#add_done_callback(fn)</span></span><br><span class="line">回调函数</span><br><span class="line"></span><br><span class="line"><span class="comment"># done()</span></span><br><span class="line">判断某一个线程是否完成</span><br><span class="line"></span><br><span class="line"><span class="comment"># cancle()</span></span><br><span class="line">取消某个任务</span><br><span class="line"><span class="comment">#介绍</span></span><br><span class="line">The ProcessPoolExecutor class is an Executor subclass that uses a pool of processes to execute calls asynchronously. ProcessPoolExecutor uses the multiprocessing module, which allows it to side-step the Global Interpreter Lock but also means that only picklable objects can be executed and returned.</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">concurrent</span>.<span class="title">futures</span>.<span class="title">ProcessPoolExecutor</span>(<span class="params">max_workers=None, mp_context=None</span>)</span></span><br><span class="line">An Executor subclass that executes calls asynchronously using a pool of at most max_workers processes. If max_workers is None or not given, it will default to the number of processors on the machine. If max_workers is lower or equal to 0, then a ValueError will be raised.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#用法</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s is runing&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    executor=ProcessPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    futures=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">        future=executor.submit(task,i)</span><br><span class="line">        futures.append(future)</span><br><span class="line">    executor.shutdown(<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">&#x27;+++&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">        print(future.result())</span><br><span class="line"></span><br><span class="line">ProcessPoolExecutor</span><br><span class="line"><span class="comment">#介绍</span></span><br><span class="line">ThreadPoolExecutor <span class="keyword">is</span> an Executor subclass that uses a pool of threads to execute calls asynchronously.</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">concurrent</span>.<span class="title">futures</span>.<span class="title">ThreadPoolExecutor</span>(<span class="params">max_workers=None, thread_name_prefix=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">An</span> <span class="title">Executor</span> <span class="title">subclass</span> <span class="title">that</span> <span class="title">uses</span> <span class="title">a</span> <span class="title">pool</span> <span class="title">of</span> <span class="title">at</span> <span class="title">most</span> <span class="title">max_workers</span> <span class="title">threads</span> <span class="title">to</span> <span class="title">execute</span> <span class="title">calls</span> <span class="title">asynchronously</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Changed</span> <span class="title">in</span> <span class="title">version</span> 3.5:</span> If max_workers <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> given, it will default to the number of processors on the machine, multiplied by <span class="number">5</span>, assuming that ThreadPoolExecutor <span class="keyword">is</span> often used to overlap I/O instead of CPU work <span class="keyword">and</span> the number of workers should be higher than the number of workers <span class="keyword">for</span> ProcessPoolExecutor.</span><br><span class="line"></span><br><span class="line">New <span class="keyword">in</span> version <span class="number">3.6</span>: The thread_name_prefix argument was added to allow users to control the threading.Thread names <span class="keyword">for</span> worker threads created by the pool <span class="keyword">for</span> easier debugging.</span><br><span class="line"></span><br><span class="line"><span class="comment">#用法</span></span><br><span class="line">与ProcessPoolExecutor相同</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s is runing&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    executor=ThreadPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for i in range(11):</span></span><br><span class="line">    <span class="comment">#     future=executor.submit(task,i)</span></span><br><span class="line"></span><br><span class="line">    executor.map(task,range(<span class="number">1</span>,<span class="number">12</span>)) <span class="comment">#map取代了for+submit</span></span><br><span class="line"></span><br><span class="line">map的用法</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;&lt;进程%s&gt; get %s&#x27;</span> %(os.getpid(),url))</span><br><span class="line">    respone=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;url&#x27;</span>:url,<span class="string">&#x27;text&#x27;</span>:respone.text&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">res</span>):</span></span><br><span class="line">    res=res.result()</span><br><span class="line">    print(<span class="string">&#x27;&lt;进程%s&gt; parse %s&#x27;</span> %(os.getpid(),res[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">    parse_res=<span class="string">&#x27;url:&lt;%s&gt; size:[%s]\n&#x27;</span> %(res[<span class="string">&#x27;url&#x27;</span>],len(res[<span class="string">&#x27;text&#x27;</span>]))</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(parse_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls=[</span><br><span class="line">        <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.python.org&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.openstack.org&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://help.github.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://www.sina.com.cn/&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># p=Pool(3)</span></span><br><span class="line">    <span class="comment"># for url in urls:</span></span><br><span class="line">    <span class="comment">#     p.apply_async(get_page,args=(url,),callback=pasrse_page)</span></span><br><span class="line">    <span class="comment"># p.close()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line"></span><br><span class="line">    p=ProcessPoolExecutor(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        p.submit(get_page,url).add_done_callback(parse_page) <span class="comment">#parse_page拿到的是一个future对象obj，需要用obj.result()拿到结果</span></span><br><span class="line"></span><br><span class="line">回调函数</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Process</tag>
        <tag>进程</tag>
        <tag>线程</tag>
        <tag>python进程</tag>
        <tag>python线程</tag>
        <tag>threding</tag>
        <tag>gil</tag>
        <tag>nptl</tag>
      </tags>
  </entry>
  <entry>
    <title>python异步任务调度工具之Celery</title>
    <url>/4d5eadba.html</url>
    <content><![CDATA[<p> <code>Celery</code> 是 <code>Distributed Task Queue</code>，分布式任务队列，分布式决定了可以有多个 <code>worker</code> 的存在，队列表示其是异步操作，即存在一个产生任务提出需求的工头，和一群等着被分配工作的码农。 </p>
<a id="more"></a>

<p>在 <code>Python</code> 中定义 <code>Celery</code> 的时候，我们要引入 <code>Broker</code>，中文翻译过来就是“中间人”的意思，在这里 <code>Broker</code> 起到一个中间人的角色。在工头提出任务的时候，把所有的任务放到 <code>Broker</code> 里面，在 <code>Broker</code> 的另外一头，一群码农等着取出一个个任务准备着手做。</p>
<p>​    这种模式注定了整个系统会是个开环系统，工头对于码农们把任务做的怎样是不知情的。所以我们要引入 <code>Backend</code> 来保存每次任务的结果。这个 <code>Backend</code> 有点像我们的 <code>Broker</code>，也是存储任务的信息用的，只不过这里存的是那些任务的返回结果。我们可以选择只让错误执行的任务返回结果到 <code>Backend</code>，这样我们取回结果，便可以知道有多少任务执行失败了。</p>
<p>​    <code>Celery</code>(芹菜)是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，但对调度支持也很好。<code>Celery</code>用于生产系统每天处理数以百万计的任务。<code>Celery</code>是用<code>Python</code>编写的，但该协议可以在任何语言实现。它也可以与其他语言通过<code>webhooks</code>实现。<code>Celery</code>建议的消息队列是<code>RabbitMQ</code>，但提供有限支持<code>Redis</code>, <code>Beanstalk</code>, <code>MongoDB</code>, <code>CouchDB</code>, 和数据库（使用<code>SQLAlchemy</code>的或<code>Django</code>的 <code>ORM</code>） 。<code>Celery</code>是易于集成<code>Django</code>, <code>Pylons</code> and <code>Flask</code>，使用 <code>django-celery</code>, <code>celery-pylons</code> and <code>Flask-Celery</code> 附加包即可。</p>
<h2 id="Celery-介绍"><a href="#Celery-介绍" class="headerlink" title="Celery 介绍"></a><code>Celery</code> 介绍</h2><p>在<code>Celery</code>中几个基本的概念，需要先了解下，不然不知道为什么要安装下面的东西。概念：<code>Broker</code>、<code>Backend</code>。</p>
<h3 id="什么是broker？"><a href="#什么是broker？" class="headerlink" title="什么是broker？"></a>什么是<code>broker</code>？</h3><p><code>broker</code>是一个消息传输的中间件，可以理解为一个邮箱。每当应用程序调用celery的异步任务的时候，会向<code>broker</code>传递消息，而后<code>celery</code>的<code>worker</code>将会取到消息，进行对于的程序执行。好吧，这个邮箱可以看成是一个消息队列。其中<code>Broker</code>的中文意思是 经纪人 ，其实就是一开始说的 消息队列 ，用来发送和接受消息。这个<code>Broker</code>有几个方案可供选择：<code>RabbitMQ</code> (消息队列)，<code>Redis</code>（缓存数据库），关系型数据库（不推荐），等等</p>
<h3 id="什么是backend？"><a href="#什么是backend？" class="headerlink" title="什么是backend？"></a>什么是<code>backend</code>？</h3><p>通常程序发送的消息，发完就完了，可能都不知道对方时候接受了。为此，<code>celery</code>实现了一个<code>backend</code>，用于存储这些消息以及<code>celery</code>执行的一些消息和结果。<code>Backend</code>是在<code>Celery</code>的配置中的一个配置项 <code>CELERY_RESULT_BACKEND</code> ，作用是保存结果和状态，如果你需要跟踪任务的状态，那么需要设置这一项，可以是<code>Database backend</code>，也可以是<code>Cache</code> <code>backend</code>，具体可以参考这里： <span class="exturl" data-url="aHR0cDovL2RvY3MuY2VsZXJ5cHJvamVjdC5vcmcvZW4vbGF0ZXN0L2NvbmZpZ3VyYXRpb24uaHRtbCNjZWxlcnktcmVzdWx0LWJhY2tlbmQ=">CELERY_RESULT_BACKEND<i class="fa fa-external-link-alt"></i></span> 。</p>
<p>对于 <code>brokers</code>，官方推荐是 <code>rabbitmq</code> 和 <code>redis</code>，至于 <code>backend</code>，就是数据库。为了简单可以都使用 <code>redis</code>。</p>
<p><img data-src="https://picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20191022142535.png"></p>
<h2 id="Celery初体验"><a href="#Celery初体验" class="headerlink" title="Celery初体验"></a><code>Celery</code>初体验</h2><h3 id="创建worker"><a href="#创建worker" class="headerlink" title="创建worker"></a>创建<code>worker</code></h3><p>文件名：<code>CeleryTask.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">redis_cli = <span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Celery实例,这就是我们用户的应用app</span></span><br><span class="line">my_task = Celery(<span class="string">&#x27;TestTasks&#x27;</span>, broker = redis_cli, backend= redis_cli)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建任务</span></span><br><span class="line"><span class="meta">@my_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">type</span>):</span></span><br><span class="line">    time.sleep(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;我是func1的返回值，完成了任务【<span class="subst">&#123;type&#125;</span>】&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是func2的返回值&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是func3的返回值&quot;</span></span><br></pre></td></tr></table></figure>
<p>创建好了<code>worker</code>接下来我们要启动这个它，<code>Celert4</code>以上貌似不知道<code>windows</code>，所以我们需要安装一个扩展包<code>eventlet</code>，<code>linux</code>不需要，启动时使用一下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">celery worker -A CeleryTask -l INFO -P eventlet</span><br></pre></td></tr></table></figure>

<p><code>linux</code>下不用加<code>-P</code>参数，以上便成功启动了。</p>
<h3 id="发布任务"><a href="#发布任务" class="headerlink" title="发布任务"></a>发布任务</h3><p>工头布置任务，文件名<code>RunTask.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> CeleryTask <span class="keyword">import</span> func1, func2, func3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将任务交给我Celery的Worker执行会返回一个任务id</span></span><br><span class="line">res = func1.delay(<span class="string">&quot;买菜&quot;</span>)</span><br><span class="line">print(res, type(res))</span><br></pre></td></tr></table></figure>
<h3 id="检查任务"><a href="#检查任务" class="headerlink" title="检查任务"></a>检查任务</h3><p>我们检查一个任务是否完成，文件名：<code>WatchTask.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">from</span> CeleryTask <span class="keyword">import</span> my_task</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步获取任务返回值</span></span><br><span class="line">res = AsyncResult(id = <span class="string">&quot;c17ab9d7-b4d5-41ed-88b3-120f0c00ebf5&quot;</span>, app=my_task)</span><br><span class="line">print(<span class="string">&#x27;结果：&#x27;</span>, res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应结果</span></span><br><span class="line">print(<span class="string">&#x27;get：&#x27;</span>, res.get())</span><br><span class="line"><span class="comment"># 任务是否成功完成</span></span><br><span class="line">print(<span class="string">&#x27;成功：&#x27;</span>, res.successful())</span><br></pre></td></tr></table></figure>

<p>我们通过之前发布的任务id，来检查该任务的状态，运行检查任务代码：</p>
<p>20秒以前，任务未完成时打印如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files\Python37\python.exe&quot; E:&#x2F;site&#x2F;WatchTask.py</span><br><span class="line">结果： c17ab9d7-b4d5-41ed-88b3-120f0c00ebf5</span><br></pre></td></tr></table></figure>

<p>反复执行该文件，大约20秒后打印如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files\Python37\python.exe&quot; E:&#x2F;site&#x2F;WatchTask.py</span><br><span class="line">结果： c17ab9d7-b4d5-41ed-88b3-120f0c00ebf5</span><br><span class="line">get： 我是func1的返回值，完成了任务【买菜】</span><br><span class="line">成功： True</span><br></pre></td></tr></table></figure>

<p>同时worker也帮我们打印出了日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2019-10-22 14:11:04,229: INFO&#x2F;MainProcess] Task CeleryTask.func1[c17ab9d7-b4d5-41ed-88b3-120f0c00ebf5] succeeded in 20.0s: &#39;我是func1的返回值&#39;</span><br></pre></td></tr></table></figure>

<h2 id="分布式爬虫"><a href="#分布式爬虫" class="headerlink" title="分布式爬虫"></a>分布式爬虫</h2><p>之前文章<a href="https://www.diandian100.cn/3348cce.html">**从零开发手机<code>app</code>之爬取数据</a>**中我们做过一个简单的爬虫，今天我们这里使用<code>celery</code>来实现下这个爬虫。</p>
<h3 id="之前代码"><a href="#之前代码" class="headerlink" title="之前代码"></a>之前代码</h3><p>我们先放上原来的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, time, os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止被墙</span></span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+ xml,application/xml;q = 0.9,image/webp,image/apng,*/*;q=0.8, application/signe-exchange;v = b3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抖音热歌列表url</span></span><br><span class="line">music_list_url = <span class="string">&#x27;http://www.kuwo.cn/api/www/bang/bang/musicList?bangId=158&amp;pn=1&amp;rn=30&amp;reqId=a27b7ee0-ebd3-11e9-92b8-13a9816f0dc5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取音乐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kuwo</span>():</span></span><br><span class="line">    <span class="comment"># 获取歌曲列表接口</span></span><br><span class="line">    res = requests.get(music_list_url, headers=headers)</span><br><span class="line">    <span class="comment"># 获取歌曲列表数据</span></span><br><span class="line">    music_datas = res.json().get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;musicList&#x27;</span>)</span><br><span class="line">    <span class="comment"># 循环读取每条歌曲数据</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> music_datas:</span><br><span class="line">        <span class="comment"># 休眠一秒防止被踢</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 定义文件名</span></span><br><span class="line">        <span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line">        filename = uuid4()</span><br><span class="line">        <span class="comment"># 定义要保存的图片名称及路径</span></span><br><span class="line">        img = os.path.join(<span class="string">&#x27;img&#x27;</span>, <span class="string">f&quot;<span class="subst">&#123;filename&#125;</span>.jpg&quot;</span>)</span><br><span class="line">        <span class="comment"># 下载歌曲图片</span></span><br><span class="line">        download(item.get(<span class="string">&#x27;pic&#x27;</span>), img)</span><br><span class="line">        print(<span class="string">&#x27;采集成功……&#x27;</span>)</span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">url, path</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    下载文件</span></span><br><span class="line"><span class="string">    :param url: 要在下载的文件路径</span></span><br><span class="line"><span class="string">    :param path: 要保存的文件位置</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    res = requests.get(url).content</span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># 开始爬取</span></span><br><span class="line">    kuwo()</span><br><span class="line">    print(<span class="string">&quot;用时：&quot;</span>, time.time() - start)</span><br></pre></td></tr></table></figure>

<p>本次共爬取30个资源，测试函数总用时30多秒钟</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">采集成功……</span><br><span class="line">用时： 32.57835030555725</span><br></pre></td></tr></table></figure>

<h3 id="使用Celery改进"><a href="#使用Celery改进" class="headerlink" title="使用Celery改进"></a>使用<code>Celery</code>改进</h3><h4 id="任务列表spider-py"><a href="#任务列表spider-py" class="headerlink" title="任务列表spider.py"></a>任务列表<code>spider.py</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, time, os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">redis_cli = <span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line"></span><br><span class="line">my_task = Celery(<span class="string">&#x27;TestTasks&#x27;</span>, broker = redis_cli, backend= redis_cli)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬虫任务</span></span><br><span class="line"><span class="meta">@my_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 休眠一秒防止被踢</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 定义文件名</span></span><br><span class="line">    <span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line">    filename = uuid4()</span><br><span class="line">    <span class="comment"># 定义要保存的图片名称及路径</span></span><br><span class="line">    img = os.path.join(<span class="string">&#x27;img&#x27;</span>, <span class="string">f&quot;<span class="subst">&#123;filename&#125;</span>.jpg&quot;</span>)</span><br><span class="line">    <span class="comment"># 下载歌曲图片</span></span><br><span class="line">    res = requests.get(url).content</span><br><span class="line">    <span class="keyword">with</span> open(img, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;文件：【<span class="subst">&#123;img&#125;</span>】采集成功!&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="分发任务"><a href="#分发任务" class="headerlink" title="分发任务"></a>分发任务</h4><p>文件名：<code>PublishTask.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, time, os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> spider <span class="keyword">import</span> run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止被墙</span></span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+ xml,application/xml;q = 0.9,image/webp,image/apng,*/*;q=0.8, application/signe-exchange;v = b3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抖音热歌列表url</span></span><br><span class="line">music_list_url = <span class="string">&#x27;http://www.kuwo.cn/api/www/bang/bang/musicList?bangId=158&amp;pn=1&amp;rn=30&amp;reqId=a27b7ee0-ebd3-11e9-92b8-13a9816f0dc5&#x27;</span></span><br><span class="line"><span class="comment"># 获取歌曲列表接口</span></span><br><span class="line">res = requests.get(music_list_url, headers=headers)</span><br><span class="line"><span class="comment"># 获取歌曲列表数据</span></span><br><span class="line">music_datas = res.json().get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;musicList&#x27;</span>)</span><br><span class="line"><span class="comment"># 循环发布每条任务</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> music_datas:</span><br><span class="line">    res = run.delay(item.get(<span class="string">&#x27;pic&#x27;</span>))</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<h4 id="测试执行"><a href="#测试执行" class="headerlink" title="测试执行"></a>测试执行</h4><p>使用命令启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 最大worker数量25</span><br><span class="line">Celery worker -A spider -c 25 -l INFO -P eventlet</span><br></pre></td></tr></table></figure>

<p>运行<code>PublishTask.py</code>文件，30个任务id瞬间打印出来，我们来看看Celery日志输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2019-10-22 15:46:55,760: INFO&#x2F;MainProcess] Received task: spider.run[afa14131-972b-45fc-bac0-23c5636119af]</span><br><span class="line">[2019-10-22 15:46:55,762: INFO&#x2F;MainProcess] Received task: spider.run[2ab02b40-ea01-44b1-a4a3-2ef153daf832]</span><br><span class="line">[2019-10-22 15:46:55,765: INFO&#x2F;MainProcess] Received task: spider.run[bc7a97d5-f152-4d98-b2a0-81a972cda3a7]</span><br><span class="line">[2019-10-22 15:46:55,766: INFO&#x2F;MainProcess] Received task: spider.run[5daeb4f6-ba0e-479d-8a5d-8323c19a6aa3]</span><br><span class="line">[2019-10-22 15:46:55,768: INFO&#x2F;MainProcess] Received task: spider.run[8c8a1c78-a5ee-416c-8a13-9524b0033e40]</span><br><span class="line">[2019-10-22 15:46:55,769: INFO&#x2F;MainProcess] Received task: spider.run[326cc297-9a97-4d4a-90ae-ce713884aec2]</span><br><span class="line">[2019-10-22 15:46:55,771: INFO&#x2F;MainProcess] Received task: spider.run[a41c6f9c-3295-44ab-98e3-297d7bf74d28]</span><br><span class="line">[2019-10-22 15:46:55,772: INFO&#x2F;MainProcess] Received task: spider.run[055ed399-59c9-49ff-8366-364103a1cea6]</span><br><span class="line">[2019-10-22 15:46:55,774: INFO&#x2F;MainProcess] Received task: spider.run[d49c02e8-e29d-4ff8-a13a-f4b4842c62a9]</span><br><span class="line">[2019-10-22 15:46:55,775: INFO&#x2F;MainProcess] Received task: spider.run[a3f65009-4b54-4f73-bce6-4323cd43a4b3]</span><br><span class="line">[2019-10-22 15:46:55,777: INFO&#x2F;MainProcess] Received task: spider.run[32e1af6b-0bfa-4283-bfac-c706019a7700]</span><br><span class="line">[2019-10-22 15:46:55,778: INFO&#x2F;MainProcess] Received task: spider.run[b7fa1843-c342-4be3-993d-c14e75a219ee]</span><br><span class="line">[2019-10-22 15:46:55,779: INFO&#x2F;MainProcess] Received task: spider.run[0334b7ed-71cf-4f50-8eba-c98f5a886fa6]</span><br><span class="line">[2019-10-22 15:46:55,781: INFO&#x2F;MainProcess] Received task: spider.run[54cee9f2-6e2e-4ecf-a3ee-ddaaf5a3407e]</span><br><span class="line">[2019-10-22 15:46:55,782: INFO&#x2F;MainProcess] Received task: spider.run[2802ec81-ffe1-4e6b-a618-58aea0f437d4]</span><br><span class="line">[2019-10-22 15:46:55,783: INFO&#x2F;MainProcess] Received task: spider.run[348fe088-6e5b-4644-975c-1ae5ddcb8ea3]</span><br><span class="line">[2019-10-22 15:46:55,785: INFO&#x2F;MainProcess] Received task: spider.run[cbfd2619-ce7d-4e82-becf-7b99d664a201]</span><br><span class="line">[2019-10-22 15:46:55,786: INFO&#x2F;MainProcess] Received task: spider.run[f228e417-ea25-405c-8885-af1ec26f6566]</span><br><span class="line">[2019-10-22 15:46:55,788: INFO&#x2F;MainProcess] Received task: spider.run[736bfc0c-86e2-4cb4-9584-07fbe7d1d511]</span><br><span class="line">[2019-10-22 15:46:55,790: INFO&#x2F;MainProcess] Received task: spider.run[38240675-df53-430f-bb6f-0eac4eaf81c3]</span><br><span class="line">[2019-10-22 15:46:55,793: INFO&#x2F;MainProcess] Received task: spider.run[d71929cf-dc76-4b75-8d6c-ff21acdf0d38]</span><br><span class="line">[2019-10-22 15:46:55,794: INFO&#x2F;MainProcess] Received task: spider.run[d8079d5c-2fde-426e-ba7d-3e04846ffe8e]</span><br><span class="line">[2019-10-22 15:46:55,796: INFO&#x2F;MainProcess] Received task: spider.run[f0d95992-026b-4ca0-853f-d8d20bb31380]</span><br><span class="line">[2019-10-22 15:46:55,798: INFO&#x2F;MainProcess] Received task: spider.run[20c35a7d-3749-4add-b430-9ec72954e741]</span><br><span class="line">[2019-10-22 15:46:55,801: INFO&#x2F;MainProcess] Received task: spider.run[b85a0bfd-0d81-4efa-846f-8de835eb0022]</span><br><span class="line">[2019-10-22 15:46:55,802: INFO&#x2F;MainProcess] Received task: spider.run[9bd97385-52d9-421f-afaf-d5ced31e154d]</span><br><span class="line">[2019-10-22 15:46:57,093: INFO&#x2F;MainProcess] Task spider.run[bc7a97d5-f152-4d98-b2a0-81a972cda3a7] succeeded in 1.3280000000013388s: &#39;文件：【img\4069fc3f-f823-4c89-ac26-5c1d2d5c2b9d.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,094: INFO&#x2F;MainProcess] Task spider.run[afa14131-972b-45fc-bac0-23c5636119af] succeeded in 1.3280000000013388s: &#39;文件：【img\4aa78a6f-632c-42a5-8c05-229ac3f8dcc8.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,095: INFO&#x2F;MainProcess] Task spider.run[8c8a1c78-a5ee-416c-8a13-9524b0033e40] succeeded in 1.3280000000013388s: &#39;文件：【img\036d0e76-a05c-443b-af32-fbe30f7b4b6d.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,095: INFO&#x2F;MainProcess] Task spider.run[d49c02e8-e29d-4ff8-a13a-f4b4842c62a9] succeeded in 1.3130000000019209s: &#39;文件：【img\c47f5d02-da2d-46b2-84c5-5849d657fef1.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,096: INFO&#x2F;MainProcess] Task spider.run[f0d95992-026b-4ca0-853f-d8d20bb31380] succeeded in 1.2969999999986612s: &#39;文件：【img\4578c584-7497-40e1-ba13-3d714b85f72c.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,096: INFO&#x2F;MainProcess] Task spider.run[2ab02b40-ea01-44b1-a4a3-2ef153daf832] succeeded in 1.3280000000013388s: &#39;文件：【img\39032b88-89f4-4e4d-856e-af55571bd814.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,096: INFO&#x2F;MainProcess] Task spider.run[2802ec81-ffe1-4e6b-a618-58aea0f437d4] succeeded in 1.3130000000019209s: &#39;文件：【img\978ec002-92b1-490e-b050-26db727e3cf2.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,097: INFO&#x2F;MainProcess] Task spider.run[38240675-df53-430f-bb6f-0eac4eaf81c3] succeeded in 1.2969999999986612s: &#39;文件：【img\5ad330c7-9f7f-4c09-bafc-92cc3d164ece.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,097: INFO&#x2F;MainProcess] Task spider.run[a41c6f9c-3295-44ab-98e3-297d7bf74d28] succeeded in 1.3280000000013388s: &#39;文件：【img\d73cf877-4c10-4819-b7b9-38ef1c56b953.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,097: INFO&#x2F;MainProcess] Task spider.run[f228e417-ea25-405c-8885-af1ec26f6566] succeeded in 1.3130000000019209s: &#39;文件：【img\c8a78ab7-e1a5-4fc3-b9ff-7c5d26e778d1.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,098: INFO&#x2F;MainProcess] Task spider.run[5daeb4f6-ba0e-479d-8a5d-8323c19a6aa3] succeeded in 1.3280000000013388s: &#39;文件：【img\bd65a09b-184d-4306-9609-132cd73344e4.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,098: INFO&#x2F;MainProcess] Task spider.run[055ed399-59c9-49ff-8366-364103a1cea6] succeeded in 1.3280000000013388s: &#39;文件：【img\e8d2d0cf-65e9-4373-9b19-653df23e7eef.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,098: INFO&#x2F;MainProcess] Task spider.run[0334b7ed-71cf-4f50-8eba-c98f5a886fa6] succeeded in 1.3130000000019209s: &#39;文件：【img\bfda03cb-4749-4dfd-81b1-63b88a4863c5.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,099: INFO&#x2F;MainProcess] Task spider.run[cbfd2619-ce7d-4e82-becf-7b99d664a201] succeeded in 1.3130000000019209s: &#39;文件：【img\732e9d6d-c6b6-45c2-abcc-d6862bbfa72e.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,099: INFO&#x2F;MainProcess] Task spider.run[32e1af6b-0bfa-4283-bfac-c706019a7700] succeeded in 1.3130000000019209s: &#39;文件：【img\77d7dde5-9a36-482a-97ab-fbcf94e3c021.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,101: INFO&#x2F;MainProcess] Task spider.run[54cee9f2-6e2e-4ecf-a3ee-ddaaf5a3407e] succeeded in 1.3290000000015425s: &#39;文件：【img\b772f99f-36ca-4776-9b6f-f3aefc834dd9.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,102: INFO&#x2F;MainProcess] Received task: spider.run[cd758c80-e8f3-4eef-95a9-26ac56131adf]</span><br><span class="line">[2019-10-22 15:46:57,137: INFO&#x2F;MainProcess] Task spider.run[326cc297-9a97-4d4a-90ae-ce713884aec2] succeeded in 1.375s: &#39;文件：【img\682170a0-d428-4039-90a0-59744f2918b9.jpg】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,138: INFO&#x2F;MainProcess] Task spider.run[d71929cf-dc76-4b75-8d6c-ff21acdf0d38] succeeded in 1.3439999999973224s: &#39;文件：【img\e72af2f6-6541-4ed2-936f-31c83aaa8a93.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,140: INFO&#x2F;MainProcess] Task spider.run[a3f65009-4b54-4f73-bce6-4323cd43a4b3] succeeded in 1.360000000000582s: &#39;文件：【img\dbdcc404-aac9-4741-a58b-25f7d3eee8f3.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:57,141: INFO&#x2F;MainProcess] Received task: spider.run[0cc84de9-d41b-4958-b9ab-81aad2c696d4]</span><br><span class="line">[2019-10-22 15:46:57,143: INFO&#x2F;MainProcess] Received task: spider.run[00d7909d-1305-46a1-952c-49e540bf470b]</span><br><span class="line">[2019-10-22 15:46:57,145: INFO&#x2F;MainProcess] Received task: spider.run[68874ab0-119a-4206-bc68-ab71c21c1fe6]</span><br><span class="line">[2019-10-22 15:46:57,156: INFO&#x2F;MainProcess] Task spider.run[348fe088-6e5b-4644-975c-1ae5ddcb8ea3] succeeded in 1.375s: &#39;文件：【img\d0c553d9-95a4-480c-b61e-ee2c6cdfa57e.jpg】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,164: INFO&#x2F;MainProcess] Task spider.run[cd758c80-e8f3-4eef-95a9-26ac56131adf] succeeded in 1.0459999999984575s: &#39;文件：【img\826a21be-02b8-4d6a-9bd3-4b489d81c64d.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,173: INFO&#x2F;MainProcess] Task spider.run[9bd97385-52d9-421f-afaf-d5ced31e154d] succeeded in 1.0620000000017171s: &#39;文件：【img\f83af5be-e641-49d2-b5ef-d2fc655ce166.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,190: INFO&#x2F;MainProcess] Task spider.run[68874ab0-119a-4206-bc68-ab71c21c1fe6] succeeded in 1.0470000000022992s: &#39;文件：【img\15f4732b-2306-4fe0-a90d-62c3cd4579ed.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,206: INFO&#x2F;MainProcess] Task spider.run[0cc84de9-d41b-4958-b9ab-81aad2c696d4] succeeded in 1.0620000000017171s: &#39;文件：【img\9911ce58-146b-46b1-a163-b6104c4a06e6.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,207: INFO&#x2F;MainProcess] Task spider.run[00d7909d-1305-46a1-952c-49e540bf470b] succeeded in 1.0620000000017171s: &#39;文件：【img\6d3dd6dd-717b-478e-8b01-9ec12a35e496.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,868: INFO&#x2F;MainProcess] Task spider.run[d8079d5c-2fde-426e-ba7d-3e04846ffe8e] succeeded in 3.077999999997701s: &#39;文件：【img\a195ffb5-5d0d-4df2-86b7-52672a8a3842.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,889: INFO&#x2F;MainProcess] Task spider.run[20c35a7d-3749-4add-b430-9ec72954e741] succeeded in 3.0939999999973224s: &#39;文件：【img\e68898dd-0224-4f3d-a48b-e7501f72e9ab.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,890: INFO&#x2F;MainProcess] Task spider.run[b85a0bfd-0d81-4efa-846f-8de835eb0022] succeeded in 3.0939999999973224s: &#39;文件：【img\5cd32d97-33f4-4e2a-8595-d17eb1ca1302.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:46:58,936: INFO&#x2F;MainProcess] Task spider.run[b7fa1843-c342-4be3-993d-c14e75a219ee] succeeded in 3.1570000000028813s: &#39;文件：【img\307c87e9-7a61-4d80-bce9-07700726b713.jpg</span><br><span class="line">】采集成功!&#39;</span><br><span class="line">[2019-10-22 15:47:00,923: INFO&#x2F;MainProcess] Task spider.run[736bfc0c-86e2-4cb4-9584-07fbe7d1d511] succeeded in 5.125s: &#39;文件：【img\18f9b55c-4877-45db-97a7-a67c2707cd23.jpg】采集成功!&#39;</span><br></pre></td></tr></table></figure>

<p>从上面可以看到最大运行时间是<code>5.125s</code>，分布式就是快啊</p>
<h2 id="Celery目录结构"><a href="#Celery目录结构" class="headerlink" title="Celery目录结构"></a><code>Celery</code>目录结构</h2><p>通常我们要运行的不是一个任务，或者说不是一个类型的任务，他们分布在各个文件中，此时我们可以专门建立一个<code>Celery</code>文件夹来存放这些任务。</p>
<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>首先，文件目录名可以随意起，我们的项目结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">└──	CeleryTasks				# Celery目录</span><br><span class="line">    ├	├── celery.py		# Celery主文件(文件名只能是celery.py)</span><br><span class="line">    ├	├── Task1.py		# 任务文件1</span><br><span class="line">    ├	├── Task2.py		# 任务文件2</span><br><span class="line">    └──CeleryRun.py			# 分发任务文件</span><br></pre></td></tr></table></figure>

<h3 id="celery-py文件"><a href="#celery-py文件" class="headerlink" title="celery.py文件"></a><code>celery.py</code>文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">redis_cli = <span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include 这个参数适用于寻找目录中所有的task</span></span><br><span class="line">my_task = Celery(<span class="string">&#x27;TestTasks&#x27;</span>, broker = redis_cli, backend= redis_cli, include=[<span class="string">&quot;CeleryTasks.Task1&quot;</span>, <span class="string">&quot;CeleryTasks.Task2&quot;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="Task1-py文件"><a href="#Task1-py文件" class="headerlink" title="Task1.py文件"></a><code>Task1.py</code>文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> CeleryTasks.celery <span class="keyword">import</span> my_task</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建任务</span></span><br><span class="line"><span class="meta">@my_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcOne</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;我是Task1中funcOne任务返回的结果：【<span class="subst">&#123;name&#125;</span>】&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Task2-py文件"><a href="#Task2-py文件" class="headerlink" title="Task2.py文件"></a><code>Task2.py</code>文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> CeleryTasks.celery <span class="keyword">import</span> my_task</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建任务</span></span><br><span class="line"><span class="meta">@my_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcTwo</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;我是Task2中funcTwo任务返回的结果：【<span class="subst">&#123;name&#125;</span>】&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;我是Task2中download任务返回的结果：【<span class="subst">&#123;name&#125;</span>】&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="CeleryRun-py文件"><a href="#CeleryRun-py文件" class="headerlink" title="CeleryRun.py文件"></a><code>CeleryRun.py</code>文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> CeleryTasks.Task1 <span class="keyword">import</span> funcOne</span><br><span class="line"><span class="keyword">from</span> CeleryTasks.Task2 <span class="keyword">import</span> funcTwo, download</span><br><span class="line">funcOne.delay(<span class="string">&quot;洗衣服&quot;</span>)</span><br><span class="line">funcTwo.delay(<span class="string">&quot;做饭&quot;</span>)</span><br><span class="line">download.delay(<span class="string">&quot;aaa.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="启动woker"><a href="#启动woker" class="headerlink" title="启动woker"></a>启动<code>woker</code></h3><p>之前运行的是文件名，现在我们使用目录<code>CeleryTasks</code>即可，同时可以看出已经把任务文件的所有任务给引入进来了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\site&gt;Celery worker -A CeleryTasks -c 25 -l INFO -P eventlet</span><br><span class="line"></span><br><span class="line"> -------------- celery@TONY v4.3.0 (rhubarb)</span><br><span class="line">---- **** -----</span><br><span class="line">--- * ***  * -- Windows-10-10.0.18362-SP0 2019-10-22 16:53:45</span><br><span class="line">-- * - **** ---</span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         TestTasks:0x1baf1be6470</span><br><span class="line">- ** ---------- .&gt; transport:   redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;&#x2F;</span><br><span class="line">- ** ---------- .&gt; results:     redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;</span><br><span class="line">- *** --- * --- .&gt; concurrency: 25 (eventlet)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** -----</span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange&#x3D;celery(direct) key&#x3D;celery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . CeleryTasks.Task1.funcOne</span><br><span class="line">  . CeleryTasks.Task2.download</span><br><span class="line">  . CeleryTasks.Task2.funcTwo</span><br><span class="line"></span><br><span class="line">[2019-10-22 16:53:45,151: INFO&#x2F;MainProcess] Connected to redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;&#x2F;</span><br><span class="line">[2019-10-22 16:53:45,161: INFO&#x2F;MainProcess] mingle: searching for neighbors</span><br><span class="line">[2019-10-22 16:53:46,178: INFO&#x2F;MainProcess] mingle: all alone</span><br><span class="line">[2019-10-22 16:53:46,190: INFO&#x2F;MainProcess] celery@TONY ready.</span><br><span class="line">[2019-10-22 16:53:46,191: INFO&#x2F;MainProcess] pidbox: Connected to redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;&#x2F;.</span><br></pre></td></tr></table></figure>

<h3 id="分发任务-1"><a href="#分发任务-1" class="headerlink" title="分发任务"></a>分发任务</h3><p>运行<code>CeleryRun.py</code>文件，再次查看<code>worker</code>打印台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2019-10-22 16:54:27,027: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[6d84b3b3-244d-4ee4-b361-4cb3c6917fb1]</span><br><span class="line">[2019-10-22 16:54:27,029: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.funcTwo[b2c52bf9-fb61-468c-adfa-877a069cff69]</span><br><span class="line">[2019-10-22 16:54:27,031: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[6d84b3b3-244d-4ee4-b361-4cb3c6917fb1] succeeded in 0.0s: &#39;我是Task1中funcOne任务返回的结果：【洗衣服】&#39;</span><br><span class="line">[2019-10-22 16:54:27,032: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.funcTwo[b2c52bf9-fb61-468c-adfa-877a069cff69] succeeded in 0.01600000000325963s: &#39;我是Task2中funcTwo任务返回的结果：【</span><br><span class="line">做饭】&#39;</span><br><span class="line">[2019-10-22 16:54:27,033: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.download[dab30fe3-4dbf-46fd-941c-7d20a6386618]</span><br><span class="line">[2019-10-22 16:54:27,034: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.download[dab30fe3-4dbf-46fd-941c-7d20a6386618] succeeded in 0.0s: &#39;我是Task2中download任务返回的结果：【aaa.jpg】&#39;</span><br></pre></td></tr></table></figure>

<p>所有任务都被接收且执行了。</p>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><h3 id="TimingWorker-py"><a href="#TimingWorker-py" class="headerlink" title="TimingWorker.py"></a><code>TimingWorker.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">redis_cli = <span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line"></span><br><span class="line">my_task = Celery(<span class="string">&#x27;TestTasks&#x27;</span>, broker = redis_cli, backend= redis_cli)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建任务</span></span><br><span class="line"><span class="meta">@my_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;我是func1的返回值，我做了【<span class="subst">&#123;name&#125;</span>】&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="TimingTask-py"><a href="#TimingTask-py" class="headerlink" title="TimingTask.py"></a><code>TimingTask.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> TimingWorker <span class="keyword">import</span> func1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定时任务我们不在使用delay这个方法了,delay是立即交给task 去执行</span></span><br><span class="line"><span class="comment"># 现在我们使用apply_async定时执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首先我们要先给task一个执行任务的时间</span></span><br><span class="line"><span class="keyword">import</span> datetime,time</span><br><span class="line"><span class="comment"># 获取当前时间 此时间为东八区时间</span></span><br><span class="line">ctime = time.time()</span><br><span class="line"><span class="comment"># 将当前的东八区时间改为 UTC时间 注意这里一定是UTC时间,没有其他说法</span></span><br><span class="line">utc_time = datetime.datetime.utcfromtimestamp(ctime)</span><br><span class="line"><span class="comment"># 为当前时间增加 10 秒</span></span><br><span class="line">add_time = datetime.timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">action_time = utc_time + add_time</span><br><span class="line"></span><br><span class="line"><span class="comment"># action_time 就是当前时间未来10秒之后的时间</span></span><br><span class="line"><span class="comment">#现在我们使用apply_async定时执行</span></span><br><span class="line">res = func1.apply_async(args=[<span class="string">&quot;修理地球&quot;</span>],eta=action_time)</span><br><span class="line">print(res.id)</span><br><span class="line"><span class="comment">#这样原本延迟5秒执行的One函数现在就要在10秒钟以后执行了</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用<code>Celery worker -A TimingWorker -c 25 -l INFO -P eventlet</code>启动<code>worker</code>，运行<code>TimingTask.py</code>文件，查看<code>Celery</code>控制台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2019-10-22 17:18:22,202: INFO&#x2F;MainProcess] Received task: TimingWorker.func1[d4fdbba9-1a8b-416b-ac00-96a2e683727b]  ETA:[2019-10-22 09:18:31.716313+00:00]</span><br><span class="line">[2019-10-22 17:18:31,723: INFO&#x2F;MainProcess] Task TimingWorker.func1[d4fdbba9-1a8b-416b-ac00-96a2e683727b] succeeded in 0.0s: &#39;我是func1的返回值，我做了【修理地球】&#39;</span><br></pre></td></tr></table></figure>

<p>我们可以看到接收任务以后10秒钟才执行了该任务</p>
<h2 id="周期任务"><a href="#周期任务" class="headerlink" title="周期任务"></a>周期任务</h2><p>我们还以<a href="https://www.diandian100.cn/202c5745.html#%E4%BD%BF%E7%94%A8flask-script%E5%91%BD%E4%BB%A4%E8%A1%8C"><code>Celery</code>目录结构</a>为例，只需修改下<code>celery.py</code>文件即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line">redis_cli = <span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line"><span class="comment"># include 这个参数适用于寻找目录中所有的task</span></span><br><span class="line">my_task = Celery(<span class="string">&#x27;TestTasks&#x27;</span>, broker = redis_cli, backend= redis_cli, include=[<span class="string">&quot;CeleryTasks.Task1&quot;</span>, <span class="string">&quot;CeleryTasks.Task2&quot;</span>])</span><br><span class="line"></span><br><span class="line">my_task.conf.beat_schedule=&#123;</span><br><span class="line">    <span class="string">&quot;each10s_task&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;task&quot;</span>:<span class="string">&quot;CeleryTasks.Task1.funcOne&quot;</span>,</span><br><span class="line">        <span class="string">&quot;schedule&quot;</span>:<span class="number">10</span>, <span class="comment"># 每10秒钟执行一次</span></span><br><span class="line">        <span class="string">&quot;args&quot;</span>:(<span class="string">&quot;吃饭&quot;</span>,)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;each1m_task&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;task&quot;</span>: <span class="string">&quot;CeleryTasks.Task2.funcTwo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;schedule&quot;</span>: <span class="number">13</span>, <span class="comment"># 每13秒执行一次</span></span><br><span class="line">        <span class="string">&quot;args&quot;</span>: (<span class="string">&quot;睡觉&quot;</span>,)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;each24hours_task&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;task&quot;</span>: <span class="string">&quot;CeleryTasks.Task2.download&quot;</span>,</span><br><span class="line">        <span class="string">&quot;schedule&quot;</span>: crontab(),<span class="comment">#每分钟执行一次</span></span><br><span class="line">        <span class="string">&quot;args&quot;</span>: (<span class="string">&quot;打豆豆&quot;</span>,)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上配置完成之后,还有一点非常重要，不能直接创建<code>Worker</code>了,因为我们要执行周期任务,所以首先要先有一个任务的生产方</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">celery beat -A Celery_task</span><br><span class="line">celery worker -A Celery_task -l INFO -P eventlet</span><br></pre></td></tr></table></figure>

<p>创建<code>Worker</code>的方式并没有发行变化,但是这里要注意的是,每间隔一定时间后需要生产出来任务给<code>Worker</code>去执行,这里需要一个生产者<code>beat</code></p>
<p><code>celery beat -A CeleryTasks</code> #创建生产者 <code>beat</code> 你的 <code>schedule</code> 写在哪里,就要从哪里启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\site&gt;celery beat -A CeleryTasks</span><br><span class="line">celery beat v4.3.0 (rhubarb) is starting.</span><br><span class="line">__    -    ... __   -        _</span><br><span class="line">LocalTime -&gt; 2019-10-23 09:26:26</span><br><span class="line">Configuration -&gt;</span><br><span class="line">    . broker -&gt; redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;&#x2F;</span><br><span class="line">    . loader -&gt; celery.loaders.app.AppLoader</span><br><span class="line">    . scheduler -&gt; celery.beat.PersistentScheduler</span><br><span class="line">    . db -&gt; celerybeat-schedule</span><br><span class="line">    . logfile -&gt; [stderr]@%WARNING</span><br><span class="line">    . maxinterval -&gt; 5.00 minutes (300s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="创建worker-1"><a href="#创建worker-1" class="headerlink" title="创建worker"></a>创建<code>worker</code></h3><p> <code>celery worker -A CeleryTasks -l INFO -P eventlet</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\site&gt;celery worker -A CeleryTasks -l INFO -P eventlet</span><br><span class="line"></span><br><span class="line"> -------------- celery@TONY v4.3.0 (rhubarb)</span><br><span class="line">---- **** -----</span><br><span class="line">--- * ***  * -- Windows-10-10.0.18362-SP0 2019-10-23 09:26:31</span><br><span class="line">-- * - **** ---</span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         TestTasks:0x173f00d76a0</span><br><span class="line">- ** ---------- .&gt; transport:   redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;&#x2F;</span><br><span class="line">- ** ---------- .&gt; results:     redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;</span><br><span class="line">- *** --- * --- .&gt; concurrency: 8 (eventlet)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** -----</span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange&#x3D;celery(direct) key&#x3D;celery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . CeleryTasks.Task1.funcOne</span><br><span class="line">  . CeleryTasks.Task2.download</span><br><span class="line">  . CeleryTasks.Task2.funcTwo</span><br><span class="line"></span><br><span class="line">[2019-10-23 09:26:31,620: INFO&#x2F;MainProcess] Connected to redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;&#x2F;</span><br><span class="line">[2019-10-23 09:26:31,628: INFO&#x2F;MainProcess] mingle: searching for neighbors</span><br><span class="line">[2019-10-23 09:26:32,652: INFO&#x2F;MainProcess] mingle: all alone</span><br><span class="line">[2019-10-23 09:26:32,706: INFO&#x2F;MainProcess] pidbox: Connected to redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;&#x2F;.</span><br><span class="line">[2019-10-23 09:26:32,716: INFO&#x2F;MainProcess] celery@TONY ready.</span><br></pre></td></tr></table></figure>

<p> 创建<code>worker</code>之后,每隔一定周期就会由<code>beat</code>创建一个任务给<code>Worker</code>去执行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2019-10-23 09:36:57,109: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[e75a3d5e-bbcd-429c-98c7-dfda971fc3c1]</span><br><span class="line">[2019-10-23 09:36:57,115: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[e75a3d5e-bbcd-429c-98c7-dfda971fc3c1] succeeded in 0.01600000000325963s: &#39;我是Task1中funcOne任务返回的结果：【</span><br><span class="line">吃饭】&#39;</span><br><span class="line">[2019-10-23 09:37:00,002: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.download[092ee768-9ba9-4a74-ad4f-377d4f4dd046]</span><br><span class="line">[2019-10-23 09:37:00,004: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.download[092ee768-9ba9-4a74-ad4f-377d4f4dd046] succeeded in 0.0s: &#39;我是Task2中download任务返回的结果：【打豆豆】&#39;</span><br><span class="line">[2019-10-23 09:37:07,106: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[3dd25333-8c54-4def-8c3b-30b92308ed86]</span><br><span class="line">[2019-10-23 09:37:07,109: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[3dd25333-8c54-4def-8c3b-30b92308ed86] succeeded in 0.0s: &#39;我是Task1中funcOne任务返回的结果：【吃饭】&#39;</span><br><span class="line">[2019-10-23 09:37:10,090: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.funcTwo[923b6585-2aa5-4871-9dbe-2b18b99b0e75]</span><br><span class="line">[2019-10-23 09:37:10,091: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.funcTwo[923b6585-2aa5-4871-9dbe-2b18b99b0e75] succeeded in 0.0s: &#39;我是Task2中funcTwo任务返回的结果：【睡觉】&#39;</span><br><span class="line">[2019-10-23 09:37:17,110: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[024acf7a-c8da-4e8a-923d-00af60b5c036]</span><br><span class="line">[2019-10-23 09:37:17,114: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[024acf7a-c8da-4e8a-923d-00af60b5c036] succeeded in 0.0s: &#39;我是Task1中funcOne任务返回的结果：【吃饭】&#39;</span><br><span class="line">[2019-10-23 09:37:23,097: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.funcTwo[0a3f7e23-b86e-437a-9818-1da9acd33a3f]</span><br><span class="line">[2019-10-23 09:37:23,103: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.funcTwo[0a3f7e23-b86e-437a-9818-1da9acd33a3f] succeeded in 0.0s: &#39;我是Task2中funcTwo任务返回的结果：【睡觉】&#39;</span><br><span class="line">[2019-10-23 09:37:27,106: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[7c3a34a0-be22-4784-b84b-c2c41297a564]</span><br><span class="line">[2019-10-23 09:37:27,107: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[7c3a34a0-be22-4784-b84b-c2c41297a564] succeeded in 0.0s: &#39;我是Task1中funcOne任务返回的结果：【吃饭】&#39;</span><br><span class="line">[2019-10-23 09:37:36,099: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.funcTwo[b192069c-ede6-4d57-b3ff-1df9e65415cb]</span><br><span class="line">[2019-10-23 09:37:36,104: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.funcTwo[b192069c-ede6-4d57-b3ff-1df9e65415cb] succeeded in 0.0s: &#39;我是Task2中funcTwo任务返回的结果：【睡觉】&#39;</span><br><span class="line">[2019-10-23 09:37:37,112: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[e9512dbd-345e-486c-ae5d-0489625475a8]</span><br><span class="line">[2019-10-23 09:37:37,119: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[e9512dbd-345e-486c-ae5d-0489625475a8] succeeded in 0.0s: &#39;我是Task1中funcOne任务返回的结果：【吃饭】&#39;</span><br><span class="line">[2019-10-23 09:37:47,109: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[0e95a5e8-99d7-4773-9cbb-69959434b385]</span><br><span class="line">[2019-10-23 09:37:47,112: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[0e95a5e8-99d7-4773-9cbb-69959434b385] succeeded in 0.0s: &#39;我是Task1中funcOne任务返回的结果：【吃饭】&#39;</span><br><span class="line">[2019-10-23 09:37:49,097: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.funcTwo[d30c1676-021d-42ac-baf5-5bae10ce9cd8]</span><br><span class="line">[2019-10-23 09:37:49,100: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.funcTwo[d30c1676-021d-42ac-baf5-5bae10ce9cd8] succeeded in 0.0s: &#39;我是Task2中funcTwo任务返回的结果：【睡觉】&#39;</span><br><span class="line">[2019-10-23 09:37:57,112: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[eb59efb9-b3df-45e8-8f24-20e74b9325fd]</span><br><span class="line">[2019-10-23 09:37:57,114: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[eb59efb9-b3df-45e8-8f24-20e74b9325fd] succeeded in 0.0s: &#39;我是Task1中funcOne任务返回的结果：【吃饭】&#39;</span><br><span class="line">[2019-10-23 09:38:00,008: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.download[535c8db4-2bf8-460f-800f-e3e045b2fa78]</span><br><span class="line">[2019-10-23 09:38:00,013: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.download[535c8db4-2bf8-460f-800f-e3e045b2fa78] succeeded in 0.0s: &#39;我是Task2中download任务返回的结果：【打豆豆】&#39;</span><br><span class="line">[2019-10-23 09:38:02,094: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task2.funcTwo[14893fe7-ef36-4cd3-8c37-244e0b6263c5]</span><br><span class="line">[2019-10-23 09:38:02,095: INFO&#x2F;MainProcess] Task CeleryTasks.Task2.funcTwo[14893fe7-ef36-4cd3-8c37-244e0b6263c5] succeeded in 0.0s: &#39;我是Task2中funcTwo任务返回的结果：【睡觉】&#39;</span><br><span class="line">[2019-10-23 09:38:07,113: INFO&#x2F;MainProcess] Received task: CeleryTasks.Task1.funcOne[8b10c310-9b18-446a-856c-a4bf49914570]</span><br><span class="line">[2019-10-23 09:38:07,117: INFO&#x2F;MainProcess] Task CeleryTasks.Task1.funcOne[8b10c310-9b18-446a-856c-a4bf49914570] succeeded in 0.0s: &#39;我是Task1中funcOne任务返回的结果：【吃饭】&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="crontab-调度器"><a href="#crontab-调度器" class="headerlink" title="crontab 调度器"></a><code>crontab</code> 调度器</h3><p>当我们对执行任务的频率有更精细的控制时，例如，一天中某个特殊时间或者一周中某天，可以使用<code>crontab</code>调度器类型。<code>Crontab</code> 表达式的语法非常灵活。下面是总结的一个表格，可以根据自己的需求写<code>crontab</code>调度器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;each24hours_task&quot;: &#123;</span><br><span class="line">        &quot;task&quot;: &quot;CeleryTasks.Task2.download&quot;,</span><br><span class="line">        &quot;schedule&quot;: crontab(),#每分钟执行一次</span><br><span class="line">        &quot;args&quot;: (&quot;打豆豆&quot;,)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上述定时任务重我们用到了<code>crontab</code>，关于<code>crontab</code>的常用规则示例如下：</p>
<table>
<thead>
<tr>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>crontab()</code></td>
<td>每分钟执行</td>
</tr>
<tr>
<td><code>crontab(minute=0, hour=0)</code></td>
<td>每天0点0分执行</td>
</tr>
<tr>
<td><code>crontab(minute=0, hour=&#39;*/3&#39;)</code></td>
<td>每三个小时执行: midnight, 3am, 6am, 9am, noon, 3pm, 6pm, 9pm.</td>
</tr>
<tr>
<td><code>crontab(minute=0,hour=&#39;0,3,6,9,12,15,18,21&#39;)</code></td>
<td>同上</td>
</tr>
<tr>
<td><code>crontab(minute=&#39;*/15&#39;)</code></td>
<td>每十五分钟执行</td>
</tr>
<tr>
<td><code>crontab(day_of_week=&#39;sunday&#39;)</code></td>
<td>星期天每分钟执行</td>
</tr>
<tr>
<td><code>crontab(minute=&#39;&#39;,hour=&#39;&#39;, day_of_week=&#39;sun&#39;)</code></td>
<td>同上</td>
</tr>
<tr>
<td><code>crontab(minute=’*/10’,hour=’3,17,22’, day_of_week=’thu,fri’)</code></td>
<td>每十分钟执行, 但是只在星期四、五的 3-4 am, 5-6 pm, and 10-11 pm</td>
</tr>
<tr>
<td><code>crontab(minute=0, hour=’/2,/3’)</code></td>
<td>每两个小时及每三个小时执行，意思是: 除了下面时间的每个小时: 1am, 5am, 7am, 11am, 1pm, 5pm, 7pm, 11pm</td>
</tr>
<tr>
<td><code>crontab(minute=0, hour=’*/5’)</code></td>
<td>每五个小时执行。这意味着将在 3pm 而不是 5pm 执行 (因为 3pm 等于 24 小时制的 15, 能被 5 整除)</td>
</tr>
<tr>
<td><code>crontab(minute=0, hour=’*/3,8-17’)</code></td>
<td>每三个小时, 以及 (8am-5pm) 之间的小时执行</td>
</tr>
<tr>
<td><code>crontab(0, 0, day_of_month=’2’)</code></td>
<td>每个月的第二天执行</td>
</tr>
<tr>
<td><code>crontab(0, 0, day_of_month=’2-30/3’)</code></td>
<td>每个月的偶数天执行</td>
</tr>
<tr>
<td><code>crontab(0, 0,day_of_month=’1-7,15-21’)</code></td>
<td>每个月的第一个和第三个星期执行</td>
</tr>
<tr>
<td><code>crontab(0, 0, day_of_month=’11’,month_of_year=’5’)</code></td>
<td>每年五月份的第十一天执行</td>
</tr>
<tr>
<td><code>crontab(0, 0,month_of_year=’*/3’)</code></td>
<td>每个季度的第一个月执行</td>
</tr>
</tbody></table>
<p>​    </p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>crontab</tag>
        <tag>分布式爬虫</tag>
        <tag>celery</tag>
        <tag>异步任务调度</tag>
        <tag>celery目录</tag>
        <tag>celery结构</tag>
        <tag>celery定时任务</tag>
        <tag>周期任务</tag>
        <tag>celery周期任务</tag>
        <tag>crontab调度器</tag>
        <tag>任务调度</tag>
        <tag>backend</tag>
        <tag>broker</tag>
        <tag>worker</tag>
        <tag>任务分发</tag>
        <tag>任务队列</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据分析之第三方模块Pandas</title>
    <url>/fdb2dd4a.html</url>
    <content><![CDATA[<p> <code>pandas</code> 是基于<code>NumPy</code> 的一种工具，该工具是为了解决数据分析任务而创建的。<code>Pandas</code> 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。<code>pandas</code>提供了大量能使我们快速便捷地处理数据的函数和方法。你很快就会发现，它是使<code>Python</code>成为强大而高效的数据分析环境的重要因素之一。 </p>
<a id="more"></a>

<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a><code>Series</code></h2><p><code>Series</code>是一种类似与一维数组的对象，由下面两个部分组成：</p>
<ul>
<li><code>values</code>：一组数据（<code>ndarray</code>类型）</li>
<li><code>index</code>：相关的数据索引标签</li>
</ul>
<h3 id="Series创建"><a href="#Series创建" class="headerlink" title="Series创建"></a><code>Series</code>创建</h3><h4 id="列表创建"><a href="#列表创建" class="headerlink" title="列表创建"></a>列表创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line"></span><br><span class="line">s = Series(data=[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>])</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="number">0</span>    <span class="number">3</span></span><br><span class="line"><span class="number">1</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2</span>    <span class="number">5</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h4 id="numpy创建"><a href="#numpy创建" class="headerlink" title="numpy创建"></a><code>numpy</code>创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">s = Series(data=np.random.randint(<span class="number">1</span>, <span class="number">50</span>, size=<span class="number">6</span>), index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>], name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">a    <span class="number">24</span></span><br><span class="line">b    <span class="number">39</span></span><br><span class="line">c    <span class="number">46</span></span><br><span class="line">d    <span class="number">13</span></span><br><span class="line">e    <span class="number">41</span></span><br><span class="line">f    <span class="number">15</span></span><br><span class="line">Name: test, dtype: int32</span><br></pre></td></tr></table></figure>

<h4 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span> : <span class="string">&#x27;鹤岗&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = Series(data=dic, name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">name      张学友</span><br><span class="line">gender      男</span><br><span class="line">age        <span class="number">18</span></span><br><span class="line">city       鹤岗</span><br><span class="line">Name: test, dtype: object</span><br></pre></td></tr></table></figure>

<h3 id="Series索引"><a href="#Series索引" class="headerlink" title="Series索引"></a><code>Series</code>索引</h3><p> 可以使用中括号取单个索引（此时返回的是元素类型），或者中括号里一个列表取多个索引（此时返回的是一个<code>Series</code>类型）。 </p>
<h4 id="显式索引"><a href="#显式索引" class="headerlink" title="显式索引"></a>显式索引</h4><ul>
<li>使用<code>index</code>中的元素作为索引值</li>
<li>使用<code>s.loc[]</code>（推荐）:注意，<code>loc</code>中括号中放置的一定是显式索引</li>
<li>使用s.索引元素直接获取</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span> : <span class="string">&#x27;鹤岗&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = Series(data=dic, name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">print(s[<span class="string">&#x27;city&#x27;</span>])</span><br><span class="line">print(s.loc[<span class="string">&#x27;city&#x27;</span>])</span><br><span class="line">print(s.city)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">鹤岗</span><br><span class="line">鹤岗</span><br><span class="line">鹤岗</span><br></pre></td></tr></table></figure>

<h4 id="隐式索引"><a href="#隐式索引" class="headerlink" title="隐式索引"></a>隐式索引</h4><ul>
<li>使用整数作为索引值</li>
<li>使用<code>.iloc[]</code>（推荐）:<code>iloc</code>中的中括号中必须放置隐式索引</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span> : <span class="string">&#x27;鹤岗&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = Series(data=dic, name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">print(s[<span class="number">3</span>])</span><br><span class="line">print(s.iloc[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">鹤岗</span><br><span class="line">鹤岗</span><br></pre></td></tr></table></figure>

<h3 id="Series切片"><a href="#Series切片" class="headerlink" title="Series切片"></a><code>Series</code>切片</h3><h4 id="显式索引切片"><a href="#显式索引切片" class="headerlink" title="显式索引切片"></a>显式索引切片</h4><ul>
<li><p>直接使用索引区间：如<code>s[&#39;a&#39;:&#39;b&#39;]</code></p>
</li>
<li><p>使用<code>loc</code>： 如<code>s.loc[&#39;a&#39;:&#39;b&#39;]</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span> : <span class="string">&#x27;鹤岗&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = Series(data=dic, name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">print(s[<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;city&#x27;</span>])</span><br><span class="line">print(s.loc[<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;city&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">gender     男</span><br><span class="line">age       <span class="number">18</span></span><br><span class="line">city      鹤岗</span><br><span class="line">Name: test, dtype: object</span><br><span class="line">gender     男</span><br><span class="line">age       <span class="number">18</span></span><br><span class="line">city      鹤岗</span><br><span class="line">Name: test, dtype: object</span><br></pre></td></tr></table></figure>

<h4 id="隐式索引切片"><a href="#隐式索引切片" class="headerlink" title="隐式索引切片"></a>隐式索引切片</h4><ul>
<li><p>直接使用索引区间：如<code>s[1:3]</code></p>
</li>
<li><p>使用<code>iloc</code>： 如<code>s.iloc[1:3]</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span> : <span class="string">&#x27;鹤岗&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = Series(data=dic, name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(s.iloc[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">name      张学友</span><br><span class="line">gender      男</span><br><span class="line">Name: test, dtype: object</span><br><span class="line">name      张学友</span><br><span class="line">gender      男</span><br><span class="line">Name: test, dtype: object</span><br></pre></td></tr></table></figure>

<h3 id="Series属性及基本使用"><a href="#Series属性及基本使用" class="headerlink" title="Series属性及基本使用"></a><code>Series</code>属性及基本使用</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span> : <span class="string">&#x27;鹤岗&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = Series(data=dic, name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">print(s.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">Index([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;city&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="值"><a href="#值" class="headerlink" title="值"></a>值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span> : <span class="string">&#x27;鹤岗&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">s = Series(data=dic, name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">print(s.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="string">&#x27;张学友&#x27;</span> <span class="string">&#x27;男&#x27;</span> <span class="number">18</span> <span class="string">&#x27;鹤岗&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="head-n"><a href="#head-n" class="headerlink" title="head(n)"></a><code>head(n)</code></h4><p>获取前<code>n</code>个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(s.head(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">name      张学友</span><br><span class="line">gender      男</span><br><span class="line">Name: test, dtype: object</span><br></pre></td></tr></table></figure>

<h4 id="tail-n"><a href="#tail-n" class="headerlink" title="tail(n)"></a><code>tail(n)</code></h4><p>获取后<code>n</code>个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(s.tail(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">age     <span class="number">18</span></span><br><span class="line">city    鹤岗</span><br><span class="line">Name: test, dtype: object</span><br></pre></td></tr></table></figure>

<h4 id="unique"><a href="#unique" class="headerlink" title="unique()"></a><code>unique()</code></h4><p>去重</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series(data=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">print(s.unique())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h4 id="Series运算"><a href="#Series运算" class="headerlink" title="Series运算"></a><code>Series运算</code></h4><h5 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h5><p>直接使用运算符<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>进行运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series(data=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(s+<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="number">0</span>    <span class="number">11</span></span><br><span class="line"><span class="number">1</span>    <span class="number">12</span></span><br><span class="line"><span class="number">2</span>    <span class="number">13</span></span><br><span class="line"><span class="number">3</span>    <span class="number">14</span></span><br><span class="line"><span class="number">4</span>    <span class="number">15</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>

<h5 id="计算函数运算"><a href="#计算函数运算" class="headerlink" title="计算函数运算"></a>计算函数运算</h5><p>使用<code>add()</code>、<code>sub()</code>、<code>mul()</code>、<code>div()</code>，分别代表加减乘除。其中都可以携带参数，默认参数可以是数字或者<code>Series</code>，<code>fill_value</code>代表如果元素为空则给其填充一个默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series(data=[<span class="number">20</span>, <span class="number">30</span>, <span class="literal">None</span>, <span class="number">40</span>, <span class="literal">None</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">print(s.add(<span class="number">10</span>, fill_value=<span class="number">999</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">a      <span class="number">30.0</span></span><br><span class="line">b      <span class="number">40.0</span></span><br><span class="line">c    <span class="number">1009.0</span></span><br><span class="line">d      <span class="number">50.0</span></span><br><span class="line">e    <span class="number">1009.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>

<h5 id="多个series运算"><a href="#多个series运算" class="headerlink" title="多个series运算"></a>多个<code>series</code>运算</h5><p>当索引没有对应的值时，可能出现缺失数据显示<code>NaN</code>（not a number）的情况，使得两个<code>Series</code>进行相加:索引与之对应的元素会进行算数运算,不对应的就补空</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = Series(data=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">s2 = Series(data=[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], index=[<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">print(s1+s2)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">s1.add(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">a    <span class="number">41.0</span></span><br><span class="line">b     NaN</span><br><span class="line">c    <span class="number">23.0</span></span><br><span class="line">d     NaN</span><br><span class="line">e     NaN</span><br><span class="line">f     NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>

<h4 id="isnull"><a href="#isnull" class="headerlink" title="isnull()"></a><code>isnull()</code></h4><p>检测元素是否为空</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series(data=[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">None</span>, <span class="number">4</span>, <span class="literal">None</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">print(s.isnull())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">a    <span class="literal">False</span></span><br><span class="line">b    <span class="literal">False</span></span><br><span class="line">c     <span class="literal">True</span></span><br><span class="line">d    <span class="literal">False</span></span><br><span class="line">e     <span class="literal">True</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>

<h4 id="notnull"><a href="#notnull" class="headerlink" title="notnull()"></a><code>notnull()</code></h4><p>检测元素是否不为空</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series(data=[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">None</span>, <span class="number">4</span>, <span class="literal">None</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">print(s.notnull())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">a     <span class="literal">True</span></span><br><span class="line">b     <span class="literal">True</span></span><br><span class="line">c    <span class="literal">False</span></span><br><span class="line">d     <span class="literal">True</span></span><br><span class="line">e    <span class="literal">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>

<h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a><code>DataFrame</code></h2><p><code>DataFrame</code>是一个【表格型】的数据结构。<code>DataFrame</code>由按一定顺序排列的多列数据组成。设计初衷是将Series的使用场景从一维拓展到多维。<code>DataFrame</code>既有行索引，也有列索引。</p>
<ul>
<li>行索引：<code>index</code></li>
<li>列索引：<code>columns</code></li>
<li>值：<code>values</code></li>
</ul>
<h3 id="Dataframe创建"><a href="#Dataframe创建" class="headerlink" title="Dataframe创建"></a><code>Dataframe</code>创建</h3><h4 id="使用ndarray"><a href="#使用ndarray" class="headerlink" title="使用ndarray"></a>使用<code>ndarray</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DataFrame(data=np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">6</span>)))</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>|    0 |    1 |    2 |    3 |    4 |    5 |      |<br>| —: | —: | —: | —: | —: | —: | —- |<br>|    0 |   32 |   93 |    0 |   23 |   21 | 40   |<br>|    1 |   27 |   35 |    9 |   76 |   41 | 68   |<br>|    2 |   63 |   96 |   63 |   30 |   96 | 51   |<br>|    3 |    2 |   50 |   28 |   26 |   26 | 41   |<br>|    4 |   32 |   74 |   97 |   84 |   56 | 7    |</p>
<h4 id="字典创建-1"><a href="#字典创建-1" class="headerlink" title="字典创建"></a>字典创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;张三&#x27;</span>:[<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">90</span>],</span><br><span class="line">    <span class="string">&#x27;李四&#x27;</span>:[<span class="number">67</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">78</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = DataFrame(data=dic,index=[<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="string">&#x27;理综&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>|      | 张三 | 李四 |<br>| —: | —: | —: |<br>| 语文 |   77 |   67 |<br>| 数学 |   88 |   88 |<br>| 英语 |   99 |   99 |<br>| 理综 |   90 |   78 |</p>
<h3 id="Dataframe属性"><a href="#Dataframe属性" class="headerlink" title="Dataframe属性"></a><code>Dataframe</code>属性</h3><h4 id="values"><a href="#values" class="headerlink" title="values"></a><code>values</code></h4><p>元素值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;张三&#x27;</span>:[<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">90</span>],</span><br><span class="line">    <span class="string">&#x27;李四&#x27;</span>:[<span class="number">67</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">78</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = DataFrame(data=dic,index=[<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="string">&#x27;理综&#x27;</span>])</span><br><span class="line">df.values</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[77, 67],</span><br><span class="line">       [88, 88],</span><br><span class="line">       [99, 99],</span><br><span class="line">       [90, 78]], dtype&#x3D;int64)</span><br></pre></td></tr></table></figure>

<h4 id="columns"><a href="#columns" class="headerlink" title="columns"></a><code>columns</code></h4><p>列索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.columns</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Index([<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="index"><a href="#index" class="headerlink" title="index"></a><code>index</code></h4><p>行索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.index</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Index([<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;理综&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="shape"><a href="#shape" class="headerlink" title="shape"></a><code>shape</code></h4><p>形状、维度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">4</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="DataFrame索引"><a href="#DataFrame索引" class="headerlink" title="DataFrame索引"></a><code>DataFrame</code>索引</h3><h4 id="列索引"><a href="#列索引" class="headerlink" title="列索引"></a>列索引</h4><h5 id="字典方式"><a href="#字典方式" class="headerlink" title="字典方式"></a>字典方式</h5><p>通过类似字典的方式取得如：<code>df[&#39;a&#39;]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;张三&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语文    <span class="number">77</span></span><br><span class="line">数学    <span class="number">88</span></span><br><span class="line">英语    <span class="number">99</span></span><br><span class="line">理综    <span class="number">90</span></span><br><span class="line">Name: 张三, dtype: int64</span><br></pre></td></tr></table></figure>

<h5 id="属性方式"><a href="#属性方式" class="headerlink" title="属性方式"></a>属性方式</h5><p>通过类似对象取属性的方式取列，如：<code>df.a</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.张三</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语文    <span class="number">77</span></span><br><span class="line">数学    <span class="number">88</span></span><br><span class="line">英语    <span class="number">99</span></span><br><span class="line">理综    <span class="number">90</span></span><br><span class="line">Name: 张三, dtype: int64</span><br></pre></td></tr></table></figure>

<h5 id="取多列"><a href="#取多列" class="headerlink" title="取多列"></a>取多列</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[[<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>]]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">李四</th>
<th align="right">张三</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">67</td>
<td align="right">77</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">88</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">99</td>
<td align="right">99</td>
</tr>
<tr>
<td align="right">理综</td>
<td align="right">78</td>
<td align="right">90</td>
</tr>
</tbody></table>
<h5 id="修改列索引"><a href="#修改列索引" class="headerlink" title="修改列索引"></a>修改列索引</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改列索引</span></span><br><span class="line">df.columns = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>]</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">zhangsan</th>
<th align="right">lisi</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">77</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">88</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">99</td>
<td align="right">99</td>
</tr>
<tr>
<td align="right">理综</td>
<td align="right">90</td>
<td align="right">78</td>
</tr>
</tbody></table>
<h4 id="行索引"><a href="#行索引" class="headerlink" title="行索引"></a>行索引</h4><h5 id="loc"><a href="#loc" class="headerlink" title="loc"></a><code>loc</code></h5><p>使用<code>.loc[]</code>加<code>index</code>来进行行索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[<span class="string">&#x27;语文&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">张三    <span class="number">77</span></span><br><span class="line">李四    <span class="number">67</span></span><br><span class="line">Name: 语文, dtype: int64</span><br></pre></td></tr></table></figure>

<p>选择多行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[[<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">77</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">99</td>
<td align="right">99</td>
</tr>
</tbody></table>
<h5 id="iloc"><a href="#iloc" class="headerlink" title="iloc"></a><code>iloc</code></h5><p>使用<code>.iloc[]</code>加整数来进行行索引(默认索引)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">张三    <span class="number">88</span></span><br><span class="line">李四    <span class="number">88</span></span><br><span class="line">Name: 数学, dtype: int64</span><br></pre></td></tr></table></figure>

<p>多行索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[[<span class="number">1</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">88</td>
</tr>
<tr>
<td align="right">理综</td>
<td align="right">90</td>
<td align="right">78</td>
</tr>
</tbody></table>
<h4 id="元素索引"><a href="#元素索引" class="headerlink" title="元素索引"></a>元素索引</h4><p>行索引在前，列索引在后</p>
<h5 id="loc-1"><a href="#loc-1" class="headerlink" title="loc"></a><code>loc</code></h5><p>使用自定义索引获取，如：<code>df.loc[&#39;理综&#39;, &#39;李四&#39;]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[<span class="string">&#x27;理综&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">78</span></span><br></pre></td></tr></table></figure>

<h5 id="iloc-1"><a href="#iloc-1" class="headerlink" title="iloc"></a><code>iloc</code></h5><p>使用默认索引获取， 如：<code>df.iloc[3, 1]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">78</span></span><br></pre></td></tr></table></figure>

<h3 id="DataFrame切片"><a href="#DataFrame切片" class="headerlink" title="DataFrame切片"></a><code>DataFrame</code>切片</h3><h5 id="中括号切片"><a href="#中括号切片" class="headerlink" title="中括号切片"></a>中括号切片</h5><p>直接使用中括号，是按行进行切分的，且只能按行切分，如：<code>df[0:2]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">77</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">88</td>
</tr>
</tbody></table>
<h5 id="iloc-2"><a href="#iloc-2" class="headerlink" title="iloc"></a><code>iloc</code></h5><p>默认按行进行切分，第1个参数为行区间，第二个参数为列区间，且区间范围使用默认索引，如：<code>df.iloc[1:2, 1:3]</code></p>
<h6 id="只切行"><a href="#只切行" class="headerlink" title="只切行"></a>只切行</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">77</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">88</td>
</tr>
</tbody></table>
<h6 id="只切列"><a href="#只切列" class="headerlink" title="只切列"></a>只切列</h6><p>默认第一个参数为行，如果只切列，行区间也要保留<code>:</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[:, <span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">99</td>
</tr>
<tr>
<td align="right">理综</td>
<td align="right">78</td>
</tr>
</tbody></table>
<h6 id="切行切列"><a href="#切行切列" class="headerlink" title="切行切列"></a>切行切列</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">数学</td>
<td align="right">88</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">99</td>
</tr>
</tbody></table>
<h5 id="loc-2"><a href="#loc-2" class="headerlink" title="loc"></a><code>loc</code></h5><p>默认按行进行切分，第1个参数为行区间，第二个参数为列区间，且区间范围使用自定义索引，如：<code>df.loc[&#39;语文&#39;:&#39;英语&#39;, &#39;张三&#39;:&#39;李四&#39;]</code></p>
<h6 id="只切行-1"><a href="#只切行-1" class="headerlink" title="只切行"></a>只切行</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[<span class="string">&#x27;语文&#x27;</span>:<span class="string">&#x27;数学&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">77</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">88</td>
</tr>
</tbody></table>
<h6 id="只切列-1"><a href="#只切列-1" class="headerlink" title="只切列"></a>只切列</h6><p>默认第一个参数为行，如果只切列，行区间也要保留<code>:</code></p>
<p><strong>切单列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[:, <span class="string">&#x27;李四&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">99</td>
</tr>
<tr>
<td align="right">理综</td>
<td align="right">78</td>
</tr>
</tbody></table>
<p><strong>切多列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;张三&#x27;</span>:[<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">90</span>],</span><br><span class="line">    <span class="string">&#x27;李四&#x27;</span>:[<span class="number">67</span>,<span class="number">92</span>,<span class="number">97</span>,<span class="number">68</span>],</span><br><span class="line">    <span class="string">&#x27;王五&#x27;</span>:[<span class="number">83</span>,<span class="number">79</span>,<span class="number">91</span>,<span class="number">78</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = DataFrame(data=dic,index=[<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="string">&#x27;理综&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df.loc[:, <span class="string">&#x27;张三&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">77</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">92</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">99</td>
<td align="right">97</td>
</tr>
<tr>
<td align="right">理综</td>
<td align="right">90</td>
<td align="right">68</td>
</tr>
</tbody></table>
<h6 id="切行切列-1"><a href="#切行切列-1" class="headerlink" title="切行切列"></a>切行切列</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;张三&#x27;</span>:[<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">90</span>],</span><br><span class="line">    <span class="string">&#x27;李四&#x27;</span>:[<span class="number">67</span>,<span class="number">92</span>,<span class="number">97</span>,<span class="number">68</span>],</span><br><span class="line">    <span class="string">&#x27;王五&#x27;</span>:[<span class="number">83</span>,<span class="number">79</span>,<span class="number">91</span>,<span class="number">78</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = DataFrame(data=dic,index=[<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="string">&#x27;理综&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">&#x27;数学&#x27;</span>:<span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
</tr>
</thead>
<tbody><tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">92</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">99</td>
<td align="right">97</td>
</tr>
</tbody></table>
<h3 id="DataFrame运算"><a href="#DataFrame运算" class="headerlink" title="DataFrame运算"></a><code>DataFrame</code>运算</h3><h4 id="DataFrame之间运算"><a href="#DataFrame之间运算" class="headerlink" title="DataFrame之间运算"></a><code>DataFrame</code>之间运算</h4><p>同<code>Series</code>一样：</p>
<ul>
<li>在运算中自动对齐不同索引的数据</li>
<li>如果索引不对应，则补<code>NaN</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = DataFrame(data=np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=[<span class="number">4</span>, <span class="number">3</span>]), index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], columns=[<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>])</span><br><span class="line">df2 = DataFrame(data=np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=[<span class="number">4</span>, <span class="number">3</span>]), index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], columns=[<span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;dd&#x27;</span>, <span class="string">&#x27;aa&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p><code>df1</code>：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">aa</th>
<th align="right">bb</th>
<th align="right">cc</th>
</tr>
</thead>
<tbody><tr>
<td align="right">a</td>
<td align="right">48</td>
<td align="right">48</td>
<td align="right">44</td>
</tr>
<tr>
<td align="right">b</td>
<td align="right">31</td>
<td align="right">53</td>
<td align="right">24</td>
</tr>
<tr>
<td align="right">c</td>
<td align="right">92</td>
<td align="right">71</td>
<td align="right">10</td>
</tr>
<tr>
<td align="right">d</td>
<td align="right">43</td>
<td align="right">62</td>
<td align="right">40</td>
</tr>
</tbody></table>
<p><code>df2</code>:</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">bb</th>
<th align="right">dd</th>
<th align="right">aa</th>
</tr>
</thead>
<tbody><tr>
<td align="right">a</td>
<td align="right">34</td>
<td align="right">22</td>
<td align="right">60</td>
</tr>
<tr>
<td align="right">b</td>
<td align="right">25</td>
<td align="right">30</td>
<td align="right">21</td>
</tr>
<tr>
<td align="right">c</td>
<td align="right">41</td>
<td align="right">36</td>
<td align="right">13</td>
</tr>
<tr>
<td align="right">d</td>
<td align="right">45</td>
<td align="right">48</td>
<td align="right">50</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df1+df2</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">aa</th>
<th align="right">bb</th>
<th align="right">cc</th>
<th align="right">dd</th>
</tr>
</thead>
<tbody><tr>
<td align="right">a</td>
<td align="right">108</td>
<td align="right">82</td>
<td align="right">NaN</td>
<td align="right">NaN</td>
</tr>
<tr>
<td align="right">b</td>
<td align="right">52</td>
<td align="right">78</td>
<td align="right">NaN</td>
<td align="right">NaN</td>
</tr>
<tr>
<td align="right">c</td>
<td align="right">105</td>
<td align="right">112</td>
<td align="right">NaN</td>
<td align="right">NaN</td>
</tr>
<tr>
<td align="right">d</td>
<td align="right">93</td>
<td align="right">107</td>
<td align="right">NaN</td>
<td align="right">NaN</td>
</tr>
</tbody></table>
<p>下面以一个示例来说明<code>DataFrame</code>的运算，要求如下：</p>
<ol>
<li>假设df1是期中考试成绩，df2是期末考试成绩，请自由创建df2，并将其与df1相加，求期中期末平均值。</li>
<li>假设张三期中考试数学被发现作弊，要记为0分，如何实现？</li>
<li>李四因为举报张三作弊立功，期中考试所有科目加100分，如何实现？</li>
<li>后来老师发现有一道题出错了，为了安抚学生情绪，给每位学生每个科目都加10分，如何实现？</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 防止每次变化</span></span><br><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">df1 = DataFrame(data=np.random.randint(<span class="number">80</span>, <span class="number">100</span>, size=[<span class="number">4</span>, <span class="number">3</span>]), index=[<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;开车&#x27;</span>], columns=[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>])</span><br><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">df2 = DataFrame(data=np.random.randint(<span class="number">75</span>, <span class="number">100</span>, size=[<span class="number">4</span>, <span class="number">3</span>]), index=[<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;开车&#x27;</span>], columns=[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>先看下两次考试结果，期中<code>df1</code>考试结果为：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
<th align="right">王五</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">88</td>
<td align="right">95</td>
<td align="right">93</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">88</td>
<td align="right">91</td>
<td align="right">98</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">91</td>
<td align="right">88</td>
<td align="right">87</td>
</tr>
<tr>
<td align="right">开车</td>
<td align="right">82</td>
<td align="right">97</td>
<td align="right">91</td>
</tr>
</tbody></table>
<p>期末<code>df2</code>考试结果为：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
<th align="right">王五</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">83</td>
<td align="right">90</td>
<td align="right">88</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">83</td>
<td align="right">97</td>
<td align="right">86</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">93</td>
<td align="right">86</td>
<td align="right">83</td>
</tr>
<tr>
<td align="right">开车</td>
<td align="right">82</td>
<td align="right">77</td>
<td align="right">92</td>
</tr>
</tbody></table>
<h4 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 期中加期末除以2</span><br><span class="line">(df1+df2)&#x2F;2</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
<th align="right">王五</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">85.5</td>
<td align="right">92.5</td>
<td align="right">90.5</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">85.5</td>
<td align="right">94.0</td>
<td align="right">92.0</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">92.0</td>
<td align="right">87.0</td>
<td align="right">85.0</td>
</tr>
<tr>
<td align="right">开车</td>
<td align="right">82.0</td>
<td align="right">87.0</td>
<td align="right">91.5</td>
</tr>
</tbody></table>
<h4 id="张三期中数学0分"><a href="#张三期中数学0分" class="headerlink" title="张三期中数学0分"></a>张三期中数学0分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df1.loc[&#39;数学&#39;, &#39;张三&#39;] &#x3D; 0</span><br><span class="line"># 或者使用默认索引</span><br><span class="line"># df1.iloc[1,0] &#x3D; 0</span><br><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
<th align="right">王五</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">88</td>
<td align="right">95</td>
<td align="right">93</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">0</td>
<td align="right">91</td>
<td align="right">98</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">91</td>
<td align="right">88</td>
<td align="right">87</td>
</tr>
<tr>
<td align="right">开车</td>
<td align="right">82</td>
<td align="right">97</td>
<td align="right">91</td>
</tr>
</tbody></table>
<h4 id="李四期中所有加100"><a href="#李四期中所有加100" class="headerlink" title="李四期中所有加100"></a>李四期中所有加100</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df1.loc[:, &#39;李四&#39;] +&#x3D; 100</span><br><span class="line"># 使用默认索引</span><br><span class="line"># df1.iloc[:, 1] +&#x3D; 100</span><br><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
<th align="right">王五</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">88</td>
<td align="right">195</td>
<td align="right">93</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">0</td>
<td align="right">191</td>
<td align="right">98</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">91</td>
<td align="right">188</td>
<td align="right">87</td>
</tr>
<tr>
<td align="right">开车</td>
<td align="right">82</td>
<td align="right">197</td>
<td align="right">91</td>
</tr>
</tbody></table>
<h4 id="期中全部加10"><a href="#期中全部加10" class="headerlink" title="期中全部加10"></a>期中全部加10</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df1 +&#x3D; 10</span><br><span class="line">df1</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">张三</th>
<th align="right">李四</th>
<th align="right">王五</th>
</tr>
</thead>
<tbody><tr>
<td align="right">语文</td>
<td align="right">98</td>
<td align="right">205</td>
<td align="right">103</td>
</tr>
<tr>
<td align="right">数学</td>
<td align="right">10</td>
<td align="right">201</td>
<td align="right">108</td>
</tr>
<tr>
<td align="right">英语</td>
<td align="right">101</td>
<td align="right">198</td>
<td align="right">97</td>
</tr>
<tr>
<td align="right">开车</td>
<td align="right">92</td>
<td align="right">207</td>
<td align="right">101</td>
</tr>
</tbody></table>
<h3 id="删除重复元素"><a href="#删除重复元素" class="headerlink" title="删除重复元素"></a>删除重复元素</h3><p> 使用duplicated()函数检测重复的行，返回元素为布尔类型的Series对象，每个元素对应一行，如果该行不是第一次出现，则元素为True </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame, Series</span><br><span class="line"><span class="comment">#创建一个df</span></span><br><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">df = DataFrame(data=np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=[<span class="number">7</span>, <span class="number">3</span>]), index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>], columns=[<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>])</span><br><span class="line"><span class="comment">#手动将df的某几行设置成相同的内容</span></span><br><span class="line">df.loc[[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]] = <span class="number">888</span></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">aa</th>
<th align="right">bb</th>
<th align="right">cc</th>
</tr>
</thead>
<tbody><tr>
<td align="right">a</td>
<td align="right">41</td>
<td align="right">16</td>
<td align="right">73</td>
</tr>
<tr>
<td align="right">b</td>
<td align="right">888</td>
<td align="right">888</td>
<td align="right">888</td>
</tr>
<tr>
<td align="right">c</td>
<td align="right">76</td>
<td align="right">8</td>
<td align="right">35</td>
</tr>
<tr>
<td align="right">d</td>
<td align="right">888</td>
<td align="right">888</td>
<td align="right">888</td>
</tr>
<tr>
<td align="right">e</td>
<td align="right">86</td>
<td align="right">48</td>
<td align="right">64</td>
</tr>
<tr>
<td align="right">f</td>
<td align="right">888</td>
<td align="right">888</td>
<td align="right">888</td>
</tr>
<tr>
<td align="right">g</td>
<td align="right">38</td>
<td align="right">40</td>
<td align="right">68</td>
</tr>
</tbody></table>
<p>使用duplicated查看所有重复元素行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># keep代表保留某些行，可选有first、last、False分别代表保留首行重复行、末行重复行，不保留任何重复行</span></span><br><span class="line">duplicate_rows = df.duplicated(keep=<span class="literal">False</span>)</span><br><span class="line">print(duplicate_rows)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a    <span class="literal">False</span></span><br><span class="line">b     <span class="literal">True</span></span><br><span class="line">c    <span class="literal">False</span></span><br><span class="line">d     <span class="literal">True</span></span><br><span class="line">e    <span class="literal">False</span></span><br><span class="line">f     <span class="literal">True</span></span><br><span class="line">g    <span class="literal">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>

<p>获取重复行的索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">duplicate_rows_index = df.loc[duplicate_rows].index</span><br><span class="line">print(duplicate_rows_index)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Index([<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>根据重复行索引，删除行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据索引删除行，axis=0代表行</span></span><br><span class="line">df.drop(labels=duplicate_rows_index, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">aa</th>
<th align="right">bb</th>
<th align="right">cc</th>
</tr>
</thead>
<tbody><tr>
<td align="right">a</td>
<td align="right">41</td>
<td align="right">16</td>
<td align="right">73</td>
</tr>
<tr>
<td align="right">c</td>
<td align="right">76</td>
<td align="right">8</td>
<td align="right">35</td>
</tr>
<tr>
<td align="right">e</td>
<td align="right">86</td>
<td align="right">48</td>
<td align="right">64</td>
</tr>
<tr>
<td align="right">g</td>
<td align="right">38</td>
<td align="right">40</td>
<td align="right">68</td>
</tr>
</tbody></table>
<h3 id="使用drop-duplicates"><a href="#使用drop-duplicates" class="headerlink" title="使用drop_duplicates"></a>使用<code>drop_duplicates</code></h3><p>df原始数据：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">aa</th>
<th align="right">bb</th>
<th align="right">cc</th>
</tr>
</thead>
<tbody><tr>
<td align="right">a</td>
<td align="right">41</td>
<td align="right">16</td>
<td align="right">73</td>
</tr>
<tr>
<td align="right">b</td>
<td align="right">888</td>
<td align="right">888</td>
<td align="right">888</td>
</tr>
<tr>
<td align="right">c</td>
<td align="right">76</td>
<td align="right">8</td>
<td align="right">35</td>
</tr>
<tr>
<td align="right">d</td>
<td align="right">888</td>
<td align="right">888</td>
<td align="right">888</td>
</tr>
<tr>
<td align="right">e</td>
<td align="right">86</td>
<td align="right">48</td>
<td align="right">64</td>
</tr>
<tr>
<td align="right">f</td>
<td align="right">888</td>
<td align="right">888</td>
<td align="right">888</td>
</tr>
<tr>
<td align="right">g</td>
<td align="right">38</td>
<td align="right">40</td>
<td align="right">68</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不保留任何重复行</span></span><br><span class="line">df.drop_duplicates(keep=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>结果：<br>|      |   aa |   bb |   cc |<br>| —: | —: | —: | —: |<br>|    a |   41 |   16 |   73 |<br>|    c |   76 |    8 |   35 |<br>|    e |   86 |   48 |   64 |<br>|    g |   38 |   40 |   68 |</p>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><h4 id="replace-函数"><a href="#replace-函数" class="headerlink" title="replace()函数"></a><code>replace()</code>函数</h4><p>替换元素-replace()函数：替换元素。使用replace()函数，对values进行映射操作</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.replace(</span><br><span class="line">    to_replace&#x3D;None, # 要替换的值</span><br><span class="line">    value&#x3D;None,			# 替换后的值</span><br><span class="line">    inplace&#x3D;False		# 是否作用于原对象还是返回新对象</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="Series替换操作"><a href="#Series替换操作" class="headerlink" title="Series替换操作"></a><code>Series</code>替换操作</h5><ul>
<li>单值替换<ul>
<li>普通替换</li>
<li>字典替换(推荐）</li>
</ul>
</li>
<li>多值替换<ul>
<li>列表替换</li>
<li>字典替换（推荐）</li>
</ul>
</li>
<li>参数<ul>
<li>to_replace:被替换的元素</li>
</ul>
</li>
</ul>
<h5 id="DataFrame替换操作"><a href="#DataFrame替换操作" class="headerlink" title="DataFrame替换操作"></a><code>DataFrame</code>替换操作</h5><ul>
<li><p>单值替换</p>
<ul>
<li>普通替换： 替换所有符合要求的元素:<code>to_replace=15</code>,<code>value=&#39;e&#39;</code></li>
<li>按列指定单值替换： <code>to_replace=&#123;列标签：替换值&#125;</code> <code>value=&#39;value&#39;</code></li>
</ul>
</li>
<li><p>多值替换</p>
<ul>
<li>列表替换: <code>to_replace=[] value=[]</code></li>
<li>字典替换（推荐） <code>to_replace=&#123;to_replace:value,to_replace:value&#125;</code></li>
</ul>
</li>
</ul>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>修改为<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line"><span class="meta">... </span>                   <span class="string">&#x27;B&#x27;</span>: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line"><span class="meta">... </span>                   <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]&#125;)</span><br><span class="line"><span class="number">0</span>修改为<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">5</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  <span class="number">9</span>  e</span><br><span class="line"></span><br><span class="line">**List-like `to_replace`**</span><br><span class="line"></span><br><span class="line">将<span class="number">0</span>/<span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>都修改为<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>)</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  <span class="number">9</span>  e</span><br><span class="line"></span><br><span class="line">将<span class="number">0</span>/<span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>依次修改为<span class="number">4</span>/<span class="number">3</span>/<span class="number">2</span>/<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>  <span class="number">3</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  <span class="number">9</span>  e</span><br><span class="line"></span><br><span class="line">将<span class="number">1</span>/<span class="number">2</span>替换为所在元素下一行当前列的元素，bfill代表上一行当前列对应的元素</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace([<span class="number">1</span>, <span class="number">2</span>], method=<span class="string">&#x27;bfill&#x27;</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">**dict-like `to_replace`**</span><br><span class="line">将<span class="number">0</span>替换为<span class="number">10</span>， <span class="number">1</span>替换为<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(&#123;<span class="number">0</span>: <span class="number">10</span>, <span class="number">1</span>: <span class="number">100</span>&#125;)</span><br><span class="line">     A  B  C</span><br><span class="line"><span class="number">0</span>   <span class="number">10</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>  <span class="number">100</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>    <span class="number">2</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>    <span class="number">3</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>    <span class="number">4</span>  <span class="number">9</span>  e</span><br><span class="line">将A列中<span class="number">0</span>和B列中<span class="number">5</span>替换为<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(&#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">5</span>&#125;, <span class="number">100</span>)</span><br><span class="line">     A    B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">100</span>  <span class="number">100</span>  a</span><br><span class="line"><span class="number">1</span>    <span class="number">1</span>    <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>    <span class="number">2</span>    <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>    <span class="number">3</span>    <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>    <span class="number">4</span>    <span class="number">9</span>  e</span><br><span class="line">将A列中的<span class="number">0</span>替换为<span class="number">100</span>，<span class="number">4</span>替换为<span class="number">400</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(&#123;<span class="string">&#x27;A&#x27;</span>: &#123;<span class="number">0</span>: <span class="number">100</span>, <span class="number">4</span>: <span class="number">400</span>&#125;&#125;)</span><br><span class="line">     A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">100</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>    <span class="number">1</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>    <span class="number">2</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>    <span class="number">3</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>  <span class="number">400</span>  <span class="number">9</span>  e</span><br><span class="line"></span><br><span class="line">**Regular expression `to_replace`**</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;bat&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bait&#x27;</span>],</span><br><span class="line"><span class="meta">... </span>                   <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>]&#125;)</span><br><span class="line">将元素值ba开头且<span class="number">3</span>位字母结束的值替换为new</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(to_replace=<span class="string">r&#x27;^ba.$&#x27;</span>, value=<span class="string">&#x27;new&#x27;</span>, regex=<span class="literal">True</span>)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   foo  new</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line">将A列中元素值ba开头且<span class="number">3</span>位字母结束的值替换为new</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(&#123;<span class="string">&#x27;A&#x27;</span>: <span class="string">r&#x27;^ba.$&#x27;</span>&#125;, &#123;<span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;new&#x27;</span>&#125;, regex=<span class="literal">True</span>)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   foo  bar</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line">将元素值ba开头且<span class="number">3</span>位字母结束的值替换为new</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(regex=<span class="string">r&#x27;^ba.$&#x27;</span>, value=<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   foo  new</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line">将元素值ba开头且<span class="number">3</span>位字母结束的值替换为new，foo替换为xyz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(regex=&#123;<span class="string">r&#x27;^ba.$&#x27;</span>: <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;xyz&#x27;</span>&#125;)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   xyz  new</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line">将元素值ba开头且<span class="number">3</span>位字母结束的值和职位foo的元素替换为new</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.replace(regex=[<span class="string">r&#x27;^ba.$&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>], value=<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   new  new</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br></pre></td></tr></table></figure>



<h4 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a><code>map()</code>函数</h4><p>新建一列 ， <code>map</code>函数并不是<code>df</code>的方法，而是<code>series</code>的方法</p>
<ul>
<li><p><code>map()</code>可以映射新一列数据</p>
</li>
<li><p><code>map()</code>中可以使用<code>lambda</code>表达式</p>
</li>
<li><p><code>map()</code>中可以使用方法，可以是自定义的方法</p>
<p><code>eg:map(&#123;to_replace:value&#125;)</code></p>
</li>
<li><p><strong>注意</strong> <code>map()</code>中不能使用<code>sum</code>之类的函数，<code>for</code>循环；并不是任何形式的函数都可以作为map的参数。只有当一个函数具有一个参数且有返回值，那么该函数才可以作为map的参数。</p>
</li>
</ul>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><h6 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h6><p>人员对应工资表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">dic=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;JAY&#x27;</span>, <span class="string">&#x27;TONY&#x27;</span>, <span class="string">&#x27;DAVID&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;salary&#x27;</span>: np.random.randint(<span class="number">9000</span>, <span class="number">500000</span>, size=<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = DataFrame(data=dic)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">name</th>
<th align="right">salary</th>
</tr>
</thead>
<tbody><tr>
<td align="right">0</td>
<td align="right">JAY</td>
<td align="right">360400</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">TONY</td>
<td align="right">109879</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">DAVID</td>
<td align="right">212245</td>
</tr>
</tbody></table>
<h6 id="添加对应中文名"><a href="#添加对应中文名" class="headerlink" title="添加对应中文名"></a>添加对应中文名</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加中文名</span><br><span class="line">cname &#x3D; &#123;</span><br><span class="line">    &#39;JAY&#39; : &#39;周杰伦&#39;,</span><br><span class="line">    &#39;TONY&#39;: &#39;托小尼&#39;,</span><br><span class="line">    &#39;DAVID&#39;: &#39;大卫&#39;</span><br><span class="line">&#125;</span><br><span class="line">df[&#39;cname&#39;] &#x3D; df[&#39;name&#39;].map(cname)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">name</th>
<th align="right">salary</th>
<th align="right">cname</th>
</tr>
</thead>
<tbody><tr>
<td align="right">0</td>
<td align="right">JAY</td>
<td align="right">360400</td>
<td align="right">周杰伦</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">TONY</td>
<td align="right">109879</td>
<td align="right">托小尼</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">DAVID</td>
<td align="right">212245</td>
<td align="right">大卫</td>
</tr>
</tbody></table>
<h6 id="增加税后工资"><a href="#增加税后工资" class="headerlink" title="增加税后工资"></a>增加税后工资</h6><p>工资超过20万，交20%的税，添加税后工资列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工资大于200000交20%税，税后工资</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_salary</span>(<span class="params">salary</span>):</span></span><br><span class="line">    <span class="keyword">if</span> salary &gt; <span class="number">200000</span>:</span><br><span class="line">        salary = salary - salary * <span class="number">0.2</span></span><br><span class="line">    <span class="keyword">return</span> salary</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;after_salary&#x27;</span>] = df[<span class="string">&#x27;salary&#x27;</span>].map(calc_salary)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">name</th>
<th align="right">salary</th>
<th align="right">cname</th>
<th align="right">after_salary</th>
</tr>
</thead>
<tbody><tr>
<td align="right">0</td>
<td align="right">JAY</td>
<td align="right">360400</td>
<td align="right">周杰伦</td>
<td align="right">288320.0</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">TONY</td>
<td align="right">109879</td>
<td align="right">托小尼</td>
<td align="right">109879.0</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">DAVID</td>
<td align="right">212245</td>
<td align="right">大卫</td>
<td align="right">169796.0</td>
</tr>
</tbody></table>
<h6 id="匿名函数计算工资"><a href="#匿名函数计算工资" class="headerlink" title="匿名函数计算工资"></a>匿名函数计算工资</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;after_salary1&#x27;</span>] = df[<span class="string">&#x27;salary&#x27;</span>].map(<span class="keyword">lambda</span> x: x - x * <span class="number">0.2</span> <span class="keyword">if</span> x&gt;<span class="number">200000</span> <span class="keyword">else</span> x)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">name</th>
<th align="right">salary</th>
<th align="right">cname</th>
<th align="right">after_salary</th>
<th align="right">after_salary1</th>
</tr>
</thead>
<tbody><tr>
<td align="right">0</td>
<td align="right">JAY</td>
<td align="right">360400</td>
<td align="right">周杰伦</td>
<td align="right">288320.0</td>
<td align="right">288320.0</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">TONY</td>
<td align="right">109879</td>
<td align="right">托小尼</td>
<td align="right">109879.0</td>
<td align="right">109879.0</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">DAVID</td>
<td align="right">212245</td>
<td align="right">大卫</td>
<td align="right">169796.0</td>
<td align="right">169796.0</td>
</tr>
</tbody></table>
<h5 id="Series-map示例"><a href="#Series-map示例" class="headerlink" title="Series map示例"></a>Series map示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Series</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, np.nan, <span class="string">&#x27;rabbit&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="number">0</span>      cat</span><br><span class="line"><span class="number">1</span>      dog</span><br><span class="line"><span class="number">2</span>      NaN</span><br><span class="line"><span class="number">3</span>   rabbit</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字典映射替换为对应的值，没有被字典中映射的值将赋为NaN</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.map(&#123;<span class="string">&#x27;cat&#x27;</span>: <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>: <span class="string">&#x27;puppy&#x27;</span>&#125;)</span><br><span class="line"><span class="number">0</span>   kitten</span><br><span class="line"><span class="number">1</span>    puppy</span><br><span class="line"><span class="number">2</span>      NaN</span><br><span class="line"><span class="number">3</span>      NaN</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似循环映射原始Series每个值到字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.map(<span class="string">&#x27;I am a &#123;&#125;&#x27;</span>.format)</span><br><span class="line"><span class="number">0</span>       I am a cat</span><br><span class="line"><span class="number">1</span>       I am a dog</span><br><span class="line"><span class="number">2</span>       I am a nan</span><br><span class="line"><span class="number">3</span>    I am a rabbit</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果na_action设置为ignore，将忽略该次映射关系</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.map(<span class="string">&#x27;I am a &#123;&#125;&#x27;</span>.format, na_action=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="number">0</span>     I am a cat</span><br><span class="line"><span class="number">1</span>     I am a dog</span><br><span class="line"><span class="number">2</span>            NaN</span><br><span class="line"><span class="number">3</span>  I am a rabbit</span><br></pre></td></tr></table></figure>

<h4 id="异常值过滤"><a href="#异常值过滤" class="headerlink" title="异常值过滤"></a>异常值过滤</h4><p>过滤掉以下<code>DataFrame</code>中cc列中元素小于cc列平均值的元素所在行</p>
<h5 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建<code>DataFrame</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">3</span>)</span><br><span class="line">df = DataFrame(data=np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size=[<span class="number">5</span>, <span class="number">3</span>]), columns=[<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">aa</th>
<th align="right">bb</th>
<th align="right">cc</th>
</tr>
</thead>
<tbody><tr>
<td align="right">a</td>
<td align="right">9</td>
<td align="right">4</td>
<td align="right">9</td>
</tr>
<tr>
<td align="right">b</td>
<td align="right">9</td>
<td align="right">1</td>
<td align="right">6</td>
</tr>
<tr>
<td align="right">c</td>
<td align="right">4</td>
<td align="right">6</td>
<td align="right">8</td>
</tr>
<tr>
<td align="right">d</td>
<td align="right">7</td>
<td align="right">1</td>
<td align="right">5</td>
</tr>
<tr>
<td align="right">e</td>
<td align="right">8</td>
<td align="right">9</td>
<td align="right">2</td>
</tr>
</tbody></table>
<h5 id="检测平均值"><a href="#检测平均值" class="headerlink" title="检测平均值"></a>检测平均值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤掉bb列元素小于当前列平均值的元素</span></span><br><span class="line"><span class="comment"># 计算cc列平均值，平均值为6.0</span></span><br><span class="line">cc_avg = df[<span class="string">&#x27;cc&#x27;</span>].mean()</span><br><span class="line"><span class="comment"># 检测cc列元素不小于平均值</span></span><br><span class="line">ret = df[<span class="string">&#x27;cc&#x27;</span>]&gt;=cc_avg</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a     <span class="literal">True</span></span><br><span class="line">b     <span class="literal">True</span></span><br><span class="line">c     <span class="literal">True</span></span><br><span class="line">d    <span class="literal">False</span></span><br><span class="line">e    <span class="literal">False</span></span><br><span class="line">Name: cc, dtype: bool</span><br></pre></td></tr></table></figure>

<h5 id="过滤结果"><a href="#过滤结果" class="headerlink" title="过滤结果"></a>过滤结果</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.loc[ret]</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">aa</th>
<th align="right">bb</th>
<th align="right">cc</th>
</tr>
</thead>
<tbody><tr>
<td align="right">a</td>
<td align="right">9</td>
<td align="right">4</td>
<td align="right">9</td>
</tr>
<tr>
<td align="right">b</td>
<td align="right">9</td>
<td align="right">1</td>
<td align="right">6</td>
</tr>
<tr>
<td align="right">c</td>
<td align="right">4</td>
<td align="right">6</td>
<td align="right">8</td>
</tr>
</tbody></table>
<h4 id="随机抽样"><a href="#随机抽样" class="headerlink" title="随机抽样"></a>随机抽样</h4><p>用于随机抽取其中的部分样本</p>
<h5 id="take"><a href="#take" class="headerlink" title="take"></a>take</h5><ul>
<li><code>take()</code>函数接受一个索引列表，用数字表示,使得<code>df</code>根据列表中索引的顺序进行排序</li>
<li><code>eg</code>:<code>df.take([1,3,4,2,5])</code></li>
</ul>
<h6 id="原始数列"><a href="#原始数列" class="headerlink" title="原始数列"></a>原始数列</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">df = DataFrame(data=np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=[<span class="number">20</span>, <span class="number">5</span>]), columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">a</th>
<th align="right">b</th>
<th align="right">c</th>
<th align="right">d</th>
<th align="right">e</th>
</tr>
</thead>
<tbody><tr>
<td align="right">0</td>
<td align="right">41</td>
<td align="right">16</td>
<td align="right">73</td>
<td align="right">23</td>
<td align="right">44</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">83</td>
<td align="right">76</td>
<td align="right">8</td>
<td align="right">35</td>
<td align="right">50</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">96</td>
<td align="right">76</td>
<td align="right">86</td>
<td align="right">48</td>
<td align="right">64</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">32</td>
<td align="right">91</td>
<td align="right">21</td>
<td align="right">38</td>
<td align="right">40</td>
</tr>
<tr>
<td align="right">4</td>
<td align="right">68</td>
<td align="right">5</td>
<td align="right">43</td>
<td align="right">52</td>
<td align="right">39</td>
</tr>
<tr>
<td align="right">5</td>
<td align="right">34</td>
<td align="right">59</td>
<td align="right">68</td>
<td align="right">70</td>
<td align="right">89</td>
</tr>
<tr>
<td align="right">6</td>
<td align="right">69</td>
<td align="right">47</td>
<td align="right">71</td>
<td align="right">96</td>
<td align="right">84</td>
</tr>
<tr>
<td align="right">7</td>
<td align="right">32</td>
<td align="right">67</td>
<td align="right">81</td>
<td align="right">53</td>
<td align="right">77</td>
</tr>
<tr>
<td align="right">8</td>
<td align="right">51</td>
<td align="right">5</td>
<td align="right">91</td>
<td align="right">64</td>
<td align="right">80</td>
</tr>
<tr>
<td align="right">9</td>
<td align="right">50</td>
<td align="right">40</td>
<td align="right">47</td>
<td align="right">9</td>
<td align="right">51</td>
</tr>
<tr>
<td align="right">10</td>
<td align="right">16</td>
<td align="right">9</td>
<td align="right">18</td>
<td align="right">23</td>
<td align="right">74</td>
</tr>
<tr>
<td align="right">11</td>
<td align="right">58</td>
<td align="right">91</td>
<td align="right">63</td>
<td align="right">84</td>
<td align="right">97</td>
</tr>
<tr>
<td align="right">12</td>
<td align="right">44</td>
<td align="right">33</td>
<td align="right">27</td>
<td align="right">9</td>
<td align="right">77</td>
</tr>
<tr>
<td align="right">13</td>
<td align="right">11</td>
<td align="right">41</td>
<td align="right">35</td>
<td align="right">61</td>
<td align="right">10</td>
</tr>
<tr>
<td align="right">14</td>
<td align="right">71</td>
<td align="right">87</td>
<td align="right">71</td>
<td align="right">20</td>
<td align="right">57</td>
</tr>
<tr>
<td align="right">15</td>
<td align="right">83</td>
<td align="right">2</td>
<td align="right">69</td>
<td align="right">41</td>
<td align="right">82</td>
</tr>
<tr>
<td align="right">16</td>
<td align="right">62</td>
<td align="right">71</td>
<td align="right">98</td>
<td align="right">19</td>
<td align="right">85</td>
</tr>
<tr>
<td align="right">17</td>
<td align="right">91</td>
<td align="right">88</td>
<td align="right">23</td>
<td align="right">44</td>
<td align="right">53</td>
</tr>
<tr>
<td align="right">18</td>
<td align="right">75</td>
<td align="right">73</td>
<td align="right">91</td>
<td align="right">92</td>
<td align="right">97</td>
</tr>
<tr>
<td align="right">19</td>
<td align="right">17</td>
<td align="right">56</td>
<td align="right">22</td>
<td align="right">44</td>
<td align="right">94</td>
</tr>
</tbody></table>
<h6 id="随机抽取指定行数据"><a href="#随机抽取指定行数据" class="headerlink" title="随机抽取指定行数据"></a>随机抽取指定行数据</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># axis&#x3D;0代表行，随机抽取以下4行</span><br><span class="line">df.take([19, 3, 9, 7], axis&#x3D;0)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">a</th>
<th align="right">b</th>
<th align="right">c</th>
<th align="right">d</th>
<th align="right">e</th>
</tr>
</thead>
<tbody><tr>
<td align="right">19</td>
<td align="right">17</td>
<td align="right">56</td>
<td align="right">22</td>
<td align="right">44</td>
<td align="right">94</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">32</td>
<td align="right">91</td>
<td align="right">21</td>
<td align="right">38</td>
<td align="right">40</td>
</tr>
<tr>
<td align="right">9</td>
<td align="right">50</td>
<td align="right">40</td>
<td align="right">47</td>
<td align="right">9</td>
<td align="right">51</td>
</tr>
<tr>
<td align="right">7</td>
<td align="right">32</td>
<td align="right">67</td>
<td align="right">81</td>
<td align="right">53</td>
<td align="right">77</td>
</tr>
</tbody></table>
<h6 id="随机抽取指定列数据"><a href="#随机抽取指定列数据" class="headerlink" title="随机抽取指定列数据"></a>随机抽取指定列数据</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抽取默认索引为4/2/0的列数据</span></span><br><span class="line">df.take([<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">a</th>
<th align="right">b</th>
<th align="right">c</th>
<th align="right">d</th>
<th align="right">e</th>
</tr>
</thead>
<tbody><tr>
<td align="right">18</td>
<td align="right">75</td>
<td align="right">73</td>
<td align="right">91</td>
<td align="right">92</td>
<td align="right">97</td>
</tr>
<tr>
<td align="right">15</td>
<td align="right">83</td>
<td align="right">2</td>
<td align="right">69</td>
<td align="right">41</td>
<td align="right">82</td>
</tr>
<tr>
<td align="right">0</td>
<td align="right">41</td>
<td align="right">16</td>
<td align="right">73</td>
<td align="right">23</td>
<td align="right">44</td>
</tr>
<tr>
<td align="right">14</td>
<td align="right">71</td>
<td align="right">87</td>
<td align="right">71</td>
<td align="right">20</td>
<td align="right">57</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">96</td>
<td align="right">76</td>
<td align="right">86</td>
<td align="right">48</td>
<td align="right">64</td>
</tr>
<tr>
<td align="right">12</td>
<td align="right">44</td>
<td align="right">33</td>
<td align="right">27</td>
<td align="right">9</td>
<td align="right">77</td>
</tr>
<tr>
<td align="right">13</td>
<td align="right">11</td>
<td align="right">41</td>
<td align="right">35</td>
<td align="right">61</td>
<td align="right">10</td>
</tr>
<tr>
<td align="right">9</td>
<td align="right">50</td>
<td align="right">40</td>
<td align="right">47</td>
<td align="right">9</td>
<td align="right">51</td>
</tr>
<tr>
<td align="right">17</td>
<td align="right">91</td>
<td align="right">88</td>
<td align="right">23</td>
<td align="right">44</td>
<td align="right">53</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">32</td>
<td align="right">91</td>
<td align="right">21</td>
<td align="right">38</td>
<td align="right">40</td>
</tr>
<tr>
<td align="right">4</td>
<td align="right">68</td>
<td align="right">5</td>
<td align="right">43</td>
<td align="right">52</td>
<td align="right">39</td>
</tr>
<tr>
<td align="right">7</td>
<td align="right">32</td>
<td align="right">67</td>
<td align="right">81</td>
<td align="right">53</td>
<td align="right">77</td>
</tr>
<tr>
<td align="right">19</td>
<td align="right">17</td>
<td align="right">56</td>
<td align="right">22</td>
<td align="right">44</td>
<td align="right">94</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">83</td>
<td align="right">76</td>
<td align="right">8</td>
<td align="right">35</td>
<td align="right">50</td>
</tr>
<tr>
<td align="right">11</td>
<td align="right">58</td>
<td align="right">91</td>
<td align="right">63</td>
<td align="right">84</td>
<td align="right">97</td>
</tr>
<tr>
<td align="right">5</td>
<td align="right">34</td>
<td align="right">59</td>
<td align="right">68</td>
<td align="right">70</td>
<td align="right">89</td>
</tr>
<tr>
<td align="right">10</td>
<td align="right">16</td>
<td align="right">9</td>
<td align="right">18</td>
<td align="right">23</td>
<td align="right">74</td>
</tr>
<tr>
<td align="right">6</td>
<td align="right">69</td>
<td align="right">47</td>
<td align="right">71</td>
<td align="right">96</td>
<td align="right">84</td>
</tr>
<tr>
<td align="right">8</td>
<td align="right">51</td>
<td align="right">5</td>
<td align="right">91</td>
<td align="right">64</td>
<td align="right">80</td>
</tr>
<tr>
<td align="right">16</td>
<td align="right">62</td>
<td align="right">71</td>
<td align="right">98</td>
<td align="right">19</td>
<td align="right">85</td>
</tr>
</tbody></table>
<h6 id="随机打乱"><a href="#随机打乱" class="headerlink" title="随机打乱"></a>随机打乱</h6><p> 当<code>DataFrame</code>规模足够大时，直接使用<code>np.random.permutation(x)</code>函数，就配合take()函数实现随机抽样 ，<code>np.random.permutation(x)</code>生成从0到x-1为元素的列表</p>
<p><strong>生成随机数列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rand_arr = np.random.permutation(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array([ <span class="number">6</span>,  <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>,  <span class="number">9</span>,  <span class="number">8</span>,  <span class="number">4</span>, <span class="number">18</span>,  <span class="number">3</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">15</span>,  <span class="number">2</span>, <span class="number">10</span>, <span class="number">11</span>,  <span class="number">5</span>, <span class="number">16</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">19</span>, <span class="number">14</span>])</span><br></pre></td></tr></table></figure>

<p><strong>抽取随机后的所有数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#行列全部打乱</span></span><br><span class="line">df.take(rand_arr, axis=<span class="number">0</span>).take(np.random.permutation(<span class="number">5</span>), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">c</th>
<th align="right">d</th>
<th align="right">a</th>
<th align="right">e</th>
<th align="right">b</th>
</tr>
</thead>
<tbody><tr>
<td align="right">10</td>
<td align="right">18</td>
<td align="right">23</td>
<td align="right">16</td>
<td align="right">74</td>
<td align="right">9</td>
</tr>
<tr>
<td align="right">9</td>
<td align="right">47</td>
<td align="right">9</td>
<td align="right">50</td>
<td align="right">51</td>
<td align="right">40</td>
</tr>
<tr>
<td align="right">18</td>
<td align="right">91</td>
<td align="right">92</td>
<td align="right">75</td>
<td align="right">97</td>
<td align="right">73</td>
</tr>
<tr>
<td align="right">12</td>
<td align="right">27</td>
<td align="right">9</td>
<td align="right">44</td>
<td align="right">77</td>
<td align="right">33</td>
</tr>
<tr>
<td align="right">7</td>
<td align="right">81</td>
<td align="right">53</td>
<td align="right">32</td>
<td align="right">77</td>
<td align="right">67</td>
</tr>
<tr>
<td align="right">4</td>
<td align="right">43</td>
<td align="right">52</td>
<td align="right">68</td>
<td align="right">39</td>
<td align="right">5</td>
</tr>
<tr>
<td align="right">8</td>
<td align="right">91</td>
<td align="right">64</td>
<td align="right">51</td>
<td align="right">80</td>
<td align="right">5</td>
</tr>
<tr>
<td align="right">0</td>
<td align="right">73</td>
<td align="right">23</td>
<td align="right">41</td>
<td align="right">44</td>
<td align="right">16</td>
</tr>
<tr>
<td align="right">11</td>
<td align="right">63</td>
<td align="right">84</td>
<td align="right">58</td>
<td align="right">97</td>
<td align="right">91</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">8</td>
<td align="right">35</td>
<td align="right">83</td>
<td align="right">50</td>
<td align="right">76</td>
</tr>
<tr>
<td align="right">19</td>
<td align="right">22</td>
<td align="right">44</td>
<td align="right">17</td>
<td align="right">94</td>
<td align="right">56</td>
</tr>
<tr>
<td align="right">13</td>
<td align="right">35</td>
<td align="right">61</td>
<td align="right">11</td>
<td align="right">10</td>
<td align="right">41</td>
</tr>
<tr>
<td align="right">16</td>
<td align="right">98</td>
<td align="right">19</td>
<td align="right">62</td>
<td align="right">85</td>
<td align="right">71</td>
</tr>
<tr>
<td align="right">14</td>
<td align="right">71</td>
<td align="right">20</td>
<td align="right">71</td>
<td align="right">57</td>
<td align="right">87</td>
</tr>
<tr>
<td align="right">5</td>
<td align="right">68</td>
<td align="right">70</td>
<td align="right">34</td>
<td align="right">89</td>
<td align="right">59</td>
</tr>
<tr>
<td align="right">6</td>
<td align="right">71</td>
<td align="right">96</td>
<td align="right">69</td>
<td align="right">84</td>
<td align="right">47</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">86</td>
<td align="right">48</td>
<td align="right">96</td>
<td align="right">64</td>
<td align="right">76</td>
</tr>
<tr>
<td align="right">15</td>
<td align="right">69</td>
<td align="right">41</td>
<td align="right">83</td>
<td align="right">82</td>
<td align="right">2</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">21</td>
<td align="right">38</td>
<td align="right">32</td>
<td align="right">40</td>
<td align="right">91</td>
</tr>
<tr>
<td align="right">17</td>
<td align="right">23</td>
<td align="right">44</td>
<td align="right">91</td>
<td align="right">53</td>
<td align="right">88</td>
</tr>
</tbody></table>
<h3 id="数据分类"><a href="#数据分类" class="headerlink" title="数据分类"></a>数据分类</h3><p>数据聚合是数据处理的最后一步，通常是要使每一个数组生成一个单一的数值。</p>
<p>数据分类处理：</p>
<ul>
<li>分组：先把数据分为几组</li>
<li>用函数处理：为不同组的数据应用不同的函数以转换数据</li>
<li>合并：把不同组得到的结果合并起来</li>
</ul>
<p>数据分类处理的核心：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- groupby()函数</span><br><span class="line">- groups属性查看分组情况</span><br><span class="line">- eg: df.groupby(by=<span class="string">&#x27;item&#x27;</span>).groups</span><br></pre></td></tr></table></figure>

<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>原始数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;水果&#x27;</span> : [<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;梨&#x27;</span>,<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;草莓&#x27;</span>, <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;梨&#x27;</span>, <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;草莓&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;价格&#x27;</span> : [<span class="number">4</span>, <span class="number">3</span>, <span class="number">5.5</span>, <span class="number">12</span>, <span class="number">3.2</span>, <span class="number">3.5</span>, <span class="number">2.5</span>, <span class="number">10</span>],</span><br><span class="line">    <span class="string">&#x27;颜色&#x27;</span> : [<span class="string">&#x27;绿色&#x27;</span>, <span class="string">&#x27;绿色&#x27;</span>, <span class="string">&#x27;红色&#x27;</span>, <span class="string">&#x27;红色&#x27;</span>, <span class="string">&#x27;绿色&#x27;</span>, <span class="string">&#x27;黄色&#x27;</span>, <span class="string">&#x27;绿色&#x27;</span>, <span class="string">&#x27;黄色&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;重量&#x27;</span> : [<span class="number">12</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">13</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = DataFrame(data=dic)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">水果</th>
<th align="right">价格</th>
<th align="right">颜色</th>
<th align="right">重量</th>
</tr>
</thead>
<tbody><tr>
<td align="right">0</td>
<td align="right">苹果</td>
<td align="right">4.0</td>
<td align="right">绿色</td>
<td align="right">12</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">梨</td>
<td align="right">3.0</td>
<td align="right">绿色</td>
<td align="right">10</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">苹果</td>
<td align="right">5.5</td>
<td align="right">红色</td>
<td align="right">9</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">草莓</td>
<td align="right">12.0</td>
<td align="right">红色</td>
<td align="right">15</td>
</tr>
<tr>
<td align="right">4</td>
<td align="right">香蕉</td>
<td align="right">3.2</td>
<td align="right">绿色</td>
<td align="right">19</td>
</tr>
<tr>
<td align="right">5</td>
<td align="right">梨</td>
<td align="right">3.5</td>
<td align="right">黄色</td>
<td align="right">20</td>
</tr>
<tr>
<td align="right">6</td>
<td align="right">香蕉</td>
<td align="right">2.5</td>
<td align="right">绿色</td>
<td align="right">17</td>
</tr>
<tr>
<td align="right">7</td>
<td align="right">草莓</td>
<td align="right">10.0</td>
<td align="right">黄色</td>
<td align="right">13</td>
</tr>
</tbody></table>
<h5 id="根据水果类型分组"><a href="#根据水果类型分组" class="headerlink" title="根据水果类型分组"></a>根据水果类型分组</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># axis=0表示列分组</span></span><br><span class="line">df.groupby(by=<span class="string">&#x27;水果&#x27;</span>, axis=<span class="number">0</span>).groups</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;梨&#x27;</span>: Int64Index([<span class="number">1</span>, <span class="number">5</span>], dtype=<span class="string">&#x27;int64&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;苹果&#x27;</span>: Int64Index([<span class="number">0</span>, <span class="number">2</span>], dtype=<span class="string">&#x27;int64&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;草莓&#x27;</span>: Int64Index([<span class="number">3</span>, <span class="number">7</span>], dtype=<span class="string">&#x27;int64&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;香蕉&#x27;</span>: Int64Index([<span class="number">4</span>, <span class="number">6</span>], dtype=<span class="string">&#x27;int64&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure>

<h5 id="按颜色分组"><a href="#按颜色分组" class="headerlink" title="按颜色分组"></a>按颜色分组</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># axis=0表示列分组</span></span><br><span class="line">df.groupby(by=<span class="string">&#x27;颜色&#x27;</span>, axis=<span class="number">0</span>).groups</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;红色&#x27;</span>: Int64Index([<span class="number">2</span>, <span class="number">3</span>], dtype=<span class="string">&#x27;int64&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;绿色&#x27;</span>: Int64Index([<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>], dtype=<span class="string">&#x27;int64&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;黄色&#x27;</span>: Int64Index([<span class="number">5</span>, <span class="number">7</span>], dtype=<span class="string">&#x27;int64&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure>

<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>分组后要做的就是聚合统计数据</p>
<h5 id="每种水果平均值"><a href="#每种水果平均值" class="headerlink" title="每种水果平均值"></a>每种水果平均值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 水果平均值，只有价格和重量列是数字可以计算</span></span><br><span class="line">df.groupby(by=<span class="string">&#x27;水果&#x27;</span>).mean()</span><br></pre></td></tr></table></figure>

<p>结果</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">价格</th>
<th align="right">重量</th>
</tr>
</thead>
<tbody><tr>
<td align="right">水果</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">梨</td>
<td align="right">3.25</td>
<td align="right">15.0</td>
</tr>
<tr>
<td align="right">苹果</td>
<td align="right">4.75</td>
<td align="right">10.5</td>
</tr>
<tr>
<td align="right">草莓</td>
<td align="right">11.00</td>
<td align="right">14.0</td>
</tr>
<tr>
<td align="right">香蕉</td>
<td align="right">2.85</td>
<td align="right">18.0</td>
</tr>
</tbody></table>
<h5 id="每种水果平均价格"><a href="#每种水果平均价格" class="headerlink" title="每种水果平均价格"></a>每种水果平均价格</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(by=<span class="string">&#x27;水果&#x27;</span>)[<span class="string">&#x27;价格&#x27;</span>].mean()</span><br><span class="line"><span class="comment"># df.groupby(by=&#x27;水果&#x27;).mean()[&#x27;价格&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">水果</span><br><span class="line">梨      <span class="number">3.25</span></span><br><span class="line">苹果     <span class="number">4.75</span></span><br><span class="line">草莓    <span class="number">11.00</span></span><br><span class="line">香蕉     <span class="number">2.85</span></span><br><span class="line">Name: 价格, dtype: float64</span><br></pre></td></tr></table></figure>

<h5 id="苹果的平均价格"><a href="#苹果的平均价格" class="headerlink" title="苹果的平均价格"></a>苹果的平均价格</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先计算出每种水果平均价格</span></span><br><span class="line"><span class="comment"># 使用自定义索引获取</span></span><br><span class="line">df.groupby(by=<span class="string">&#x27;水果&#x27;</span>)[<span class="string">&#x27;价格&#x27;</span>].mean()[<span class="string">&#x27;苹果&#x27;</span>]</span><br><span class="line"><span class="comment"># 使用默认索引获取苹果平均价</span></span><br><span class="line"><span class="comment"># df.groupby(by=&#x27;水果&#x27;)[&#x27;价格&#x27;].mean()[1]</span></span><br></pre></td></tr></table></figure>

<h5 id="添加每个水果平均价格列"><a href="#添加每个水果平均价格列" class="headerlink" title="添加每个水果平均价格列"></a>添加每个水果平均价格列</h5><h6 id="计算每种水果均价"><a href="#计算每种水果均价" class="headerlink" title="计算每种水果均价"></a>计算每种水果均价</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给df创建一个新列，内容为各个水果的平均价格</span></span><br><span class="line">prices = df.groupby(<span class="string">&#x27;水果&#x27;</span>)[<span class="string">&#x27;价格&#x27;</span>].mean()</span><br><span class="line">prices</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">水果</span><br><span class="line">梨      <span class="number">3.25</span></span><br><span class="line">苹果     <span class="number">4.75</span></span><br><span class="line">草莓    <span class="number">11.00</span></span><br><span class="line">香蕉     <span class="number">2.85</span></span><br><span class="line">Name: 价格, dtype: float64</span><br></pre></td></tr></table></figure>

<h6 id="每种水果价格平均价转换成字典"><a href="#每种水果价格平均价转换成字典" class="headerlink" title="每种水果价格平均价转换成字典"></a>每种水果价格平均价转换成字典</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic_prices = prices.to_dict()</span><br><span class="line">dic_prices</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;梨&#x27;</span>: <span class="number">3.25</span>, <span class="string">&#x27;苹果&#x27;</span>: <span class="number">4.75</span>, <span class="string">&#x27;草莓&#x27;</span>: <span class="number">11.0</span>, <span class="string">&#x27;香蕉&#x27;</span>: <span class="number">2.85</span>&#125;</span><br></pre></td></tr></table></figure>

<h6 id="使用map映射后添加到一个新列"><a href="#使用map映射后添加到一个新列" class="headerlink" title="使用map映射后添加到一个新列"></a>使用map映射后添加到一个新列</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;平均价&#x27;</span>] = df[<span class="string">&#x27;水果&#x27;</span>].map(dic_prices)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th align="right"></th>
<th align="right">水果</th>
<th align="right">价格</th>
<th align="right">颜色</th>
<th align="right">重量</th>
<th align="right">平均价</th>
</tr>
</thead>
<tbody><tr>
<td align="right">0</td>
<td align="right">苹果</td>
<td align="right">4.0</td>
<td align="right">绿色</td>
<td align="right">12</td>
<td align="right">4.75</td>
</tr>
<tr>
<td align="right">1</td>
<td align="right">梨</td>
<td align="right">3.0</td>
<td align="right">绿色</td>
<td align="right">10</td>
<td align="right">3.25</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">苹果</td>
<td align="right">5.5</td>
<td align="right">红色</td>
<td align="right">9</td>
<td align="right">4.75</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">草莓</td>
<td align="right">12.0</td>
<td align="right">红色</td>
<td align="right">15</td>
<td align="right">11.00</td>
</tr>
<tr>
<td align="right">4</td>
<td align="right">香蕉</td>
<td align="right">3.2</td>
<td align="right">绿色</td>
<td align="right">19</td>
<td align="right">2.85</td>
</tr>
<tr>
<td align="right">5</td>
<td align="right">梨</td>
<td align="right">3.5</td>
<td align="right">黄色</td>
<td align="right">20</td>
<td align="right">3.25</td>
</tr>
<tr>
<td align="right">6</td>
<td align="right">香蕉</td>
<td align="right">2.5</td>
<td align="right">绿色</td>
<td align="right">17</td>
<td align="right">2.85</td>
</tr>
<tr>
<td align="right">7</td>
<td align="right">草莓</td>
<td align="right">10.0</td>
<td align="right">黄色</td>
<td align="right">13</td>
<td align="right">11.00</td>
</tr>
</tbody></table>
<h4 id="高级数据聚合"><a href="#高级数据聚合" class="headerlink" title="高级数据聚合"></a>高级数据聚合</h4><p>使用<code>groupby</code>分组后，也可以使用<code>transform</code>和<code>apply</code>提供自定义函数实现更多的运算</p>
<ul>
<li><code>df.groupby(&#39;item&#39;)[&#39;price&#39;].sum()</code> &lt;==&gt; <code>df.groupby(&#39;item&#39;)[&#39;price&#39;].apply(sum)</code></li>
<li><code>transform</code>和<code>apply</code>都会进行运算，在<code>transform</code>或者<code>apply</code>中传入函数即可</li>
<li><code>transform</code>和<code>apply</code>也可以传入一个<code>lambda</code>表达式</li>
</ul>
<h5 id="使用apply计算每种水果平均价格"><a href="#使用apply计算每种水果平均价格" class="headerlink" title="使用apply计算每种水果平均价格"></a>使用apply计算每种水果平均价格</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算平均价格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_avg</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="comment"># 当前水果总价</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 循环当前该类水果所有商品,并将该类所有商品汇总</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="comment"># 将该类所有商品总价除以该类所有商品数量及该类商品平均价返回</span></span><br><span class="line">    <span class="keyword">return</span> sum/s.size</span><br><span class="line">avg_price = df.groupby(by=<span class="string">&#x27;水果&#x27;</span>)[<span class="string">&#x27;价格&#x27;</span>].apply(calc_avg)</span><br><span class="line">print(avg_price)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">水果</span><br><span class="line">梨      3.25</span><br><span class="line">苹果     4.75</span><br><span class="line">草莓    11.00</span><br><span class="line">香蕉     2.85</span><br><span class="line">Name: 价格, dtype: float64</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python学习</tag>
        <tag>数据分析</tag>
        <tag>Pandas</tag>
        <tag>series</tag>
        <tag>dataframe</tag>
        <tag>series切片</tag>
        <tag>series索引</tag>
        <tag>python数据分析</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>uwsgi配置发布web服务器</title>
    <url>/7c752308.html</url>
    <content><![CDATA[<p>通常我们本地开发环境使用运行python脚本用的是<code>wsgi</code>，<code>pycharm</code>更是跟我们内置好了；而生产环境下我们所需要的环境通常是：<code>nginx+uwsgi+virturlenvwrapper</code>，本文简单说下此环境下的配置。</p>
<a id="more"></a>

<p><code>WSGI</code>是<code>Web</code>服务器网关接口。它是一个规范，描述了<code>Web</code>服务器如何与Web应用程序通信，以及<code>Web</code>应用程序如何链接在一起以处理一个请求，（接收请求，处理请求，响应请求）</p>
<p><code>Django</code>部署</p>
<p><code>Django</code>的主要部署平台是 <code>WSGI</code>，这是用于<code>Web</code>服务器和应用程序的<code>Python</code>标准。</p>
<p><code>Django</code>的 <code>startproject</code>管理命令设置一个简单的默认<code>WSGI</code>配置，可以根据需要为您的项目进行调整，并指示任何符合<code>WSGI</code>的应用程序服务器使用。</p>
<p><code>application</code><br>使用<code>WSGI</code>部署的关键概念是应用程序服务器用于与代码通信的 <code>application</code> 可调用。它通常在服务器可访问的<code>Python</code>模块中作为名为 <code>application</code> 的对象提供。</p>
<p><code>startproject</code> 命令创建包含这样的 <code>application</code> 可调用的文件 <code>&lt;project_name&gt;/wsgi.py</code>. ，它被<code>Django</code>的开发服务器和生产<code>WSGI</code>部署使用。<br><code>WSGI</code>服务器从其配置中获取 <code>application</code> 可调用的路径。 <code>Django</code>的内置服务器，即 <code>runserver</code> 命令，从 <code>WSGI_APPLICATION</code> 设置读取它。</p>
<p>以下直接示例演示：</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a><code>Nginx</code></h3><p>安装参考：<a href="https://www.diandian100.cn/b5f2e1e2.html#%E5%AE%89%E8%A3%85"><code>nginx</code>安装及配置多域名初体验</a></p>
<h3 id="virtualenvwraper"><a href="#virtualenvwraper" class="headerlink" title="virtualenvwraper"></a><code>virtualenvwraper</code></h3><p>安装参考：<a href="https://www.diandian100.cn/c9c15d88.html#virtualenvwraper%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8"><code>virtualenvwraper</code>安装与使用</a></p>
<h3 id="python3"><a href="#python3" class="headerlink" title="python3"></a><code>python3</code></h3><p>安装参考：<a href="https://www.diandian100.cn/cbf7818.html#python3%E5%AE%89%E8%A3%85"><code>python3</code>安装</a></p>
<h3 id="uswgi"><a href="#uswgi" class="headerlink" title="uswgi"></a><code>uswgi</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入虚拟环境</span></span><br><span class="line">root@Tony-PC:/opt/pywww# workon django2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看python是否是3.0且指向虚拟环境</span></span><br><span class="line">(django2) root@Tony-PC:/opt/pywww# python -V</span><br><span class="line">Python 3.6.5</span><br><span class="line">(django2) root@Tony-PC:/opt/pywww# which python</span><br><span class="line">/opt/pyenv/django2/bin/python</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看pip指向</span></span><br><span class="line">(django2) root@Tony-PC:/opt/pywww# pip -V</span><br><span class="line">pip 19.2.2 from /opt/pyenv/django2/lib/python3.6/site-packages/pip (python 3.6)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装uswgi</span></span><br><span class="line">(django2) root@Tony-PC:/opt/pywww# pip install uwsgi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查uwsgi和uwsgi python版本</span></span><br><span class="line">(django2) root@Tony-PC:/opt/pywww# uwsgi --version</span><br><span class="line">2.0.18</span><br><span class="line">(django2) root@Tony-PC:/opt/pywww# uwsgi --python-version</span><br><span class="line">3.6.5</span><br></pre></td></tr></table></figure>

<h2 id="uwsgi测试单文件"><a href="#uwsgi测试单文件" class="headerlink" title="uwsgi测试单文件"></a><code>uwsgi</code>测试单文件</h2><h5 id="创建test-py"><a href="#创建test-py" class="headerlink" title="创建test.py"></a>创建<code>test.py</code></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span>(<span class="params">env, start_response</span>):</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 ok&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b&#x27;hello world&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="运行该文件："><a href="#运行该文件：" class="headerlink" title="运行该文件："></a>运行该文件：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> uwsgi --http :8001 --wsgi-file test.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http :8001: 使用http协议，端口8001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wsgi-file test.py: 加载指定的文件，test.py</span></span><br><span class="line"></span><br><span class="line">(django2) root@Tony-PC:/opt/pywww/mysite# uwsgi --http :8001 --wsgi-file test.py</span><br><span class="line">*** Starting uWSGI 2.0.18 (64bit) on [Mon Aug 19 18:01:50 2019] ***</span><br><span class="line">compiled with version: 7.3.0 on 19 August 2019 06:30:34</span><br><span class="line">os: Linux-4.15.0-29deepin-generic #31 SMP Fri Jul 27 07:12:08 UTC 2018</span><br><span class="line">nodename: Tony-PC</span><br><span class="line">machine: x86_64</span><br><span class="line">clock source: unix</span><br><span class="line">pcre jit disabled</span><br><span class="line">detected number of CPU cores: 8</span><br><span class="line">current working directory: /opt/pywww/mysite</span><br><span class="line">detected binary path: /opt/pyenv/django2/bin/uwsgi</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">*** WARNING: you are running uWSGI without its master process manager ***</span><br><span class="line">your processes number limit is 31152</span><br><span class="line">your memory page size is 4096 bytes</span><br><span class="line">detected max file descriptor number: 1024</span><br><span class="line">lock engine: pthread robust mutexes</span><br><span class="line">thunder lock: disabled (you can enable it with --thunder-lock)</span><br><span class="line">uWSGI http bound on :8000 fd 4</span><br><span class="line">spawned uWSGI http 1 (pid: 14213)</span><br><span class="line">uwsgi socket 0 bound to TCP address 127.0.0.1:42333 (port auto-assigned) fd 3</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">Python version: 3.6.5 (default, May 11 2018, 13:30:17)  [GCC 7.3.0]</span><br><span class="line">*** Python threads support is disabled. You can enable it with --enable-threads ***</span><br><span class="line">Python main interpreter initialized at 0x5629304088e0</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">your server socket listen backlog is limited to 100 connections</span><br><span class="line">your mercy for graceful operations on workers is 60 seconds</span><br><span class="line">mapped 72920 bytes (71 KB) for 1 cores</span><br><span class="line">*** Operational MODE: single process ***</span><br><span class="line">WSGI app 0 (mountpoint=&#x27;&#x27;) ready in 0 seconds on interpreter 0x5629304088e0 pid: 14212 (default app)</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">*** uWSGI is running in multiple interpreter mode ***</span><br><span class="line">spawned uWSGI worker 1 (and the only) (pid: 14212, cores: 1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h5><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190820091404.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 控制台显示访问信息：</span></span><br><span class="line">[pid: 4864|app: 0|req: 1/1] 10.10.10.238 () &#123;38 vars in 742 bytes&#125; [Tue Aug 20 09:17:23 2019] GET / =&gt; generated 11 bytes in 0 msecs (HTTP/1.1 200</span><br><span class="line">) 1 headers in 44 bytes (1 switches on core 0)</span><br><span class="line">[pid: 4864|app: 0|req: 2/2] 10.10.10.238 () &#123;38 vars in 691 bytes&#125; [Tue Aug 20 09:17:23 2019] GET /favicon.ico =&gt; generated 11 bytes in 0 msecs (H</span><br><span class="line">TTP/1.1 200) 1 headers in 44 bytes (1 switches on core 0)</span><br></pre></td></tr></table></figure>

<h2 id="uwsgi测试django程序"><a href="#uwsgi测试django程序" class="headerlink" title="uwsgi测试django程序"></a><code>uwsgi</code>测试<code>django</code>程序</h2><h5 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h5><h6 id="mysite-urls-py"><a href="#mysite-urls-py" class="headerlink" title="mysite/urls.py"></a><code>mysite/urls.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> views</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;你好,中国&#x27;</span>)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;hello&#x27;</span>, hello),</span><br><span class="line">    path(<span class="string">&#x27;play&#x27;</span>, views.play)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h6 id="blog-views-py"><a href="#blog-views-py" class="headerlink" title="blog/views.py"></a><code>blog/views.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;play.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="templates-play-html"><a href="#templates-play-html" class="headerlink" title="templates/play.html"></a><code>templates/play.html</code></h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>测试网页test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css.css&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>我们是中国chinese<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="static-css-css"><a href="#static-css-css" class="headerlink" title="static/css.css"></a><code>static/css.css</code></h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">color</span>:green&#125;</span><br></pre></td></tr></table></figure>

<h5 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> uwsgi --http :8003 --module mysite.wsgi --py-autoreload=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http :8003: 使用http协议，端口8003</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --module mysite.wsgi: 加载指定的wsgi模块</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --py-autoreload=1： 热加载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时修改django代码，uWSGI会自动加载django程序，页面生效</span></span><br><span class="line"></span><br><span class="line">(django2) root@Tony-PC:/opt/pywww/mysite# uwsgi --http :8003 --module mysite.wsgi --py-autoreload=1</span><br><span class="line"></span><br><span class="line">*** Starting uWSGI 2.0.18 (64bit) on [Tue Aug 20 09:33:03 2019] ***</span><br><span class="line">compiled with version: 7.3.0 on 19 August 2019 06:30:34</span><br><span class="line">os: Linux-4.15.0-29deepin-generic #31 SMP Fri Jul 27 07:12:08 UTC 2018</span><br><span class="line">nodename: Tony-PC</span><br><span class="line">machine: x86_64</span><br><span class="line">clock source: unix</span><br><span class="line">pcre jit disabled</span><br><span class="line">detected number of CPU cores: 8</span><br><span class="line">current working directory: /opt/pywww/mysite</span><br><span class="line">detected binary path: /opt/pyenv/django2/bin/uwsgi</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">your processes number limit is 31152</span><br><span class="line">your memory page size is 4096 bytes</span><br><span class="line">detected max file descriptor number: 1024</span><br><span class="line">lock engine: pthread robust mutexes</span><br><span class="line">thunder lock: disabled (you can enable it with --thunder-lock)</span><br><span class="line">uWSGI http bound on :8003 fd 4</span><br><span class="line">uwsgi socket 0 bound to TCP address 127.0.0.1:35147 (port auto-assigned) fd 3</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">Python version: 3.6.5 (default, May 11 2018, 13:30:17)  [GCC 7.3.0]</span><br><span class="line">Python main interpreter initialized at 0x555e54571920</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">python threads support enabled</span><br><span class="line">your server socket listen backlog is limited to 100 connections</span><br><span class="line">your mercy for graceful operations on workers is 60 seconds</span><br><span class="line">mapped 145840 bytes (142 KB) for 1 cores</span><br><span class="line">*** Operational MODE: single process ***</span><br><span class="line">WSGI app 0 (mountpoint=&#x27;&#x27;) ready in 0 seconds on interpreter 0x555e54571920 pid: 5586 (default app)</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">*** uWSGI is running in multiple interpreter mode ***</span><br><span class="line">spawned uWSGI master process (pid: 5586)</span><br><span class="line">spawned uWSGI worker 1 (pid: 5588, cores: 1)</span><br><span class="line">spawned uWSGI http 1 (pid: 5589)</span><br><span class="line">Python auto-reloader enabled</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="访问程序"><a href="#访问程序" class="headerlink" title="访问程序"></a>访问程序</h5><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190820092727.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 控制台显示访问信息：</span></span><br><span class="line">[pid: 5588|app: 0|req: 1/1] 10.10.10.238 () &#123;38 vars in 752 bytes&#125; [Tue Aug 20 01:40:32 2019] GET /hello =&gt; generated 13 bytes in 4 msecs (HTTP/1.</span><br><span class="line">1 200) 3 headers in 108 bytes (1 switches on core 0)</span><br></pre></td></tr></table></figure>

<h2 id="socket测试django"><a href="#socket测试django" class="headerlink" title="socket测试django"></a><code>socket</code>测试<code>django</code></h2><h5 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置<code>nginx</code></h5><h5 id="etc-nginx-nginx-conf"><a href="#etc-nginx-nginx-conf" class="headerlink" title="etc/nginx/nginx.conf"></a><code>etc/nginx/nginx.conf</code></h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> test.to;</span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># nginx自带ngx_http_uwsgi_module模块，起到nginx和uwsgi交互作用</span></span><br><span class="line">        <span class="comment"># include  就是一个“引入的作用”，就是将外部一个文件的参数，导入到当前的nginx.conf中生效</span></span><br><span class="line">		<span class="attribute">include</span> /etc/nginx/uwsgi_params;</span><br><span class="line">        <span class="comment"># 这里是nginx将请求转发给  uwsgi启动的 8002端口</span></span><br><span class="line">		<span class="attribute">uwsgi_pass</span> <span class="number">0.0.0.0:8002</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="本地windows修改hosts"><a href="#本地windows修改hosts" class="headerlink" title="本地windows修改hosts"></a>本地<code>windows</code>修改<code>hosts</code></h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">10.10.10.125 test.to</span><br></pre></td></tr></table></figure>

<h5 id="运行程序-1"><a href="#运行程序-1" class="headerlink" title="运行程序"></a>运行程序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> uwsgi --socket :8002 --module mysite.wsgi --py-autoreload=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> socket :8002: 使用socket，8002</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --module mysite.wsgi: 加载指定的wsgi模块</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --py-autoreload=1： 热加载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时修改django代码，uWSGI会自动加载django程序，页面生效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> socket指的是，uwsgi启动一个socket连接，当你使用nginx+uwsgi的时候，使用socket参数</span></span><br><span class="line"></span><br><span class="line">(django2) root@Tony-PC:/opt/pywww/mysite# uwsgi --socket :8002 --module mysite.wsgi --py-autoreload=1</span><br><span class="line"></span><br><span class="line">*** Starting uWSGI 2.0.18 (64bit) on [Tue Aug 20 09:53:32 2019] ***</span><br><span class="line">compiled with version: 7.3.0 on 19 August 2019 06:30:34</span><br><span class="line">os: Linux-4.15.0-29deepin-generic #31 SMP Fri Jul 27 07:12:08 UTC 2018</span><br><span class="line">nodename: Tony-PC</span><br><span class="line">machine: x86_64</span><br><span class="line">clock source: unix</span><br><span class="line">pcre jit disabled</span><br><span class="line">detected number of CPU cores: 8</span><br><span class="line">current working directory: /opt/pywww/mysite</span><br><span class="line">detected binary path: /opt/pyenv/django2/bin/uwsgi</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">your processes number limit is 31152</span><br><span class="line">your memory page size is 4096 bytes</span><br><span class="line">detected max file descriptor number: 1024</span><br><span class="line">lock engine: pthread robust mutexes</span><br><span class="line">thunder lock: disabled (you can enable it with --thunder-lock)</span><br><span class="line">uwsgi socket 0 bound to TCP address :8002 fd 3</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">Python version: 3.6.5 (default, May 11 2018, 13:30:17)  [GCC 7.3.0]</span><br><span class="line">Python main interpreter initialized at 0x55fd342b62f0</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">python threads support enabled</span><br><span class="line">your server socket listen backlog is limited to 100 connections</span><br><span class="line">your mercy for graceful operations on workers is 60 seconds</span><br><span class="line">mapped 145840 bytes (142 KB) for 1 cores</span><br><span class="line">*** Operational MODE: single process ***</span><br><span class="line">WSGI app 0 (mountpoint=&#x27;&#x27;) ready in 0 seconds on interpreter 0x55fd342b62f0 pid: 6695 (default app)</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">*** uWSGI is running in multiple interpreter mode ***</span><br><span class="line">spawned uWSGI master process (pid: 6695)</span><br><span class="line">spawned uWSGI worker 1 (pid: 6697, cores: 1)</span><br><span class="line">Python auto-reloader enabled</span><br></pre></td></tr></table></figure>

<h5 id="访问程序-1"><a href="#访问程序-1" class="headerlink" title="访问程序"></a>访问程序</h5><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190820095538.png"></p>
<p>可能此时你还没意识到有什么问题，此时我们访问<code>admin</code>试一下</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190820095716.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 控制台用户访问信息</span></span><br><span class="line">[pid: 6697|app: 0|req: 1/1] 10.10.10.238 () &#123;42 vars in 739 bytes&#125; [Tue Aug 20 01:59:59 2019] GET /play =&gt; generated 202 bytes in 9 msecs (HTTP/1.</span><br><span class="line">1 200) 3 headers in 109 bytes (1 switches on core 0)Not Found: /static/css.css</span><br><span class="line">[pid: 6697|app: 0|req: 2/2] 10.10.10.238 () &#123;40 vars in 628 bytes&#125; [Tue Aug 20 01:59:59 2019] GET /static/css.css =&gt; generated 2183 bytes in 2 mse</span><br><span class="line">cs (HTTP/1.1 404) 3 headers in 102 bytes (1 switches on core 0)</span><br><span class="line">[pid: 6697|app: 0|req: 3/3] 10.10.10.238 () &#123;40 vars in 710 bytes&#125; [Tue Aug 20 02:00:43 2019] GET /admin =&gt; generated 0 bytes in 0 msecs (HTTP/1.1</span><br><span class="line"> 301) 3 headers in 112 bytes (1 switches on core 0)</span><br><span class="line"> [pid: 6697|app: 0|req: 4/4] 10.10.10.238 () &#123;40 vars in 712 bytes&#125; [Tue Aug 20 02:00:43 2019] GET /admin/ =&gt; generated 0 bytes in 6 msecs (HTTP/1.</span><br><span class="line">1 302) 7 headers in 265 bytes (1 switches on core 0)</span><br><span class="line">[pid: 6697|app: 0|req: 5/5] 10.10.10.238 () &#123;40 vars in 749 bytes&#125; [Tue Aug 20 02:00:43 2019] GET /admin/login/?next=/admin/ =&gt; generated 1819 byt</span><br><span class="line">es in 21 msecs (HTTP/1.1 200) 7 headers in 395 bytes (1 switches on core 0)Not Found: /static/admin/css/base.css</span><br><span class="line">[pid: 6697|app: 0|req: 6/6] 10.10.10.238 () &#123;42 vars in 760 bytes&#125; [Tue Aug 20 02:00:43 2019] GET /static/admin/css/base.css =&gt; generated 2216 byt</span><br><span class="line">es in 2 msecs (HTTP/1.1 404) 3 headers in 102 bytes (1 switches on core 0)Not Found: /static/admin/css/login.css</span><br><span class="line">[pid: 6697|app: 0|req: 7/7] 10.10.10.238 () &#123;42 vars in 762 bytes&#125; [Tue Aug 20 02:00:43 2019] GET /static/admin/css/login.css =&gt; generated 2219 by</span><br><span class="line">tes in 1 msecs (HTTP/1.1 404) 3 headers in 102 bytes (1 switches on core 0)Not Found: /static/admin/css/responsive.css</span><br><span class="line">[pid: 6697|app: 0|req: 8/8] 10.10.10.238 () &#123;42 vars in 772 bytes&#125; [Tue Aug 20 02:00:43 2019] GET /static/admin/css/responsive.css =&gt; generated 22</span><br><span class="line">34 bytes in 1 msecs (HTTP/1.1 404) 3 headers in 102 bytes (1 switches on core 0)</span><br></pre></td></tr></table></figure>

<p>可以看到我们加载的静态资源<code>css</code>等都没有正常显示出来，控制台也都显示静态资源404，后面我们来解决这个问题</p>
<h2 id="uwsgi使用配置文件测试django程序"><a href="#uwsgi使用配置文件测试django程序" class="headerlink" title="uwsgi使用配置文件测试django程序"></a><code>uwsgi</code>使用配置文件测试<code>django</code>程序</h2><p>上面程序运行时每次都要用长命令，这里我们尝试使用配置文件来运行<code>django</code>程序，并解决上面静态资源<code>404</code>的问题。</p>
<h5 id="uwsgi配置文件"><a href="#uwsgi配置文件" class="headerlink" title="uwsgi配置文件"></a><code>uwsgi</code>配置文件</h5><p><code>uwsgi</code>支持<code>ini</code>、<code>xml</code>等多种配置方式，本文以 <code>ini</code> 为例， 在<code>/opt/pyuwsgi/</code>目录下新建<code>mysite_uwsgi.ini</code>，添加如下配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite_uwsgi.ini file</span></span><br><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定项目的绝对路径的第一层路径</span></span><br><span class="line"><span class="attr">chdir</span>           = /opt/pywww/mysite</span><br><span class="line"><span class="comment">#  指定项目的 wsgi.py文件！！！！！！！！！！！！</span></span><br><span class="line"><span class="comment">#  写入相对路径即可，这个参数是以  chdir参数为相对路径</span></span><br><span class="line"><span class="comment"># module与wsgi-file填写一个即可，都代表找到wsgi文件，写法不同</span></span><br><span class="line"><span class="attr">module</span>          = mysite.wsgi</span><br><span class="line"><span class="comment">#wsgi文件路径，在项目底下</span></span><br><span class="line"><span class="comment">#wsgi-file		= mysite/wsgi.py</span></span><br><span class="line"><span class="comment"># 写入虚拟环境解释器的 绝对路径！！！！！！</span></span><br><span class="line"><span class="comment"># 可使用cdvirtualenv进入虚拟环境目录，然后使用pwd查看当前目录</span></span><br><span class="line"><span class="attr">home</span>            = /opt/pyenv/django2</span><br><span class="line"><span class="comment"># 允许主线程存在（true）</span></span><br><span class="line"><span class="attr">master</span>          = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 指定uwsgi启动的进程个数(可根据电脑核心数调整)</span></span><br><span class="line"><span class="attr">processes</span>       = <span class="number">4</span></span><br><span class="line"><span class="comment"># 指定uwsgi启动的线程个数</span></span><br><span class="line"><span class="attr">threads</span> 		= <span class="number">2</span></span><br><span class="line"><span class="comment">#socket指的是，uwsgi启动一个socket连接，当你使用nginx+uwsgi的时候，使用socket参数</span></span><br><span class="line"><span class="attr">socket</span>          = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8002</span></span><br><span class="line"><span class="comment">#不用nginx直接当做web服务器使用</span></span><br><span class="line"><span class="comment">#http=0.0.0.0:9000</span></span><br><span class="line"><span class="comment">#socket权限设置</span></span><br><span class="line"><span class="comment"># chmod-socket    = 664</span></span><br><span class="line"><span class="comment"># 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件</span></span><br><span class="line"><span class="comment"># vacuum          = true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="配置nginx-1"><a href="#配置nginx-1" class="headerlink" title="配置nginx"></a>配置<code>nginx</code></h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义名为uwsgipool的负载均衡池，池中写入uwsgi发布django的socket地址</span></span><br><span class="line"><span class="attribute">upstream</span> uwsgipool &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">0.0.0.0:8005</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> test.to;</span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># nginx自带ngx_http_uwsgi_module模块，起到nginx和uwsgi交互作用</span></span><br><span class="line">        <span class="comment"># include  就是一个“引入的作用”，就是将外部一个文件的参数，导入到当前的nginx.conf中生效</span></span><br><span class="line">		<span class="attribute">include</span> /etc/nginx/uwsgi_params;</span><br><span class="line">        <span class="comment"># 这里是nginx将请求转发给  uwsgi启动的 8002端口</span></span><br><span class="line">		<span class="comment"># uwsgi_pass 0.0.0.0:8005;</span></span><br><span class="line">        <span class="comment"># 转发至名为uwsgipool的负载均衡池</span></span><br><span class="line">        <span class="attribute">uwsgi_pass</span> uwsgipool;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="运行程序-2"><a href="#运行程序-2" class="headerlink" title="运行程序"></a>运行程序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用mysite_uwsgi.ini的ini配置文件来启动uwsgi</span></span><br><span class="line">(django2) root@Tony-PC:/opt/pyuwsgi# uwsgi --ini mysite_uwsgi.ini </span><br><span class="line"></span><br><span class="line">[uWSGI] getting INI configuration from mysite_uwsgi.ini</span><br><span class="line">*** Starting uWSGI 2.0.18 (64bit) on [Tue Aug 20 11:22:59 2019] ***</span><br><span class="line">compiled with version: 7.3.0 on 19 August 2019 06:30:34</span><br><span class="line">os: Linux-4.15.0-29deepin-generic #31 SMP Fri Jul 27 07:12:08 UTC 2018</span><br><span class="line">nodename: Tony-PC</span><br><span class="line">machine: x86_64</span><br><span class="line">clock source: unix</span><br><span class="line">pcre jit disabled</span><br><span class="line">detected number of CPU cores: 8</span><br><span class="line">current working directory: /opt/pyuwsgi</span><br><span class="line">detected binary path: /opt/pyenv/django2/bin/uwsgi</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">chdir() to /opt/pywww/mysite</span><br><span class="line">your processes number limit is 31152</span><br><span class="line">your memory page size is 4096 bytes</span><br><span class="line">detected max file descriptor number: 1024</span><br><span class="line">lock engine: pthread robust mutexes</span><br><span class="line">thunder lock: disabled (you can enable it with --thunder-lock)</span><br><span class="line">uwsgi socket 0 bound to TCP address 0.0.0.0:8005 fd 3</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">Python version: 3.6.5 (default, May 11 2018, 13:30:17)  [GCC 7.3.0]</span><br><span class="line">Set PythonHome to /opt/pyenv/django2</span><br><span class="line">*** Python threads support is disabled. You can enable it with --enable-threads ***</span><br><span class="line">Python main interpreter initialized at 0x5601391f2b50</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">your server socket listen backlog is limited to 100 connections</span><br><span class="line">your mercy for graceful operations on workers is 60 seconds</span><br><span class="line">mapped 364600 bytes (356 KB) for 4 cores</span><br><span class="line">*** Operational MODE: preforking ***</span><br><span class="line">WSGI app 0 (mountpoint=&#x27;&#x27;) ready in 0 seconds on interpreter 0x5601391f2b50 pid: 9744 (default app)</span><br><span class="line">uWSGI running as root, you can use --uid/--gid/--chroot options</span><br><span class="line">*** WARNING: you are running uWSGI as root !!! (use the --uid flag) *** </span><br><span class="line">*** uWSGI is running in multiple interpreter mode ***</span><br><span class="line">spawned uWSGI master process (pid: 9744)</span><br><span class="line">spawned uWSGI worker 1 (pid: 9746, cores: 1)</span><br><span class="line">spawned uWSGI worker 2 (pid: 9747, cores: 1)</span><br><span class="line">spawned uWSGI worker 3 (pid: 9748, cores: 1)</span><br><span class="line">spawned uWSGI worker 4 (pid: 9749, cores: 1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看进程，开启的四个进程正常运行，另外有一个主进程，共5个</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:/opt# ps -ef | grep uwsgi</span><br><span class="line">root      9744  4738  3 11:22 pts/1    00:00:00 uwsgi --ini mysite_uwsgi.ini</span><br><span class="line">root      9746  9744  0 11:22 pts/1    00:00:00 uwsgi --ini mysite_uwsgi.ini</span><br><span class="line">root      9747  9744  0 11:22 pts/1    00:00:00 uwsgi --ini mysite_uwsgi.ini</span><br><span class="line">root      9748  9744  0 11:22 pts/1    00:00:00 uwsgi --ini mysite_uwsgi.ini</span><br><span class="line">root      9749  9744  0 11:22 pts/1    00:00:00 uwsgi --ini mysite_uwsgi.ini</span><br><span class="line">root      9751  4563  0 11:23 pts/0    00:00:00 grep uwsgi</span><br><span class="line">root@Tony-PC:/opt# netstat -tunlp | grep uwsgi</span><br><span class="line">tcp        0      0 0.0.0.0:8005            0.0.0.0:*               LISTEN      9744/uwsgi  </span><br></pre></td></tr></table></figure>

<h5 id="访问程序-2"><a href="#访问程序-2" class="headerlink" title="访问程序"></a>访问程序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[pid: 9748|app: 0|req: 1/1] 10.10.10.238 () &#123;44 vars in 869 bytes&#125; [Tue Aug 20 03:23:27 2019] GET /admin/login/?next=/admin/ =&gt; generated 1819 bytes in 36 msecs (HTTP/1.1 200) 7 headers in 395 bytes (1 switches on core 0)</span><br><span class="line">Not Found: /static/admin/css/base.css</span><br><span class="line">[pid: 9748|app: 0|req: 2/2] 10.10.10.238 () &#123;42 vars in 760 bytes&#125; [Tue Aug 20 03:23:27 2019] GET /static/admin/css/base.css =&gt; generated 2216 bytes in 2 msecs (HTTP/1.1 404) 3 headers in 102 bytes (1 switches on core 0)</span><br><span class="line">Not Found: /static/admin/css/login.css</span><br><span class="line">[pid: 9749|app: 0|req: 1/3] 10.10.10.238 () &#123;42 vars in 762 bytes&#125; [Tue Aug 20 03:23:27 2019] GET /static/admin/css/login.css =&gt; generated 2219 bytes in 7 msecs (HTTP/1.1 404) 3 headers in 102 bytes (1 switches on core 0)</span><br><span class="line">Not Found: /static/admin/css/responsive.css</span><br><span class="line">[pid: 9747|app: 0|req: 1/4] 10.10.10.238 () &#123;42 vars in 772 bytes&#125; [Tue Aug 20 03:23:27 2019] GET /static/admin/css/responsive.css =&gt; generated 2234 bytes in 7 msecs (HTTP/1.1 404) 3 headers in 102 bytes (1 switches on core 0)</span><br><span class="line">[pid: 9748|app: 0|req: 3/5] 10.10.10.238 () &#123;44 vars in 821 bytes&#125; [Tue Aug 20 03:23:46 2019] GET /play =&gt; generated 202 bytes in 0 msecs (HTTP/1.1 200) 3 headers in 109 bytes (1 switches on core 0)</span><br><span class="line">Not Found: /static/css.css</span><br><span class="line">[pid: 9748|app: 0|req: 4/6] 10.10.10.238 () &#123;44 vars in 741 bytes&#125; [Tue Aug 20 03:23:46 2019] GET /static/css.css =&gt; generated 2183 bytes in 1 msecs (HTTP/1.1 404) 3 headers in 102 bytes (1 switches on core 0)</span><br></pre></td></tr></table></figure>

<p>发现静态资源依然是404</p>
<h5 id="解决静态文件404"><a href="#解决静态文件404" class="headerlink" title="解决静态文件404"></a>解决静态文件404</h5><h6 id="mysite-settings-py"><a href="#mysite-settings-py" class="headerlink" title="mysite/settings.py"></a><code>mysite/settings.py</code></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态文件目录的绝对地址</span></span><br><span class="line">STATIC_ROOT = <span class="string">&#x27;/opt/pywww/mysite/static&#x27;</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS=[</span><br><span class="line">        os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h6 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a><code>nginx.conf</code></h6><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义名为uwsgipool的负载均衡池，池中写入uwsgi发布django的socket地址</span></span><br><span class="line"><span class="attribute">upstream</span> uwsgipool &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">0.0.0.0:8005</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> test.to;</span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">		 <span class="comment"># nginx自带ngx_http_uwsgi_module模块，起到nginx和uwsgi交互作用</span></span><br><span class="line">        <span class="comment"># include  就是一个“引入的作用”，就是将外部一个文件的参数，导入到当前的nginx.conf中生效</span></span><br><span class="line">		<span class="attribute">include</span> /etc/nginx/uwsgi_params;</span><br><span class="line">        <span class="comment"># 这里是nginx将请求转发给  uwsgi启动的 8002端口</span></span><br><span class="line">		<span class="comment"># uwsgi_pass 0.0.0.0:8005;</span></span><br><span class="line">        <span class="comment"># 转发至名为uwsgipool的负载均衡池</span></span><br><span class="line">        <span class="attribute">uwsgi_pass</span> uwsgipool;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment"># 配置静态资源目录，与settings.py路径一致</span></span><br><span class="line">	<span class="attribute">location</span> /static &#123;</span><br><span class="line">		<span class="attribute">alias</span> /opt/pywww/mysite/static;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="收集django静态资源"><a href="#收集django静态资源" class="headerlink" title="收集django静态资源"></a>收集<code>django</code>静态资源</h6><p>重启<code>nginx</code>，使用<code>python3 manage.py collectstatic</code>收集静态资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(django2) root@Tony-PC:/opt/pywww/mysite# python manage.py collectstatic</span><br><span class="line"></span><br><span class="line">You have requested to collect static files at the destination</span><br><span class="line">location as specified in your settings:</span><br><span class="line"></span><br><span class="line">    /opt/pywww/mysite/static</span><br><span class="line"></span><br><span class="line">This will overwrite existing files!</span><br><span class="line">Are you sure you want to do this?</span><br><span class="line"></span><br><span class="line">Type &#x27;yes&#x27; to continue, or &#x27;no&#x27; to cancel: yes</span><br><span class="line"></span><br><span class="line">119 static files copied to &#x27;/opt/pywww/mysite/static&#x27;, 1 unmodified.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>119个文件已拷贝至目标目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(django2) root@Tony-PC:/opt/pywww/mysite# tree static</span><br><span class="line">static</span><br><span class="line">├── admin</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   ├── autocomplete.css</span><br><span class="line">│   │   ├── base.css</span><br><span class="line">│   │   ├── changelists.css</span><br><span class="line">│   │   ├── dashboard.css</span><br><span class="line">│   │   ├── fonts.css</span><br><span class="line">│   │   ├── forms.css</span><br><span class="line">│   │   ├── login.css</span><br><span class="line">│   │   ├── responsive.css</span><br><span class="line">│   │   ├── responsive_rtl.css</span><br><span class="line">│   │   ├── rtl.css</span><br><span class="line">│   │   ├── vendor</span><br><span class="line">│   │   │   └── select2</span><br><span class="line">│   │   │       ├── LICENSE-SELECT2.md</span><br><span class="line">│   │   │       ├── select2.css</span><br><span class="line">│   │   │       └── select2.min.css</span><br><span class="line">│   │   └── widgets.css</span><br><span class="line">│   ├── fonts</span><br><span class="line">│   │   ├── LICENSE.txt</span><br><span class="line">│   │   ├── README.txt</span><br><span class="line">│   │   ├── Roboto-Bold-webfont.woff</span><br><span class="line">│   │   ├── Roboto-Light-webfont.woff</span><br><span class="line">│   │   └── Roboto-Regular-webfont.woff</span><br><span class="line">│   ├── img</span><br><span class="line">│   │   ├── calendar-icons.svg</span><br><span class="line">│   │   ├── gis</span><br><span class="line">│   │   │   ├── move_vertex_off.svg</span><br><span class="line">│   │   │   └── move_vertex_on.svg</span><br><span class="line">│   │   ├── icon-addlink.svg</span><br><span class="line">│   │   ├── icon-alert.svg</span><br><span class="line">│   │   ├── icon-calendar.svg</span><br><span class="line">│   │   ├── icon-changelink.svg</span><br><span class="line">│   │   ├── icon-clock.svg</span><br><span class="line">│   │   ├── icon-deletelink.svg</span><br><span class="line">│   │   ├── icon-no.svg</span><br><span class="line">│   │   ├── icon-unknown-alt.svg</span><br><span class="line">│   │   ├── icon-unknown.svg</span><br><span class="line">│   │   ├── icon-viewlink.svg</span><br><span class="line">│   │   ├── icon-yes.svg</span><br><span class="line">│   │   ├── inline-delete.svg</span><br><span class="line">│   │   ├── LICENSE</span><br><span class="line">│   │   ├── README.txt</span><br><span class="line">│   │   ├── search.svg</span><br><span class="line">│   │   ├── selector-icons.svg</span><br><span class="line">│   │   ├── sorting-icons.svg</span><br><span class="line">│   │   ├── tooltag-add.svg</span><br><span class="line">│   │   └── tooltag-arrowright.svg</span><br><span class="line">│   └── js</span><br><span class="line">│       ├── actions.js</span><br><span class="line">│       ├── actions.min.js</span><br><span class="line">│       ├── admin</span><br><span class="line">│       │   ├── DateTimeShortcuts.js</span><br><span class="line">│       │   └── RelatedObjectLookups.js</span><br><span class="line">│       ├── autocomplete.js</span><br><span class="line">│       ├── calendar.js</span><br><span class="line">│       ├── cancel.js</span><br><span class="line">│       ├── change_form.js</span><br><span class="line">│       ├── collapse.js</span><br><span class="line">│       ├── collapse.min.js</span><br><span class="line">│       ├── core.js</span><br><span class="line">│       ├── inlines.js</span><br><span class="line">│       ├── inlines.min.js</span><br><span class="line">│       ├── jquery.init.js</span><br><span class="line">│       ├── popup_response.js</span><br><span class="line">│       ├── prepopulate_init.js</span><br><span class="line">│       ├── prepopulate.js</span><br><span class="line">│       ├── prepopulate.min.js</span><br><span class="line">│       ├── SelectBox.js</span><br><span class="line">│       ├── SelectFilter2.js</span><br><span class="line">│       ├── timeparse.js</span><br><span class="line">│       ├── urlify.js</span><br><span class="line">│       └── vendor</span><br><span class="line">│           ├── jquery</span><br><span class="line">│           │   ├── jquery.js</span><br><span class="line">│           │   ├── jquery.min.js</span><br><span class="line">│           │   └── LICENSE.txt</span><br><span class="line">│           ├── select2</span><br><span class="line">│           │   ├── i18n</span><br><span class="line">│           │   │   ├── ar.js</span><br><span class="line">│           │   │   ├── az.js</span><br><span class="line">│           │   │   ├── bg.js</span><br><span class="line">│           │   │   ├── ca.js</span><br><span class="line">│           │   │   ├── cs.js</span><br><span class="line">│           │   │   ├── da.js</span><br><span class="line">│           │   │   ├── de.js</span><br><span class="line">│           │   │   ├── el.js</span><br><span class="line">│           │   │   ├── en.js</span><br><span class="line">│           │   │   ├── es.js</span><br><span class="line">│           │   │   ├── et.js</span><br><span class="line">│           │   │   ├── eu.js</span><br><span class="line">│           │   │   ├── fa.js</span><br><span class="line">│           │   │   ├── fi.js</span><br><span class="line">│           │   │   ├── fr.js</span><br><span class="line">│           │   │   ├── gl.js</span><br><span class="line">│           │   │   ├── he.js</span><br><span class="line">│           │   │   ├── hi.js</span><br><span class="line">│           │   │   ├── hr.js</span><br><span class="line">│           │   │   ├── hu.js</span><br><span class="line">│           │   │   ├── id.js</span><br><span class="line">│           │   │   ├── is.js</span><br><span class="line">│           │   │   ├── it.js</span><br><span class="line">│           │   │   ├── ja.js</span><br><span class="line">│           │   │   ├── km.js</span><br><span class="line">│           │   │   ├── ko.js</span><br><span class="line">│           │   │   ├── lt.js</span><br><span class="line">│           │   │   ├── lv.js</span><br><span class="line">│           │   │   ├── mk.js</span><br><span class="line">│           │   │   ├── ms.js</span><br><span class="line">│           │   │   ├── nb.js</span><br><span class="line">│           │   │   ├── nl.js</span><br><span class="line">│           │   │   ├── pl.js</span><br><span class="line">│           │   │   ├── pt-BR.js</span><br><span class="line">│           │   │   ├── pt.js</span><br><span class="line">│           │   │   ├── ro.js</span><br><span class="line">│           │   │   ├── ru.js</span><br><span class="line">│           │   │   ├── sk.js</span><br><span class="line">│           │   │   ├── sr-Cyrl.js</span><br><span class="line">│           │   │   ├── sr.js</span><br><span class="line">│           │   │   ├── sv.js</span><br><span class="line">│           │   │   ├── th.js</span><br><span class="line">│           │   │   ├── tr.js</span><br><span class="line">│           │   │   ├── uk.js</span><br><span class="line">│           │   │   ├── vi.js</span><br><span class="line">│           │   │   ├── zh-CN.js</span><br><span class="line">│           │   │   └── zh-TW.js</span><br><span class="line">│           │   ├── LICENSE.md</span><br><span class="line">│           │   ├── select2.full.js</span><br><span class="line">│           │   └── select2.full.min.js</span><br><span class="line">│           └── xregexp</span><br><span class="line">│               ├── LICENSE.txt</span><br><span class="line">│               ├── xregexp.js</span><br><span class="line">│               └── xregexp.min.js</span><br><span class="line">└── css.css</span><br><span class="line"></span><br><span class="line">14 directories, 120 files</span><br></pre></td></tr></table></figure>

<h5 id="再次访问程序"><a href="#再次访问程序" class="headerlink" title="再次访问程序"></a>再次访问程序</h5><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190820120720.png"></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190820120838.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 资源正常加载</span></span><br><span class="line">[pid: 9747|app: 0|req: 2/8] 10.10.10.238 () &#123;44 vars in 828 bytes&#125; [Tue Aug 20 04:13:08 2019] GET /play =&gt; generated 202 bytes in 5 msecs (HTTP/1.1 200) 3 headers in 109 bytes (1 switches on core 0)</span><br><span class="line">[pid: 9748|app: 0|req: 5/9] 10.10.10.238 () &#123;42 vars in 801 bytes&#125; [Tue Aug 20 04:13:12 2019] GET /admin/ =&gt; generated 0 bytes in 0 msecs (HTTP/1.1 302) 7 headers in 265 bytes (1 switches on core 0)</span><br><span class="line">[pid: 9748|app: 0|req: 6/10] 10.10.10.238 () &#123;42 vars in 838 bytes&#125; [Tue Aug 20 04:13:12 2019] GET /admin/login/?next=/admin/ =&gt; generated 1819 bytes in 7 msecs (HTTP/1.1 200) 7 headers in 395 bytes (1 switches on core 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="uwsgi常用命令"><a href="#uwsgi常用命令" class="headerlink" title="uwsgi常用命令"></a><code>uwsgi</code>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">uwsgi --ini uwsgi.ini             <span class="comment"># 启动</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">uwsgi --reload uwsgi.pid          <span class="comment"># 重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">uwsgi --stop uwsgi.pid            <span class="comment"># 关闭</span></span></span><br></pre></td></tr></table></figure>

<p>更多<code>uwsgi</code>配置参考手册<span class="exturl" data-url="aHR0cHM6Ly91d3NnaS1kb2NzLWNuLnJlYWR0aGVkb2NzLmlvL3poX0NOL2xhdGVzdC9XU0dJcXVpY2tzdGFydC5odG1s">https://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a><code>supervisor</code></h2><p><code>supervisor</code> 是基于 <code>python</code> 的任务管理工具，用来自动运行各种后台任务，当然你也能直接利用 <code>nohup</code> 命令使任务自动后台运行，但如果要重启任务，每次都自己手动 <code>kill</code> 掉任务进程，这样很繁琐，而且一旦程序错误导致进程退出的话，系统也无法自动重载任务。</p>
<h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装<code>supervisor</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:/opt/pywww/mysite# pip3 install supervisor</span><br></pre></td></tr></table></figure>

<h3 id="生成supervisor配置文件"><a href="#生成supervisor配置文件" class="headerlink" title="生成supervisor配置文件"></a>生成<code>supervisor</code>配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Tony-PC:/opt/pysupervisor# echo_supervisord_conf &gt; /opt/pysupervisor/supervisord.conf</span><br></pre></td></tr></table></figure>
<p><code>/opt/pysupervisor/supervisord.conf</code>参数说明</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">supervisord.conf配置文件参数解释</span><br><span class="line">[program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class="line"><span class="section">[program:xx]</span></span><br><span class="line"><span class="attr">command</span>=/opt/apache-tomcat-<span class="number">8.0</span>.<span class="number">35</span>/bin/catalina.sh run  <span class="comment">; 程序启动命令</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span>       <span class="comment">; 在supervisord启动的时候也自动启动</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">10</span>         <span class="comment">; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span>     <span class="comment">; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span></span><br><span class="line"><span class="attr">startretries</span>=<span class="number">3</span>       <span class="comment">; 启动失败自动重试次数，默认是3</span></span><br><span class="line"><span class="attr">user</span>=tomcat          <span class="comment">; 用哪个用户启动进程，默认是root</span></span><br><span class="line"><span class="attr">priority</span>=<span class="number">999</span>         <span class="comment">; 进程启动优先级，默认999，值小的优先启动</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span> <span class="comment">; 把stderr重定向到stdout，默认false</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">20</span>MB  <span class="comment">; stdout 日志文件大小，默认50MB</span></span><br><span class="line"><span class="attr">stdout_logfile_backups</span> = <span class="number">20</span>   <span class="comment">; stdout 日志文件备份数，默认是10</span></span><br><span class="line"><span class="comment">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/opt/apache-tomcat-<span class="number">8.0</span>.<span class="number">35</span>/logs/catalina.out</span><br><span class="line"><span class="attr">stopasgroup</span>=<span class="literal">false</span>     <span class="comment">;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span></span><br><span class="line"><span class="attr">killasgroup</span>=<span class="literal">false</span>     <span class="comment">;默认为false，向进程组发送kill信号，包括子进程</span></span><br></pre></td></tr></table></figure>

<h3 id="写入配置"><a href="#写入配置" class="headerlink" title="写入配置"></a>写入配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:mysupervisord]</span></span><br><span class="line"><span class="attr">command</span> = /opt/pyenv/django2/bin/uwsgi --ini /opt/pyuwsgi/mysite_uwsgi.ini</span><br></pre></td></tr></table></figure>

<h3 id="启动supervisor"><a href="#启动supervisor" class="headerlink" title="启动supervisor"></a>启动<code>supervisor</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf #启动supervisor</span><br><span class="line"></span><br><span class="line">supervisorctl -c /etxc/supervisord.conf restart my  #重启my项目</span><br><span class="line">supervisorctl -c /etc/supervisord.conf [start|stop|restart] [program-name|all]</span><br></pre></td></tr></table></figure>

<h4 id="supervisor其他命令"><a href="#supervisor其他命令" class="headerlink" title="supervisor其他命令"></a><code>supervisor</code>其他命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisorctl</span><br><span class="line">进入更新新的配置到supervisord交互命令行</span><br><span class="line"></span><br><span class="line">二、更新新的配置到supervisord    </span><br><span class="line"></span><br><span class="line">supervisorctl update</span><br><span class="line">三、重新启动配置中的所有程序</span><br><span class="line"></span><br><span class="line">supervisorctl reload</span><br><span class="line">四、启动某个进程(program_name=你配置中写的程序名称)</span><br><span class="line"></span><br><span class="line">supervisorctl start program_name</span><br><span class="line">五、查看正在守候的进程</span><br><span class="line"></span><br><span class="line">supervisorctl</span><br><span class="line">六、停止某一进程 (program_name=你配置中写的程序名称)</span><br><span class="line"></span><br><span class="line">pervisorctl stop program_name</span><br><span class="line">七、重启某一进程 (program_name=你配置中写的程序名称)</span><br><span class="line"></span><br><span class="line">supervisorctl restart program_name</span><br><span class="line">八、停止全部进程</span><br><span class="line"></span><br><span class="line">supervisorctl stop all</span><br><span class="line">注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。</span><br></pre></td></tr></table></figure>



<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190820120720.png"></p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190820120838.png"></p>
<p>正常</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>uwsgi配置</tag>
        <tag>uwsgi</tag>
        <tag>django上线</tag>
        <tag>virtualenvwrapper</tag>
        <tag>virtualenv</tag>
        <tag>supervisor</tag>
        <tag>服务器配置</tag>
        <tag>web服务器</tag>
        <tag>python服务器</tag>
        <tag>python上线</tag>
        <tag>收集静态文件</tag>
        <tag>uwsgi负载均衡池</tag>
        <tag>supervisord</tag>
        <tag>supervisorctl</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux shell 基本命令</title>
    <url>/92eead7e.html</url>
    <content><![CDATA[<p><code>shell</code>是操作系统中的一个软件，它包在 <code>linux</code> 内核的外面，为用户和内核之间的交互提供了一个接口，系统中的命令用 <code>shell</code> 去解释 <code>shell</code> 接收系统回应的输出并显示其到屏幕上；<br>可以将 <code>Shell</code> 终端解释器当作人与计算机硬件之间的“翻译官”它作为用户与 <code>Linux</code> 系统内部的通信媒介，除了能够支持各种变量与参数外，还提供了诸如循环、分支等高级编程语言才有的控制结构特性。</p>
<a id="more"></a>

<h2 id="Linux命令行的组成结构"><a href="#Linux命令行的组成结构" class="headerlink" title="Linux命令行的组成结构"></a>Linux命令行的组成结构</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">tony</span>-<span class="type">PC</span>:<span class="type">home</span>/<span class="type">tony</span>]<span class="comment">#</span></span><br><span class="line">root：用户名(我是谁)</span><br><span class="line"><span class="selector-tag">@</span>：分割线/符</span><br><span class="line">tony<span class="literal">-PC</span>：主机名</span><br><span class="line">home/tony：当前路径(你当前在哪儿)</span><br><span class="line"><span class="comment">#：提示符</span></span><br></pre></td></tr></table></figure>

<h2 id="linux命令行操作语法格式"><a href="#linux命令行操作语法格式" class="headerlink" title="linux命令行操作语法格式"></a><code>linux</code>命令行操作语法格式</h2><table>
<thead>
<tr>
<th>命令</th>
<th>空格</th>
<th>参数</th>
<th>空格</th>
<th>【文件或路径】需要处理的内容</th>
</tr>
</thead>
<tbody><tr>
<td><code>rm</code></td>
<td></td>
<td><code>-rf</code></td>
<td></td>
<td><code>/tmp/*</code></td>
</tr>
<tr>
<td><code>ls</code></td>
<td></td>
<td><code>-la</code></td>
<td></td>
<td>/home</td>
</tr>
<tr>
<td>结婚</td>
<td></td>
<td>-没车没房</td>
<td></td>
<td>女的就行</td>
</tr>
<tr>
<td>结婚</td>
<td></td>
<td>-有车有房</td>
<td></td>
<td>白富美</td>
</tr>
</tbody></table>
<p>1.一般情况下，【参数】是可选的，一些情况下【文件或路径】也是可选的</p>
<p>2.参数 &gt; 同一个命令，跟上不同的参数执行不同的功能</p>
<p>执行<code>linux</code>命令，添加参数的目的是让命令更加贴切实际工作的需要！</p>
<p><code>linux</code>命令，参数之间，普遍应该用一个或多个空格分割！</p>
<p><strong>记录一组常用命令行：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询redis运行端口</span><br><span class="line">netstat -tunlp | grep redis</span><br><span class="line"># 查询redis所有进程</span><br><span class="line">ps -ef | grep redis</span><br><span class="line"># 查询111.txt文件内容，将其内容中包含的aaa字符串替换为bbb之后的内容结果写入到222.txt文件中</span><br><span class="line">sed &#39;s&#x2F;aaa&#x2F;bbb&#x2F;g&#39; 111.txt &gt; 222.txt</span><br><span class="line"># 将aaa字符串追加到111.txt文件末尾</span><br><span class="line">echo ‘aaaa’ &gt; 111.txt</span><br><span class="line"># 监测文件实时变化</span><br><span class="line">tail -f &#x2F;etc&#x2F;access.log</span><br></pre></td></tr></table></figure>

<h2 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a><a href="https://www.diandian100.cn/b298fb75.html#mkdir">创建目录</a></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">make directory &gt; mk <span class="built_in">dir</span> &gt; mkdir</span><br><span class="line">-------------------------------</span><br><span class="line">mkdir /media</span><br><span class="line">-------------------------------</span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">mkdir media</span><br><span class="line"></span><br><span class="line"><span class="comment">#递归创建a/b   c/d</span></span><br><span class="line">mkdir <span class="literal">-p</span> a/b c/d</span><br><span class="line"></span><br><span class="line"><span class="comment">#递归创建test/a,b,c,d四个目录</span></span><br><span class="line">mkdir <span class="literal">-p</span> test/&#123;a,b,c,d&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#递归创建文件夹a/b/c/d/e</span></span><br><span class="line">mkdir <span class="literal">-p</span> a/b/c/d/e</span><br></pre></td></tr></table></figure>

<h3 id="查看目录下文件"><a href="#查看目录下文件" class="headerlink" title="查看目录下文件"></a><a href="https://www.diandian100.cn/b298fb75.html#ls">查看目录下文件</a></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示/media下的内容</span></span><br><span class="line"><span class="built_in">ls</span> /media</span><br></pre></td></tr></table></figure>

<h3 id="切换目录-位置"><a href="#切换目录-位置" class="headerlink" title="切换目录/位置"></a><a href="https://www.diandian100.cn/b298fb75.html#cd">切换目录/位置</a></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home <span class="comment">#切换到/home</span></span><br><span class="line"><span class="built_in">cd</span> ~     <span class="comment">#切换到当前用户目录下</span></span><br><span class="line"><span class="built_in">cd</span> -     <span class="comment">#切换到上次使用的目录下</span></span><br></pre></td></tr></table></figure>

<h3 id="查看当前目录"><a href="#查看当前目录" class="headerlink" title="查看当前目录"></a><a href="https://www.diandian100.cn/b298fb75.html#pwd">查看当前目录</a></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<h3 id="创建文件并修改文件创建时间"><a href="#创建文件并修改文件创建时间" class="headerlink" title="创建文件并修改文件创建时间"></a><a href="https://www.diandian100.cn/b298fb75.html#touch">创建文件并修改文件创建时间</a></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改文件的更改时间，很多黑客就会在恶意修改文件之后再修改成之前的时间</span></span><br><span class="line"><span class="built_in">ls</span> <span class="literal">-l</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;sb&#x27;</span> &gt;&gt; xxx.py <span class="comment">#新建xxx.py文件，并将字符串sb写入该文件</span></span><br><span class="line">touch <span class="literal">-t</span><span class="string">&#x27;07101530&#x27;</span> <span class="number">1</span>.txt  <span class="comment">#创建1.txt文件并将创建时间修改为以前时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#触摸</span></span><br><span class="line">touch xxx.py <span class="comment">#直接创建xxx.py文件</span></span><br></pre></td></tr></table></figure>

<h3 id="显示文件状态"><a href="#显示文件状态" class="headerlink" title="显示文件状态"></a>显示文件状态</h3><p><strong>stat命令</strong>用于显示文件的状态信息。stat命令的输出信息比<a href="https://www.diandian100.cn/b298fb75.html#ls">ls</a>命令的输出信息要更详细。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stat(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-L</span>：支持符号连接；</span><br><span class="line"><span class="operator">-f</span>：显示文件系统状态而非文件状态；</span><br><span class="line"><span class="literal">-t</span>：以简洁方式输出信息；</span><br><span class="line"><span class="literal">-c</span>： </span><br><span class="line">	格式化输出参数：</span><br><span class="line">    %a    八进制权限</span><br><span class="line">    %A    用可读性较好的方式输出权限</span><br><span class="line">-<span class="literal">-help</span>：显示指令的帮助信息；</span><br><span class="line">-<span class="literal">-version</span>：显示指令的版本信息。</span><br></pre></td></tr></table></figure>

<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>文件：指定要显示信息的普通文件或者文件系统对应的设备文件名。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例1： 显示文件信息</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/media/tony/数据/bbb<span class="comment"># stat hello</span></span><br><span class="line"></span><br><span class="line">  文件：hello</span><br><span class="line">  大小：<span class="number">27</span>        	块：<span class="number">1</span>          IO 块：<span class="number">4096</span>   普通文件</span><br><span class="line">设备：<span class="number">807</span><span class="built_in">h</span>/<span class="number">2055</span>d	Inode：<span class="number">144</span>         硬链接：<span class="number">1</span></span><br><span class="line">权限：(<span class="number">0777</span>/<span class="literal">-rwxrwxrwx</span>)  Uid：( <span class="number">1000</span>/    tony)   Gid：( <span class="number">1000</span>/    tony)</span><br><span class="line">最近访问：<span class="number">2019</span><span class="literal">-08</span><span class="literal">-06</span> <span class="number">10</span>:<span class="number">12</span>:<span class="number">16.378515900</span> +<span class="number">0800</span></span><br><span class="line">最近更改：<span class="number">2019</span><span class="literal">-08</span><span class="literal">-06</span> <span class="number">10</span>:<span class="number">11</span>:<span class="number">28.137537000</span> +<span class="number">0800</span></span><br><span class="line">最近改动：<span class="number">2019</span><span class="literal">-08</span><span class="literal">-06</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">31.638678200</span> +<span class="number">0800</span></span><br><span class="line">创建时间：-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例2：显示文件权限</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/media/tony/数据/bbb<span class="comment"># stat -c %a hello</span></span><br><span class="line"><span class="number">777</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/media/tony/数据/bbb<span class="comment"># stat -c %A hello</span></span><br><span class="line"><span class="literal">-rwxrwxrwx</span></span><br></pre></td></tr></table></figure>

<h3 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h3><p>所有的 <code>Unix Like</code> 系统都会内建 <code>vi</code> 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>但是目前我们使用比较多的是 <code>vim</code> 编辑器。</p>
<p><code>vim</code> 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>
<h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a><a href="https://www.diandian100.cn/b298fb75.html#cat">查看文件内容</a></h3><p>cat命令用于查看纯文本文件（常用于内容较少的）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看文件，显示行号</span></span><br><span class="line"><span class="built_in">cat</span> <span class="literal">-n</span> xxx.py</span><br><span class="line"><span class="comment">#猫,查看文件</span></span><br><span class="line"><span class="built_in">cat</span> xxx.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#在每一行的结尾加上$符</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">tmp</span>]<span class="comment"># cat -E 1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#追加多行文字到文件</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/media/tony/数据/bbb<span class="comment"># cat &gt;&gt; hello &lt;&lt; EOF</span></span><br><span class="line">&gt; 我是hello文件第二行</span><br><span class="line">&gt; hell内容第三行</span><br><span class="line">&gt; EOF</span><br><span class="line"><span class="comment"># 查看写入后的结果</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/media/tony/数据/bbb<span class="comment"># cat -n hello</span></span><br><span class="line">     <span class="number">1</span>	我是aaa中的hello文件</span><br><span class="line">     <span class="number">2</span>	我是hello文件第二行</span><br><span class="line">     <span class="number">3</span>	hell内容第三行</span><br></pre></td></tr></table></figure>

<h3 id="more查看文件内容"><a href="#more查看文件内容" class="headerlink" title="more查看文件内容"></a><code>more</code>查看文件内容</h3><p>**<code>more命令</code>**是一个基于<code>vi</code>编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持<code>vi</code>中的关键字定位操作。<code>more</code>名单中内置了若干快捷键，常用的有<kbd>H</kbd>（获得帮助信息），<kbd>Enter</kbd>（向下翻滚一行），<kbd>空格</kbd>（向下滚动一屏），<kbd>Q</kbd>（退出命令）。</p>
<p>该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比：<code>--More--（XX%）</code>可以用下列不同的方法对提示做出回答：</p>
<ul>
<li>按<kbd>Space</kbd>键：显示文本的下一屏内容。</li>
<li>按<kbd>Enier</kbd>键：只显示文本的下一行内容。</li>
<li>按斜线符<kbd>|</kbd>：接着输入一个模式，可以在文本中寻找下一个相匹配的模式。</li>
<li>按<kbd>H</kbd>键：显示帮助屏，该屏上有相关的帮助信息。</li>
<li>按<kbd>B</kbd>键：显示上一屏内容。</li>
<li>按<kbd>Q</kbd>键：退出<code>rnore</code>命令。</li>
</ul>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">more(语法)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">-&lt;数字&gt;：指定每屏显示的行数；</span><br><span class="line"><span class="literal">-d</span>：显示“[<span class="type">press</span> <span class="type">space</span> <span class="type">to</span> <span class="type">continue</span>,<span class="string">&#x27;q&#x27;</span> <span class="type">to</span> <span class="type">quit.</span>]”和“[<span class="type">Press</span> <span class="string">&#x27;h&#x27;</span> <span class="type">for</span> <span class="type">instructions</span>]”；</span><br><span class="line"><span class="literal">-c</span>：不进行滚屏操作。每次刷新这个屏幕；</span><br><span class="line"><span class="literal">-s</span>：将多个空行压缩成一行显示；</span><br><span class="line"><span class="literal">-u</span>：禁止下划线；</span><br><span class="line">+&lt;数字&gt;：从指定数字的行开始显示。</span><br></pre></td></tr></table></figure>

<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>文件：指定分页显示内容的文件。</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>显示文件file的内容，但在显示之前先清屏，并且在屏幕的最下方显示完核的百分比。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">more <span class="literal">-dc</span> file</span><br></pre></td></tr></table></figure>

<p>显示文件file的内容，每10行显示一次，而且在显示之前先清屏。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">more <span class="literal">-c</span> <span class="literal">-10</span> file</span><br></pre></td></tr></table></figure>

<h3 id="linux快捷键"><a href="#linux快捷键" class="headerlink" title="linux快捷键"></a><code>linux</code>快捷键</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.tab键    用于自动补全命令/文件名/目录名</span><br><span class="line"><span class="number">2</span>.ctrl + l　　清理终端显示 </span><br><span class="line"><span class="number">3</span>.clear/<span class="built_in">cls</span>  清理终端显示</span><br><span class="line"><span class="number">4</span>.ctrl + c 终止当前操作</span><br></pre></td></tr></table></figure>

<h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p><strong>echo命令</strong>用于在<code>shell</code>中打印<code>shell</code>变量的值，或者直接输出指定的字符串。<code>linux</code>的<code>echo</code>命令，在<code>shell</code>编程中极为常用, 在终端下打印变量<code>value</code>的时候也是常常用到的，因此有必要了解下<code>echo</code>的用法<code>echo</code>命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。</p>
<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span>(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-e</span>：激活转义字符。</span><br></pre></td></tr></table></figure>

<p>使用<code>-e</code>选项时，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：</p>
<ul>
<li>\a 发出警告声；</li>
<li>\b 删除前一个字符；</li>
<li>\c 最后不加上换行符号；</li>
<li>\f 换行但光标仍旧停留在原来的位置；</li>
<li>\n 换行且光标移至行首；</li>
<li>\r 光标移至行首，但不换行；</li>
<li>\t 插入tab；</li>
<li>\v 与\f相同；</li>
<li>\ 插入\字符；</li>
<li><code>\nnn</code> 插入<code>nnn</code>（八进制）所代表的<code>ASCII</code>字符；</li>
</ul>
<h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><p>变量：指定要打印的变量。</p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>用<code>echo</code>命令打印带有色彩的文字：</p>
<p><strong>文字色：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;31mThis is red text\e[0m&quot;</span></span><br><span class="line">This is red text</span><br></pre></td></tr></table></figure>

<ul>
<li><code>\e[1;31m</code> 将颜色设置为红色</li>
<li><code>\e[0m</code> 将颜色重新置回</li>
</ul>
<p>颜色码：重置=0，黑色=30，红色=31，绿色=32，黄色=33，蓝色=34，洋红=35，青色=36，白色=37</p>
<p><strong>背景色</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\e[1;42mGreed Background\e[0m&quot;</span></span><br><span class="line">Greed Background</span><br></pre></td></tr></table></figure>

<p>颜色码：重置=0，黑色=40，红色=41，绿色=42，黄色=43，蓝色=44，洋红=45，青色=46，白色=47</p>
<p><strong>文字闪动：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[37;31;5mMySQL Server Stop...\033[39;49;0m&quot;</span></span><br></pre></td></tr></table></figure>

<p>红色数字处还有其他数字参数：0 关闭所有属性、1 设置高亮度（加粗）、4 下划线、5 闪烁、7 反显、8 消隐</p>
<p><strong>使用echo将内容写入文件(会覆盖文件原有内容)</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认吧内容显示到终端上    </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;超哥666&quot;</span></span><br><span class="line"><span class="comment">#超哥平时比较低调，不想让别人知道他666，怎么办？要么把“超哥666”写入到文件里！</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;超哥666&quot;</span> &gt; /tmp/chaoge.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> <span class="comment">#取出打印PATH的值</span></span><br></pre></td></tr></table></figure>

<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">输入/输出 重定向符号</span><br><span class="line"><span class="number">1</span>.&gt;&gt;    追加重定向，把文字追加到文件的结尾</span><br><span class="line"><span class="number">2</span>.&gt;     重定向符号，清空原文件所有内容，然后把文字覆盖到文件末尾</span><br><span class="line"><span class="number">3</span>.&lt;     输入重定向</span><br><span class="line"><span class="number">4</span>.&lt;&lt;    将输入结果输入重定向</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;oldboy-python666&quot;</span> &gt; /tmp/test.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;chaoge666&quot;</span> &gt;&gt; /tmp/test.txt</span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;/tmp/test.txt &lt;&lt; EOF</span><br><span class="line">------------------------------------</span><br><span class="line">我想把命令执行的结果信息，写入到文件中</span><br><span class="line">ip addr &gt; /tmp/network.txt   <span class="comment">#标准输出重定向 把命令执行结果信息，放入到文件中</span></span><br><span class="line"><span class="number">5</span>.通配符  </span><br><span class="line"><span class="built_in">ls</span> <span class="literal">-l</span> /etc/us*</span><br></pre></td></tr></table></figure>

<h3 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h3><p>**<code>cp命令</code>**用来将一个或多个源文件或者目录复制到指定的目的文件或目录。它可以将单个源文件复制成一个指定文件名的具体的文件或一个已经存在的目录下。<code>cp命令</code>还支持同时复制多个文件，当一次复制多个文件时，目标文件参数必须是一个已经存在的目录，否则将出现错误。</p>
<h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span>(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-a</span>：此参数的效果和同时指定<span class="string">&quot;-dpR&quot;</span>参数相同；</span><br><span class="line"><span class="literal">-d</span>：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；</span><br><span class="line"><span class="operator">-f</span>：强行复制文件或目录，不论目标文件或目录是否已存在；</span><br><span class="line"><span class="literal">-i</span>：覆盖既有文件之前先询问用户；</span><br><span class="line"><span class="literal">-l</span>：对源文件建立硬连接，而非复制文件；</span><br><span class="line"><span class="literal">-p</span>：保留源文件或目录的属性；</span><br><span class="line"><span class="literal">-R</span>/<span class="built_in">r</span>：递归处理，将指定目录下的所有文件与子目录一并处理；</span><br><span class="line"><span class="literal">-s</span>：对源文件建立符号连接，而非复制文件；</span><br><span class="line"><span class="literal">-u</span>：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；</span><br><span class="line"><span class="literal">-S</span>：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；</span><br><span class="line"><span class="literal">-b</span>：覆盖已存在的文件目标前将目标文件备份；</span><br><span class="line"><span class="literal">-v</span>：详细显示命令执行的操作。</span><br></pre></td></tr></table></figure>

<h4 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h4><ul>
<li>源文件：制定源文件列表。默认情况下，cp命令不能复制目录，如果要复制目录，则必须使用<code>-R</code>选项；</li>
<li>目标文件：指定目标文件。当“源文件”为多个文件时，要求“目标文件”为指定的目录。</li>
</ul>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><p>如果把一个文件复制到一个目标文件中，而目标文件已经存在，那么，该目标文件的内容将被破坏。此命令中所有参数既可以是绝对路径名，也可以是相对路径名。通常会用到点<code>.</code>或点点<code>..</code>的形式。例如，下面的命令将指定文件复制到当前目录下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> ../mary/homework/assign .</span><br></pre></td></tr></table></figure>

<p>所有目标文件指定的目录必须是己经存在的，<code>cp</code>命令不能创建目录。如果没有文件复制的权限，则系统会显示出错信息。</p>
<p>将文件file复制到目录<code>/usr/men/tmp</code>下，并改名为<code>file1</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> file /usr/men/tmp/file1</span><br></pre></td></tr></table></figure>

<p>将目录<code>/usr/men</code>下的所有文件及其子目录复制到目录<code>/usr/zh</code>中</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> <span class="literal">-r</span> /usr/men /usr/zh</span><br></pre></td></tr></table></figure>

<p>交互式地将目录<code>/usr/men</code>中的以m打头的所有.c文件复制到目录<code>/usr/zh</code>中</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> <span class="literal">-i</span> /usr/men m*.c /usr/zh</span><br></pre></td></tr></table></figure>

<p>我们在Linux下使用<code>cp命令</code>复制文件时候，有时候会需要覆盖一些同名文件，覆盖文件的时候都会有提示：需要不停的按Y来确定执行覆盖。文件数量不多还好，但是要是几百个估计按Y都要吐血了，于是折腾来半天总结了一个方法：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> aaa/* /bbb</span><br><span class="line">复制目录aaa下所有到/bbb目录下，这时如果/bbb目录下有和aaa同名的文件，需要按Y来确认并且会略过aaa目录下的子目录。</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> <span class="literal">-r</span> aaa/* /bbb</span><br><span class="line">这次依然需要按Y来确认操作，但是没有忽略子目录。</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> <span class="literal">-r</span> <span class="literal">-a</span> aaa/* /bbb</span><br><span class="line">依然需要按Y来确认操作，并且把aaa目录以及子目录和文件属性也传递到了/bbb。</span><br><span class="line"></span><br><span class="line">\cp <span class="literal">-r</span> <span class="literal">-a</span> aaa/* /bbb</span><br><span class="line">成功，没有提示按Y、传递了目录属性、没有略过目录。</span><br></pre></td></tr></table></figure>

<h3 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a><a href="https://www.diandian100.cn/b298fb75.html#mv">移动命令</a></h3><p>**<code>mv命令</code>**用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。<code>source</code>表示源文件或目录，<code>target</code>表示目标文件或目录。如果将一个文件移到一个已经存在的目标文件中，则目标文件的内容将被覆盖。</p>
<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a><a href="https://www.diandian100.cn/b298fb75.html#rm">删除命令</a></h3><p>**<code>rm命令</code>**可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。</p>
<h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><p><strong>find命令</strong>用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-4"><a href="#选项-4" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；</span><br><span class="line">-anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；</span><br><span class="line">-atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；</span><br><span class="line">-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；</span><br><span class="line">-cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span><br><span class="line">-ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；</span><br><span class="line">-daystart：从本日开始计算时间；</span><br><span class="line">-depth：从指定目录下最深层的子目录开始查找；</span><br><span class="line">-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；</span><br><span class="line">-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；</span><br><span class="line">-false：将find指令的回传值皆设为False；</span><br><span class="line">-fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；</span><br><span class="line">-follow：排除符号连接；</span><br><span class="line">-fprint&lt;列表文件&gt;：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；</span><br><span class="line">-gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；</span><br><span class="line">-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；</span><br><span class="line">-help或——help：在线帮助；</span><br><span class="line">-ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；</span><br><span class="line">-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；</span><br><span class="line">-iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；</span><br><span class="line">-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；</span><br><span class="line">-maxdepth&lt;目录层级&gt;：设置最大目录层级；</span><br><span class="line">-mindepth&lt;目录层级&gt;：设置最小目录层级；</span><br><span class="line">-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；</span><br><span class="line">-mount：此参数的效果和指定“-xdev”相同；</span><br><span class="line">-mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；</span><br><span class="line">-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span><br><span class="line">-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span><br><span class="line">-nogroup：找出不属于本地主机群组识别码的文件或目录；</span><br><span class="line">-noleaf：不去考虑目录至少需拥有两个硬连接存在；</span><br><span class="line">-nouser：找出不属于本地主机用户识别码的文件或目录；</span><br><span class="line">-ok&lt;执行指令&gt;：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；</span><br><span class="line">-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；</span><br><span class="line">-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；</span><br><span class="line">-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“.&#x2F;”字符串；</span><br><span class="line">-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；</span><br><span class="line">-printf&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；</span><br><span class="line">-prune：不寻找字符串作为寻找文件或目录的范本样式;</span><br><span class="line">-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span><br><span class="line">-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；</span><br><span class="line">-true：将find指令的回传值皆设为True；</span><br><span class="line">-typ&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；</span><br><span class="line">-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；</span><br><span class="line">-used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；</span><br><span class="line">-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；</span><br><span class="line">-version或——version：显示版本信息；</span><br><span class="line">-xdev：将范围局限在先行的文件系统中；</span><br><span class="line">-xtype&lt;文件类型&gt;：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。</span><br></pre></td></tr></table></figure>

<h4 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h4><p>起始目录：查找文件的起始目录。</p>
<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><h5 id="根据文件或者正则表达式进行匹配"><a href="#根据文件或者正则表达式进行匹配" class="headerlink" title="根据文件或者正则表达式进行匹配"></a>根据文件或者正则表达式进行匹配</h5><p>列出当前目录及子目录下所有文件和文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .</span><br></pre></td></tr></table></figure>

<p>在<code>/home</code>目录下查找以.txt结尾的文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F;home -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>

<p>同上，但忽略大小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F;home -iname &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>

<p>当前目录及子目录下查找所有以<code>.txt</code>和<code>.pdf</code>结尾的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; </span><br></pre></td></tr></table></figure>

<p>匹配文件路径或者文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F;usr&#x2F; -path &quot;*local*&quot;</span><br></pre></td></tr></table></figure>

<p>基于正则表达式匹配文件路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -regex &quot;.*\(\.txt\|\.pdf\)$&quot;</span><br></pre></td></tr></table></figure>

<p>同上，但忽略大小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -iregex &quot;.*\(\.txt\|\.pdf\)$&quot;</span><br></pre></td></tr></table></figure>

<h5 id="否定参数"><a href="#否定参数" class="headerlink" title="否定参数"></a>否定参数</h5><p>找出/home下不是以<code>.txt</code>结尾的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F;home ! -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>

<h5 id="根据文件类型进行搜索"><a href="#根据文件类型进行搜索" class="headerlink" title="根据文件类型进行搜索"></a>根据文件类型进行搜索</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type 类型参数</span><br></pre></td></tr></table></figure>

<p>类型参数列表：</p>
<ul>
<li><strong>f</strong> 普通文件</li>
<li><strong>l</strong> 符号连接</li>
<li><strong>d</strong> 目录</li>
<li><strong>c</strong> 字符设备</li>
<li><strong>b</strong> 块设备</li>
<li><strong>s</strong> 套接字</li>
<li><strong>p</strong> <code>Fifo</code></li>
</ul>
<h5 id="基于目录深度搜索"><a href="#基于目录深度搜索" class="headerlink" title="基于目录深度搜索"></a>基于目录深度搜索</h5><p>向下最大深度限制为3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -maxdepth 3 -type f</span><br></pre></td></tr></table></figure>

<p>搜索出深度距离当前目录至少2个子目录的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -mindepth 2 -type f</span><br></pre></td></tr></table></figure>

<h5 id="根据文件时间戳进行搜索"><a href="#根据文件时间戳进行搜索" class="headerlink" title="根据文件时间戳进行搜索"></a>根据文件时间戳进行搜索</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f 时间戳</span><br></pre></td></tr></table></figure>

<p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>
<ul>
<li><strong>访问时间</strong>（-atime/天，-amin/分钟）：用户最近一次访问时间。</li>
<li><strong>修改时间</strong>（-mtime/天，-mmin/分钟）：文件最后一次修改时间。</li>
<li><strong>变化时间</strong>（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</li>
</ul>
<p>搜索最近七天内被访问过的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -atime -7</span><br></pre></td></tr></table></figure>

<p>搜索恰好在七天前被访问过的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -atime 7</span><br></pre></td></tr></table></figure>

<p>搜索超过七天内被访问过的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -atime +7</span><br></pre></td></tr></table></figure>

<p>搜索访问时间超过10分钟的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -amin +10</span><br></pre></td></tr></table></figure>

<p>找出比<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9maWxl">file<i class="fa fa-external-link-alt"></i></span>.log修改时间更长的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -newer file.log</span><br></pre></td></tr></table></figure>

<h5 id="根据文件大小进行匹配"><a href="#根据文件大小进行匹配" class="headerlink" title="根据文件大小进行匹配"></a>根据文件大小进行匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -size 文件大小单元</span><br></pre></td></tr></table></figure>

<p>文件大小单元：</p>
<ul>
<li><strong>b</strong> —— 块（512字节）</li>
<li><strong>c</strong> —— 字节</li>
<li><strong>w</strong> —— 字（2字节）</li>
<li><strong>k</strong> —— 千字节</li>
<li><strong>M</strong> —— 兆字节</li>
<li><strong>G</strong> —— 吉字节</li>
</ul>
<p>搜索大于10KB的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -size +10k</span><br></pre></td></tr></table></figure>

<p>搜索小于10KB的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -size -10k</span><br></pre></td></tr></table></figure>

<p>搜索等于10KB的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -size 10k</span><br></pre></td></tr></table></figure>

<h5 id="删除匹配文件"><a href="#删除匹配文件" class="headerlink" title="删除匹配文件"></a>删除匹配文件</h5><p>删除当前目录下所有.txt文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -name &quot;*.txt&quot; -delete</span><br></pre></td></tr></table></figure>

<h5 id="根据文件权限-所有权进行匹配"><a href="#根据文件权限-所有权进行匹配" class="headerlink" title="根据文件权限/所有权进行匹配"></a>根据文件权限/所有权进行匹配</h5><p>当前目录下搜索出权限为777的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -perm 777</span><br></pre></td></tr></table></figure>

<p>找出当前目录下权限不是644的<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9waHA=">php<i class="fa fa-external-link-alt"></i></span>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -name &quot;*.php&quot; ! -perm 644</span><br></pre></td></tr></table></figure>

<p>找出当前目录用户tom拥有的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -user tom</span><br></pre></td></tr></table></figure>

<p>找出当前目录用户组sunk拥有的所有文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -group sunk</span><br></pre></td></tr></table></figure>

<h5 id="借助-exec选项与其他命令结合使用"><a href="#借助-exec选项与其他命令结合使用" class="headerlink" title="借助-exec选项与其他命令结合使用"></a>借助<code>-exec</code>选项与其他命令结合使用</h5><p>找出当前目录下所有root的文件，并把所有权更改为用户tom</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .-type f -user root -exec chown tom &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>上例中，**{}** 用于与**-exec**选项结合使用来匹配所有文件，然后会被替换为相应的文件名。</p>
<p>找出自己家目录下所有的.txt文件并删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find $HOME&#x2F;. -name &quot;*.txt&quot; -ok rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>上例中，**-ok<strong>和</strong>-exec**行为一样，不过它会给出提示，是否执行相应的操作。</p>
<p>查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -name &quot;*.txt&quot; -exec cat &#123;&#125; \;&gt; all.txt</span><br></pre></td></tr></table></figure>

<p>将30天前的.log文件移动到old目录中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -mtime +30 -name &quot;*.log&quot; -exec cp &#123;&#125; old \;</span><br></pre></td></tr></table></figure>

<p>找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -type f -name &quot;*.txt&quot; -exec printf &quot;File: %s\n&quot; &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-exec .&#x2F;text.sh &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h5 id="搜索但跳出指定的目录"><a href="#搜索但跳出指定的目录" class="headerlink" title="搜索但跳出指定的目录"></a>搜索但跳出指定的目录</h5><p>查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -path &quot;.&#x2F;sk&quot; -prune -o -name &quot;*.txt&quot; -print</span><br></pre></td></tr></table></figure>

<h5 id="find其他技巧收集"><a href="#find其他技巧收集" class="headerlink" title="find其他技巧收集"></a>find其他技巧收集</h5><p>要列出所有长度为零的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -empty</span><br></pre></td></tr></table></figure>

<h3 id="管道命令"><a href="#管道命令" class="headerlink" title="管道命令"></a>管道命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复制代码</span><br><span class="line">Linux提供的管道符“|”讲两条命令隔开，管道符左边命令的输出会作为管道符右边命令的输入。</span><br><span class="line">常见用法：</span><br><span class="line">#检查python程序是否启动</span><br><span class="line">ps -ef|grep &quot;python&quot;</span><br><span class="line"></span><br><span class="line">#找到&#x2F;tmp目录下所有txt文件</span><br><span class="line">ls &#x2F;tmp|grep &#39;.txt&#39;</span><br><span class="line"></span><br><span class="line">#检查nginx的端口是否存活</span><br><span class="line">netstat -tunlp |grep nginx</span><br></pre></td></tr></table></figure>

<p>命令格式： 命令A | 命令B</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190806165832.png"></p>
<h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a><code>grep</code>命令</h3><p><code>grep</code>（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<h4 id="选项-5"><a href="#选项-5" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a 不要忽略二进制数据。</span><br><span class="line">-A&lt;显示列数&gt; 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</span><br><span class="line">-b 在显示符合范本样式的那一行之外，并显示该行之前的内容。</span><br><span class="line">-c 计算符合范本样式的列数。</span><br><span class="line">-C&lt;显示列数&gt;或-&lt;显示列数&gt;  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</span><br><span class="line">-d&lt;进行动作&gt; 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</span><br><span class="line">-e&lt;范本样式&gt; 指定字符串作为查找文件内容的范本样式。</span><br><span class="line">-E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</span><br><span class="line">-f&lt;范本文件&gt; 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</span><br><span class="line">-F 将范本样式视为固定字符串的列表。</span><br><span class="line">-G 将范本样式视为普通的表示法来使用。</span><br><span class="line">-h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</span><br><span class="line">-H 在显示符合范本样式的那一列之前，标示该列的文件名称。</span><br><span class="line">-i 忽略字符大小写的差别。</span><br><span class="line">-l 列出文件内容符合指定的范本样式的文件名称。</span><br><span class="line">-L 列出文件内容不符合指定的范本样式的文件名称。</span><br><span class="line">-n 在显示符合范本样式的那一列之前，标示出该列的编号。</span><br><span class="line">-q 不显示任何信息。</span><br><span class="line">-R&#x2F;-r 此参数的效果和指定“-d recurse”参数相同。</span><br><span class="line">-s 不显示错误信息。</span><br><span class="line">-v 反转查找。</span><br><span class="line">-w 只显示全字符合的列。</span><br><span class="line">-x 只显示全列符合的列。</span><br><span class="line">-y 此参数效果跟“-i”相同。</span><br><span class="line">-o 只输出文件中匹配到的部分。</span><br><span class="line">--color &#x3D; auto : 给关键词部分添加颜色</span><br></pre></td></tr></table></figure>

<h4 id="grep命令常见用法"><a href="#grep命令常见用法" class="headerlink" title="grep命令常见用法"></a><code>grep</code>命令常见用法</h4><p>在文件中搜索一个单词，命令会返回一个包含<strong>“match_pattern”</strong>的文本行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep match_pattern file_name</span><br><span class="line">grep &quot;match_pattern&quot; file_name</span><br></pre></td></tr></table></figure>

<p>在多个文件中查找：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;match_pattern&quot; file_1 file_2 file_3 ...</span><br></pre></td></tr></table></figure>

<p>输出除之外的所有行 <strong>-v</strong> 选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -v &quot;match_pattern&quot; file_name</span><br></pre></td></tr></table></figure>

<p>标记匹配颜色 <strong>–color=auto</strong> 选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;match_pattern&quot; file_name --color&#x3D;auto</span><br></pre></td></tr></table></figure>

<p>使用正则表达式 <strong>-E</strong> 选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -E &quot;[1-9]+&quot;</span><br><span class="line">或</span><br><span class="line">egrep &quot;[1-9]+&quot;</span><br></pre></td></tr></table></figure>

<p>只输出文件中匹配到的部分 <strong>-o</strong> 选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo this is a test line. | grep -o -E &quot;[a-z]+\.&quot;</span><br><span class="line">line.</span><br><span class="line"></span><br><span class="line">echo this is a test line. | egrep -o &quot;[a-z]+\.&quot;</span><br><span class="line">line.</span><br></pre></td></tr></table></figure>

<p>统计文件或者文本中包含匹配字符串的行数 <strong>-c</strong> 选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -c &quot;text&quot; file_name</span><br></pre></td></tr></table></figure>

<p>输出包含匹配字符串的行数 <strong>-n</strong> 选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;text&quot; -n file_name</span><br><span class="line">或</span><br><span class="line">cat file_name | grep &quot;text&quot; -n</span><br><span class="line"></span><br><span class="line">#多个文件</span><br><span class="line">grep &quot;text&quot; -n file_1 file_2</span><br></pre></td></tr></table></figure>

<p>打印样式匹配所位于的字符或字节偏移：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo gun is not unix | grep -b -o &quot;not&quot;</span><br><span class="line">7:not</span><br><span class="line"></span><br><span class="line">#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 -b -o 一般总是配合使用。</span><br></pre></td></tr></table></figure>

<p>搜索多个文件并查找匹配文本在哪些文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -l &quot;text&quot; file1 file2 file3...</span><br></pre></td></tr></table></figure>

<h4 id="grep递归搜索文件"><a href="#grep递归搜索文件" class="headerlink" title="grep递归搜索文件"></a><code>grep</code>递归搜索文件</h4><p>在多级目录中对文本进行递归搜索：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;text&quot; . -r -n</span><br><span class="line"># .表示当前目录。</span><br></pre></td></tr></table></figure>

<p>忽略匹配样式中的字符大小写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;hello world&quot; | grep -i &quot;HELLO&quot;</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>选项 <strong>-e</strong> 制动多个匹配样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo this is a text line | grep -e &quot;is&quot; -e &quot;line&quot; -o</span><br><span class="line">is</span><br><span class="line">line</span><br><span class="line"></span><br><span class="line">#也可以使用-f选项来匹配多个样式，在样式文件中逐行写出需要匹配的字符。</span><br><span class="line">cat patfile</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line">echo aaa bbb ccc ddd eee | grep -f patfile -o</span><br></pre></td></tr></table></figure>

<p>在grep搜索结果中包括或者排除指定文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#只在目录中所有的.php和.html文件中递归搜索字符&quot;main()&quot;</span><br><span class="line">grep &quot;main()&quot; . -r --include *.&#123;php,html&#125;</span><br><span class="line"></span><br><span class="line">#在搜索结果中排除所有README文件</span><br><span class="line">grep &quot;main()&quot; . -r --exclude &quot;README&quot;</span><br><span class="line"></span><br><span class="line">#在搜索结果中排除filelist文件列表里的文件</span><br><span class="line">grep &quot;main()&quot; . -r --exclude-from filelist</span><br></pre></td></tr></table></figure>

<p>使用0值字节后缀的<code>grep</code>与<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC94YXJncw==">xargs<i class="fa fa-external-link-alt"></i></span>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#测试文件：</span><br><span class="line">echo &quot;aaa&quot; &gt; file1</span><br><span class="line">echo &quot;bbb&quot; &gt; file2</span><br><span class="line">echo &quot;aaa&quot; &gt; file3</span><br><span class="line"></span><br><span class="line">grep &quot;aaa&quot; file* -lZ | xargs -0 rm</span><br><span class="line"></span><br><span class="line">#执行后会删除file1和file3，grep输出用-Z选项来指定以0值字节作为终结符文件名（\0），xargs -0 读取输入并用0值字节终结符分隔文件名，然后删除匹配文件，-Z通常和-l结合使用。</span><br></pre></td></tr></table></figure>

<p><code>grep</code>静默输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -q &quot;test&quot; filename</span><br><span class="line"></span><br><span class="line">#不会输出任何信息，如果命令运行成功返回0，失败则返回非0值。一般用于条件测试。</span><br></pre></td></tr></table></figure>

<p>打印出匹配文本之前或者之后的行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示匹配某个结果之后的3行，使用 -A 选项：</span><br><span class="line">seq 10 | grep &quot;5&quot; -A 3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">#显示匹配某个结果之前的3行，使用 -B 选项：</span><br><span class="line">seq 10 | grep &quot;5&quot; -B 3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">#显示匹配某个结果的前三行和后三行，使用 -C 选项：</span><br><span class="line">seq 10 | grep &quot;5&quot; -C 3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">#如果匹配结果有多个，会用“--”作为各匹配结果之间的分隔符：</span><br><span class="line">echo -e &quot;a\nb\nc\na\nb\nc&quot; | grep a -A 1</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">--</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<h4 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a>常用实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;我要找什么&quot; &#x2F;tmp&#x2F;hello.txt</span><br><span class="line">#排除 -v，排除我要找的东西</span><br><span class="line">grep -v &quot;我要找什么 &#x2F;tmp&#x2F;hello.txt</span><br></pre></td></tr></table></figure>

<p>找出<code>/etc/passwd</code>下root用户所在行，以及行号，显示颜色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd |grep &#39;^root&#39; --color&#x3D;auto -n</span><br></pre></td></tr></table></figure>

<p>找出<code>/etc/passwd</code>所有不允许登录的用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &#x2F;sbin&#x2F;nologin &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<p>找到<code>/etc/passwd</code>的所有与<code>mysql</code>有关行，行号 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd |grep &#39;mysql&#39; -n</span><br></pre></td></tr></table></figure>

<h3 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h3><p><strong>head命令</strong>用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。</p>
<h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-6"><a href="#选项-6" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n&lt;数字&gt;：指定显示头部内容的行数；</span><br><span class="line">-c&lt;字符数&gt;：指定显示头部内容的字符数；</span><br><span class="line">-v：总是显示文件名的头信息；</span><br><span class="line">-q：不显示文件名的头信息。</span><br></pre></td></tr></table></figure>

<h4 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h4><p>文件列表：指定显示头部内容的文件列表。</p>
<h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><p><strong>tail命令</strong>用于输入文件中的尾部内容。tail命令默认在屏幕上显示指定文件的末尾10行。如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或者文件名为“-”，则读取标准输入。</p>
<p>注意：如果表示字节或行数的N值之前有一个”+”号，则从文件开头的第N项开始显示，而不是显示文件的最后N项。N值后面可以有后缀：b表示512，k表示1024，m表示1 048576(1M)。</p>
<h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-7"><a href="#选项-7" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--retry：即是在tail命令启动时，文件不可访问或者文件稍后变得不可访问，都始终尝试打开文件。使用此选项时需要与选项“——follow&#x3D;name”连用；</span><br><span class="line">-c&lt;N&gt;或——bytes&#x3D;&lt;N&gt;：输出文件尾部的N（N为整数）个字节内容；</span><br><span class="line">-f&lt;name&#x2F;descriptor&gt;或；--follow&lt;nameldescript&gt;：显示文件最新追加的内容。“name”表示以文件名的方式监视文件的变化。“-f”与“-fdescriptor”等效；</span><br><span class="line">-F：与选项“-follow&#x3D;name”和“--retry&quot;连用时功能相同；</span><br><span class="line">-n&lt;N&gt;或——line&#x3D;&lt;N&gt;：输出文件的尾部N（N位数字）行内容。</span><br><span class="line">--pid&#x3D;&lt;进程号&gt;：与“-f”选项连用，当指定的进程号的进程终止后，自动退出tail命令；</span><br><span class="line">-q或——quiet或——silent：当有多个文件参数时，不输出各个文件名；</span><br><span class="line">-s&lt;秒数&gt;或——sleep-interal&#x3D;&lt;秒数&gt;：与“-f”选项连用，指定监视文件变化时间隔的秒数；</span><br><span class="line">-v或——verbose：当有多个文件参数时，总是输出各个文件名；</span><br><span class="line">--help：显示指令的帮助信息；</span><br><span class="line">--version：显示指令的版本信息。</span><br></pre></td></tr></table></figure>

<h4 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h4><p>文件列表：指定要显示尾部内容的文件列表。</p>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail file （显示文件file的最后10行）</span><br><span class="line">tail +20 file （显示文件file的内容，从第20行至文件末尾）</span><br><span class="line">tail -c 10 file （显示文件file的最后10个字符）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># head显示文件前几行，默认前10行</span><br><span class="line"># tail显示文件后几行，默认后10行</span><br><span class="line"># 查看前两行</span><br><span class="line">head -2 &#x2F;tmp&#x2F;oldboy.txt</span><br><span class="line"># 查看后两行</span><br><span class="line">tail -2 &#x2F;tmp&#x2F;oldboy.txt</span><br><span class="line"># 持续刷新显示</span><br><span class="line">tail -f xx.log</span><br><span class="line"></span><br><span class="line"># 显示文件10-30行</span><br><span class="line">head -30 &#x2F;tmp&#x2F;oldboy.txt |tail -21</span><br></pre></td></tr></table></figure>

<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a><code>sed</code></h3><p>**<code>sed</code>**是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用<code>sed</code>命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。<code>Sed</code>主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p>
<h4 id="sed的选项、命令、替换标记"><a href="#sed的选项、命令、替换标记" class="headerlink" title="sed的选项、命令、替换标记"></a><code>sed</code>的选项、命令、替换标记</h4><p><strong>命令格式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed [options] &#39;command&#39; file(s)</span><br><span class="line">sed [options] -f scriptfile file(s)</span><br></pre></td></tr></table></figure>

<h4 id="选项-8"><a href="#选项-8" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-e&lt;script&gt;或--expression&#x3D;&lt;script&gt;：以选项中的指定的script来处理输入的文本文件；</span><br><span class="line">-f&lt;script文件&gt;或--file&#x3D;&lt;script文件&gt;：以选项中指定的script文件来处理输入的文本文件；</span><br><span class="line">-h或--help：显示帮助；</span><br><span class="line">-n或--quiet或——silent：仅显示script处理后的结果；</span><br><span class="line">-V或--version：显示版本信息。</span><br></pre></td></tr></table></figure>

<h4 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h4><p>文件：指定待处理的文本文件列表。</p>
<h4 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a><code>sed</code>命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a\ 在当前行下面插入文本。</span><br><span class="line">i\ 在当前行上面插入文本。</span><br><span class="line">c\ 把选定的行改为新的文本。</span><br><span class="line">d 删除，删除选择的行。</span><br><span class="line">D 删除模板块的第一行。</span><br><span class="line">s 替换指定字符</span><br><span class="line">h 拷贝模板块的内容到内存中的缓冲区。</span><br><span class="line">H 追加模板块的内容到内存中的缓冲区。</span><br><span class="line">g 获得内存缓冲区的内容，并替代当前模板块中的文本。</span><br><span class="line">G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。</span><br><span class="line">l 列表不能打印字符的清单。</span><br><span class="line">n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。</span><br><span class="line">N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。</span><br><span class="line">p 打印模板块的行。</span><br><span class="line">P(大写) 打印模板块的第一行。</span><br><span class="line">q 退出Sed。</span><br><span class="line">b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</span><br><span class="line">r file 从file中读行。</span><br><span class="line">t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span><br><span class="line">T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。</span><br><span class="line">w file 写并追加模板块到file末尾。  </span><br><span class="line">W file 写并追加模板块的第一行到file末尾。  </span><br><span class="line">! 表示后面的命令对所有没有被选定的行发生作用。  </span><br><span class="line">&#x3D; 打印当前行号码。  </span><br><span class="line"># 把注释扩展到下一个换行符以前。  </span><br></pre></td></tr></table></figure>

<h5 id="sed替换标记"><a href="#sed替换标记" class="headerlink" title="sed替换标记"></a><code>sed</code>替换标记</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g 表示行内全面替换。  </span><br><span class="line">p 表示打印行。  </span><br><span class="line">w 表示把行写入一个文件。  </span><br><span class="line">x 表示互换模板块中的文本和缓冲区中的文本。  </span><br><span class="line">y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）</span><br><span class="line">\1 子串匹配标记</span><br><span class="line">&amp; 已匹配字符串标记</span><br></pre></td></tr></table></figure>

<h5 id="sed元字符集"><a href="#sed元字符集" class="headerlink" title="sed元字符集"></a><code>sed</code>元字符集</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^ 匹配行开始，如：&#x2F;^sed&#x2F;匹配所有以sed开头的行。</span><br><span class="line">$ 匹配行结束，如：&#x2F;sed$&#x2F;匹配所有以sed结尾的行。</span><br><span class="line">. 匹配一个非换行符的任意字符，如：&#x2F;s.d&#x2F;匹配s后接一个任意字符，最后是d。</span><br><span class="line">* 匹配0个或多个字符，如：&#x2F;*sed&#x2F;匹配所有模板是一个或多个空格后紧跟sed的行。</span><br><span class="line">[] 匹配一个指定范围内的字符，如&#x2F;[ss]ed&#x2F;匹配sed和Sed。  </span><br><span class="line">[^] 匹配一个不在指定范围内的字符，如：&#x2F;[^A-RT-Z]ed&#x2F;匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。</span><br><span class="line">\(..\) 匹配子串，保存匹配的字符，如s&#x2F;\(love\)able&#x2F;\1rs，loveable被替换成lovers。</span><br><span class="line">&amp; 保存搜索字符用来替换其他字符，如s&#x2F;love&#x2F;**&amp;**&#x2F;，love这成**love**。</span><br><span class="line">\&lt; 匹配单词的开始，如:&#x2F;\&lt;love&#x2F;匹配包含以love开头的单词的行。</span><br><span class="line">\&gt; 匹配单词的结束，如&#x2F;love\&gt;&#x2F;匹配包含以love结尾的单词的行。</span><br><span class="line">x\&#123;m\&#125; 重复字符x，m次，如：&#x2F;0\&#123;5\&#125;&#x2F;匹配包含5个0的行。</span><br><span class="line">x\&#123;m,\&#125; 重复字符x，至少m次，如：&#x2F;0\&#123;5,\&#125;&#x2F;匹配至少有5个0的行。</span><br><span class="line">x\&#123;m,n\&#125; 重复字符x，至少m次，不多于n次，如：&#x2F;0\&#123;5,10\&#125;&#x2F;匹配5~10个0的行。</span><br></pre></td></tr></table></figure>

<h4 id="sed用法实例"><a href="#sed用法实例" class="headerlink" title="sed用法实例"></a><code>sed</code>用法实例</h4><h5 id="替换操作：s命令"><a href="#替换操作：s命令" class="headerlink" title="替换操作：s命令"></a>替换操作：s命令</h5><p>替换文本中的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;s&#x2F;book&#x2F;books&#x2F;&#39; file</span><br></pre></td></tr></table></figure>

<p><strong>-n选项</strong>和<strong>p命令</strong>一起使用表示只打印那些发生替换的行：</p>
<p>sed -n ‘s/<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC90ZXN0">test<i class="fa fa-external-link-alt"></i></span>/TEST/p’ file</p>
<p>直接编辑文件<strong>选项-i</strong>，会匹配file文件中每一行的第一个book替换为books：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;book&#x2F;books&#x2F;g&#39; file</span><br></pre></td></tr></table></figure>

<h5 id="全面替换标记g"><a href="#全面替换标记g" class="headerlink" title="全面替换标记g"></a>全面替换标记g</h5><p>使用后缀 /g 标记会替换每一行中的所有匹配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;s&#x2F;book&#x2F;books&#x2F;g&#39; file</span><br></pre></td></tr></table></figure>

<p>当需要从第N处匹配开始替换时，可以使用 /Ng：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo sksksksksksk | sed &#39;s&#x2F;sk&#x2F;SK&#x2F;2g&#39;</span><br><span class="line">skSKSKSKSKSK</span><br><span class="line"></span><br><span class="line">echo sksksksksksk | sed &#39;s&#x2F;sk&#x2F;SK&#x2F;3g&#39;</span><br><span class="line">skskSKSKSKSK</span><br><span class="line"></span><br><span class="line">echo sksksksksksk | sed &#39;s&#x2F;sk&#x2F;SK&#x2F;4g&#39;</span><br><span class="line">skskskSKSKSK</span><br></pre></td></tr></table></figure>

<h5 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h5><p>以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定界符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;s:test:TEXT:g&#39;</span><br><span class="line">sed &#39;s|test|TEXT|g&#39;</span><br></pre></td></tr></table></figure>

<p>定界符出现在样式内部时，需要进行转义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;s&#x2F;\&#x2F;bin&#x2F;\&#x2F;usr\&#x2F;local\&#x2F;bin&#x2F;g&#39;</span><br></pre></td></tr></table></figure>

<h5 id="删除操作：d命令"><a href="#删除操作：d命令" class="headerlink" title="删除操作：d命令"></a>删除操作：d命令</h5><p>删除空白行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;&#x2F;^$&#x2F;d&#39; file</span><br></pre></td></tr></table></figure>

<p>删除文件的第2行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;2d&#39; file</span><br></pre></td></tr></table></figure>

<p>删除文件的第2行到末尾所有行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;2,$d&#39; file</span><br></pre></td></tr></table></figure>

<p>删除文件最后一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;$d&#39; file</span><br></pre></td></tr></table></figure>

<p>删除文件中所有开头是test的行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;&#x2F;^test&#x2F;&#39;d file</span><br></pre></td></tr></table></figure>

<h5 id="已匹配字符串标记-amp"><a href="#已匹配字符串标记-amp" class="headerlink" title="已匹配字符串标记&amp;"></a>已匹配字符串标记&amp;</h5><p>正则表达式 \w+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo this is a test line | sed &#39;s&#x2F;\w\+&#x2F;[&amp;]&#x2F;g&#39;</span><br><span class="line">[this] [is] [a] [test] [line]</span><br></pre></td></tr></table></figure>

<p>所有以192.168.0.1开头的行都会被替换成它自已加localhost：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;s&#x2F;^192.168.0.1&#x2F;&amp;localhost&#x2F;&#39; file</span><br><span class="line">192.168.0.1localhost</span><br></pre></td></tr></table></figure>

<h5 id="子串匹配标记-1"><a href="#子串匹配标记-1" class="headerlink" title="子串匹配标记\1"></a>子串匹配标记\1</h5><p>匹配给定样式的其中一部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo this is digit 7 in a number | sed &#39;s&#x2F;digit \([0-9]\)&#x2F;\1&#x2F;&#39;</span><br><span class="line">this is 7 in a number</span><br></pre></td></tr></table></figure>

<p>命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 <strong>\1</strong>，依此类推匹配到的第二个结果就是 <strong>\2</strong>，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo aaa BBB | sed &#39;s&#x2F;\([a-z]\+\) \([A-Z]\+\)&#x2F;\2 \1&#x2F;&#39;</span><br><span class="line">BBB aaa</span><br></pre></td></tr></table></figure>

<p>love被标记为1，所有loveable会被替换成lovers，并打印出来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;s&#x2F;\(love\)able&#x2F;\1rs&#x2F;p&#39; file</span><br></pre></td></tr></table></figure>

<h5 id="组合多个表达式"><a href="#组合多个表达式" class="headerlink" title="组合多个表达式"></a>组合多个表达式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;表达式&#39; | sed &#39;表达式&#39;</span><br><span class="line"></span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line">sed &#39;表达式; 表达式&#39;</span><br></pre></td></tr></table></figure>

<h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test&#x3D;hello</span><br><span class="line">echo hello WORLD | sed &quot;s&#x2F;$test&#x2F;HELLO&quot;</span><br><span class="line">HELLO WORLD</span><br></pre></td></tr></table></figure>

<h5 id="选定行的范围：-（逗号）"><a href="#选定行的范围：-（逗号）" class="headerlink" title="选定行的范围：,（逗号）"></a>选定行的范围：,（逗号）</h5><p>所有在模板test和check所确定的范围内的行都被打印：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;&#x2F;test&#x2F;,&#x2F;check&#x2F;p&#39; file</span><br></pre></td></tr></table></figure>

<p>打印从第5行开始到第一个包含以test开始的行之间的所有行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;5,&#x2F;^test&#x2F;p&#39; file</span><br></pre></td></tr></table></figure>

<p>对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;&#x2F;test&#x2F;,&#x2F;west&#x2F;s&#x2F;$&#x2F;aaa bbb&#x2F;&#39; file</span><br></pre></td></tr></table></figure>

<h5 id="多点编辑：e命令"><a href="#多点编辑：e命令" class="headerlink" title="多点编辑：e命令"></a>多点编辑：e命令</h5><p>-e选项允许在同一行里执行多条命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -e &#39;1,5d&#39; -e &#39;s&#x2F;test&#x2F;check&#x2F;&#39; file</span><br></pre></td></tr></table></figure>

<p>上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</p>
<p>和 -e 等价的命令是 –expression：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed --expression&#x3D;&#39;s&#x2F;test&#x2F;check&#x2F;&#39; --expression&#x3D;&#39;&#x2F;love&#x2F;d&#39; file</span><br></pre></td></tr></table></figure>

<h5 id="从文件读入：r命令"><a href="#从文件读入：r命令" class="headerlink" title="从文件读入：r命令"></a>从文件读入：r命令</h5><p>file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;&#x2F;test&#x2F;r file&#39; filename</span><br></pre></td></tr></table></figure>

<h5 id="写入文件：w命令"><a href="#写入文件：w命令" class="headerlink" title="写入文件：w命令"></a>写入文件：w命令</h5><p>在example中所有包含test的行都被写入file里：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;&#x2F;test&#x2F;w file&#39; example</span><br></pre></td></tr></table></figure>

<h5 id="追加（行下）：a-命令"><a href="#追加（行下）：a-命令" class="headerlink" title="追加（行下）：a\命令"></a>追加（行下）：a\命令</h5><p>将 this is a test line 追加到 以test 开头的行后面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;&#x2F;^test&#x2F;a\this is a test line&#39; file</span><br></pre></td></tr></table></figure>

<p>在 test.conf 文件第2行之后插入 this is a test line：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;2a\this is a test line&#39; test.conf</span><br></pre></td></tr></table></figure>

<h5 id="插入（行上）：i-命令"><a href="#插入（行上）：i-命令" class="headerlink" title="插入（行上）：i\命令"></a>插入（行上）：i\命令</h5><p>将 this is a test line 追加到以test开头的行前面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;&#x2F;^test&#x2F;i\this is a test line&#39; file</span><br></pre></td></tr></table></figure>

<p>在test.conf文件第5行之前插入this is a test line：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;5i\this is a test line&#39; test.conf</span><br></pre></td></tr></table></figure>

<h5 id="下一个：n命令"><a href="#下一个：n命令" class="headerlink" title="下一个：n命令"></a>下一个：n命令</h5><p>如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;&#x2F;test&#x2F;&#123; n; s&#x2F;aa&#x2F;bb&#x2F;; &#125;&#39; file</span><br></pre></td></tr></table></figure>

<h5 id="变形：y命令"><a href="#变形：y命令" class="headerlink" title="变形：y命令"></a>变形：y命令</h5><p>把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;1,10y&#x2F;abcde&#x2F;ABCDE&#x2F;&#39; file</span><br></pre></td></tr></table></figure>

<h5 id="退出：q命令"><a href="#退出：q命令" class="headerlink" title="退出：q命令"></a>退出：q命令</h5><p>打印完第10行后，退出sed</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;10q&#39; file</span><br></pre></td></tr></table></figure>

<h5 id="保持和获取：h命令和G命令"><a href="#保持和获取：h命令和G命令" class="headerlink" title="保持和获取：h命令和G命令"></a>保持和获取：h命令和G命令</h5><p>在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -e &#39;&#x2F;test&#x2F;h&#39; -e &#39;$G&#39; file</span><br></pre></td></tr></table></figure>

<p>在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。</p>
<h5 id="保持和互换：h命令和x命令"><a href="#保持和互换：h命令和x命令" class="headerlink" title="保持和互换：h命令和x命令"></a>保持和互换：h命令和x命令</h5><p>互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -e &#39;&#x2F;test&#x2F;h&#39; -e &#39;&#x2F;check&#x2F;x&#39; file</span><br></pre></td></tr></table></figure>

<h5 id="脚本scriptfile"><a href="#脚本scriptfile" class="headerlink" title="脚本scriptfile"></a>脚本scriptfile</h5><p>sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed [options] -f scriptfile file(s)</span><br></pre></td></tr></table></figure>

<h5 id="打印奇数行或偶数行"><a href="#打印奇数行或偶数行" class="headerlink" title="打印奇数行或偶数行"></a>打印奇数行或偶数行</h5><p>方法1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;p;n&#39; test.txt  #奇数行</span><br><span class="line">sed -n &#39;n;p&#39; test.txt  #偶数行</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;1~2p&#39; test.txt  #奇数行</span><br><span class="line">sed -n &#39;2~2p&#39; test.txt  #偶数行</span><br></pre></td></tr></table></figure>

<h5 id="打印匹配字符串的下一行"><a href="#打印匹配字符串的下一行" class="headerlink" title="打印匹配字符串的下一行"></a>打印匹配字符串的下一行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -A 1 SCC URFILE</span><br><span class="line">sed -n &#39;&#x2F;SCC&#x2F;&#123;n;p&#125;&#39; URFILE</span><br><span class="line">awk &#39;&#x2F;SCC&#x2F;&#123;getline; print&#125;&#39; URFILE</span><br></pre></td></tr></table></figure>

<h3 id="别名alias命令"><a href="#别名alias命令" class="headerlink" title="别名alias命令"></a>别名alias命令</h3><p><strong>alias命令</strong>用来设置指令的别名。我们可以使用该命令可以将一些较长的命令进行简化。使用alias时，用户必须使用单引号<code>&#39;&#39;</code>将原来的命令引起来，防止特殊字符导致错误。</p>
<p>alias命令的作用只局限于该次登入的操作。若要每次登入都能够使用这些命令别名，则可将相应的alias命令存放到bash的初始化文件<code>/etc/bashrc</code>中。</p>
<h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-9"><a href="#选项-9" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p：打印已经设置的命令别名。</span><br></pre></td></tr></table></figure>

<h4 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h4><p>命令别名设置：定义命令别名，格式为“命令别名=‘实际命令’”。</p>
<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><p><strong>alias 的基本使用方法为：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias 新的命令&#x3D;&#39;原命令 -选项&#x2F;参数&#39;</span><br></pre></td></tr></table></figure>

<p>例如：<code>alias l=‘ls -lsh&#39;</code>将重新定义ls命令，现在只需输入l就可以列目录了。直接输入 alias 命令会列出当前系统中所有已经定义的命令别名。</p>
<p>要删除一个别名，可以使用 <span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC91bmFsaWFz">unalias<i class="fa fa-external-link-alt"></i></span> 命令，如 unalias l。</p>
<p><strong>查看系统已经设置的别名：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias -p</span><br><span class="line">alias cp&#x3D;&#39;cp -i&#39;</span><br><span class="line">alias l.&#x3D;&#39;ls -d .* --color&#x3D;tty&#39;</span><br><span class="line">alias ll&#x3D;&#39;ls -l --color&#x3D;tty&#39;</span><br><span class="line">alias ls&#x3D;&#39;ls --color&#x3D;tty&#39;</span><br><span class="line">alias mv&#x3D;&#39;mv -i&#39;</span><br><span class="line">alias rm&#x3D;&#39;rm -i&#39;</span><br><span class="line">alias which&#x3D;&#39;alias | &#x2F;usr&#x2F;bin&#x2F;which --tty-only --read-alias --show-dot --show-tilde&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux如何提示你，在使用这些命令时候，提醒你小心呢？</span><br><span class="line">#查看系统别名</span><br><span class="line">alias</span><br><span class="line">默认别名</span><br><span class="line">alias cp&#x3D;&#39;cp -i&#39;</span><br><span class="line">alias egrep&#x3D;&#39;egrep --color&#x3D;auto&#39;</span><br><span class="line">alias fgrep&#x3D;&#39;fgrep --color&#x3D;auto&#39;</span><br><span class="line">alias grep&#x3D;&#39;grep --color&#x3D;auto&#39;</span><br><span class="line">alias l.&#x3D;&#39;ls -d .* --color&#x3D;auto&#39;</span><br><span class="line">alias ll&#x3D;&#39;ls -l --color&#x3D;auto&#39;</span><br><span class="line">alias ls&#x3D;&#39;ls --color&#x3D;auto&#39;</span><br><span class="line">alias mv&#x3D;&#39;mv -i&#39;</span><br><span class="line">alias rm&#x3D;&#39;rm -i&#39;</span><br><span class="line">alias which&#x3D;&#39;alias | &#x2F;usr&#x2F;bin&#x2F;which --tty-only --read-alias --show-dot --show-tilde&#39;</span><br><span class="line"></span><br><span class="line">别名作用是：</span><br><span class="line"></span><br><span class="line">我们在linux中使用cp时候相当于执行了cp -i</span><br><span class="line">-i：删除已有文件或目录之前先询问用户；</span><br><span class="line"></span><br><span class="line">#别名用比较危险的操作,防止你犯错 </span><br></pre></td></tr></table></figure>

<p>为rm设置别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#让系统显示 do not use rm</span><br><span class="line">echo do not use rm</span><br><span class="line">#设置rm别名</span><br><span class="line">alias rm&#x3D;&#39;echo do not use rm&#39;</span><br><span class="line">#设置别名永久生效,写入到&#x2F;etc&#x2F;profile(针对登录用户的合同，设置环境变量)</span><br><span class="line">vim &#x2F;etc&#x2F;profile #编辑文件</span><br><span class="line">G　　快速到达最后一行</span><br><span class="line">o　　当前行下一行，创建一个新行，进入编辑模式</span><br><span class="line">source &#x2F;etc&#x2F;profile #读取文件（合同生效）</span><br><span class="line">---------------</span><br><span class="line">#取消别名</span><br><span class="line">unalias rm</span><br></pre></td></tr></table></figure>

<h3 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h3><p><strong>which命令</strong>用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。which指令会在环境变量$PATH设置的目录里查找符合条件的文件。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p>
<h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-10"><a href="#选项-10" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n&lt;文件名长度&gt;：制定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名；</span><br><span class="line">-p&lt;文件名长度&gt;：与-n参数相同，但此处的&lt;文件名长度&gt;包含了文件的路径；</span><br><span class="line">-w：指定输出时栏位的宽度；</span><br><span class="line">-V：显示版本信息。</span><br></pre></td></tr></table></figure>

<h4 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h4><p>指令名：指令名列表。</p>
<h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><p>查找文件、显示命令路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# which pwd</span><br><span class="line">&#x2F;bin&#x2F;pwd</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#  which adduser</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;adduser</span><br></pre></td></tr></table></figure>

<p>说明：which是根据使用者所配置的 PATH 变量内的目录去搜寻可运行档的！所以，不同的 PATH 配置内容所找到的命令当然不一样的！</p>
<h3 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a><code>scp</code>命令</h3><p><strong>scp命令</strong>用于在Linux下进行远程拷贝文件的命令，和它类似的命令有<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9jcA==">cp<i class="fa fa-external-link-alt"></i></span>，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9yZWFk">read<i class="fa fa-external-link-alt"></i></span> only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9yc3luYw==">rsync<i class="fa fa-external-link-alt"></i></span>就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>
<h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-11"><a href="#选项-11" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1：使用ssh协议版本1；</span><br><span class="line">-2：使用ssh协议版本2；</span><br><span class="line">-4：使用ipv4；</span><br><span class="line">-6：使用ipv6；</span><br><span class="line">-B：以批处理模式运行；</span><br><span class="line">-C：使用压缩；</span><br><span class="line">-F：指定ssh配置文件；</span><br><span class="line">-l：指定宽带限制；</span><br><span class="line">-o：指定使用的ssh选项；</span><br><span class="line">-P：指定远程主机的端口号；</span><br><span class="line">-p：保留文件的最后修改时间，最后访问时间和权限模式；</span><br><span class="line">-q：不显示复制进度；</span><br><span class="line">-r：以递归方式复制。</span><br></pre></td></tr></table></figure>

<h4 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h4><ul>
<li>源文件：指定要复制的源文件。</li>
<li>目标文件：目标文件。格式为<code>user@host：filename</code>（文件名为目标文件的名称）。</li>
</ul>
<h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><p>从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>
<p><strong>从远处复制文件到本地目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp root@10.10.10.10:&#x2F;opt&#x2F;soft&#x2F;nginx-0.5.38.tar.gz &#x2F;opt&#x2F;soft&#x2F;</span><br></pre></td></tr></table></figure>

<p>从10.10.10.10机器上的<code>/opt/soft/</code>的目录中下载nginx-0.5.38.tar.gz 文件到本地<code>/opt/soft/</code>目录中。</p>
<p><strong>从远处复制到本地</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r root@10.10.10.10:&#x2F;opt&#x2F;soft&#x2F;mongodb &#x2F;opt&#x2F;soft&#x2F;</span><br></pre></td></tr></table></figure>

<p>从10.10.10.10机器上的<code>/opt/soft/</code>中下载mongodb目录到本地的<code>/opt/soft/</code>目录来。</p>
<p><strong>上传本地文件到远程机器指定目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp &#x2F;opt&#x2F;soft&#x2F;nginx-0.5.38.tar.gz root@10.10.10.10:&#x2F;opt&#x2F;soft&#x2F;scptest</span><br></pre></td></tr></table></figure>

<p>复制本地<code>/opt/soft/</code>目录下的文件nginx-0.5.38.tar.gz到远程机器10.10.10.10的<code>opt/soft/scptest</code>目录。</p>
<p><strong>上传本地目录到远程机器指定目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;opt&#x2F;soft&#x2F;mongodb root@10.10.10.10:&#x2F;opt&#x2F;soft&#x2F;scptest</span><br></pre></td></tr></table></figure>

<p>上传本地目录<code>/opt/soft/mongodb</code>到远程机器10.10.10.10上<code>/opt/soft/scptest</code>的目录中去。</p>
<h3 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a><code>du</code>命令</h3><p><strong>du命令</strong>也是查看使用空间的，但是与<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9kZg==">df<i class="fa fa-external-link-alt"></i></span>命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的。</p>
<h4 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du [选项][文件]</span><br></pre></td></tr></table></figure>

<h4 id="选项-12"><a href="#选项-12" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a或-all 显示目录中个别文件的大小。</span><br><span class="line">-b或-bytes 显示目录或文件大小时，以byte为单位。</span><br><span class="line">-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</span><br><span class="line">-k或--kilobytes 以KB(1024bytes)为单位输出。</span><br><span class="line">-m或--megabytes 以MB为单位输出。</span><br><span class="line">-s或--summarize 仅显示总计，只列出最后加总的值。</span><br><span class="line">-h或--human-readable 以K，M，G为单位，提高信息的可读性。</span><br><span class="line">-x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</span><br><span class="line">-L&lt;符号链接&gt;或--dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。</span><br><span class="line">-S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。</span><br><span class="line">-X&lt;文件&gt;或--exclude-from&#x3D;&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。</span><br><span class="line">--exclude&#x3D;&lt;目录或文件&gt; 略过指定的目录或文件。</span><br><span class="line">-D或--dereference-args 显示指定符号链接的源文件大小。</span><br><span class="line">-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。</span><br><span class="line">-l或--count-links 重复计算硬件链接的文件。</span><br></pre></td></tr></table></figure>

<h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><p>显示目录或者文件所占空间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# du</span><br><span class="line">608 .&#x2F;test6</span><br><span class="line">308 .&#x2F;test4</span><br><span class="line">4 .&#x2F;scf&#x2F;lib</span><br><span class="line">4 .&#x2F;scf&#x2F;service&#x2F;deploy&#x2F;product</span><br><span class="line">4 .&#x2F;scf&#x2F;service&#x2F;deploy&#x2F;info</span><br><span class="line">12 .&#x2F;scf&#x2F;service&#x2F;deploy</span><br><span class="line">16 .&#x2F;scf&#x2F;service</span><br><span class="line">4 .&#x2F;scf&#x2F;doc</span><br><span class="line">4 .&#x2F;scf&#x2F;bin</span><br><span class="line">32 .&#x2F;scf</span><br><span class="line">8 .&#x2F;test3</span><br><span class="line">1288 .</span><br></pre></td></tr></table></figure>

<p>只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小</p>
<p>显示指定文件所占空间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# du log2012.log</span><br><span class="line">300 log2012.log</span><br></pre></td></tr></table></figure>

<p>查看指定目录的所占空间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# du scf</span><br><span class="line">4 scf&#x2F;lib</span><br><span class="line">4 scf&#x2F;service&#x2F;deploy&#x2F;product</span><br><span class="line">4 scf&#x2F;service&#x2F;deploy&#x2F;info</span><br><span class="line">12 scf&#x2F;service&#x2F;deploy</span><br><span class="line">16 scf&#x2F;service</span><br><span class="line">4 scf&#x2F;doc</span><br><span class="line">4 scf&#x2F;bin</span><br><span class="line">32 scf</span><br></pre></td></tr></table></figure>

<p>显示多个文件所占空间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# du log30.tar.gz log31.tar.gz</span><br><span class="line">4 log30.tar.gz</span><br><span class="line">4 log31.tar.gz</span><br></pre></td></tr></table></figure>

<p>只显示总和的大小:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# du -s</span><br><span class="line">1288 .</span><br><span class="line"></span><br><span class="line">[root@localhost test]# du -s scf</span><br><span class="line">32 scf</span><br><span class="line"></span><br><span class="line">[root@localhost test]# cd ..</span><br><span class="line">[root@localhost soft]# du -s test</span><br><span class="line">1288 test</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示&#x2F;home的总大小</span><br><span class="line">du -sh &#x2F;home</span><br></pre></td></tr></table></figure>

<h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h3><p><strong>top命令</strong>可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。通过top命令所提供的互动式界面，用热键可以管理。</p>
<h4 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">top(选项)</span><br></pre></td></tr></table></figure>

<h4 id="选项-13"><a href="#选项-13" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-b：以批处理模式操作；</span><br><span class="line">-c：显示完整的治命令；</span><br><span class="line">-d：屏幕刷新间隔时间；</span><br><span class="line">-I：忽略失效过程；</span><br><span class="line">-s：保密模式；</span><br><span class="line">-S：累积模式；</span><br><span class="line">-i&lt;时间&gt;：设置间隔时间；</span><br><span class="line">-u&lt;用户名&gt;：指定用户名；</span><br><span class="line">-p&lt;进程号&gt;：指定进程；</span><br><span class="line">-n&lt;次数&gt;：循环显示的次数。</span><br></pre></td></tr></table></figure>

<h4 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a>top交互命令</h4><p>在top命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了-s选项， 其中一些命令可能会被屏蔽。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h：显示帮助画面，给出一些简短的命令总结说明；</span><br><span class="line">k：终止一个进程；</span><br><span class="line">i：忽略闲置和僵死进程，这是一个开关式命令；</span><br><span class="line">q：退出程序；</span><br><span class="line">r：重新安排一个进程的优先级别；</span><br><span class="line">S：切换到累计模式；</span><br><span class="line">s：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s；</span><br><span class="line">f或者F：从当前显示中添加或者删除项目；</span><br><span class="line">o或者O：改变显示项目的顺序；</span><br><span class="line">l：切换显示平均负载和启动时间信息；</span><br><span class="line">m：切换显示内存信息；</span><br><span class="line">t：切换显示进程和CPU状态信息；</span><br><span class="line">c：切换显示命令名称和完整命令行；</span><br><span class="line">M：根据驻留内存大小进行排序；</span><br><span class="line">P：根据CPU使用百分比大小进行排序；</span><br><span class="line">T：根据时间&#x2F;累计时间进行排序；</span><br><span class="line">w：将当前设置写入~&#x2F;.toprc文件中。</span><br></pre></td></tr></table></figure>

<h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">top - 09:44:56 up 16 days, 21:23,  1 user,  load average: 9.59, 4.75, 1.92</span><br><span class="line">Tasks: 145 total,   2 running, 143 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s): 99.8%us,  0.1%sy,  0.0%ni,  0.2%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Mem:   4147888k total,  2493092k used,  1654796k free,   158188k buffers</span><br><span class="line">Swap:  5144568k total,       56k used,  5144512k free,  2013180k cached</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<ul>
<li>top - 09:44:56[当前系统时间],</li>
<li>16 days[系统已经运行了16天],</li>
<li>1 user[个用户当前登录],</li>
<li>load average: 9.59, 4.75, 1.92[系统负载，即任务队列的平均长度]</li>
<li>Tasks: 145 total[总进程数],</li>
<li>2 running[正在运行的进程数],</li>
<li>143 sleeping[睡眠的进程数],</li>
<li>0 stopped[停止的进程数],</li>
<li>0 zombie[冻结进程数],</li>
<li>Cpu(s): 99.8%us[用户空间占用CPU百分比],</li>
<li>0.1%sy[内核空间占用CPU百分比],</li>
<li>0.0%ni[用户进程空间内改变过优先级的进程占用CPU百分比],</li>
<li>0.2%id[空闲CPU百分比], 0.0%wa[等待输入输出的CPU时间百分比],</li>
<li>0.0%hi[],</li>
<li>0.0%st[],</li>
<li>Mem: 4147888k total[物理内存总量],</li>
<li>2493092k used[使用的物理内存总量],</li>
<li>1654796k free[空闲内存总量],</li>
<li>158188k buffers[用作内核缓存的内存量]</li>
<li>Swap:  5144568k total[交换区总量],</li>
<li>56k used[使用的交换区总量],</li>
<li>5144512k free[空闲交换区总量],</li>
<li><code>2013180k</code> cached[缓冲的交换区总量],</li>
</ul>
<h3 id="chattr命令"><a href="#chattr命令" class="headerlink" title="chattr命令"></a><code>chattr</code>命令</h3><p><strong><code>chattr</code>命令</strong>用来改变文件属性。这项指令可改变存放在<code>ext2</code>文件系统上的文件或目录属性，这些属性共有以下8种模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a：让文件或目录仅供附加用途；</span><br><span class="line">b：不更新文件或目录的最后存取时间；</span><br><span class="line">c：将文件或目录压缩后存放；</span><br><span class="line">d：将文件或目录排除在倾倒操作之外；</span><br><span class="line">i：不得任意更动文件或目录；</span><br><span class="line">s：保密性删除文件或目录；</span><br><span class="line">S：即时更新文件或目录；</span><br><span class="line">u：预防意外删除。</span><br></pre></td></tr></table></figure>

<h4 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chattr(选项)</span><br></pre></td></tr></table></figure>

<h4 id="选项-14"><a href="#选项-14" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-R：递归处理，将指令目录下的所有文件及子目录一并处理；</span><br><span class="line">-v&lt;版本编号&gt;：设置文件或目录版本；</span><br><span class="line">-V：显示指令执行过程；</span><br><span class="line">+&lt;属性&gt;：开启文件或目录的该项属性；</span><br><span class="line">-&lt;属性&gt;：关闭文件或目录的该项属性；</span><br><span class="line">&#x3D;&lt;属性&gt;：指定文件或目录的该项属性。</span><br></pre></td></tr></table></figure>

<h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><p>用chattr命令防止系统中某个关键文件被修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chattr +i &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>

<p>然后试一下<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9ybQ==">rm<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9tdg==">mv<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9yZW5hbWU=">rename<i class="fa fa-external-link-alt"></i></span>等命令操作于该文件，都是得到Operation not permitted的结果。</p>
<p>让某个文件只能往里面追加内容，不能删除，一些日志文件适用于这种操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chattr +a &#x2F;data1&#x2F;user_act.log</span><br></pre></td></tr></table></figure>

<p>给文件加锁，只能写入数据，无法删除文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chattr +a test.py</span><br><span class="line">chattr -a test.py</span><br></pre></td></tr></table></figure>

<h3 id="lsattr命令"><a href="#lsattr命令" class="headerlink" title="lsattr命令"></a><code>lsattr</code>命令</h3><p><strong>lsattr命令</strong>用于查看文件的第二扩展文件系统属性。</p>
<h4 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsattr(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-15"><a href="#选项-15" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-E：可显示设备属性的当前值，但这个当前值是从用户设备数据库中获得的，而不是从设备直接获得的。</span><br><span class="line">-D：显示属性的名称，属性的默认值，描述和用户是否可以修改属性值的标志。</span><br><span class="line">-R：递归的操作方式；</span><br><span class="line">-V：显示指令的版本信息；</span><br><span class="line">-a：列出目录中的所有文件，包括隐藏文件。</span><br></pre></td></tr></table></figure>

<p>lsattr经常使用的几个选项-D，-E，-R这三个选项不可以一起使用，它们是互斥的，经常使用的还有-l,-H，使用lsattr时，必须指出具体的设备名，用-l选项指出要显示设备的逻辑名称，否则要用-c，-s，-t等选项唯一的确定某个已存在的设备。</p>
<h4 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h4><p>文件：指定显示文件系统属性的文件名。</p>
<h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsattr -E -l rmt0 -H</span><br><span class="line">lsattr -EO -l rmt0</span><br></pre></td></tr></table></figure>

<p>查看文件隐藏属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsattr test.py</span><br></pre></td></tr></table></figure>

<h3 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a><code>wget</code>命令</h3><p><strong>wget命令</strong>用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>
<h4 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-16"><a href="#选项-16" class="headerlink" title="选项"></a>选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a&lt;日志文件&gt;：在指定的日志文件中记录资料的执行过程；</span><br><span class="line">-A&lt;后缀名&gt;：指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔；</span><br><span class="line">-b：进行后台的方式运行wget；</span><br><span class="line">-B&lt;连接地址&gt;：设置参考的连接地址的基地地址；</span><br><span class="line">-c：继续执行上次终端的任务；</span><br><span class="line">-C&lt;标志&gt;：设置服务器数据块功能标志on为激活，off为关闭，默认值为on；</span><br><span class="line">-d：调试模式运行指令；</span><br><span class="line">-D&lt;域名列表&gt;：设置顺着的域名列表，域名之间用“，”分隔；</span><br><span class="line">-e&lt;指令&gt;：作为文件“.wgetrc”中的一部分执行指定的指令；</span><br><span class="line">-h：显示指令帮助信息；</span><br><span class="line">-i&lt;文件&gt;：从指定文件获取要下载的URL地址；</span><br><span class="line">-l&lt;目录列表&gt;：设置顺着的目录列表，多个目录用“，”分隔；</span><br><span class="line">-L：仅顺着关联的连接；</span><br><span class="line">-r：递归下载方式；</span><br><span class="line">-nc：文件存在时，下载文件不覆盖原有文件；</span><br><span class="line">-nv：下载时只显示更新和出错信息，不显示指令的详细执行过程；</span><br><span class="line">-q：不显示指令执行过程；</span><br><span class="line">-nh：不查询主机名称；</span><br><span class="line">-v：显示详细执行过程；</span><br><span class="line">-V：显示版本信息；</span><br><span class="line">--passive-ftp：使用被动模式PASV连接FTP服务器；</span><br><span class="line">--follow-ftp：从HTML文件中下载FTP连接文件。</span><br></pre></td></tr></table></figure>

<h4 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h4><p>URL：下载指定的URL地址。</p>
<h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><p><strong>使用wget下载单个文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip</span><br></pre></td></tr></table></figure>

<p>以下的例子是从网络下载一个文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。</p>
<p><strong>下载并以不同的文件名保存</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -O wordpress.zip http:&#x2F;&#x2F;www.linuxde.net&#x2F;download.aspx?id&#x3D;1080</span><br></pre></td></tr></table></figure>

<p>wget默认会以最后一个符合<code>/</code>的后面的字符来命令，对于动态链接的下载通常文件名会不正确。</p>
<p>错误：下面的例子会下载一个文件并以名称<code>download.aspx?id=1080</code>保存:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;www.linuxde.net&#x2F;download?id&#x3D;1</span><br></pre></td></tr></table></figure>

<p>即使下载的文件是zip格式，它仍然以<code>download.php?id=1080</code>命令。</p>
<p>正确：为了解决这个问题，我们可以使用参数<code>-O</code>来指定一个文件名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -O wordpress.zip http:&#x2F;&#x2F;www.linuxde.net&#x2F;download.aspx?id&#x3D;1080</span><br></pre></td></tr></table></figure>

<p><strong>wget限速下载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --limit-rate&#x3D;300k http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip</span><br></pre></td></tr></table></figure>

<p>当你执行wget的时候，它默认会占用全部可能的宽带下载。但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。</p>
<p><strong>使用wget断点续传</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip</span><br></pre></td></tr></table></figure>

<p>使用<code>wget -c</code>重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用<code>-c</code>参数。</p>
<p><strong>使用wget后台下载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -b http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip</span><br><span class="line"></span><br><span class="line">Continuing in background, pid 1840.</span><br><span class="line">Output will be written to &#96;wget-log&#39;.</span><br></pre></td></tr></table></figure>

<p>对于下载非常大的文件的时候，我们可以使用参数<code>-b</code>进行后台下载，你可以使用以下命令来察看下载进度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f wget-log</span><br></pre></td></tr></table></figure>

<p><strong>伪装代理名称下载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --user-agent&#x3D;&quot;Mozilla&#x2F;5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit&#x2F;534.16 (KHTML, like Gecko) Chrome&#x2F;10.0.648.204 Safari&#x2F;534.16&quot; http:&#x2F;&#x2F;www.linuxde.net&#x2F;testfile.zip</span><br></pre></td></tr></table></figure>

<p>有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过<code>--user-agent</code>参数伪装。</p>
<p><strong>测试下载链接</strong></p>
<p>当你打算进行定时下载，你应该在预定时间测试下载链接是否有效。我们可以增加<code>--spider</code>参数进行检查。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --spider URL</span><br></pre></td></tr></table></figure>

<p>如果下载链接正确，将会显示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spider mode enabled. Check if remote file exists.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: unspecified [text&#x2F;html]</span><br><span class="line">Remote file exists and could contain further links,</span><br><span class="line">but recursion is disabled -- not retrieving.</span><br></pre></td></tr></table></figure>

<p>这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --spider url</span><br><span class="line">Spider mode enabled. Check if remote file exists.</span><br><span class="line">HTTP request sent, awaiting response... 404 Not Found</span><br><span class="line">Remote file does not exist -- broken link!!!</span><br></pre></td></tr></table></figure>

<p>你可以在以下几种情况下使用<code>--spider</code>参数：</p>
<ul>
<li>定时下载之前进行检查</li>
<li>间隔检测网站是否可用</li>
<li>检查网站页面的死链接</li>
</ul>
<p><strong>增加重试次数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --tries&#x3D;40 URL</span><br></pre></td></tr></table></figure>

<p>如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用<code>--tries</code>增加重试次数。</p>
<p><strong>下载多个文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -i filelist.txt</span><br></pre></td></tr></table></figure>

<p>首先，保存一份下载链接文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; filelist.txt</span><br><span class="line">url1</span><br><span class="line">url2</span><br><span class="line">url3</span><br><span class="line">url4</span><br></pre></td></tr></table></figure>

<p>接着使用这个文件和参数<code>-i</code>下载。</p>
<p><strong>镜像网站</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --mirror -p --convert-links -P .&#x2F;LOCAL URL</span><br></pre></td></tr></table></figure>

<p>下载整个网站到本地。</p>
<ul>
<li><code>--miror</code>开户镜像下载。</li>
<li><code>-p</code>下载所有为了html页面显示正常的文件。</li>
<li><code>--convert-links</code>下载后，转换成本地的链接。</li>
<li><code>-P ./LOCAL</code>保存所有文件和目录到本地指定目录。</li>
</ul>
<p><strong>过滤指定格式下载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --reject&#x3D;gif ur</span><br></pre></td></tr></table></figure>

<p>下载一个网站，但你不希望下载图片，可以使用这条命令。</p>
<p><strong>把下载信息存入日志文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -o download.log URL</span><br></pre></td></tr></table></figure>

<p>不希望下载信息直接显示在终端而是在一个日志文件，可以使用。</p>
<p><strong>限制总下载文件大小</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -Q5m -i filelist.txt</span><br></pre></td></tr></table></figure>

<p>当你想要下载的文件超过5M而退出下载，你可以使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。</p>
<p><strong>下载指定格式文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -r -A.pdf url</span><br></pre></td></tr></table></figure>

<p>可以在以下情况使用该功能：</p>
<ul>
<li>下载一个网站的所有图片。</li>
<li>下载一个网站的所有视频。</li>
<li>下载一个网站的所有PDF文件。</li>
</ul>
<p><strong>FTP下载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget ftp-url</span><br><span class="line">wget --ftp-user&#x3D;USERNAME --ftp-password&#x3D;PASSWORD url</span><br></pre></td></tr></table></figure>

<p>可以使用wget来完成ftp链接的下载。</p>
<p>使用wget匿名ftp下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget ftp-url</span><br></pre></td></tr></table></figure>

<p>使用wget用户名和密码认证的ftp下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --ftp-user&#x3D;USERNAME --ftp-password&#x3D;PASSWORD url</span><br></pre></td></tr></table></figure>

<h3 id="开关机命令"><a href="#开关机命令" class="headerlink" title="开关机命令"></a>开关机命令</h3><h4 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h4><p><strong>reboot命令</strong>用来重新启动正在运行的Linux操作系统。</p>
<h5 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot(选项)</span><br></pre></td></tr></table></figure>

<h5 id="选项-17"><a href="#选项-17" class="headerlink" title="选项"></a>选项</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d：重新开机时不把数据写入记录文件&#x2F;var&#x2F;tmp&#x2F;wtmp。本参数具有“-n”参数效果；</span><br><span class="line">-f：强制重新开机，不调用shutdown指令的功能；</span><br><span class="line">-i：在重开机之前，先关闭所有网络界面；</span><br><span class="line">-n：重开机之前不检查是否有未结束的程序；</span><br><span class="line">-w：仅做测试，并不真正将系统重新开机，只会把重开机的数据写入&#x2F;var&#x2F;log目录下的wtmp记录文件。</span><br></pre></td></tr></table></figure>

<h5 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot        &#x2F;&#x2F;重开机。</span><br><span class="line">reboot -w     &#x2F;&#x2F;做个重开机的模拟（只有纪录并不会真的重开机）。</span><br></pre></td></tr></table></figure>

<h4 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a><code>poweroff</code></h4><p><strong><code>poweroff</code>命令</strong>用来关闭计算机操作系统并且切断系统电源。</p>
<h5 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poweroff(选项)</span><br></pre></td></tr></table></figure>

<h5 id="选项-18"><a href="#选项-18" class="headerlink" title="选项"></a>选项</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n：关闭操作系统时不执行sync操作；</span><br><span class="line">-w：不真正关闭操作系统，仅在日志文件“&#x2F;var&#x2F;log&#x2F;wtmp”中；</span><br><span class="line">-d：关闭操作系统时，不将操作写入日志文件“&#x2F;var&#x2F;log&#x2F;wtmp”中添加相应的记录；</span><br><span class="line">-f：强制关闭操作系统；</span><br><span class="line">-i：关闭操作系统之前关闭所有的网络接口；</span><br><span class="line">-h：关闭操作系统之前将系统中所有的硬件设置为备用模式。</span><br></pre></td></tr></table></figure>

<h5 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h5><p>如果确认系统中已经没有用户存在且所有数据都已保存，需要立即关闭系统，可以使用poweroff命令。</p>
<p>使用poweroff立即关闭系统：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poweroff</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>copy</tag>
        <tag>Linux</tag>
        <tag>命令行</tag>
        <tag>vim</tag>
        <tag>more</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统基础优化及常用命令</title>
    <url>/c268e74b.html</url>
    <content><![CDATA[<p>Linux的网络功能相当强悍，一时之间我们无法了解所有的网络命令，在配置服务器基础环境时，先了解下网络参数设定命令。</p>
<ul>
<li><code>ifconfig</code>　　查询、设置网卡和<code>ip</code>等参数</li>
<li><code>ifup</code>,<code>ifdown</code>    脚本命令，更简单的方式启动关闭网络</li>
<li><code>ip</code>　　符合指令，直接修改上述功能</li>
</ul>
<a id="more"></a>

<h2 id="Linux的网络功能"><a href="#Linux的网络功能" class="headerlink" title="Linux的网络功能"></a>Linux的网络功能</h2><p>在我们刚装好<code>linux</code>的时候，需要用<code>xshell</code>进行远程连接，那就得获取<code>ip</code>地址，有时候网卡默认是没启动的，<code>Linux</code>也就拿不到<code>ip</code>地址，因此我们得手动启动网卡</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑网卡配置文件</span></span><br><span class="line">vim /etc/sysconfig/network<span class="literal">-scripts</span>/ifcfg<span class="literal">-eth0</span> </span><br><span class="line"><span class="comment">#修改配置参数</span></span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure>

<h3 id="网卡配置文件详解"><a href="#网卡配置文件详解" class="headerlink" title="网卡配置文件详解"></a>网卡配置文件详解</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网络配置文件：</span></span><br><span class="line">/etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络接口配置文件：</span></span><br><span class="line">/etc/sysconfig/network<span class="literal">-scripts</span>/ifcfg<span class="literal">-INTERFACE_NAME</span></span><br><span class="line">DEVICE=: 关联的设备名称，要与文件名的后半部“INTERFACE_NAME”保持一致; </span><br><span class="line">BOOTPROTO=&#123;<span class="keyword">static</span>|none|dhcp|bootp&#125;: 引导协议；要使用静态地址，使用<span class="keyword">static</span>或none；dhcp表示使用DHCP服务器获取地址；</span><br><span class="line">IPADDR=: IP地址</span><br><span class="line">NETMASK=：子网掩码</span><br><span class="line">GATEWAY=：设定默认网关；</span><br><span class="line">ONBOOT=：开机时是否自动激活此网络接口；</span><br><span class="line">HWADDR=： 硬件地址，要与硬件中的地址保持一致；可省；</span><br><span class="line">USERCTL=&#123;yes|no&#125;: 是否允许普通用户控制此接口；</span><br><span class="line">PEERDNS=&#123;yes|no&#125;: 是否在BOOTPROTO为dhcp时接受由DHCP服务器指定的DNS地址；</span><br></pre></td></tr></table></figure>

<h3 id="ifup-ifdown命令"><a href="#ifup-ifdown命令" class="headerlink" title="ifup,ifdown命令"></a><code>ifup</code>,<code>ifdown</code>命令</h3><p><code>ifup</code>和<code>ifdown</code>是直接连接到<code>/etc/sysconfig/network-scripts</code>目录下搜索对应的网卡文件，例如<code>ifcfg-eth0</code>然后加以设置</p>
<h4 id="ifup"><a href="#ifup" class="headerlink" title="ifup"></a><code>ifup</code></h4><p><strong><code>ifup</code>命令</strong>用于激活指定的网络接口。</p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifup(参数)</span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>网络接口：要激活的网络接口。</p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifup eth0   <span class="comment">#激活eth0</span></span><br></pre></td></tr></table></figure>

<h4 id="ifdown"><a href="#ifdown" class="headerlink" title="ifdown"></a><code>ifdown</code></h4><p><strong><code>ifdown</code>命令</strong>用于禁用指定的网络接口。</p>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifdown(参数)</span><br></pre></td></tr></table></figure>

<h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><p>网络接口：要禁用的网络接口。</p>
<h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifdown eth0  <span class="comment">#禁用eth0</span></span><br></pre></td></tr></table></figure>

<h3 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a><code>ifconfig</code>命令</h3><p><strong><code>ifconfig</code>命令</strong>被用于配置和显示Linux内核中网络接口的网络参数。用<code>ifconfig</code>命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。</p>
<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifconfig(参数)</span><br></pre></td></tr></table></figure>

<h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">add&lt;地址&gt;：设置网络设备IPv6的ip地址；</span><br><span class="line"><span class="built_in">del</span>&lt;地址&gt;：删除网络设备IPv6的IP地址；</span><br><span class="line">down：关闭指定的网络设备；</span><br><span class="line">&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;：设置网络设备的类型与硬件地址；</span><br><span class="line">io_addr&lt;I/O地址&gt;：设置网络设备的I/O地址；</span><br><span class="line">irq&lt;IRQ地址&gt;：设置网络设备的IRQ；</span><br><span class="line">media&lt;网络媒介类型&gt;：设置网络设备的媒介类型；</span><br><span class="line">mem_start&lt;内存地址&gt;：设置网络设备在主内存所占用的起始地址；</span><br><span class="line">metric&lt;数目&gt;：指定在计算数据包的转送次数时，所要加上的数目；</span><br><span class="line">mtu&lt;字节&gt;：设置网络设备的MTU；</span><br><span class="line">netmask&lt;子网掩码&gt;：设置网络设备的子网掩码；</span><br><span class="line">tunnel&lt;地址&gt;：建立IPv4与IPv6之间的隧道通信地址；</span><br><span class="line">up：启动指定的网络设备；</span><br><span class="line"><span class="literal">-broadcast</span>&lt;地址&gt;：将要送往指定地址的数据包当成广播数据包来处理；</span><br><span class="line"><span class="literal">-pointopoint</span>&lt;地址&gt;：与指定地址的网络设备建立直接连线，此模式具有保密功能；</span><br><span class="line"><span class="literal">-promisc</span>：关闭或启动指定网络设备的promiscuous模式；</span><br><span class="line">IP地址：指定网络设备的IP地址；</span><br><span class="line">网络设备：指定网络设备的名称。</span><br></pre></td></tr></table></figure>

<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p><strong>显示网络设备信息（激活状态的）：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr <span class="number">00</span>:<span class="number">16</span>:<span class="number">3</span>E:<span class="number">00</span>:<span class="number">1</span>E:<span class="number">51</span>  </span><br><span class="line">          inet addr:<span class="number">10.160</span>.<span class="number">7.81</span>  Bcast:<span class="number">10.160</span>.<span class="number">15.255</span>  Mask:<span class="number">255.255</span>.<span class="number">240.0</span></span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">61430830</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">88534</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span></span><br><span class="line">          RX bytes:<span class="number">3607197869</span> (<span class="number">3.3</span> GiB)  TX bytes:<span class="number">6115042</span> (<span class="number">5.8</span> MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">16436</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">56103</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">56103</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span></span><br><span class="line">          RX bytes:<span class="number">5079451</span> (<span class="number">4.8</span> MiB)  TX bytes:<span class="number">5079451</span> (<span class="number">4.8</span> MiB)</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>**<code>eth0</code>**表示第一块网卡，其中<code>HWaddr</code>表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是<code>00:16:3E:00:1E:51</code>。</p>
<p>**<code>inet addr</code>**用来表示网卡的<code>IP</code>地址，此网卡的<code>IP</code>地址是<code>10.160.7.81</code>，广播地址<code>Bcast:10.160.15.255</code>，掩码地址<code>Mask:255.255.240.0</code>。</p>
<p><strong>lo</strong>是表示主机的回环地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 <a href="http://man.linuxde.net/httpd"><code>httpd</code></a>服务器的指定到回环地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。</p>
<ul>
<li>第一行：连接类型：<code>Ethernet</code>（以太网）<code>HWaddr</code>（硬件<code>mac</code>地址）。</li>
<li>第二行：网卡的<code>IP</code>地址、子网、掩码。</li>
<li>第三行：<code>UP</code>（代表网卡开启状态）<code>RUNNING</code>（代表网卡的网线被接上）<code>MULTICAST</code>（支持组播）<code>MTU:1500</code>（最大传输单元）：<code>1500字节</code>。</li>
<li>第四、五行：接收、发送数据包情况统计。</li>
<li>第七行：接收、发送数据字节数统计信息。</li>
</ul>
<p><strong>启动关闭指定网卡：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 up</span><br><span class="line">ifconfig eth0 down</span><br></pre></td></tr></table></figure>

<p><code>ifconfig eth0 up</code>为启动网卡<code>eth0</code>，<code>ifconfig eth0 down</code>为关闭网卡<code>eth0</code>。<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9zc2g=">ssh<i class="fa fa-external-link-alt"></i></span>登陆<code>linux</code>服务器操作要小心，关闭了就不能开启了，除非你有多网卡。</p>
<p><strong>为网卡配置和删除<code>IPv6</code>地址：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 add <span class="number">33</span>ffe:<span class="number">3240</span>:<span class="number">800</span>:<span class="number">1005</span>::<span class="number">2</span>/<span class="number">64</span>    <span class="comment">#为网卡eth0配置IPv6地址</span></span><br><span class="line">ifconfig eth0 <span class="built_in">del</span> <span class="number">33</span>ffe:<span class="number">3240</span>:<span class="number">800</span>:<span class="number">1005</span>::<span class="number">2</span>/<span class="number">64</span>    <span class="comment">#为网卡eth0删除IPv6地址</span></span><br></pre></td></tr></table></figure>

<p><strong>用<code>ifconfig</code>修改MAC地址：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 hw ether <span class="number">00</span>:AA:BB:CC:dd:EE</span><br></pre></td></tr></table></figure>

<p><strong>配置<code>IP</code>地址：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ifconfig eth0 192.168.2.10</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255</span></span><br></pre></td></tr></table></figure>

<p><strong>启用和关闭<code>arp</code>协议：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 arp    <span class="comment">#开启网卡eth0 的arp协议</span></span><br><span class="line">ifconfig eth0 <span class="literal">-arp</span>   <span class="comment">#关闭网卡eth0 的arp协议</span></span><br></pre></td></tr></table></figure>

<p><strong>设置最大传输单元：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 mtu <span class="number">1500</span>    <span class="comment">#设置能通过的最大数据包大小为 1500 bytes</span></span><br></pre></td></tr></table></figure>

<h3 id="ip命令"><a href="#ip命令" class="headerlink" title="ip命令"></a><code>ip</code>命令</h3><p><code>ip</code>是一个命令，不是<code>TCP/IP</code>那个<code>ip</code>，这个<code>ip</code>命令是结合了<code>ifconfig</code>和<code>route</code>两个命令的功能。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ip addr show <span class="comment">#查看ip信息</span></span><br><span class="line"><span class="comment">#查看系统版本信息</span></span><br><span class="line"><span class="built_in">cat</span> /etc/redhat<span class="literal">-release</span> </span><br><span class="line">CentOS Linux release <span class="number">7.4</span>.<span class="number">1708</span> (Core) </span><br><span class="line"><span class="comment">#查看内核版本号</span></span><br><span class="line">uname <span class="literal">-r</span></span><br><span class="line"><span class="number">3.10</span>.<span class="number">0</span><span class="literal">-693</span>.el7.x86_64</span><br><span class="line"><span class="comment">#查看系统多少位</span></span><br><span class="line">uname <span class="literal">-m</span></span><br><span class="line">x86_64</span><br><span class="line"><span class="comment">#查看内核所有信息</span></span><br><span class="line">uname <span class="literal">-a</span></span><br></pre></td></tr></table></figure>

<h2 id="用户管理与文件权限篇"><a href="#用户管理与文件权限篇" class="headerlink" title="用户管理与文件权限篇"></a>用户管理与文件权限篇</h2><p>现代操作系统一般属于多用户的操作系统，也就是说，同一台机器可以为多个用户建立账户，一般这些用户都是为普通用户，这些普通用户能同时登录这台计算机，计算机对这些用户分配一定的资源。普通用户在所分配到的资源内进行各自的操作，相互之间不受影响。但是这些普通用户的权限是有限制的，且用户太多的话，管理就不便，从而引入<code>root</code>用户。此用户是唯一的，且拥有系统的所有权限。<code>root</code>用户所在的组称为<code>root</code>组。“组”是具有相似权限的多个用户的集合。</p>
<p><strong><code>root</code>的权利</strong></p>
<p><code>Linux</code>系统的特性就是可以满足多个用户，同时工作，因此<code>Linux</code>系统必须具备很好的安全性。在安装<code>RHEL7</code>时设置的<code>root</code>管理员密码，这个<code>root</code>管理员就是所有<code>UNIX</code>系统中的超级用户，它拥有最高的系统所有权，能够管理系统的各项功能，如添加/删除用户，启动/关闭进程，开启/禁用硬件设备等等。因此“能力越大，责任越大”，<code>root</code>权限必须很好的掌握，否则一个错误的命令可能会摧毁整个系统。</p>
<p><strong><code>root</code>为什么叫<code>root</code>？</strong></p>
<p>在<code>Linux</code>系统中，用户也有自己的<code>UID</code>身份账号且唯一<br>系统管理员<code>UID</code>为0<br>系统用户<code>UID</code>为1~999    <code>Linux</code>安装的服务程序都会创建独有的用户负责运行。<br>普通用户<code>UID</code>从1000开始：由管理员创建</p>
<p><strong>用户组<code>GID</code></strong></p>
<p>为了方便管理属于同一组的用户，<code>Linux</code> 系统中还引入了用户组的概念。通过使用用 户组号码(<code>GID</code>，<code>Group IDentification</code>)，我们可以把多个用户加入到同一个组中，从而方 便为组中的用户统一规划权限或指定任务。假设有一个公司中有多个部门，每个部门中又 有很多员工。如果只想让员工访问本部门内的资源，则可以针对部门而非具体的员工来设 置权限。例如，可以通过对技术部门设置权限，使得只有技术部门的员工可以访问公司的 数据库信息等。</p>
<p><code>Linux</code>管理员在创建用户时，将自动创建一个与其同名的用户组，这个用户组只有该用户一个人</p>
<p><strong><code>Linux/unix</code>是一个多用户、多任务的操作系统。</strong></p>
<p>**<code>root</code>**：默认在<code>Unix/linux</code>操作系统中拥有最高的管理权限。可以理解为<code>qq</code>群的群主</p>
<p><strong>普通用户</strong>：是管理员或者具备管理权限的用户所创建的，只能读、看，不能增、删、改。</p>
<h3 id="创建普通用户"><a href="#创建普通用户" class="headerlink" title="创建普通用户"></a>创建普通用户</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加用户</span></span><br><span class="line">useradd test </span><br><span class="line"><span class="comment">#设置密码       </span></span><br><span class="line">passwd redhat</span><br><span class="line"><span class="comment"># root用户可以修改其他所有人的密码，且不需要验证</span></span><br></pre></td></tr></table></figure>

<h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a><code>useradd</code></h4><p><strong><code>useradd</code>命令</strong>用于<code>Linux</code>中创建的新的系统用户。<code>useradd</code>可用来建立用户帐号。帐号建好之后，再用<code>passwd</code>设定帐号的密码．而可用<code>userdel</code>删除帐号。使用<code>useradd</code>指令所建立的帐号，实际上是保存在<code>/etc/passwd</code>文本文件中。</p>
<p>在<code>Slackware</code>中，<code>adduser</code>指令是个<code>script</code>程序，利用交谈的方式取得输入的用户帐号资料，然后再交由真正建立帐号的<code>useradd</code>命令建立新用户，如此可方便管理员建立用户帐号。在<code>Red Hat Linux</code>中，**<code>adduser</code>命令**则是<code>useradd</code>命令的符号连接，两者实际上是同一个指令。</p>
<h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">useradd(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-c</span>&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中；</span><br><span class="line"><span class="literal">-d</span>&lt;登入目录&gt;：指定用户登入时的启始目录；</span><br><span class="line"><span class="literal">-D</span>：变更预设值；</span><br><span class="line"><span class="literal">-e</span>&lt;有效期限&gt;：指定帐号的有效期限；</span><br><span class="line"><span class="operator">-f</span>&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号；</span><br><span class="line"><span class="literal">-g</span>&lt;群组&gt;：指定用户所属的群组；</span><br><span class="line"><span class="literal">-G</span>&lt;群组&gt;：指定用户所属的附加群组；</span><br><span class="line"><span class="literal">-m</span>：自动建立用户的登入目录；</span><br><span class="line"><span class="literal">-M</span>：不要自动建立用户的登入目录；</span><br><span class="line"><span class="literal">-n</span>：取消建立以用户名称为名的群组；</span><br><span class="line"><span class="literal">-r</span>：建立系统帐号；</span><br><span class="line"><span class="literal">-s</span>&lt;shell&gt;：指定用户登入后所使用的shell；</span><br><span class="line"><span class="literal">-u</span>&lt;uid&gt;：指定用户id。</span><br></pre></td></tr></table></figure>

<h5 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h5><p>用户名：要创建的用户名。</p>
<h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><p>新建用户加入组：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">useradd –g sales jack –G company,employees    //<span class="literal">-g</span>：加入主要组、<span class="literal">-G</span>：加入次要组</span><br></pre></td></tr></table></figure>

<p>建立一个新用户账户，并设置ID：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">useradd caojh <span class="literal">-u</span> <span class="number">544</span></span><br></pre></td></tr></table></figure>

<p>需要说明的是，设定<code>ID</code>值时尽量要大于500，以免冲突。因为<code>Linux</code>安装后会建立一些特殊用户，一般0到499之间的值留给<code>bin</code>、<code>mail</code>这样的系统账号。</p>
<h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a><code>passwd</code></h4><p><strong><code>passwd</code>命令</strong>用于设置用户的认证信息，包括用户密码、密码过期时间等。系统管理者则能用它管理系统用户的密码。只有管理者可以指定用户名称，一般用户只能变更自己的密码。</p>
<h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">passwd(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-d</span>：删除密码，仅有系统管理者才能使用；</span><br><span class="line"><span class="operator">-f</span>：强制执行；</span><br><span class="line"><span class="literal">-k</span>：设置只有在密码过期失效后，方能更新；</span><br><span class="line"><span class="literal">-l</span>：锁住密码；</span><br><span class="line"><span class="literal">-s</span>：列出密码的相关信息，仅有系统管理者才能使用；</span><br><span class="line"><span class="literal">-u</span>：解开已上锁的帐号。</span><br></pre></td></tr></table></figure>

<h5 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h5><p>用户名：需要设置密码的用户名。</p>
<h5 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h5><p>与用户、组账户信息相关的文件</p>
<p>存放用户信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/etc/shadow</span><br></pre></td></tr></table></figure>

<p>存放组信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/etc/<span class="built_in">group</span></span><br><span class="line">/etc/gshadow</span><br></pre></td></tr></table></figure>

<p>用户信息文件分析（每项用<code>:</code>隔开）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">例如：jack:X:<span class="number">503</span>:<span class="number">504</span>:::/home/jack/:/bin/bash</span><br><span class="line">jack　　//用户名</span><br><span class="line">X　　//口令、密码</span><br><span class="line"><span class="number">503</span>　　//用户id（<span class="number">0</span>代表root、普通新建用户从<span class="number">500</span>开始）</span><br><span class="line"><span class="number">504</span>　　//所在组</span><br><span class="line">:　　//描述</span><br><span class="line">/home/jack/　　//用户主目录</span><br><span class="line">/bin/bash　　//用户缺省Shell</span><br></pre></td></tr></table></figure>

<p>组信息文件分析</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">例如：jack:<span class="variable">$</span>!<span class="variable">$</span>:???:<span class="number">13801</span>:<span class="number">0</span>:<span class="number">99999</span>:<span class="number">7</span>:*:*:</span><br><span class="line">jack　　//组名</span><br><span class="line"><span class="variable">$</span>!<span class="variable">$</span>　　//被加密的口令</span><br><span class="line"><span class="number">13801</span>　　//创建日期与今天相隔的天数</span><br><span class="line"><span class="number">0</span>　　//口令最短位数</span><br><span class="line"><span class="number">99999</span>　　//用户口令</span><br><span class="line"><span class="number">7</span>　　//到<span class="number">7</span>天时提醒</span><br><span class="line">*　　//禁用天数</span><br><span class="line">*　　//过期天数</span><br></pre></td></tr></table></figure>

<h5 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h5><p>如果是普通用户执行<code>passwd</code>只能修改自己的密码。如果新建用户后，要为新用户创建密码，则用<code>passwd</code>用户名，注意要以<code>root</code>用户的权限来创建。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># passwd linuxde    //更改或创建linuxde用户的密码；</span></span><br><span class="line">Changing password <span class="keyword">for</span> user linuxde.</span><br><span class="line">New UNIX password:          //请输入新密码；</span><br><span class="line">Retype new UNIX password:   //再输入一次；</span><br><span class="line">passwd: all authentication tokens updated successfully. //成功；</span><br></pre></td></tr></table></figure>

<p>普通用户如果想更改自己的密码，直接运行<code>passwd</code>即可，比如当前操作的用户是<code>linuxde</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">linuxde</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> passwd</span><br><span class="line">Changing password <span class="keyword">for</span> user linuxde. //更改linuxde用户的密码；</span><br><span class="line">(current) UNIX password:   //请输入当前密码；</span><br><span class="line">New UNIX password:         //请输入新密码；</span><br><span class="line">Retype new UNIX password:  //确认新密码；</span><br><span class="line">passwd: all authentication tokens updated successfully. //更改成功；</span><br></pre></td></tr></table></figure>

<p>比如我们让某个用户不能修改密码，可以用<code>-l</code>选项来锁定：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># passwd -l linuxde    //锁定用户linuxde不能更改密码；</span></span><br><span class="line">Locking password <span class="keyword">for</span> user linuxde.</span><br><span class="line">passwd: Success           //锁定成功；</span><br><span class="line"></span><br><span class="line">[<span class="type">linuxde</span>@<span class="type">localhost</span> ~]<span class="comment"># su linuxde   //通过su切换到linuxde用户；</span></span><br><span class="line">[<span class="type">linuxde</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> passwd      //linuxde来更改密码；</span><br><span class="line">Changing password <span class="keyword">for</span> user linuxde.</span><br><span class="line">Changing password <span class="keyword">for</span> linuxde</span><br><span class="line">(current) UNIX password:          //输入linuxde的当前密码；</span><br><span class="line">passwd: Authentication token manipulation error     //失败，不能更改密码；</span><br></pre></td></tr></table></figure>

<p>再来一例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># passwd -d linuxde  //清除linuxde用户密码；</span></span><br><span class="line">Removing password <span class="keyword">for</span> user linuxde.</span><br><span class="line">passwd: Success                         //清除成功；</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># passwd -S linuxde    //查询linuxde用户密码状态；</span></span><br><span class="line">Empty password.                         //空密码，也就是没有密码；</span><br></pre></td></tr></table></figure>

<p>注意：当我们清除一个用户的密码时，登录时就无需密码，这一点要加以注意。</p>
<h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># su命令可以切换用户身份的需求，</span></span><br><span class="line">su - username</span><br><span class="line"></span><br><span class="line"><span class="comment"># su命令中间的-号很重要，意味着完全切换到新的用户，即环境变量信息也变更为新用户的信息</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先看下当前用户（我是谁）</span></span><br><span class="line">whoami</span><br><span class="line"><span class="comment">#切换用户</span></span><br><span class="line">su - oldboy</span><br><span class="line"><span class="comment">#退出用户登录</span></span><br><span class="line">logout</span><br><span class="line">ctrl + d</span><br></pre></td></tr></table></figure>

<ul>
<li>一般情况下，在生产环境避免直接用<code>root</code>用户，除非有特殊系统维护需求，使用完立刻退回普通用户</li>
<li>非交互式设置密码(<code>echo &quot;redhat&quot;|passwd --stdin 123456 &amp;&amp; history -c</code>)</li>
</ul>
<blockquote>
<p>Tip:<br>1.超级用户<code>root</code>切换普通用户无需密码,例如“群主”想踢谁就踢谁<br>2.普通用户切换<code>root</code>，需要输入密码<br>3.普通用户权限较小，只能基本查看信息<br>4.<code>$</code>符号是普通用户命令提示符，#是超级管理员的提示符</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">tony</span>-<span class="type">PC</span>:~]<span class="comment">#</span></span><br><span class="line">root是当前用户，tony<span class="literal">-PC</span>是主机名，~代表当前路径，也是家目录</span><br></pre></td></tr></table></figure>

<h4 id="groupadd命令"><a href="#groupadd命令" class="headerlink" title="groupadd命令"></a><code>groupadd</code>命令</h4><p><code>group</code>命令用于创建用户组，为了更加高效的指派系统中各个用户的权限，在工作中常常添加几个用户到一个组里面，这样可以针对一类用户安排权限。<br>例如超哥以前在公司里，就负责添加<code>openLDAP</code>用户管理，偶尔台湾，美国的同事去上海协作，我就得给他们添加到it部门组里面，以至于他们有对服务器操作的权限。<br><code>groupadd it_dep</code></p>
<p><strong><code>groupadd</code>命令</strong>用于创建一个新的工作组，新工作组的信息将被添加到系统文件中。</p>
<h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">groupadd(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-g</span>：指定新建工作组的id；</span><br><span class="line"><span class="literal">-r</span>：创建系统工作组，系统工作组的组ID小于<span class="number">500</span>；</span><br><span class="line"><span class="literal">-K</span>：覆盖配置文件“/ect/login.defs”；</span><br><span class="line"><span class="literal">-o</span>：允许添加组ID号不唯一的工作组。</span><br></pre></td></tr></table></figure>

<h5 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h5><p>组名：指定新建工作组的组名。</p>
<h5 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h5><p>建立一个新组，并设置组<code>ID</code>加入系统：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">groupadd <span class="literal">-g</span> <span class="number">344</span> linuxde</span><br></pre></td></tr></table></figure>

<p>此时在<code>/etc/passwd</code>文件中产生一个组<code>ID</code>（<code>GID</code>）是344的项目。</p>
<h3 id="userdel删除用户"><a href="#userdel删除用户" class="headerlink" title="userdel删除用户"></a><code>userdel</code>删除用户</h3><p><strong><code>userdel</code>命令</strong>用于删除给定的用户，以及与用户相关的文件。若不加选项，则仅删除用户帐号，而不删除相关文件。</p>
<h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">userdel(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="operator">-f</span>：强制删除用户，即使用户当前已登录；</span><br><span class="line"><span class="literal">-r</span>：删除用户的同时，删除与用户相关的所有文件(家目录)。</span><br></pre></td></tr></table></figure>

<h4 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h4><p>用户名：要删除的用户名。</p>
<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><p><code>userdel</code>命令很简单，比如我们现在有个用户<code>linuxde</code>，其家目录位于<code>/var</code>目录中，现在我们来删除这个用户：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">userdel linuxde       //删除用户linuxde，但不删除其家目录及文件；</span><br><span class="line">userdel <span class="literal">-r</span> linuxde    //删除用户linuxde，其家目录及文件一并删除；</span><br></pre></td></tr></table></figure>

<p>请不要轻易用<code>-r</code>选项；他会删除用户的同时删除用户所有的文件和目录，切记如果用户目录下有重要的文件，在删除前请备份。</p>
<p>其实也有最简单的办法，但这种办法有点不安全，也就是直接在<code>/etc/passwd</code>中删除您想要删除用户的记录；但最好不要这样做，<code>/etc/passwd</code>是极为重要的文件，可能您一不小心会操作失误。</p>
<h3 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a><code>sudo</code>命令</h3><p><strong><code>sudo</code>命令</strong>用来以其他身份来执行命令，预设的身份为<code>root</code>。在<code>/etc/sudoers</code>中设置了可执行<code>sudo</code>指令的用户。若其未经授权的用户企图使用<code>sudo</code>，则会发出警告的邮件给管理员。用户使用<code>sudo</code>时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。</p>
<h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-4"><a href="#选项-4" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-b</span>：在后台执行指令；</span><br><span class="line"><span class="literal">-h</span>：显示帮助；</span><br><span class="line"><span class="literal">-H</span>：将HOME环境变量设为新身份的HOME环境变量；</span><br><span class="line"><span class="literal">-k</span>：结束密码的有效期限，也就是下次再执行sudo时便需要输入密码；。</span><br><span class="line"><span class="literal">-l</span>：列出目前用户可执行与无法执行的指令；</span><br><span class="line"><span class="literal">-p</span>：改变询问密码的提示符号；</span><br><span class="line"><span class="literal">-s</span>&lt;shell&gt;：执行指定的shell；</span><br><span class="line"><span class="literal">-u</span>&lt;用户&gt;：以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份；</span><br><span class="line"><span class="literal">-v</span>：延长密码有效期限<span class="number">5</span>分钟；</span><br><span class="line"><span class="literal">-V</span> ：显示版本信息。</span><br></pre></td></tr></table></figure>

<h4 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h4><p>指令：需要运行的指令和对应的参数。</p>
<h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><p>配置<code>sudo</code>必须通过编辑<code>/etc/sudoers</code>文件，而且只有超级用户才可以修改它，还必须使用<code>visudo</code>编辑。之所以使用<code>visudo</code>有两个原因，一是它能够防止两个用户同时修改它；二是它也能进行有限的语法检查。所以，即使只有你一个超级用户，你也最好用<code>visudo</code>来检查一下语法。</p>
<p><code>visudo</code>默认的是在<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC92aQ==">vi<i class="fa fa-external-link-alt"></i></span>里打开配置文件，用vi来修改文件。我们可以在编译时修改这个默认项。<code>visudo</code>不会擅自保存带有语法错误的配置文件，它会提示你出现的问题，并询问该如何处理，就像：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sudoers file: syntax error, line <span class="number">22</span> &lt;&lt;</span><br></pre></td></tr></table></figure>

<p>此时我们有三种选择：键入“<kbd>e</kbd>”是重新编辑，键入“<kbd>x</kbd>”是不保存退出，键入“<kbd>Q</kbd>”是退出并保存。如果真选择<kbd>Q</kbd>，那么<code>sudo</code>将不会再运行，直到错误被纠正。</p>
<p>现在，我们一起来看一下神秘的配置文件，学一下如何编写它。让我们从一个简单的例子开始：让用户<code>Foobar</code>可以通过<code>sudo</code>执行所有<code>root</code>可执行的命令。以<code>root</code>身份用<code>visudo</code>打开配置文件，可以看到类似下面几行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Runas alias specification</span></span><br><span class="line"><span class="comment"># User privilege specificationroot    ALL=(ALL)ALL</span></span><br></pre></td></tr></table></figure>

<p>我们一看就明白个差不多了，<code>root</code>有所有权限，只要仿照现有<code>root</code>的例子就行，我们在下面加一行（最好用<kbd>tab</kbd>作为空白）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">foobar ALL=(ALL)    ALL</span><br></pre></td></tr></table></figure>

<p>保存退出后，切换到<code>foobar</code>用户，我们用它的身份执行命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">foobar</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> <span class="built_in">ls</span> /root</span><br><span class="line"><span class="built_in">ls</span>: /root: 权限不够</span><br><span class="line"></span><br><span class="line">[<span class="type">foobar</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> sudo <span class="built_in">ls</span> /root</span><br><span class="line">PassWord:</span><br><span class="line">anaconda<span class="literal">-ks</span>.cfg Desktop install.log install.log.syslog</span><br></pre></td></tr></table></figure>

<p>好了，我们限制一下<code>foobar</code>的权利，不让他为所欲为。比如我们只想让他像<code>root</code>那样使用ls和<code>ifconfig</code>，把那一行改为：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">foobar localhost=    /sbin/ifconfig,   /bin/<span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>再来执行命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">foobar</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> sudo head <span class="literal">-5</span> /etc/shadow</span><br><span class="line">Password:</span><br><span class="line">Sorry, user foobar is not allowed to execute <span class="string">&#x27;/usr/bin/head -5 /etc/shadow&#x27;</span> as root on localhost.localdomain.</span><br><span class="line"></span><br><span class="line">[<span class="type">foobar</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> sudo /sbin/ifconfigeth0      Linkencap:Ethernet HWaddr <span class="number">00</span>:<span class="number">14</span>:<span class="number">85</span>:EC:E9:<span class="number">9</span>B...</span><br></pre></td></tr></table></figure>

<p>现在让我们来看一下那三个<code>ALL</code>到底是什么意思。第一个<code>ALL</code>是指网络中的主机，我们后面把它改成了主机名，它指明<code>foobar</code>可以在此主机上执行后面的命令。第二个括号里的<code>ALL</code>是指目标用户，也就是以谁的身份去执行命令。最后一个<code>ALL</code>当然就是指命令名了。例如，我们想让<code>foobar</code>用户在<code>linux</code>主机上以<code>jimmy</code>或<code>rene</code>的身份执行<code>kill</code>命令，这样编写配置文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">foobar    linux=(jimmy,rene)    /bin/<span class="built_in">kill</span></span><br></pre></td></tr></table></figure>

<p>但这还有个问题，<code>foobar</code>到底以<code>jimmy</code>还是<code>rene</code>的身份执行？这时我们应该想到了<code>sudo -u</code>了，它正是用在这种时候。 <code>foobar</code>可以使用<code>sudo -u jimmy kill PID</code>或者<code>sudo -u rene kill PID</code>，但这样挺麻烦，其实我们可以不必每次加<code>-u</code>，把<code>rene</code>或<code>jimmy</code>设为默认的目标用户即可。再在上面加一行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Defaults:foobar    runas_default=rene</span><br></pre></td></tr></table></figure>

<p><code>Defaults</code>后面如果有冒号，是对后面用户的默认，如果没有，则是对所有用户的默认。就像配置文件中自带的一行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Defaults    env_reset</span><br></pre></td></tr></table></figure>

<p>另一个问题是，很多时候，我们本来就登录了，每次使用<code>sudo</code>还要输入密码就显得烦琐了。我们可不可以不再输入密码呢？当然可以，我们这样修改配置文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">foobar localhost=NOPASSWD:     /bin/<span class="built_in">cat</span>, /bin/<span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>再来<code>sudo</code>一下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">foobar</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> sudo <span class="built_in">ls</span> /rootanaconda<span class="literal">-ks</span>.cfg Desktop install.log</span><br><span class="line">install.log.syslog</span><br></pre></td></tr></table></figure>

<p>当然，你也可以说“某些命令用户<code>foobar</code>不可以运行”，通过使用!操作符，但这不是一个好主意。因为，用!操作符来从<code>ALL</code>中“剔出”一些命令一般是没什么效果的，一个用户完全可以把那个命令拷贝到别的地方，换一个名字后再来运行。</p>
<p><strong>日志与安全</strong></p>
<p><code>sudo</code>为安全考虑得很周到，不仅可以记录日志，还能在有必要时向系统管理员报告。但是，<code>sudo</code>的日志功能不是自动的，必须由管理员开启。这样来做：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">touch /var/log/sudo</span><br><span class="line">vi /etc/syslog.conf</span><br></pre></td></tr></table></figure>

<p>在<code>syslog.conf</code>最后面加一行（必须用<code>tab</code>分割开）并保存：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">local2.debug                    /var/log/sudo</span><br></pre></td></tr></table></figure>

<p>重启日志守候进程，</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ps</span> aux grep syslogd</span><br></pre></td></tr></table></figure>

<p>把得到的<code>syslogd</code>进程的<code>PID</code>（输出的第二列是<code>PID</code>）填入下面：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> –HUP PID</span><br></pre></td></tr></table></figure>

<p>这样，<code>sudo</code>就可以写日志了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">foobar</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> sudo <span class="built_in">ls</span> /rootanaconda<span class="literal">-ks</span>.cfg</span><br><span class="line">Desktop install.log</span><br><span class="line">install.log.syslog</span><br><span class="line"><span class="variable">$cat</span> /var/log/sudoJul <span class="number">28</span> <span class="number">22</span>:<span class="number">52</span>:<span class="number">54</span> localhost sudo:   foobar :</span><br><span class="line">TTY=pts/<span class="number">1</span> ; <span class="built_in">pwd</span>=/home/foobar ; USER=root ; command=/bin/<span class="built_in">ls</span> /root</span><br></pre></td></tr></table></figure>

<p>不过，有一个小小的“缺陷”，<code>sudo</code>记录日志并不是很忠实：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">foobar</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> sudo <span class="built_in">cat</span> /etc/shadow &gt; /dev/null</span><br><span class="line"><span class="built_in">cat</span> /var/log/sudo...Jul <span class="number">28</span> <span class="number">23</span>:<span class="number">10</span>:<span class="number">24</span> localhost sudo:   foobar : TTY=pts/<span class="number">1</span> ;</span><br><span class="line"><span class="built_in">PWD</span>=/home/foobar ; USER=root ; COMMAND=/bin/<span class="built_in">cat</span> /etc/shadow</span><br></pre></td></tr></table></figure>

<p>重定向没有被记录在案！为什么？因为在命令运行之前，shell把重定向的工作做完了，<code>sudo</code>根本就没看到重定向。这也有个好处，下面的手段不会得逞：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">foobar</span>@<span class="type">localhost</span> ~]<span class="variable">$</span> sudo <span class="built_in">ls</span> /root &gt; /etc/shadowbash: /etc/shadow: 权限不够</span><br></pre></td></tr></table></figure>

<p><code>sudo</code> 有自己的方式来保护安全。以<code>root</code>的身份执行<code>sudo-V</code>，查看一下<code>sudo</code>的设置。因为考虑到安全问题，一部分环境变量并没有传递给<code>sudo</code>后面的命令，或者被检查后再传递的，比如：<code>PATH</code>，<code>HOME</code>，<code>SHELL</code>等。当然，你也可以通过<code>sudoers</code>来配置这些环境变量。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用普通账户访问</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> /root</span><br><span class="line"><span class="built_in">ls</span>: 无法打开目录<span class="string">&#x27;/root&#x27;</span>: 权限不够</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sudo命令访问</span></span><br><span class="line"><span class="variable">$</span> sudo <span class="built_in">ls</span> /root</span><br><span class="line">[<span class="type">sudo</span>] test 的密码：</span><br><span class="line">test 不在 sudoers 文件中。此事将被报告。</span><br></pre></td></tr></table></figure>

<h2 id="文件与目录权限"><a href="#文件与目录权限" class="headerlink" title="文件与目录权限"></a>文件与目录权限</h2><p>Linux权限的目的是（保护账户的资料）</p>
<p>Linux权限主要依据三种身份来决定：</p>
<ul>
<li><code>user/owner</code> 文件使用者,文件属于哪个用户</li>
<li><code>group</code> 属组,文件属于哪个组</li>
<li><code>others</code> 既不是<code>user</code>，也不再<code>group</code>，就是<code>other</code>，其他人</li>
</ul>
<h3 id="什么是权限"><a href="#什么是权限" class="headerlink" title="什么是权限"></a>什么是权限</h3><p>在<code>Linux</code>中，每个文件都有所属的所有者，和所有组，并且规定了文件的所有者，所有组以及其他人对文件的，可读，可写，可执行等权限。</p>
<p>对于目录的权限来说，可读是读取目录文件列表，可写是表示在目录内新增，修改，删除文件。可执行表示可以进入目录</p>
<h3 id="Linux权限的观察"><a href="#Linux权限的观察" class="headerlink" title="Linux权限的观察"></a>Linux权限的观察</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@tony<span class="literal">-PC</span>:/media/tony/数据<span class="comment"># ls -l</span></span><br><span class="line">总用量 <span class="number">4</span></span><br><span class="line"></span><br><span class="line">drwxrwxrwx <span class="number">1</span> tony tony    <span class="number">0</span> <span class="number">8</span>月   <span class="number">6</span> <span class="number">10</span>:<span class="number">16</span> aaa</span><br><span class="line">d：				文件夹</span><br><span class="line">rwxrwxrwx：		权限</span><br><span class="line"><span class="number">1</span>：				文件链接数</span><br><span class="line">tony：			属主(所属用户)</span><br><span class="line">tony：			属组(所属用户组)</span><br><span class="line"><span class="number">0</span>：				文件(夹)大小</span><br><span class="line"><span class="number">8</span>月   <span class="number">6</span> <span class="number">10</span>:<span class="number">16</span>：  修改日期时间</span><br><span class="line">aaa： 			文件(夹)名</span><br><span class="line"></span><br><span class="line"><span class="literal">-rwxrwxrwx</span> <span class="number">1</span> tony tony    <span class="number">0</span> <span class="number">7</span>月  <span class="number">10</span> <span class="number">15</span>:<span class="number">30</span> aaa.txt</span><br><span class="line">-：				文件</span><br><span class="line">rwxrwxrwx：		权限</span><br><span class="line"><span class="number">1</span>：				文件链接数</span><br><span class="line">tony：			属主(所属用户)</span><br><span class="line">tony：			属组(所属用户组)</span><br><span class="line"><span class="number">0</span>：				文件(夹)大小</span><br><span class="line"><span class="number">7</span>月  <span class="number">10</span> <span class="number">15</span>:<span class="number">30</span>：  修改日期时间</span><br><span class="line">aaa.txt：		文件(夹)名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解读上述信息：</p>
<ol>
<li><p>文件类型</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">-    一般文件</span><br><span class="line">d    文件夹</span><br><span class="line">l    软连接（快捷方式）</span><br><span class="line">b    块设备，存储媒体文件为主</span><br><span class="line">c    代表键盘,鼠标等设备</span><br></pre></td></tr></table></figure>
</li>
<li><p>权限，第一个字母为文件类型，后续9个字母，每3个一组，是三种身份的权限</p>
</li>
<li><p>文件链接数</p>
</li>
<li><p>文件拥有者-属主</p>
</li>
<li><p>文件拥有组-属组</p>
</li>
<li><p>文件大小</p>
</li>
<li><p>最后一次被修改的时间日期</p>
</li>
<li><p>文件名 </p>
</li>
</ol>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>我们已知三种身份权限（属主，属组，其他人），每种身份都有<code>rwx</code>的三种权限，系统还提供了数字计算权限。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">r</span>    read			<span class="number">4</span>			可读，可以用<span class="built_in">cat</span>等命令查看</span><br><span class="line">w    <span class="built_in">write</span>			<span class="number">2</span>			写入，可以编辑或者删除这个文件</span><br><span class="line">x    executable		<span class="number">1</span>			可以执行</span><br></pre></td></tr></table></figure>

<p>每种身份最低是0分，最高是r+w+x 7分</p>
<p>因此三种身份，最高权限是777，最低是000</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root tony    <span class="number">0</span> <span class="number">8</span>月   <span class="number">7</span> <span class="number">11</span>:<span class="number">28</span> bbb.txt</span><br><span class="line">因此可知bbb.txt的权限是</span><br><span class="line">属主是<span class="number">6</span> <span class="built_in">r</span>+w(<span class="number">4</span>+<span class="number">2</span>)</span><br><span class="line">属组是<span class="number">4</span>　<span class="built_in">r</span>(<span class="number">4</span>+<span class="number">2</span>)</span><br><span class="line">其他人是<span class="number">4</span>　<span class="built_in">r</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>



<h3 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h3><p><strong>权限这里测试不要用root实验！！！！root太牛逼了</strong></p>
<p><strong>请用普通用户执行！！！！！测试文件、文件夹权限操作，请用普通用户！</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">r</span>    可以对此目录执行<span class="built_in">ls</span>列出所有文件</span><br><span class="line">w    可以在这个目录创建文件</span><br><span class="line">x    可以<span class="built_in">cd</span>进入这个目录，或者查看详细信息</span><br></pre></td></tr></table></figure>

<p>权限与数字转化</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190807104957.png"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@tony<span class="literal">-PC</span>:/media/tony/数据<span class="comment"># ls -l /var/log/mysql/error.log</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>----- <span class="number">1</span> mysql adm <span class="number">97207</span> <span class="number">8</span>月   <span class="number">7</span> <span class="number">11</span>:<span class="number">02</span> /var/log/mysql/error.log</span><br><span class="line"><span class="comment"># 表示error.log文件属主为mysql，属组为adm，只有mysql用户可以读取编写这个文件，adm组的用户只能读取这个文件，其他用户没有任何权限</span></span><br></pre></td></tr></table></figure>

<h3 id="查看用户权限命令"><a href="#查看用户权限命令" class="headerlink" title="查看用户权限命令"></a>查看用户权限命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看用户所属群主</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/media/tony/数据<span class="comment"># id root</span></span><br><span class="line">uid=<span class="number">0</span>(root) gid=<span class="number">0</span>(root) 组=<span class="number">0</span>(root)</span><br></pre></td></tr></table></figure>

<h4 id="id"><a href="#id" class="headerlink" title="id"></a><code>id</code></h4><p><strong><code>id</code>命令</strong>可以显示真实有效的用户<code>ID</code>(<code>UID</code>)和组<code>ID</code>(<code>GID</code>)。<code>UID</code> 是对一个用户的单一身份标识。组<code>ID</code>（<code>GID</code>）则对应多个<code>UID</code>。<code>id</code>命令已经默认预装在大多数<code>Linux</code>系统中。要使用它，只需要在你的控制台输入<code>id</code>。不带选项输入<code>id</code>会显示如下。结果会使用活跃用户。</p>
<p>当我们想知道某个用户的<code>UID</code>和<code>GID</code>时id命令是非常有用的。一些程序可能需要<code>UID/GID</code>来运行。<code>id</code>使我们更加容易地找出用户的<code>UID</code>以<code>GID</code>而不必在<code>/etc/group</code>文件中搜寻。如往常一样，你可以在控制台输入<code>man id</code>进入id的手册页来获取更多的详情。</p>
<h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">id [-<span class="type">gGnru</span>][--<span class="type">help</span>][--<span class="type">version</span>][用户名称]</span><br></pre></td></tr></table></figure>

<h5 id="选项-5"><a href="#选项-5" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-g</span>或-<span class="literal">-group</span> 　 显示用户所属群组的ID。</span><br><span class="line"><span class="literal">-G</span>或-<span class="literal">-groups</span>   显示用户所属附加群组的ID。</span><br><span class="line"><span class="literal">-n</span>或-<span class="literal">-name</span> 　  显示用户，所属群组或附加群组的名称。</span><br><span class="line"><span class="literal">-r</span>或-<span class="literal">-real</span> 　  显示实际ID。</span><br><span class="line"><span class="literal">-u</span>或-<span class="literal">-user</span> 　  显示用户ID。</span><br><span class="line"><span class="literal">-help</span> 　       显示帮助。</span><br><span class="line"><span class="literal">-version</span> 　    显示版本信息。</span><br></pre></td></tr></table></figure>

<h5 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># id</span></span><br><span class="line">uid=<span class="number">0</span>(root) gid=<span class="number">0</span>(root) groups=<span class="number">0</span>(root),<span class="number">1</span>(bin),<span class="number">2</span>(daemon),<span class="number">3</span>(sys),<span class="number">4</span>(adm),<span class="number">6</span>(disk),<span class="number">10</span>(wheel)</span><br></pre></td></tr></table></figure>

<p>解释：用户<code>root</code>的<code>UID</code>号码 = 0，<code>GID</code>号码 = 0。用户<code>root</code>是下面组的成员：</p>
<ul>
<li><code>root</code>组<code>GID</code>号是：0</li>
<li><code>bin</code>组<code>GID</code>号是：1</li>
<li><code>daemon</code>组<code>GID</code>号是：2</li>
<li><code>sys</code>组<code>GID</code>号是：3</li>
<li><code>adm</code>组<code>GID</code>号是：4</li>
<li><code>disk</code>组<code>GID</code>号是：6</li>
<li><code>wheel</code>组<code>GID</code>号是：10</li>
</ul>
<p>打印用户名、<code>UID</code> 和该用户所属的所有组，要这么做，我们可以使用 <code>-a</code> 选项：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># id -a</span></span><br><span class="line">uid=<span class="number">0</span>(root) gid=<span class="number">0</span>(root) groups=<span class="number">0</span>(root),<span class="number">1</span>(bin),<span class="number">2</span>(daemon),<span class="number">3</span>(sys),<span class="number">4</span>(adm),<span class="number">6</span>(disk),<span class="number">10</span>(wheel)</span><br></pre></td></tr></table></figure>

<p>输出所有不同的组<code>ID</code> ，有效的，真实的和补充的，我们可以使用 <code>-G</code> 选项来实现：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># id -G</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>结果只会显示<code>GID</code>号。你可以和<code>/etc/group</code>文件比较。下面是<code>/etc/group</code>文件的示例内容：</p>
<p>只输出有效的组<code>ID</code>，通过使用 <code>-g</code> 选项来只输出有效组<code>ID</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># id -g</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>输出特定用户信息，我们可以输出特定的用户信息相关的<code>UID</code>和<code>GID</code>。只需要在<code>id</code>命令后跟上用户名：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># id www</span></span><br><span class="line">uid=<span class="number">500</span>(www) gid=<span class="number">500</span>(www) groups=<span class="number">500</span>(www)</span><br></pre></td></tr></table></figure>

<h3 id="修改文件权限属性"><a href="#修改文件权限属性" class="headerlink" title="修改文件权限属性"></a>修改文件权限属性</h3><p>普通用户只能修改自己的文件名，时间与权限（注意）<br>因此修改其他用户权限，只能用最<code>nb</code>的<code>root</code>用户</p>
<h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a><code>chown</code></h4><p><strong><code>chown</code>命令</strong>改变某个文件或目录的所有者和所属的组，该命令可以向某个用户授权，使该用户变成指定文件的所有者或者改变文件所属的组。用户可以是用户或者是用户D，用户组可以是组名或组<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9pZA==">id<i class="fa fa-external-link-alt"></i></span>。文件名可以使由空格分开的文件列表，在文件名中可以包含通配符。</p>
<p>只有文件主和超级用户才可以便用该命令。</p>
<h5 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chown(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-6"><a href="#选项-6" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-c</span>或——changes：效果类似“<span class="literal">-v</span>”参数，但仅回报更改的部分；</span><br><span class="line"><span class="operator">-f</span>或-<span class="literal">-quite</span>或——silent：不显示错误信息；</span><br><span class="line"><span class="literal">-h</span>或-<span class="literal">-no</span><span class="literal">-dereference</span>：只对符号连接的文件作修改，而不更改其他任何相关文件；</span><br><span class="line"><span class="literal">-R</span>或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</span><br><span class="line"><span class="literal">-v</span>或——version：显示指令执行过程；</span><br><span class="line">-<span class="literal">-dereference</span>：效果和“<span class="literal">-h</span>”参数相同；</span><br><span class="line">-<span class="literal">-help</span>：在线帮助；</span><br><span class="line">-<span class="literal">-reference</span>=&lt;参考文件或目录&gt;：把指定文件或目录的拥有者与所属群组全部设成和参考文件或目录的拥有者与所属群组相同；</span><br><span class="line">-<span class="literal">-version</span>：显示版本信息。</span><br></pre></td></tr></table></figure>

<h5 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h5><p>用户：组：指定所有者和所属工作组。当省略“：组”，仅改变文件所有者；<br>文件：指定要改变所有者和工作组的文件列表。支持多个文件和目标，支持shell通配符。</p>
<h5 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h5><p>将目录<code>/usr/meng</code>及其下面的所有文件、子目录的文件主改成 <code>liu</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chown <span class="literal">-R</span> liu /usr/meng</span><br></pre></td></tr></table></figure>

<p>修改<code>bbb.txt</code>文件所属用户为<code>root</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看该文件初始所属用户</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># ls -l bbb.txt</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> tony tony    <span class="number">0</span> <span class="number">8</span>月   <span class="number">7</span> <span class="number">11</span>:<span class="number">28</span> bbb.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行切换所属用户</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># chown root bbb.txt</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># ls -l bbb.txt</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root tony    <span class="number">0</span> <span class="number">8</span>月   <span class="number">7</span> <span class="number">11</span>:<span class="number">28</span> bbb.txt</span><br></pre></td></tr></table></figure>

<h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a><code>chgrp</code></h4><p><strong><code>chgrp</code>命令</strong>用来改变文件或目录所属的用户组。该命令用来改变指定文件所属的用户组。其中，组名可以是用户组的<code>id</code>，也可以是用户组的组名。文件名可以 是由空格分开的要改变属组的文件列表，也可以是由通配符描述的文件集合。如果用户不是该文件的文件主或超级用户(<code>root</code>)，则不能改变该文件的组。</p>
<p>在<code>UNIX</code>系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。您可以使用<code>chgrp</code>指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可。</p>
<h5 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chgrp(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-7"><a href="#选项-7" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-c</span>或——changes：效果类似“<span class="literal">-v</span>”参数，但仅回报更改的部分；</span><br><span class="line"><span class="operator">-f</span>或-<span class="literal">-quiet</span>或——silent：不显示错误信息；</span><br><span class="line"><span class="literal">-h</span>或-<span class="literal">-no</span><span class="literal">-dereference</span>：只对符号连接的文件作修改，而不是该其他任何相关文件；</span><br><span class="line"><span class="literal">-R</span>或——recursive：递归处理，将指令目录下的所有文件及子目录一并处理；</span><br><span class="line"><span class="literal">-v</span>或——verbose：显示指令执行过程；</span><br><span class="line">-<span class="literal">-reference</span>=&lt;参考文件或目录&gt;：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；</span><br></pre></td></tr></table></figure>

<h5 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h5><ul>
<li>组：指定新工作名称；</li>
<li>文件：指定要改变所属组的文件列表。多个文件或者目录之间使用空格隔开。</li>
</ul>
<h5 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h5><p>将<code>/usr/meng</code>及其子目录下的所有文件的用户组改为mengxin</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chgrp <span class="literal">-R</span> mengxin /usr/meng</span><br></pre></td></tr></table></figure>

<p>修改<code>bbb.txt</code>所属组为<code>root</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始所属组为tony</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># ls -l bbb.txt</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root tony <span class="number">0</span> <span class="number">8</span>月   <span class="number">7</span> <span class="number">11</span>:<span class="number">28</span> bbb.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改所属组为root</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># chgrp root bbb.txt</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># ls -l bbb.txt</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">0</span> <span class="number">8</span>月   <span class="number">7</span> <span class="number">11</span>:<span class="number">28</span> bbb.txt</span><br></pre></td></tr></table></figure>

<h3 id="修改权限的命令"><a href="#修改权限的命令" class="headerlink" title="修改权限的命令"></a>修改权限的命令</h3><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h4><p><strong><code>chmod</code>命令</strong>用来变更文件或目录的权限。在<code>UNIX</code>系统家族里，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用。用户可以使用<code>chmod</code>指令去变更文件与目录的权限，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。</p>
<p>权限范围的表示法如下：</p>
<p><code>u</code> <code>User</code>，即文件或目录的拥有者；<br><code>g</code> <code>Group</code>，即文件或目录的所属群组；<br><code>o</code> <code>Other</code>，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；<br><code>a</code> <code>All</code>，即全部的用户，包含拥有者，所属群组以及其他用户；<br><code>r</code> 读取权限，数字代号为“4”;<br><code>w</code> 写入权限，数字代号为“2”；<br><code>x</code> 执行或切换权限，数字代号为“1”；<br><code>-</code> 不具任何权限，数字代号为“0”；<br><code>s</code> 特殊功能说明：变更文件或目录的权限。</p>
<h5 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-8"><a href="#选项-8" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-c</span>或——changes：效果类似“<span class="literal">-v</span>”参数，但仅回报更改的部分；</span><br><span class="line"><span class="operator">-f</span>或-<span class="literal">-quiet</span>或——silent：不显示错误信息；</span><br><span class="line"><span class="literal">-R</span>或——recursive：递归处理，将指令目录下的所有文件及子目录一并处理；</span><br><span class="line"><span class="literal">-v</span>或——verbose：显示指令执行过程；</span><br><span class="line">-<span class="literal">-reference</span>=&lt;参考文件或目录&gt;：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；</span><br><span class="line">&lt;权限范围&gt;+&lt;权限设置&gt;：开启权限范围的文件或目录的该选项权限设置；</span><br><span class="line">&lt;权限范围&gt;-&lt;权限设置&gt;：关闭权限范围的文件或目录的该选项权限设置；</span><br><span class="line">&lt;权限范围&gt;=&lt;权限设置&gt;：指定权限范围的文件或目录的该选项权限设置；</span><br></pre></td></tr></table></figure>

<h5 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h5><p>权限模式：指定文件的权限模式；<br>文件：要改变权限的文件。</p>
<h5 id="知识扩展和实例"><a href="#知识扩展和实例" class="headerlink" title="知识扩展和实例"></a>知识扩展和实例</h5><p><code>Linux</code>用 户分为：拥有者、组群(<code>Group</code>)、其他（<code>other</code>），<code>Linux</code>系统中，预设的情況下，系统中所有的帐号与一般身份使用者，以及<code>root</code>的相关信 息， 都是记录在<code>/etc/passwd</code>文件中。每个人的密码则是记录在<code>/etc/shadow</code>文件下。 此外，所有的组群名称记录在<code>/etc/group</code>內！</p>
<p><code>linux</code>文件的用户权限的分析图</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190807120121.png"></p>
<p>例：<code>rwx　rw-　r--</code></p>
<p>r=读取属性　　//值＝4<br>w=写入属性　　//值＝2<br>x=执行属性　　//值＝1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod u+x,g+w f01　　//为文件f01设置自己可以执行，组员可以写入的权限</span><br><span class="line">chmod u=rwx,g=rw,o=<span class="built_in">r</span> f01</span><br><span class="line">chmod <span class="number">764</span> f01</span><br><span class="line">chmod a+x f01　　//对文件f01的u,g,o都设置可执行属性</span><br></pre></td></tr></table></figure>

<p>文件的属主和属组属性设置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chown user:market f01　　//把文件f01给uesr，添加到market组</span><br><span class="line">ll <span class="literal">-d</span> f1  查看目录f1的属性</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod [身份]　　 [参数] 　　[文件]</span><br><span class="line">　　　　u(user)　　 +(添加)　　</span><br><span class="line">　　　　g(<span class="built_in">group</span>)　  -(减去)</span><br><span class="line">　　　　o(other)　　=(赋值)</span><br><span class="line">　　　　a(all)</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">当前权限</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-rw</span><span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">0</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">16</span>:<span class="number">41</span> pyyu.txt</span><br><span class="line">方法<span class="number">1</span></span><br><span class="line">减去属主的写权限</span><br><span class="line">chmod u<span class="literal">-w</span> pyyu.txt</span><br><span class="line">查看权限</span><br><span class="line"><span class="literal">-r</span>-<span class="literal">-rw</span><span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">0</span> <span class="number">8</span>月  <span class="number">11</span> <span class="number">16</span>:<span class="number">41</span> pyyu.txt</span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span></span><br><span class="line">属主添加可读可写可执行权限</span><br><span class="line">chmod <span class="number">700</span> pyyu.txt</span><br><span class="line"></span><br><span class="line">属主可读可写可执行</span><br><span class="line">属组可读可执行</span><br><span class="line">其他人可读可执行</span><br><span class="line">chmod <span class="number">755</span> pyyu.txt</span><br></pre></td></tr></table></figure>

<p>修改文件名，修改文件更改日期</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> pyyu.txt chaoge.txt</span><br><span class="line"><span class="comment">#触摸，修改时间</span></span><br><span class="line">touch chaoge.txt</span><br></pre></td></tr></table></figure>

<h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><p>软连接也叫做符号链接，类似于<code>windows</code>的快捷方式。</p>
<p>常用于安装软件的快捷方式配置，如<code>python</code>，<code>nginx</code>等</p>
<h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a><code>ln</code></h4><p><strong><code>ln</code>命令</strong>用来为文件创件连接，连接类型分为硬连接和符号连接两种，默认的连接类型是硬连接。如果要创建符号连接必须使用”-s”选项。</p>
<p>注意：符号链接文件不是一个独立的文件，它的许多属性依赖于源文件，所以给符号链接文件设置存取权限是没有意义的。</p>
<h5 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ln(选项)(参数)</span><br></pre></td></tr></table></figure>

<h5 id="选项-9"><a href="#选项-9" class="headerlink" title="选项"></a>选项</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-b</span>或-<span class="literal">-backup</span>：删除，覆盖目标文件之前的备份；</span><br><span class="line"><span class="literal">-d</span>或<span class="operator">-F</span>或——directory：建立目录的硬连接；</span><br><span class="line"><span class="operator">-f</span>或——force：强行建立文件或目录的连接，不论文件或目录是否存在；</span><br><span class="line"><span class="literal">-i</span>或——interactive：覆盖既有文件之前先询问用户；</span><br><span class="line"><span class="literal">-n</span>或-<span class="literal">-no</span><span class="literal">-dereference</span>：把符号连接的目的目录视为一般文件；</span><br><span class="line"><span class="literal">-s</span>或——symbolic：对源文件建立符号连接，而非硬连接；</span><br><span class="line"><span class="literal">-S</span>&lt;字尾备份字符串&gt;或-<span class="literal">-suffix</span>=&lt;字尾备份字符串&gt;：用<span class="string">&quot;-b&quot;</span>参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，预设的备份字符串是符号“~”，用户可通过“<span class="literal">-S</span>”参数来改变它；</span><br><span class="line"><span class="literal">-v</span>或——verbose：显示指令执行过程；</span><br><span class="line"><span class="literal">-V</span>&lt;备份方式&gt;或-<span class="literal">-version</span><span class="literal">-control</span>=&lt;备份方式&gt;：用“<span class="literal">-b</span>”参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用“<span class="literal">-S</span>”参数变更，当使用“<span class="literal">-V</span>”参数&lt;备份方式&gt;指定不同备份方式时，也会产生不同字尾的备份字符串；</span><br><span class="line">-<span class="literal">-help</span>：在线帮助；</span><br><span class="line">-<span class="literal">-version</span>：显示版本信息。</span><br></pre></td></tr></table></figure>

<h5 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h5><ul>
<li>源文件：指定连接的源文件。如果使用<code>-s</code>选项创建符号连接，则“源文件”可以是文件或者目录。创建硬连接时，则“源文件”参数只能是文件；</li>
<li>目标文件：指定源文件的目标连接文件。</li>
</ul>
<h5 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h5><p>将目录<code>/usr/mengqc/mub1</code>下的文件<code>m2.c</code>链接到目录<code>/usr/liu</code>下的文件<code>a2.c</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/mengqc</span><br><span class="line">ln /mub1/m2.c /usr/liu/a2.c</span><br></pre></td></tr></table></figure>

<p>在执行<code>ln</code>命令之前，目录<code>/usr/liu</code>中不存在<code>a2.c</code>文件。执行<code>ln</code>之后，在<code>/usr/liu</code>目录中才有<code>a2.c</code>这一项，表明<code>m2.c</code>和<code>a2.c</code>链接起来（注意，二者在物理上是同一文件），利用<code>ls -l</code>命令可以看到链接数的变化。</p>
<p>在目录<code>/usr/liu</code>下建立一个符号链接文件<code>abc</code>，使它指向目录<code>/usr/mengqc/mub1</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ln <span class="literal">-s</span> /usr/mengqc/mub1 /usr/liu/abc</span><br></pre></td></tr></table></figure>

<p>执行该命令后，<code>/usr/mengqc/mub1</code>代表的路径将存放在名为<code>/usr/liu/abc</code>的文件中。</p>
<h5 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h5><p>Linux具有为一个文件起多个名字的功能，称为链接。被链接的文件可以存放在相同的目录下，但是必须有不同的文件名，而不用在硬盘上为同样的数据重复备份。另外，被链接的文件也可以有相同的文件名，但是存放在不同的目录下，这样只要对一个目录下的该文件进行修改，就可以完成对所有目录下同名链接文件的修改。对于某个文件的各链接文件，我们可以给它们指定不同的存取权限，以控制对信息的共享和增强安全性。</p>
<p>文件链接有两种形式，即硬链接和符号链接。</p>
<h6 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h6><p>建立硬链接时，在另外的目录或本目录中增加目标文件的一个目录项，这样，一个文件就登记在多个目录中。如图所示的m2.c文件就在目录mub1和liu中都建立了目录项。</p>
<p>创建硬链接后，己经存在的文件的I节点号（Inode）会被多个目录文件项使用。一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的链接数为l。</p>
<p>在默认情况下，ln命令创建硬链接。ln命令会增加链接数，<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9ybQ==">rm<i class="fa fa-external-link-alt"></i></span>命令会减少链接数。一个文件除非链接数为0，否则不会从文件系统中被物理地删除。</p>
<p>对硬链接有如下限制：</p>
<ul>
<li>不能对目录文件做硬链接。</li>
<li>不能在不同的文件系统之间做硬链接。就是说，链接文件和被链接文件必须位于同一个文件系统中。</li>
</ul>
<h5 id="符号链接"><a href="#符号链接" class="headerlink" title="符号链接"></a>符号链接</h5><p>符号链接也称为软链接，是将一个路径名链接到一个文件。这些文件是一种特别类型的文件。事实上，它只是一个文本文件（如图中的<code>abc</code>文件），其中包含它提供链接的另一个文件的路径名，如图中虚线箭头所示。另一个文件是实际包含所有数据的文件。所有读、写文件内容的命令被用于符号链接时，将沿着链接方向前进来访问实际的文件。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190807120837.png"></p>
<p>与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的I节点号；而硬链接并没有建立新文件。</p>
<p>符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。</p>
<p>用<code>ln -s</code>命令建立符号链接时，源文件最好用绝对路径名。这样可以在任何工作目录下进行符号链接。而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接。</p>
<p>符号链接保持了链接与源文件或目录之间的区别：</p>
<ul>
<li>删除源文件或目录，只删除了数据，不会删除链接。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据。</li>
<li>在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l。</li>
<li>符号链接的大小是其链接文件的路径名中的字节数。</li>
<li>当用<code>ln -s</code>命令列出文件时，可以看到符号链接名后有一个箭头指向源文件或目录，例如<code>lrwxrwxrwx … 14 jun 20 10:20 /etc/motd-&gt;/original_file</code>其中，表示“文件大小”的数字“14”恰好说明源文件名<code>original_file</code>由14个字符构成。</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ln <span class="literal">-s</span> 目标文件  软连接名</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.存在文件/tmp/test.txt</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">tmp</span>]<span class="comment"># ls -l</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root     <span class="number">10</span> <span class="number">10</span>月 <span class="number">15</span> <span class="number">21</span>:<span class="number">23</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.在/home目录中建立软连接，指向/tmp/test.txt文件</span><br><span class="line">ln <span class="literal">-s</span> /tmp/test.txt my_test</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.查看软连接信息</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">13</span> <span class="number">10</span>月 <span class="number">15</span> <span class="number">21</span>:<span class="number">35</span> my_test -&gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.通过软连接查看文件</span><br><span class="line"><span class="built_in">cat</span> my_test</span><br><span class="line"></span><br><span class="line">my_test只是/tmp/test.txt的一个别名，因此删除my_test不会影响/tmp/test.txt，但是删除了本尊，</span><br><span class="line">快捷方式就无意义不存在了</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建软连接并加入环境变量</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看环境变量</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入以上目录可以发现，这些目录中很多都是软连接</span></span><br><span class="line">如：lrwxrwxrwx <span class="number">1</span> root root <span class="number">9</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> /usr/bin/python -&gt; python2.<span class="number">7</span></span><br><span class="line">我们可以看到 /usr/bin/python软连接实际指向的是ptyhon2.<span class="number">7</span>解释器，如果把需要的软件软连接都放入/usr/bin等于自动把该软件加入到了环境变量</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 /opt/php7.2加入环境变量有两种方法</span></span><br><span class="line">第一种PATH加入该路径</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/php7.<span class="number">2</span></span><br><span class="line">第二种方法创建软连接，将软连接放入已加入环境变量的目录中</span><br><span class="line">ln <span class="literal">-s</span> /opt/php7.<span class="number">2</span>/php /usr/bin/php7.<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="PS1变量"><a href="#PS1变量" class="headerlink" title="PS1变量"></a><code>PS1</code>变量</h4><p><code>Linux</code>命令提示符由<code>PS1</code>环境变量控制</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">tony_pc</span> ~]<span class="comment"># echo $PS1</span></span><br><span class="line">[\<span class="type">u</span><span class="selector-tag">@</span>\<span class="type">h</span> \<span class="type">W</span>]\<span class="variable">$</span></span><br><span class="line"></span><br><span class="line">可以自行调整全局变量/etc/profile文件用于永久生效 PS1=<span class="string">&#x27;[\u@\h \W\t]\$&#x27;</span></span><br><span class="line">\d　　日期</span><br><span class="line">\H　　完整主机名</span><br><span class="line">\h　　主机名第一个名字</span><br><span class="line">\t　　时间<span class="number">24</span>小时制HHMMSS</span><br><span class="line">\T　　时间<span class="number">12</span>小时制</span><br><span class="line">\A　　时间<span class="number">24</span>小时制HHMM</span><br><span class="line">\u　　当前用户账号名</span><br><span class="line">\v　　BASH的版本</span><br><span class="line">\w　　完整工作目录</span><br><span class="line">\W　　利用basename取得工作目录名</span><br><span class="line">\<span class="comment">#　　下达的第几个命令</span></span><br><span class="line">\<span class="variable">$</span>　　提示字符，root为<span class="comment">#，普通用户为$</span></span><br><span class="line">PS1 &gt; 变量名</span><br><span class="line"><span class="variable">$PS1</span> &gt; 查看变量内容</span><br><span class="line">PS1=新内容 重新赋值</span><br><span class="line"></span><br><span class="line">变量赋值，查看</span><br><span class="line">name=<span class="string">&#x27;chaoge&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"></span><br><span class="line">PS1显示ip地址</span><br><span class="line">export PS1=<span class="string">&quot;[\u@\h `/sbin/ifconfig ens33 | sed -nr &#x27;s/.*inet (addr:)?(([0-9]*\.)&#123;3&#125;[0-9]*).*/\2/p&#x27;` \w]\<span class="variable">$</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="tar解压命令"><a href="#tar解压命令" class="headerlink" title="tar解压命令"></a><code>tar</code>解压命令</h3><p><strong>tar命令</strong>可以为<code>linux</code>的文件和目录创建档案。利用<code>tar</code>，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。<code>tar</code>最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用<code>tar</code>命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p>
<p>首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p>
<p>为什么要区分这两个概念呢？这源于<code>Linux</code>中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（<code>tar</code>命令），然后再用压缩程序进行压缩（<code>gzip/bzip2</code>命令）。</p>
<blockquote>
<p>注意：</p>
<p> <code>tar</code> 命令：用来压缩和解压文件。<code>tar</code>本身不具有压缩功能。他是调用压缩功能实现的。</p>
<p>如果要实现压缩可以在用<code>tar</code>打包后使用<code>gzip</code>命令进行压缩；或者直接使用<code>tar</code>选项中的<code>-z</code>或<code>-j</code>来压缩文件</p>
</blockquote>
<h4 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-10"><a href="#选项-10" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-A</span>或-<span class="literal">-catenate</span>：新增文件到以存在的备份文件；</span><br><span class="line"><span class="literal">-B</span>：设置区块大小；</span><br><span class="line"><span class="literal">-c</span>或-<span class="literal">-create</span>：建立新的备份文件；</span><br><span class="line"><span class="literal">-C</span> &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。</span><br><span class="line"><span class="literal">-d</span>：记录文件的差别；</span><br><span class="line"><span class="literal">-x</span>或-<span class="literal">-extract</span>或-<span class="literal">-get</span>：从备份文件中还原文件；</span><br><span class="line"><span class="literal">-t</span>或-<span class="literal">-list</span>：列出备份文件的内容；</span><br><span class="line"><span class="literal">-z</span>或-<span class="literal">-gzip</span>或-<span class="literal">-ungzip</span>：通过gzip指令处理备份文件；</span><br><span class="line"><span class="literal">-Z</span>或-<span class="literal">-compress</span>或-<span class="literal">-uncompress</span>：通过compress指令处理备份文件；</span><br><span class="line"><span class="operator">-f</span>&lt;备份文件&gt;或-<span class="operator">-file</span>=&lt;备份文件&gt;：指定备份文件；</span><br><span class="line"><span class="literal">-v</span>或-<span class="literal">-verbose</span>：显示指令执行过程；</span><br><span class="line"><span class="literal">-r</span>：添加文件到已经压缩的文件；</span><br><span class="line"><span class="literal">-u</span>：添加改变了和现有的文件到已经存在的压缩文件；</span><br><span class="line"><span class="literal">-j</span>：支持bzip2解压文件；</span><br><span class="line"><span class="literal">-v</span>：显示操作过程；</span><br><span class="line"><span class="literal">-l</span>：文件系统边界设置；</span><br><span class="line"><span class="literal">-k</span>：保留原有文件不覆盖；</span><br><span class="line"><span class="literal">-m</span>：保留文件不被覆盖；</span><br><span class="line"><span class="literal">-w</span>：确认压缩文件的正确性；</span><br><span class="line"><span class="literal">-p</span>或-<span class="literal">-same</span><span class="literal">-permissions</span>：用原来的文件权限还原文件；</span><br><span class="line"><span class="literal">-P</span>或-<span class="literal">-absolute</span><span class="literal">-names</span>：文件名使用绝对名称，不移除文件名称前的“/”号；</span><br><span class="line"><span class="literal">-N</span> &lt;日期格式&gt; 或 -<span class="literal">-newer</span>=&lt;日期时间&gt;：只将较指定日期更新的文件保存到备份文件里；</span><br><span class="line">-<span class="literal">-exclude</span>=&lt;范本样式&gt;：排除符合范本样式的文件。</span><br></pre></td></tr></table></figure>

<h4 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h4><p>文件或目录：指定要打包的文件或目录列表。</p>
<h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><p><strong>将文件全部打包成<code>tar</code>包</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-cvf</span> log.tar log2012.log    仅打包，不压缩！ </span><br><span class="line">tar <span class="literal">-zcvf</span> log.tar.gz log2012.log   打包后，以 gzip 压缩 </span><br><span class="line">tar <span class="literal">-jcvf</span> log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 </span><br></pre></td></tr></table></figure>

<p>在选项<code>f</code>之后的文件档名是自己取的，我们习惯上都用 <code>.tar</code> 来作为辨识。 如果加<code>z</code>选项，则以<code>.tar.gz</code>或<code>.tgz</code>来代表<code>gzip</code>压缩过的tar包；如果加<code>j</code>选项，则以<code>.tar.bz2</code>来作为<code>tar</code>包名。</p>
<p><strong>查阅上述tar包内有哪些文件</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-ztvf</span> log.tar.gz</span><br></pre></td></tr></table></figure>

<p>由于我们使用 <code>gzip</code> 压缩的<code>log.tar.gz</code>，所以要查阅<code>log.tar.gz</code>包内的文件时，就得要加上<code>z</code>这个选项了。</p>
<p><strong>将tar包解压缩</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> /opt/soft/test/log.tar.gz</span><br></pre></td></tr></table></figure>

<p>在预设的情况下，我们可以将压缩档在任何地方解开的</p>
<p><strong>只将tar内的部分文件解压出来</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> /opt/soft/test/log30.tar.gz log2013.log</span><br></pre></td></tr></table></figure>

<p>我可以透过<code>tar -ztvf</code>来查阅 <code>tar</code> 包内的文件名称，如果单只要一个文件，就可以透过这个方式来解压部分文件！</p>
<p><strong>文件备份下来，并且保存其权限</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-zcvpf</span> log31.tar.gz log2014.log log2015.log log2016.log</span><br></pre></td></tr></table></figure>

<p>这个<code>-p</code>的属性是很重要的，尤其是当您要保留原本文件的属性时。</p>
<p><strong>在文件夹当中，比某个日期新的文件才备份</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-N</span> <span class="string">&quot;2012/11/13&quot;</span> <span class="literal">-zcvf</span> log17.tar.gz test</span><br></pre></td></tr></table></figure>

<p><strong>备份文件夹内容是排除部分文件：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar -<span class="literal">-exclude</span> scf/service <span class="literal">-zcvf</span> scf.tar.gz scf/*</span><br></pre></td></tr></table></figure>

<p><strong>其实最简单的使用 tar 就只要记忆底下的方式即可：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">压　缩：tar <span class="literal">-jcv</span> <span class="operator">-f</span> filename.tar.bz2 要被压缩的文件或目录名称</span><br><span class="line">查　询：tar <span class="literal">-jtv</span> <span class="operator">-f</span> filename.tar.bz2</span><br><span class="line">解压缩：tar <span class="literal">-jxv</span> <span class="operator">-f</span> filename.tar.bz2 <span class="literal">-C</span> 欲解压缩的目录</span><br></pre></td></tr></table></figure>

<p><strong>压缩当前目录所有<code>jpg</code>结尾的文件</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tar <span class="literal">-cf</span> all_pic.tar *.jpg </span><br><span class="line"><span class="comment">#压缩当前目录所有jpg结尾的文件</span></span><br></pre></td></tr></table></figure>

<h3 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a><code>netstat</code>命令</h3><p><code>netstat</code>命令用来打印<code>Linux</code>中网络系统的状态信息，可让你得知整个<code>Linux</code>系统的网络情况。</p>
<h4 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netstat(选项)</span><br></pre></td></tr></table></figure>

<h4 id="选项-常用"><a href="#选项-常用" class="headerlink" title="选项 (常用)"></a>选项 (常用)</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-t</span>或-<span class="literal">-tcp</span>：显示TCP传输协议的连线状况；</span><br><span class="line"><span class="literal">-u</span>或-<span class="literal">-udp</span>：显示UDP传输协议的连线状况；</span><br><span class="line"><span class="literal">-n</span>或-<span class="literal">-numeric</span>：直接使用ip地址，而不通过域名服务器；</span><br><span class="line"><span class="literal">-l</span>或-<span class="literal">-listening</span>：显示监控中的服务器的Socket；</span><br><span class="line"><span class="literal">-p</span>或-<span class="literal">-programs</span>：显示正在使用Socket的程序识别码和程序名称；</span><br><span class="line"><span class="literal">-a</span>或-<span class="literal">-all</span>：显示所有连线中的Socket；</span><br></pre></td></tr></table></figure>

<h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">tony_pic</span> ~ <span class="number">10</span>:<span class="number">21</span>:<span class="number">59</span>]<span class="comment">#netstat -tunlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv<span class="literal">-Q</span> <span class="built_in">Send-Q</span> Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">111</span>             <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">1</span>/systemd           </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">22</span>              <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">814</span>/sshd            </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">111</span>                  :::*                    LISTEN      <span class="number">2703</span>/rpcbind        </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">3306</span>                 :::*                    LISTEN      <span class="number">29269</span>/mysqld        </span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">758</span>             <span class="number">0.0</span>.<span class="number">0.0</span>:*                           <span class="number">2703</span>/rpcbind        </span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">111</span>             <span class="number">0.0</span>.<span class="number">0.0</span>:*                           <span class="number">2703</span>/rpcbind        </span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> <span class="number">10.141</span>.<span class="number">32.137</span>:<span class="number">123</span>       <span class="number">0.0</span>.<span class="number">0.0</span>:*                           <span class="number">484</span>/ntpd            </span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">123</span>           <span class="number">0.0</span>.<span class="number">0.0</span>:*                           <span class="number">484</span>/ntpd            </span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">123</span>             <span class="number">0.0</span>.<span class="number">0.0</span>:*                           <span class="number">484</span>/ntpd            </span><br><span class="line">udp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">758</span>                  :::*                                <span class="number">2703</span>/rpcbind        </span><br><span class="line">udp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">111</span>                  :::*                                <span class="number">2703</span>/rpcbind        </span><br><span class="line">udp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">123</span>                  :::*                                <span class="number">484</span>/ntpd </span><br></pre></td></tr></table></figure>

<p>查看ssh的网络连接</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@tony<span class="literal">-PC</span>:/tmp/test<span class="comment"># netstat -tunlp | grep ssh</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">22</span>              <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">2592</span>/sshd           </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6010</span>          <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">5366</span>/sshd: tony@pts </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">22</span>                   :::*                    LISTEN      <span class="number">2592</span>/sshd           </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> ::<span class="number">1</span>:<span class="number">6010</span>                :::*                    LISTEN      <span class="number">5366</span>/sshd: tony@pts </span><br></pre></td></tr></table></figure>

<p>查看80端口是否开启</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@tony<span class="literal">-PC</span>:/tmp/test<span class="comment"># netstat -tunlp |grep 80</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>              <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">2607</span>/nginx: master  </span><br></pre></td></tr></table></figure>



<h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a><code>ps</code>命令</h3><p><strong><code>ps</code>命令</strong>用于报告当前系统的进程状态。可以搭配<code>kill</code>指令随时中断、删除不必要的程序。<code>ps</code>命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。</p>
<h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ps</span>(选项)</span><br></pre></td></tr></table></figure>

<h3 id="选项-11"><a href="#选项-11" class="headerlink" title="选项"></a>选项</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-a</span>：显示所有终端机下执行的程序，除了阶段作业领导者之外。</span><br><span class="line">a：显示现行终端机下的所有程序，包括其他用户的程序。</span><br><span class="line"><span class="literal">-A</span>：显示所有程序。</span><br><span class="line"><span class="literal">-c</span>：显示<span class="built_in">CLS</span>和PRI栏位。</span><br><span class="line">c：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。</span><br><span class="line"><span class="literal">-C</span>&lt;指令名称&gt;：指定执行指令的名称，并列出该指令的程序的状况。</span><br><span class="line"><span class="literal">-d</span>：显示所有程序，但不包括阶段作业领导者的程序。</span><br><span class="line"><span class="literal">-e</span>：此选项的效果和指定<span class="string">&quot;A&quot;</span>选项相同。</span><br><span class="line">e：列出程序时，显示每个程序所使用的环境变量。</span><br><span class="line"><span class="operator">-f</span>：显示UID,PPIP,C与STIME栏位。</span><br><span class="line">f：用ASCII字符显示树状结构，表达程序间的相互关系。</span><br><span class="line"><span class="literal">-g</span>&lt;群组名称&gt;：此选项的效果和指定<span class="string">&quot;-G&quot;</span>选项相同，当亦能使用阶段作业领导者的名称来指定。</span><br><span class="line">g：显示现行终端机下的所有程序，包括群组领导者的程序。</span><br><span class="line"><span class="literal">-G</span>&lt;群组识别码&gt;：列出属于该群组的程序的状况，也可使用群组名称来指定。</span><br><span class="line"><span class="built_in">h</span>：不显示标题列。</span><br><span class="line"><span class="literal">-H</span>：显示树状结构，表示程序间的相互关系。</span><br><span class="line"><span class="literal">-j</span>或j：采用工作控制的格式显示程序状况。</span><br><span class="line"><span class="literal">-l</span>或l：采用详细的格式来显示程序状况。</span><br><span class="line">L：列出栏位的相关信息。</span><br><span class="line"><span class="literal">-m</span>或m：显示所有的执行绪。</span><br><span class="line">n：以数字来表示USER和WCHAN栏位。</span><br><span class="line"><span class="literal">-N</span>：显示所有的程序，除了执行<span class="built_in">ps</span>指令终端机下的程序之外。</span><br><span class="line"><span class="literal">-p</span>&lt;程序识别码&gt;：指定程序识别码，并列出该程序的状况。</span><br><span class="line">p&lt;程序识别码&gt;：此选项的效果和指定<span class="string">&quot;-p&quot;</span>选项相同，只在列表格式方面稍有差异。</span><br><span class="line"><span class="built_in">r</span>：只列出现行终端机正在执行中的程序。</span><br><span class="line"><span class="literal">-s</span>&lt;阶段作业&gt;：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。</span><br><span class="line">s：采用程序信号的格式显示程序状况。</span><br><span class="line">S：列出程序时，包括已中断的子程序资料。</span><br><span class="line"><span class="literal">-t</span>&lt;终端机编号&gt;：指定终端机编号，并列出属于该终端机的程序的状况。</span><br><span class="line">t&lt;终端机编号&gt;：此选项的效果和指定<span class="string">&quot;-t&quot;</span>选项相同，只在列表格式方面稍有差异。</span><br><span class="line"><span class="literal">-T</span>：显示现行终端机下的所有程序。</span><br><span class="line"><span class="literal">-u</span>&lt;用户识别码&gt;：此选项的效果和指定<span class="string">&quot;-U&quot;</span>选项相同。</span><br><span class="line">u：以用户为主的格式来显示程序状况。</span><br><span class="line"><span class="literal">-U</span>&lt;用户识别码&gt;：列出属于该用户的程序的状况，也可使用用户名称来指定。</span><br><span class="line">U&lt;用户名称&gt;：列出属于该用户的程序的状况。</span><br><span class="line">v：采用虚拟内存的格式显示程序状况。</span><br><span class="line"><span class="literal">-V</span>或V：显示版本信息。</span><br><span class="line"><span class="literal">-w</span>或w：采用宽阔的格式来显示程序状况。　</span><br><span class="line">x：显示所有程序，不以终端机来区分。</span><br><span class="line">X：采用旧式的Linux i386登陆格式显示程序状况。</span><br><span class="line"><span class="literal">-y</span>：配合选项<span class="string">&quot;-l&quot;</span>使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。</span><br><span class="line">-&lt;程序识别码&gt;：此选项的效果和指定<span class="string">&quot;p&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-cols</span>&lt;每列字符数&gt;：设置每列的最大字符数。</span><br><span class="line">-<span class="literal">-columns</span>&lt;每列字符数&gt;：此选项的效果和指定<span class="string">&quot;--cols&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-cumulative</span>：此选项的效果和指定<span class="string">&quot;S&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-deselect</span>：此选项的效果和指定<span class="string">&quot;-N&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-forest</span>：此选项的效果和指定<span class="string">&quot;f&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-headers</span>：重复显示标题列。</span><br><span class="line">-<span class="literal">-help</span>：在线帮助。</span><br><span class="line">-<span class="literal">-info</span>：显示排错信息。</span><br><span class="line">-<span class="literal">-lines</span>&lt;显示列数&gt;：设置显示画面的列数。</span><br><span class="line">-<span class="literal">-no</span><span class="literal">-headers</span>：此选项的效果和指定<span class="string">&quot;h&quot;</span>选项相同，只在列表格式方面稍有差异。</span><br><span class="line">-<span class="literal">-group</span>&lt;群组名称&gt;：此选项的效果和指定<span class="string">&quot;-G&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-Group</span>&lt;群组识别码&gt;：此选项的效果和指定<span class="string">&quot;-G&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-pid</span>&lt;程序识别码&gt;：此选项的效果和指定<span class="string">&quot;-p&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-rows</span>&lt;显示列数&gt;：此选项的效果和指定<span class="string">&quot;--lines&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-sid</span>&lt;阶段作业&gt;：此选项的效果和指定<span class="string">&quot;-s&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-tty</span>&lt;终端机编号&gt;：此选项的效果和指定<span class="string">&quot;-t&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-user</span>&lt;用户名称&gt;：此选项的效果和指定<span class="string">&quot;-U&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-User</span>&lt;用户识别码&gt;：此选项的效果和指定<span class="string">&quot;-U&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-version</span>：此选项的效果和指定<span class="string">&quot;-V&quot;</span>选项相同。</span><br><span class="line">-<span class="literal">-widty</span>&lt;每列字符数&gt;：此选项的效果和指定<span class="string">&quot;-cols&quot;</span>选项相同。</span><br></pre></td></tr></table></figure>

<p>由于<code>ps</code>命令能够支持的系统类型相当的多，所以选项多的离谱！</p>
<p>示例：查询<code>python</code>的运行进程</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@tony<span class="literal">-PC</span>:/tmp/test<span class="comment"># ps -ef | grep python</span></span><br><span class="line">tony      <span class="number">5138</span>  <span class="number">4050</span>  <span class="number">0</span> <span class="number">09</span>:<span class="number">20</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /usr/bin/python3 /usr/share/system<span class="literal">-config</span><span class="literal">-printer</span>/applet.py</span><br><span class="line">tony     <span class="number">21213</span> <span class="number">21186</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">37</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /usr/bin/python3 /usr/bin/onboard <span class="literal">-e</span> -<span class="literal">-layout</span> Small</span><br><span class="line">root     <span class="number">21657</span> <span class="number">13542</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">40</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> python3 gen/test.py</span><br><span class="line">root     <span class="number">21659</span> <span class="number">10907</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">40</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep python</span><br></pre></td></tr></table></figure>

<p>关掉<code>python</code>运行的<code>gen/test.py</code>进程：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@tony<span class="literal">-PC</span>:/tmp/test<span class="comment"># kill 21657</span></span><br><span class="line"></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/test<span class="comment"># ps -ef | grep python</span></span><br><span class="line">tony      <span class="number">5138</span>  <span class="number">4050</span>  <span class="number">0</span> <span class="number">09</span>:<span class="number">20</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /usr/bin/python3 /usr/share/system<span class="literal">-config</span><span class="literal">-printer</span>/applet.py</span><br><span class="line">tony     <span class="number">21213</span> <span class="number">21186</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">37</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /usr/bin/python3 /usr/bin/onboard <span class="literal">-e</span> -<span class="literal">-layout</span> Small</span><br><span class="line">root     <span class="number">21661</span> <span class="number">10907</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">41</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep python</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a><code>kill</code>命令</h3><p><strong>kill命令</strong>用来删除执行中的程序或工作。<code>kill</code>可将指定的信息送至程序。预设的信息为<code>SIGTERM</code>(15),可将指定程序终止。若仍无法终止该程序，可使用<code>SIGKILL</code>(9)信息尝试强制删除程序。程序或工作的编号可利用<code>ps</code>指令或<code>job</code>指令查看。</p>
<h4 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span>(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-12"><a href="#选项-12" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-a</span>：当处理当前进程时，不限制命令名和进程号的对应关系；</span><br><span class="line"><span class="literal">-l</span> &lt;信息编号&gt;：若不加&lt;信息编号&gt;选项，则<span class="literal">-l</span>参数会列出全部的信息名称；</span><br><span class="line"><span class="literal">-p</span>：指定<span class="built_in">kill</span> 命令只打印相关进程的进程号，而不发送任何信号；</span><br><span class="line"><span class="literal">-s</span> &lt;信息名称或编号&gt;：指定要送出的信息；</span><br><span class="line"><span class="literal">-u</span>：指定用户。</span><br></pre></td></tr></table></figure>

<h4 id="参数-13"><a href="#参数-13" class="headerlink" title="参数"></a>参数</h4><p>进程或作业识别号：指定要删除的进程或作业。</p>
<h4 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h4><p>列出所有信号名称：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">kill</span> <span class="literal">-l</span></span><br><span class="line"> <span class="number">1</span>) SIGHUP       <span class="number">2</span>) SIGINT       <span class="number">3</span>) SIGQUIT      <span class="number">4</span>) SIGILL</span><br><span class="line"> <span class="number">5</span>) SIGTRAP      <span class="number">6</span>) SIGABRT      <span class="number">7</span>) SIGBUS       <span class="number">8</span>) SIGFPE</span><br><span class="line"> <span class="number">9</span>) SIGKILL     <span class="number">10</span>) SIGUSR1     <span class="number">11</span>) SIGSEGV     <span class="number">12</span>) SIGUSR2</span><br><span class="line"><span class="number">13</span>) SIGPIPE     <span class="number">14</span>) SIGALRM     <span class="number">15</span>) SIGTERM     <span class="number">16</span>) SIGSTKFLT</span><br><span class="line"><span class="number">17</span>) SIGCHLD     <span class="number">18</span>) SIGCONT     <span class="number">19</span>) SIGSTOP     <span class="number">20</span>) SIGTSTP</span><br><span class="line"><span class="number">21</span>) SIGTTIN     <span class="number">22</span>) SIGTTOU     <span class="number">23</span>) SIGURG      <span class="number">24</span>) SIGXCPU</span><br><span class="line"><span class="number">25</span>) SIGXFSZ     <span class="number">26</span>) SIGVTALRM   <span class="number">27</span>) SIGPROF     <span class="number">28</span>) SIGWINCH</span><br><span class="line"><span class="number">29</span>) SIGIO       <span class="number">30</span>) SIGPWR      <span class="number">31</span>) SIGSYS      <span class="number">34</span>) SIGRTMIN</span><br><span class="line"><span class="number">35</span>) SIGRTMIN+<span class="number">1</span>  <span class="number">36</span>) SIGRTMIN+<span class="number">2</span>  <span class="number">37</span>) SIGRTMIN+<span class="number">3</span>  <span class="number">38</span>) SIGRTMIN+<span class="number">4</span></span><br><span class="line"><span class="number">39</span>) SIGRTMIN+<span class="number">5</span>  <span class="number">40</span>) SIGRTMIN+<span class="number">6</span>  <span class="number">41</span>) SIGRTMIN+<span class="number">7</span>  <span class="number">42</span>) SIGRTMIN+<span class="number">8</span></span><br><span class="line"><span class="number">43</span>) SIGRTMIN+<span class="number">9</span>  <span class="number">44</span>) SIGRTMIN+<span class="number">10</span> <span class="number">45</span>) SIGRTMIN+<span class="number">11</span> <span class="number">46</span>) SIGRTMIN+<span class="number">12</span></span><br><span class="line"><span class="number">47</span>) SIGRTMIN+<span class="number">13</span> <span class="number">48</span>) SIGRTMIN+<span class="number">14</span> <span class="number">49</span>) SIGRTMIN+<span class="number">15</span> <span class="number">50</span>) SIGRTMAX<span class="literal">-14</span></span><br><span class="line"><span class="number">51</span>) SIGRTMAX<span class="literal">-13</span> <span class="number">52</span>) SIGRTMAX<span class="literal">-12</span> <span class="number">53</span>) SIGRTMAX<span class="literal">-11</span> <span class="number">54</span>) SIGRTMAX<span class="literal">-10</span></span><br><span class="line"><span class="number">55</span>) SIGRTMAX<span class="literal">-9</span>  <span class="number">56</span>) SIGRTMAX<span class="literal">-8</span>  <span class="number">57</span>) SIGRTMAX<span class="literal">-7</span>  <span class="number">58</span>) SIGRTMAX<span class="literal">-6</span></span><br><span class="line"><span class="number">59</span>) SIGRTMAX<span class="literal">-5</span>  <span class="number">60</span>) SIGRTMAX<span class="literal">-4</span>  <span class="number">61</span>) SIGRTMAX<span class="literal">-3</span>  <span class="number">62</span>) SIGRTMAX<span class="literal">-2</span></span><br><span class="line"><span class="number">63</span>) SIGRTMAX<span class="literal">-1</span>  <span class="number">64</span>) SIGRTMAX</span><br></pre></td></tr></table></figure>

<p>只有第9种信号(<code>SIGKILL</code>)才可以无条件终止进程，其他信号进程都有权利忽略，<strong>下面是常用的信号：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">HUP     <span class="number">1</span>    终端断线</span><br><span class="line">INT     <span class="number">2</span>    中断（同 Ctrl + C）</span><br><span class="line">QUIT    <span class="number">3</span>    退出（同 Ctrl + \）</span><br><span class="line">TERM   <span class="number">15</span>    终止</span><br><span class="line"><span class="built_in">KILL</span>    <span class="number">9</span>    强制终止</span><br><span class="line">CONT   <span class="number">18</span>    继续（与STOP相反， fg/bg命令）</span><br><span class="line">STOP   <span class="number">19</span>    暂停（同 Ctrl + Z）</span><br></pre></td></tr></table></figure>

<p>先用<code>ps</code>查找进程，然后用kill杀掉：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span> | grep vim</span><br><span class="line">root      <span class="number">3268</span>  <span class="number">2884</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">21</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> vim install.log</span><br><span class="line">root      <span class="number">3370</span>  <span class="number">2822</span>  <span class="number">0</span> <span class="number">16</span>:<span class="number">21</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep vim</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> <span class="number">3268</span></span><br><span class="line"><span class="built_in">kill</span> <span class="number">3268</span></span><br><span class="line"><span class="literal">-bash</span>: <span class="built_in">kill</span>: (<span class="number">3268</span>) - 没有那个进程</span><br></pre></td></tr></table></figure>

<h3 id="killall命令"><a href="#killall命令" class="headerlink" title="killall命令"></a><code>killall</code>命令</h3><p><strong><code>killall</code>命令</strong>使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。我们可以使用<code>kill</code>命令杀死指定进程<code>PID</code>的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用<code>ps</code>等命令再配合<code>grep</code>来查找进程，而<code>killall</code>把这两个过程合二为一，是一个很好用的命令。</p>
<h4 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">killall(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-13"><a href="#选项-13" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-e</span>：对长名称进行精确匹配；</span><br><span class="line"><span class="literal">-l</span>：忽略大小写的不同；</span><br><span class="line"><span class="literal">-p</span>：杀死进程所属的进程组；</span><br><span class="line"><span class="literal">-i</span>：交互式杀死进程，杀死进程前需要进行确认；</span><br><span class="line"><span class="literal">-l</span>：打印所有已知信号列表；</span><br><span class="line"><span class="literal">-q</span>：如果没有进程被杀死。则不输出任何信息；</span><br><span class="line"><span class="literal">-r</span>：使用正规表达式匹配要杀死的进程名称；</span><br><span class="line"><span class="literal">-s</span>：用指定的进程号代替默认信号“SIGTERM”；</span><br><span class="line"><span class="literal">-u</span>：杀死指定用户的进程。</span><br></pre></td></tr></table></figure>

<h4 id="参数-14"><a href="#参数-14" class="headerlink" title="参数"></a>参数</h4><p>进程名称：指定要杀死的进程名称。</p>
<h4 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h4><p>杀死所有同名进程</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">killall vi</span><br></pre></td></tr></table></figure>

<h3 id="SELinux功能"><a href="#SELinux功能" class="headerlink" title="SELinux功能"></a><code>SELinux</code>功能</h3><p><code>SELinux(Security-Enhanced Linux)</code> 是美国国家安全局（<code>NSA</code>）对于强制访问控制的实现，这个功能管理员又爱又恨，大多数生产环境也是关闭的做法，安全手段使用其他方法。</p>
<p>大多数<code>ssh</code>连接不上虚拟机，都是因为防火墙和<code>selinux</code>阻挡了</p>
<p>永久关闭方式：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.修改配置文件，永久生效关闭selinux</span><br><span class="line"><span class="built_in">cp</span> /etc/selinux/config /etc/selinux/config.bak <span class="comment">#修改前备份</span></span><br><span class="line"><span class="number">2</span>.修改方式可以vim编辑,找到</span><br><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="number">3</span>.用sed替换</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="number">4</span>.检查状态</span><br><span class="line">grep <span class="string">&quot;SELINUX=disabled&quot;</span> /etc/selinux/config</span><br><span class="line"><span class="comment">#出现结果即表示修改成功</span></span><br></pre></td></tr></table></figure>

<p>临时关闭<code>selinux</code>(命令行修改，重启失效)：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">getenforce <span class="comment">#获取selinux状态</span></span><br><span class="line"><span class="comment">#修改selinux状态</span></span><br><span class="line">setenforce </span><br><span class="line">usage:  setenforce [ <span class="type">Enforcing</span> | <span class="type">Permissive</span> | <span class="number">1</span> | <span class="number">0</span> ]</span><br><span class="line">数字<span class="number">0</span> 表示permissive，给出警告，不会阻止，等同disabled</span><br><span class="line">数字<span class="number">1</span>表示enforcing，表示开启</span><br></pre></td></tr></table></figure>

<p>Tip:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">修改selinux配置后，想要生效还得重启系统，技巧就是（修改配置文件+命令行修改，达到立即生效）</span><br><span class="line"></span><br><span class="line">生产环境的服务器是禁止随意重启的！！！！</span><br></pre></td></tr></table></figure>

<h3 id="iptables防火墙"><a href="#iptables防火墙" class="headerlink" title="iptables防火墙"></a><code>iptables</code>防火墙</h3><p>在学习阶段，关闭防火墙可以更方便的学习，在企业环境中，一般只有配置外网<code>ip</code>的<code>linux</code>服务器才会开启防火墙，但是对于高并发流量的业务服务器仍然是不能开启的，会有很大性能损失，因此需要更<code>nb</code>的硬件防火墙。</p>
<p>关闭防火墙具体操作如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">centos7默认已经使用firewall作为防火墙了</span><br><span class="line"><span class="number">1</span>.关闭防火墙</span><br><span class="line">systemctl status firewalld <span class="comment">#查看防火墙状态</span></span><br><span class="line">systemctl stop firewalld    <span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl disable firewalld<span class="comment">#关闭防火墙开机启动systemctl is-enabled firewalld.service#检查防火墙是否启动</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="Linux中文显示设置（防止中文乱码）"><a href="#Linux中文显示设置（防止中文乱码）" class="headerlink" title="Linux中文显示设置（防止中文乱码）"></a><code>Linux</code>中文显示设置（防止中文乱码）</h3><p>此项优化为可选项，根据个人情况选择是否调整<code>Linux</code>系统的字符集，字符集就是一套文字符号以及编码。</p>
<p><code>Linux</code>下常用字符集有：</p>
<ul>
<li><code>GBK</code>　　实际企业应用较少</li>
<li><code>UTF-8</code>　　广泛支持，<code>MYSQL</code>也使用<code>UTF-8</code>，企业广泛使用</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看系统当前字符集echo $LANGlocale#检查xshell crt的字符集#命令修改字符集</span></span><br><span class="line"><span class="comment"># vim /etc/profile.d/locale.sh</span></span><br><span class="line">export LC_CTYPE=zh_CN.UTF<span class="literal">-8</span></span><br><span class="line">export LC_ALL=zh_CN.UTF<span class="literal">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/locale.conf</span></span><br><span class="line">LANG=zh_CN.UTF<span class="literal">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/sysconfig/i18n</span></span><br><span class="line">LANG=zh_CN.UTF<span class="literal">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/environment</span></span><br><span class="line">LANG=zh_CN.UTF<span class="literal">-8</span></span><br><span class="line">LC_ALL=zh_CN.UTF<span class="literal">-8</span></span><br></pre></td></tr></table></figure>

<p>英文版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/profile.d/locale.sh</span></span><br><span class="line">export LC_CTYPE=en_US.UTF<span class="literal">-8</span></span><br><span class="line">export LC_ALL=en_US.UTF<span class="literal">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/locale.conf</span></span><br><span class="line">LANG=en_US.UTF<span class="literal">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/sysconfig/i18n</span></span><br><span class="line">LANG=en_US.UTF<span class="literal">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/environment</span></span><br><span class="line">LANG=en_US.UTF<span class="literal">-8</span></span><br><span class="line">LC_ALL=en_US.UTF<span class="literal">-8</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>.更改后查看系统语言变量locale</span><br></pre></td></tr></table></figure>

<p>乱码核心解决办法</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.系统字符集utf8</span><br><span class="line"><span class="number">2</span>.xshell字符集utf8</span><br><span class="line"><span class="number">3</span>.文件字符集一致zh_CN.UTF<span class="literal">-8</span></span><br></pre></td></tr></table></figure>

<h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a><code>df</code>命令</h3><p><strong><code>df</code>命令</strong>用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为<code>KB</code>。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<h4 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">df(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-14"><a href="#选项-14" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-a</span>或-<span class="literal">-all</span>：包含全部的文件系统；</span><br><span class="line">-<span class="literal">-block</span><span class="literal">-size</span>=&lt;区块大小&gt;：以指定的区块大小来显示区块数目；</span><br><span class="line"><span class="literal">-h</span>或-<span class="literal">-human</span><span class="literal">-readable</span>：以可读性较高的方式来显示信息；</span><br><span class="line"><span class="literal">-H</span>或-<span class="literal">-si</span>：与<span class="literal">-h</span>参数相同，但在计算时是以<span class="number">1000</span> Bytes为换算单位而非<span class="number">1024</span> Bytes；</span><br><span class="line"><span class="literal">-i</span>或-<span class="literal">-inodes</span>：显示inode的信息；</span><br><span class="line"><span class="literal">-k</span>或-<span class="literal">-kilobytes</span>：指定区块大小为<span class="number">1024</span>字节；</span><br><span class="line"><span class="literal">-l</span>或-<span class="literal">-local</span>：仅显示本地端的文件系统；</span><br><span class="line"><span class="literal">-m</span>或-<span class="literal">-megabytes</span>：指定区块大小为<span class="number">1048576</span>字节；</span><br><span class="line">-<span class="literal">-no</span><span class="literal">-sync</span>：在取得磁盘使用信息前，不要执行sync指令，此为预设值；</span><br><span class="line"><span class="literal">-P</span>或-<span class="literal">-portability</span>：使用POSIX的输出格式；</span><br><span class="line">-<span class="literal">-sync</span>：在取得磁盘使用信息前，先执行sync指令；</span><br><span class="line"><span class="literal">-t</span>&lt;文件系统类型&gt;或-<span class="literal">-type</span>=&lt;文件系统类型&gt;：仅显示指定文件系统类型的磁盘信息；</span><br><span class="line"><span class="literal">-T</span>或-<span class="literal">-print</span><span class="literal">-type</span>：显示文件系统的类型；</span><br><span class="line"><span class="literal">-x</span>&lt;文件系统类型&gt;或-<span class="literal">-exclude</span><span class="literal">-type</span>=&lt;文件系统类型&gt;：不要显示指定文件系统类型的磁盘信息；</span><br><span class="line">-<span class="literal">-help</span>：显示帮助；</span><br><span class="line">-<span class="literal">-version</span>：显示版本信息。</span><br></pre></td></tr></table></figure>

<h4 id="参数-15"><a href="#参数-15" class="headerlink" title="参数"></a>参数</h4><p>文件：指定文件系统上的文件。</p>
<h4 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h4><p>查看系统磁盘设备，默认是<code>KB</code>为单位：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">LinServ</span>-<span class="number">1</span> ~]<span class="comment"># df</span></span><br><span class="line">文件系统               <span class="number">1</span>K-块        已用     可用 已用% 挂载点</span><br><span class="line">/dev/sda2            <span class="number">146294492</span>  <span class="number">28244432</span> <span class="number">110498708</span>  <span class="number">21</span>% /</span><br><span class="line">/dev/sda1              <span class="number">1019208</span>     <span class="number">62360</span>    <span class="number">904240</span>   <span class="number">7</span>% /boot</span><br><span class="line">tmpfs                  <span class="number">1032204</span>         <span class="number">0</span>   <span class="number">1032204</span>   <span class="number">0</span>% /dev/shm</span><br><span class="line">/dev/sdb1            <span class="number">2884284108</span> <span class="number">218826068</span> <span class="number">2518944764</span>   <span class="number">8</span>% /data1</span><br></pre></td></tr></table></figure>

<p>使用<code>-h</code>选项以<code>KB</code>以上的单位来显示，可读性高：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">LinServ</span>-<span class="number">1</span> ~]<span class="comment"># df -h</span></span><br><span class="line">文件系统              容量  已用 可用 已用% 挂载点</span><br><span class="line">/dev/sda2             <span class="number">140</span>G   <span class="number">27</span>G  <span class="number">106</span>G  <span class="number">21</span>% /</span><br><span class="line">/dev/sda1             <span class="number">996</span>M   <span class="number">61</span>M  <span class="number">884</span>M   <span class="number">7</span>% /boot</span><br><span class="line">tmpfs                <span class="number">1009</span>M     <span class="number">0</span> <span class="number">1009</span>M   <span class="number">0</span>% /dev/shm</span><br><span class="line">/dev/sdb1             <span class="number">2.7</span>T  <span class="number">209</span>G  <span class="number">2.4</span>T   <span class="number">8</span>% /data1</span><br></pre></td></tr></table></figure>

<p>查看全部文件系统：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">LinServ</span>-<span class="number">1</span> ~]<span class="comment"># df -a</span></span><br><span class="line">文件系统               <span class="number">1</span>K-块        已用     可用 已用% 挂载点</span><br><span class="line">/dev/sda2            <span class="number">146294492</span>  <span class="number">28244432</span> <span class="number">110498708</span>  <span class="number">21</span>% /</span><br><span class="line">proc                         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>   -  /proc</span><br><span class="line">sysfs                        <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>   -  /sys</span><br><span class="line">devpts                       <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>   -  /dev/pts</span><br><span class="line">/dev/sda1              <span class="number">1019208</span>     <span class="number">62360</span>    <span class="number">904240</span>   <span class="number">7</span>% /boot</span><br><span class="line">tmpfs                  <span class="number">1032204</span>         <span class="number">0</span>   <span class="number">1032204</span>   <span class="number">0</span>% /dev/shm</span><br><span class="line">/dev/sdb1            <span class="number">2884284108</span> <span class="number">218826068</span> <span class="number">2518944764</span>   <span class="number">8</span>% /data1</span><br><span class="line">none                         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>   -  /proc/sys/fs/binfmt_misc</span><br></pre></td></tr></table></figure>

<h3 id="tree命令"><a href="#tree命令" class="headerlink" title="tree命令"></a><code>tree</code>命令</h3><p><strong><code>tree</code>命令</strong>以树状图列出目录的内容。</p>
<h4 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tree(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-15"><a href="#选项-15" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-a</span>：显示所有文件和目录；</span><br><span class="line"><span class="literal">-A</span>：使用ASNI绘图字符显示树状图而非以ASCII字符组合；</span><br><span class="line"><span class="literal">-C</span>：在文件和目录清单加上色彩，便于区分各种类型；</span><br><span class="line"><span class="literal">-d</span>：先是目录名称而非内容；</span><br><span class="line"><span class="literal">-D</span>：列出文件或目录的更改时间；</span><br><span class="line"><span class="operator">-f</span>：在每个文件或目录之前，显示完整的相对路径名称；</span><br><span class="line"><span class="operator">-F</span>：在执行文件，目录，Socket，符号连接，管道名称名称，各自加上<span class="string">&quot;*&quot;</span>，<span class="string">&quot;/&quot;</span>，<span class="string">&quot;@&quot;</span>，<span class="string">&quot;|&quot;</span>号；</span><br><span class="line"><span class="literal">-g</span>：列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码；</span><br><span class="line"><span class="literal">-i</span>：不以阶梯状列出文件和目录名称；</span><br><span class="line"><span class="literal">-l</span>：&lt;范本样式&gt; 不显示符号范本样式的文件或目录名称；</span><br><span class="line"><span class="literal">-l</span>：如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录；</span><br><span class="line"><span class="literal">-n</span>：不在文件和目录清单加上色彩；</span><br><span class="line"><span class="literal">-N</span>：直接列出文件和目录名称，包括控制字符；</span><br><span class="line"><span class="literal">-p</span>：列出权限标示；</span><br><span class="line"><span class="literal">-P</span>：&lt;范本样式&gt; 只显示符合范本样式的文件和目录名称；</span><br><span class="line"><span class="literal">-q</span>：用“？”号取代控制字符，列出文件和目录名称；</span><br><span class="line"><span class="literal">-s</span>：列出文件和目录大小；</span><br><span class="line"><span class="literal">-t</span>：用文件和目录的更改时间排序；</span><br><span class="line"><span class="literal">-u</span>：列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码；</span><br><span class="line"><span class="literal">-x</span>：将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure>

<h4 id="参数-16"><a href="#参数-16" class="headerlink" title="参数"></a>参数</h4><p>目录：执行<code>tree</code>指令，它会列出指定目录下的所有文件，包括子目录里的文件。</p>
<h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前主机名</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/test<span class="comment"># hostname</span></span><br><span class="line">tony<span class="literal">-PC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主机名</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/test<span class="comment"># hostnamectl set-hostname Tony-PC</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/test<span class="comment"># hostname</span></span><br><span class="line">Tony<span class="literal">-PC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a><code>DNS</code></h3><p><code>DNS</code>（<code>Domain Name System</code>，域名系统），万维网上作为域名和<code>IP</code>地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的<code>IP</code>数串。<br>通过域名，最终得到该域名对应的<code>IP</code>地址的过程叫做域名解析（或主机名解析）。</p>
<h4 id="查看Linux的dns，唯一配置文件"><a href="#查看Linux的dns，唯一配置文件" class="headerlink" title="查看Linux的dns，唯一配置文件"></a>查看<code>Linux</code>的<code>dns</code>，唯一配置文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">配置文件</span><br><span class="line"><span class="built_in">cat</span> /etc/resolv.conf</span><br><span class="line"><span class="comment">#dns服务器地址</span></span><br><span class="line">nameserver <span class="number">10.10</span>.<span class="number">10.254</span></span><br><span class="line">nameserver <span class="number">114.114</span>.<span class="number">114.114</span></span><br></pre></td></tr></table></figure>

<h4 id="本地强制dns解析文件-etc-hosts"><a href="#本地强制dns解析文件-etc-hosts" class="headerlink" title="本地强制dns解析文件/etc/hosts"></a>本地强制<code>dns</code>解析文件<code>/etc/hosts</code></h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">指定本地解析：</span><br><span class="line">/etc/hosts</span><br><span class="line">主机IP    主机名    主机别名</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>        www.pyyuc.cn        </span><br></pre></td></tr></table></figure>

<h3 id="nslookup命令"><a href="#nslookup命令" class="headerlink" title="nslookup命令"></a><code>nslookup</code>命令</h3><p><strong><code>nslookup</code>命令</strong>是常用域名查询工具，就是查<code>DNS</code>信息用的命令。</p>
<p><code>nslookup4</code>有两种工作模式，即“交互模式”和“非交互模式”。在“交互模式”下，用户可以向域名服务器查询各类主机、域名的信息，或者输出域名中的主机列表。而在“非交互模式”下，用户可以针对一个主机或域名仅仅获取特定的名称或所需信息。</p>
<p>进入交互模式，直接输入<code>nslookup</code>命令，不加任何参数，则直接进入交互模式，此时<code>nslookup</code>会连接到默认的域名服务器（即<code>/etc/resolv.conf</code>的第一个<code>dns</code>地址）。或者输入<code>nslookup -nameserver/ip</code>。进入非交互模式，就直接输入<code>nslookup 域名</code>就可以了。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解析</span></span><br><span class="line">nslookup www.oldboyedu.com</span><br></pre></td></tr></table></figure>

<h3 id="计划任务crond服务"><a href="#计划任务crond服务" class="headerlink" title="计划任务crond服务"></a>计划任务<code>crond</code>服务</h3><p><strong><code>crontab</code>命令</strong>被用来提交和管理用户的需要周期性执行的任务，与<code>windows</code>下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动<code>crond</code>进程，<code>crond</code>进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p>
<h4 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">crontab(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="选项-16"><a href="#选项-16" class="headerlink" title="选项"></a>选项</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-e</span>：编辑该用户的计时器设置；</span><br><span class="line"><span class="literal">-l</span>：列出该用户的计时器设置；</span><br><span class="line"><span class="literal">-r</span>：删除该用户的计时器设置；</span><br><span class="line"><span class="literal">-u</span>&lt;用户名称&gt;：指定要设定计时器的用户名称。</span><br></pre></td></tr></table></figure>

<h4 id="参数-17"><a href="#参数-17" class="headerlink" title="参数"></a>参数</h4><p><code>crontab</code>文件：指定包含待执行任务的<code>crontab</code>文件。</p>
<p><img data-src="https://raw.githubusercontent.com/tonyu2019/PicGo/master/20190807160644.png"></p>
<h4 id="知识扩展-1"><a href="#知识扩展-1" class="headerlink" title="知识扩展"></a>知识扩展</h4><p><code>Linux</code>下的任务调度分为两类：<strong>系统任务调度</strong>和<strong>用户任务调度</strong>。</p>
<p><strong>系统任务调度：</strong>系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在<code>/etc</code>目录下有一个<code>crontab</code>文件，这个就是系统任务调度的配置文件。</p>
<p><code>/etc/crontab</code>文件包括下面几行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=<span class="string">&quot;&quot;</span>HOME=/</span><br><span class="line"></span><br><span class="line"><span class="comment"># run-parts</span></span><br><span class="line"><span class="number">51</span> * * * * root run<span class="literal">-parts</span> /etc/cron.hourly</span><br><span class="line"><span class="number">24</span> <span class="number">7</span> * * * root run<span class="literal">-parts</span> /etc/cron.daily</span><br><span class="line"><span class="number">22</span> <span class="number">4</span> * * <span class="number">0</span> root run<span class="literal">-parts</span> /etc/cron.weekly</span><br><span class="line"><span class="number">42</span> <span class="number">4</span> <span class="number">1</span> * * root run<span class="literal">-parts</span> /etc/cron.monthly</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li><p>查看计划任务的执行：<code>tail -f /var/log/cron</code></p>
</li>
<li><p>写计划任务时，命令必须加上绝对路径，否则会出现这种情况：从日志中看，确实触发了计划任务的执行，但是命令却没有执行成功，比如<code>* * * * * reboot</code>就会出现这种情况，需要将<code>reboot</code>写成<code>/usr/sbin/reboot</code></p>
</li>
<li><p>计划任务执行的命令 是否存在，软件是否安装  </p>
</li>
<li><p>确保<code>crontab</code>服务运行  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status cron</span><br><span class="line"></span><br><span class="line">ps -ef|grep crond</span><br></pre></td></tr></table></figure>
</li>
<li><p>检测<code>crontab</code>是否开机启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl is-enabled crond</span><br></pre></td></tr></table></figure>
</li>
<li><p>所有命令一定要用绝对路径来写！</p>
</li>
</ol>
</blockquote>
<p>前四行是用来配置<code>crond</code>任务运行的环境变量，第一行<code>SHELL</code>变量指定了系统要使用哪个<code>shell</code>，这里是<code>bash</code>，第二行<code>PATH</code>变量指定了系统执行命令的路径，第三行<code>MAILTO</code>变量指定了<code>crond</code>的任务执行信息将通过电子邮件发送给<code>root</code>用户，如果<code>MAILTO</code>变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。</p>
<p><strong>用户任务调度：</strong>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 <code>crontab</code> 工具来定制自己的计划任务。所有用户定义的<code>crontab</code>文件都被保存在<code>/var/spool/cron</code>目录中。其文件名与用户名一致，使用者权限文件如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/etc/cron.deny     该文件中所列用户不允许使用crontab命令</span><br><span class="line">/etc/cron.allow    该文件中所列用户允许使用crontab命令</span><br><span class="line">/var/spool/cron/   所有用户crontab文件存放的目录,以用户名命名</span><br></pre></td></tr></table></figure>

<p><code>crontab</code>文件的含义：用户所建立的<code>crontab</code>文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">minute   hour   day   month   week   command     顺序：分 时 日 月 周</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><code>minute</code>： 表示分钟，可以是从0到59之间的任何整数。</li>
<li><code>hour</code>：表示小时，可以是从0到23之间的任何整数。</li>
<li><code>day</code>：表示日期，可以是从1到31之间的任何整数。</li>
<li><code>month</code>：表示月份，可以是从1到12之间的任何整数。</li>
<li><code>week</code>：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</li>
<li><code>command</code>：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</li>
</ul>
<p>在以上各个字段中，还可以使用以下特殊字符：</p>
<ul>
<li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li>
<li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li>
<li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li>
<li>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在<code>minute</code>字段，表示每十分钟执行一次。</li>
</ul>
<p><strong>crond服务</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/sbin/service crond <span class="built_in">start</span>    //启动服务</span><br><span class="line">/sbin/service crond stop     //关闭服务</span><br><span class="line">/sbin/service crond restart  //重启服务</span><br><span class="line">/sbin/service crond reload   //重新载入配置</span><br></pre></td></tr></table></figure>

<p>查看<code>crontab</code>服务状态：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></table></figure>

<p>手动启动<code>crontab</code>服务：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">service crond <span class="built_in">start</span></span><br></pre></td></tr></table></figure>

<p>查看<code>crontab</code>服务是否已设置为开机启动，执行命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ntsysv</span><br></pre></td></tr></table></figure>

<p>加入开机自动启动：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chkconfig –level <span class="number">35</span> crond on</span><br></pre></td></tr></table></figure>

<h4 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h4><p>每1分钟执行一次<code>command</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">* * * * * command</span><br></pre></td></tr></table></figure>

<p>每小时的第3和第15分钟执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>,<span class="number">15</span> * * * * command</span><br></pre></td></tr></table></figure>

<p>在上午8点到11点的第3和第15分钟执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span><span class="literal">-11</span> * * * command</span><br></pre></td></tr></table></figure>

<p>每隔两天的上午8点到11点的第3和第15分钟执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span><span class="literal">-11</span> */<span class="number">2</span> * * command</span><br></pre></td></tr></table></figure>

<p>每个星期一的上午8点到11点的第3和第15分钟执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span><span class="literal">-11</span> * * <span class="number">1</span> command</span><br></pre></td></tr></table></figure>

<p>每晚的21:30重启smb </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">21</span> * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>每月1、10、22日的4 : 45重启smb </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">45</span> <span class="number">4</span> <span class="number">1</span>,<span class="number">10</span>,<span class="number">22</span> * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>每周六、周日的1:10重启smb</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">1</span> * * <span class="number">6</span>,<span class="number">0</span> /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>每天18 : 00至23 : 00之间每隔30分钟重启smb </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>,<span class="number">30</span> <span class="number">18</span><span class="literal">-23</span> * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>每星期六的晚上11:00 pm重启smb </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">23</span> * * <span class="number">6</span> /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>每一小时重启smb </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">* */<span class="number">1</span> * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>晚上11点到早上7点之间，每隔一小时重启smb</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">* <span class="number">23</span><span class="literal">-7</span>/<span class="number">1</span> * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>每月的4号与每周一到周三的11点重启smb </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">11</span> <span class="number">4</span> * mon<span class="literal">-wed</span> /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>一月一号的4点重启smb</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">1</span> jan * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<p>每小时执行<code>/etc/cron.hourly</code>目录内的脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span> * * * * root run<span class="literal">-parts</span> /etc/cron.hourly</span><br></pre></td></tr></table></figure>

<h3 id="必须掌握的-etc下的linux目录知识"><a href="#必须掌握的-etc下的linux目录知识" class="headerlink" title="必须掌握的/etc下的linux目录知识"></a>必须掌握的<code>/etc</code>下的<code>linux</code>目录知识</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/etc：</span><br><span class="line">这个目录用来存放所有的系统管理所需要的配置文件和子目录。</span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">#网卡配置文件</span></span><br><span class="line">/etc/sysconfig/network<span class="literal">-script</span>/ifcfg<span class="literal">-eth0</span></span><br><span class="line"><span class="comment">#修改机器名以及网卡，网管等配置</span></span><br><span class="line">/etc/sysconfig/network</span><br><span class="line"><span class="comment">#linux的dns客户端配置文件，实现域名和ip的互相解析</span></span><br><span class="line">/etc/resolv.conf</span><br><span class="line"><span class="comment">#本地dns解析文件,设定ip和域名的对应解析,开发测试最常用的临时域名解析</span></span><br><span class="line">/etc/hosts/</span><br><span class="line"><span class="comment">#系统全局环境变量永久生效的配置文件,如PATH等</span></span><br><span class="line">/etc/profile</span><br><span class="line"><span class="comment">#用户的环境变量</span></span><br><span class="line">~/.bash_profile </span><br><span class="line">~/.bashrc</span><br><span class="line"><span class="comment">#存放可执行程序的目录，大多是系统管理命令</span></span><br><span class="line">/usr/sbin</span><br><span class="line"><span class="comment">#存放用户自编译安装软件的目录  &gt; 等同于C:\Program files （windows）</span></span><br><span class="line">/usr/local</span><br><span class="line"><span class="comment">#关于处理器的信息,还可以top指令查看</span></span><br><span class="line">/proc/cpuinfo</span><br><span class="line"><span class="comment">#查看内存信息，还可以free -m</span></span><br><span class="line">/proc/meminfo </span><br></pre></td></tr></table></figure>

<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>添加环境变量的方式有两种，下面以<code>/opt/php7.2</code>为例进行说明</p>
<h4 id="加入-PATH"><a href="#加入-PATH" class="headerlink" title="加入$PATH"></a>加入$PATH</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前环境变量</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"><span class="comment"># 使用$PATH变量赋值只是临时生效，重启无效，因此要写入文件</span></span><br><span class="line"><span class="comment"># 编辑个人全局配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 写入环境变量</span></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/php7.<span class="number">2</span></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"><span class="comment"># 重新读取加载/etc/profile使其生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="comment">#以上即可完成php7.2环境变量的添加</span></span><br></pre></td></tr></table></figure>

<h4 id="使用软连接"><a href="#使用软连接" class="headerlink" title="使用软连接"></a>使用软连接</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看环境变量</span></span><br><span class="line">root@tony<span class="literal">-PC</span>:/tmp/aaa<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入以上目录可以发现，这些目录中很多都是软连接</span></span><br><span class="line">如：lrwxrwxrwx <span class="number">1</span> root root <span class="number">9</span> <span class="number">2</span>月  <span class="number">23</span> <span class="number">01</span>:<span class="number">32</span> /usr/bin/python -&gt; python2.<span class="number">7</span></span><br><span class="line">我们可以看到 /usr/bin/python软连接实际指向的是ptyhon2.<span class="number">7</span>解释器，如果把需要的软件软连接都放入/usr/bin等于自动把该软件加入到了环境变量</span><br><span class="line"></span><br><span class="line">法创建软连接，将软连接放入已加入环境变量的目录中</span><br><span class="line">ln <span class="literal">-s</span> /opt/php7.<span class="number">2</span>/php /usr/bin/php7.<span class="number">2</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>ip</tag>
        <tag>Linux命令</tag>
        <tag>ifconfig</tag>
        <tag>ifup</tag>
        <tag>ifdown</tag>
        <tag>xshell</tag>
        <tag>添加用户</tag>
        <tag>切换用户</tag>
        <tag>useradd</tag>
        <tag>groupadd</tag>
        <tag>userdel</tag>
        <tag>软连接</tag>
      </tags>
  </entry>
  <entry>
    <title>python之斐波那契数列算法</title>
    <url>/d062aff8.html</url>
    <content><![CDATA[<p>斐波那契数列（<code>Fibonacci sequence</code>），又称黄金分割数列、因数学家列昂纳多·斐波那契（<code>Leonardoda Fibonacci</code>）以兔子繁殖为例子而引入，故又称为“兔子数列”。</p>
<a id="more"></a>

<p>它指的是这样一个数列：<code>1、1、2、3、5、8、13、21、34、……</code>在数学上，斐波那契数列以如下被以递推的方法定义：<code>F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 3，n ∈ N*）</code>在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从 1963 年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。</p>
<h3 id="测试运行时间"><a href="#测试运行时间" class="headerlink" title="测试运行时间"></a>测试运行时间</h3><p>编写一个测试运行时间的装饰器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">def show_time(func):</span><br><span class="line">    def method(*args, **kwargs):</span><br><span class="line">        start_time &#x3D; time.time()</span><br><span class="line">        f &#x3D; func(*args, **kwargs)</span><br><span class="line">        end_time &#x3D; time.time()</span><br><span class="line">        print(&#39;%s() 运行时间：%s s&#39; % (func.__name__, end_time - start_time))</span><br><span class="line">        return f</span><br><span class="line">    return method</span><br></pre></td></tr></table></figure>

<h3 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h3><p>使用递归方式查询第n位对应的数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func1(n):</span><br><span class="line">    if n&#x3D;&#x3D;0 or n &#x3D;&#x3D; 1:</span><br><span class="line">        return 1</span><br><span class="line">    return func1(n-2) + func1(n-1)</span><br><span class="line">def tm1(n):</span><br><span class="line">    return func1(n)</span><br><span class="line"></span><br><span class="line">print(&#39;func1第38位数为：&#39;, tm1(38))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tm1() 运行时间：16.43676447868347 s</span><br><span class="line">func1第38位数为： 63245986</span><br></pre></td></tr></table></figure>

<p>递归方式太慢，40往上就很慢了，不推荐使用。</p>
<h3 id="斐波那契公式"><a href="#斐波那契公式" class="headerlink" title="斐波那契公式"></a>斐波那契公式</h3><p>使用斐波那契公式计算第n位数</p>
<p><img data-src="https://20200324picgo-1251846158.cos.ap-shanghai.myqcloud.com/img/20200423102433.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line">def func4(n):</span><br><span class="line">    return 1 &#x2F; math.sqrt(5)*(((1 + math.sqrt(5)) &#x2F; 2) ** n - ((1 - math.sqrt(5)) &#x2F; 2) ** n)</span><br><span class="line"></span><br><span class="line">print(&#39;func4：&#39;, func4(1470))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func4() 运行时间：0.0 s</span><br><span class="line">func4： 7.283601309201992e+306</span><br></pre></td></tr></table></figure>

<p>速度不错，但是5开方总有小数误差，越大越不精确，且我这里查第1500位已经报too long了，也不推荐</p>
<h3 id="数组方式"><a href="#数组方式" class="headerlink" title="数组方式"></a>数组方式</h3><p>使用数组方式计算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func2(n):</span><br><span class="line">    lis &#x3D; [1, 1]</span><br><span class="line">    for i in range(2, n+1):</span><br><span class="line">        lis.append(lis[-2]+lis[-1])</span><br><span class="line">    return lis[n]</span><br><span class="line">print(&#39;func2：&#39;, func2(200000))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func2() 运行时间：5.747527360916138 s</span><br><span class="line">func2：span><br></pre></td></tr></table></figure>

<p>第200000位，这个数字已经够大了，我这里100万直接电脑就挂了，但是计算时间也只用了5秒，足见其强悍</p>
<h3 id="变量方式"><a href="#变量方式" class="headerlink" title="变量方式"></a>变量方式</h3><p>这种方式有点类似数组方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func3(n):</span><br><span class="line">    a &#x3D; 1</span><br><span class="line">    b &#x3D; 1</span><br><span class="line">    c &#x3D; 0</span><br><span class="line">    for i in range(2, n+1):</span><br><span class="line">        c &#x3D; a+b</span><br><span class="line">        a &#x3D; b</span><br><span class="line">        b &#x3D; c</span><br><span class="line">    return c</span><br><span class="line">print(&#39;func3：&#39;, func3(200000))</span><br></pre></td></tr></table></figure>

<p>计算结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func3() 运行时间：0.5715639591217041 s</span><br><span class="line">func3：span><br></pre></td></tr></table></figure>

<p>同样查第20万为，时间不到0.6秒，没的说了。</p>
]]></content>
      <categories>
        <category>rd</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>斐波那契</tag>
        <tag>python之斐波那契数列算法</tag>
        <tag>斐波那契查询第n位</tag>
        <tag>斐波那契数列</tag>
      </tags>
  </entry>
  <entry>
    <title>文件Content-type类型对照表</title>
    <url>/5255dd64.html</url>
    <content><![CDATA[<p>开发中必不可少的文件上传，其中更是需要用到的类型验证，下表中汇集所有文件对应的<code>Content-type</code></p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>文件扩展名</th>
<th>Content-Type(Mime-Type)</th>
</tr>
</thead>
<tbody><tr>
<td>123</td>
<td>application/vnd.lotus-1-2-3</td>
</tr>
<tr>
<td>3dml</td>
<td>text/vnd.in3d.3dml</td>
</tr>
<tr>
<td>3ds</td>
<td>image/x-3ds</td>
</tr>
<tr>
<td>3g2</td>
<td>video/3gpp2</td>
</tr>
<tr>
<td>3gp</td>
<td>video/3gpp</td>
</tr>
<tr>
<td>7z</td>
<td>application/x-7z-compressed</td>
</tr>
<tr>
<td>aab/x32/u32/vox</td>
<td>application/x-authorware-bin</td>
</tr>
<tr>
<td>aac</td>
<td>audio/x-aac</td>
</tr>
<tr>
<td>aam</td>
<td>application/x-authorware-map</td>
</tr>
<tr>
<td>aas</td>
<td>application/x-authorware-seg</td>
</tr>
<tr>
<td>abw</td>
<td>application/x-abiword</td>
</tr>
<tr>
<td>ac</td>
<td>application/pkix-attr-cert</td>
</tr>
<tr>
<td>acc</td>
<td>application/vnd.americandynamics.acc</td>
</tr>
<tr>
<td>ace</td>
<td>application/x-ace-compressed</td>
</tr>
<tr>
<td>acu</td>
<td>application/vnd.acucobol</td>
</tr>
<tr>
<td>adp</td>
<td>audio/adpcm</td>
</tr>
<tr>
<td>aep</td>
<td>application/vnd.audiograph</td>
</tr>
<tr>
<td>afp/listafp/list3820</td>
<td>application/vnd.ibm.modcap</td>
</tr>
<tr>
<td>ahead</td>
<td>application/vnd.ahead.space</td>
</tr>
<tr>
<td>ai/eps/ps</td>
<td>application/postscript</td>
</tr>
<tr>
<td>aif/aiff/aifc</td>
<td>audio/x-aiff</td>
</tr>
<tr>
<td>air</td>
<td>application/vnd.adobe.air-application-installer-package+zip</td>
</tr>
<tr>
<td>ait</td>
<td>application/vnd.dvb.ait</td>
</tr>
<tr>
<td>ami</td>
<td>application/vnd.amiga.ami</td>
</tr>
<tr>
<td>apk</td>
<td>application/vnd.android.package-archive</td>
</tr>
<tr>
<td>appcache</td>
<td>text/cache-manifest</td>
</tr>
<tr>
<td>application</td>
<td>application/x-ms-application</td>
</tr>
<tr>
<td>apr</td>
<td>application/vnd.lotus-approach</td>
</tr>
<tr>
<td>arc</td>
<td>application/x-freearc</td>
</tr>
<tr>
<td>asc/sig</td>
<td>application/pgp-signature</td>
</tr>
<tr>
<td>asf/asx</td>
<td>video/x-ms-asf</td>
</tr>
<tr>
<td>aso</td>
<td>application/vnd.accpac.simply.aso</td>
</tr>
<tr>
<td>atc/acutc</td>
<td>application/vnd.acucorp</td>
</tr>
<tr>
<td>atom</td>
<td>application/atom+xml</td>
</tr>
<tr>
<td>atomcat</td>
<td>application/atomcat+xml</td>
</tr>
<tr>
<td>atomsvc</td>
<td>application/atomsvc+xml</td>
</tr>
<tr>
<td>atx</td>
<td>application/vnd.antix.game-component</td>
</tr>
<tr>
<td>au/snd</td>
<td>audio/basic</td>
</tr>
<tr>
<td>avi</td>
<td>video/x-msvideo</td>
</tr>
<tr>
<td>aw</td>
<td>application/applixware</td>
</tr>
<tr>
<td>azf</td>
<td>application/vnd.airzip.filesecure.azf</td>
</tr>
<tr>
<td>azs</td>
<td>application/vnd.airzip.filesecure.azs</td>
</tr>
<tr>
<td>azw</td>
<td>application/vnd.amazon.ebook</td>
</tr>
<tr>
<td>bcpio</td>
<td>application/x-bcpio</td>
</tr>
<tr>
<td>bdf</td>
<td>application/x-font-bdf</td>
</tr>
<tr>
<td>bdm</td>
<td>application/vnd.syncml.dm+wbxml</td>
</tr>
<tr>
<td>bed</td>
<td>application/vnd.realvnc.bed</td>
</tr>
<tr>
<td>bh2</td>
<td>application/vnd.fujitsu.oasysprs</td>
</tr>
<tr>
<td>bin/dms/lrf/mar/so/dist/distz/pkg/bpk/dump/elc/deploy</td>
<td>application/octet-stream</td>
</tr>
<tr>
<td>blb/blorb</td>
<td>application/x-blorb</td>
</tr>
<tr>
<td>bmi</td>
<td>application/vnd.bmi</td>
</tr>
<tr>
<td>bmp</td>
<td>image/bmp</td>
</tr>
<tr>
<td>box</td>
<td>application/vnd.previewsystems.box</td>
</tr>
<tr>
<td>btif</td>
<td>image/prs.btif</td>
</tr>
<tr>
<td>bz</td>
<td>application/x-bzip</td>
</tr>
<tr>
<td>bz2/boz</td>
<td>application/x-bzip2</td>
</tr>
<tr>
<td>c/cc/cxx/cpp/h/hh/dic</td>
<td>text/x-c</td>
</tr>
<tr>
<td>c11amc</td>
<td>application/vnd.cluetrust.cartomobile-config</td>
</tr>
<tr>
<td>c11amz</td>
<td>application/vnd.cluetrust.cartomobile-config-pkg</td>
</tr>
<tr>
<td>c4g/c4d/c4f/c4p/c4u</td>
<td>application/vnd.clonk.c4group</td>
</tr>
<tr>
<td>cab</td>
<td>application/vnd.ms-cab-compressed</td>
</tr>
<tr>
<td>caf</td>
<td>audio/x-caf</td>
</tr>
<tr>
<td>car</td>
<td>application/vnd.curl.car</td>
</tr>
<tr>
<td>cat</td>
<td>application/vnd.ms-pki.seccat</td>
</tr>
<tr>
<td>cbr/cba/cbt/cbz/cb7</td>
<td>application/x-cbr</td>
</tr>
<tr>
<td>ccxml</td>
<td>application/ccxml+xml</td>
</tr>
<tr>
<td>cdbcmsg</td>
<td>application/vnd.contact.cmsg</td>
</tr>
<tr>
<td>cdkey</td>
<td>application/vnd.mediastation.cdkey</td>
</tr>
<tr>
<td>cdmia</td>
<td>application/cdmi-capability</td>
</tr>
<tr>
<td>cdmic</td>
<td>application/cdmi-container</td>
</tr>
<tr>
<td>cdmid</td>
<td>application/cdmi-domain</td>
</tr>
<tr>
<td>cdmio</td>
<td>application/cdmi-object</td>
</tr>
<tr>
<td>cdmiq</td>
<td>application/cdmi-queue</td>
</tr>
<tr>
<td>cdx</td>
<td>chemical/x-cdx</td>
</tr>
<tr>
<td>cdxml</td>
<td>application/vnd.chemdraw+xml</td>
</tr>
<tr>
<td>cdy</td>
<td>application/vnd.cinderella</td>
</tr>
<tr>
<td>cer</td>
<td>application/pkix-cert</td>
</tr>
<tr>
<td>cfs</td>
<td>application/x-cfs-compressed</td>
</tr>
<tr>
<td>cgm</td>
<td>image/cgm</td>
</tr>
<tr>
<td>chat</td>
<td>application/x-chat</td>
</tr>
<tr>
<td>chm</td>
<td>application/vnd.ms-htmlhelp</td>
</tr>
<tr>
<td>chrt</td>
<td>application/vnd.kde.kchart</td>
</tr>
<tr>
<td>cif</td>
<td>chemical/x-cif</td>
</tr>
<tr>
<td>cii</td>
<td>application/vnd.anser-web-certificate-issue-initiation</td>
</tr>
<tr>
<td>cil</td>
<td>application/vnd.ms-artgalry</td>
</tr>
<tr>
<td>cla</td>
<td>application/vnd.claymore</td>
</tr>
<tr>
<td>class</td>
<td>application/java-vm</td>
</tr>
<tr>
<td>clkk</td>
<td>application/vnd.crick.clicker.keyboard</td>
</tr>
<tr>
<td>clkp</td>
<td>application/vnd.crick.clicker.palette</td>
</tr>
<tr>
<td>clkt</td>
<td>application/vnd.crick.clicker.template</td>
</tr>
<tr>
<td>clkw</td>
<td>application/vnd.crick.clicker.wordbank</td>
</tr>
<tr>
<td>clkx</td>
<td>application/vnd.crick.clicker</td>
</tr>
<tr>
<td>clp</td>
<td>application/x-msclip</td>
</tr>
<tr>
<td>cmc</td>
<td>application/vnd.cosmocaller</td>
</tr>
<tr>
<td>cmdf</td>
<td>chemical/x-cmdf</td>
</tr>
<tr>
<td>cml</td>
<td>chemical/x-cml</td>
</tr>
<tr>
<td>cmp</td>
<td>application/vnd.yellowriver-custom-menu</td>
</tr>
<tr>
<td>cmx</td>
<td>image/x-cmx</td>
</tr>
<tr>
<td>cod</td>
<td>application/vnd.rim.cod</td>
</tr>
<tr>
<td>cpio</td>
<td>application/x-cpio</td>
</tr>
<tr>
<td>cpt</td>
<td>application/mac-compactpro</td>
</tr>
<tr>
<td>crd</td>
<td>application/x-mscardfile</td>
</tr>
<tr>
<td>crl</td>
<td>application/pkix-crl</td>
</tr>
<tr>
<td>cryptonote</td>
<td>application/vnd.rig.cryptonote</td>
</tr>
<tr>
<td>csh</td>
<td>application/x-csh</td>
</tr>
<tr>
<td>csml</td>
<td>chemical/x-csml</td>
</tr>
<tr>
<td>csp</td>
<td>application/vnd.commonspace</td>
</tr>
<tr>
<td>css</td>
<td>text/css</td>
</tr>
<tr>
<td>csv</td>
<td>text/csv</td>
</tr>
<tr>
<td>cu</td>
<td>application/cu-seeme</td>
</tr>
<tr>
<td>curl</td>
<td>text/vnd.curl</td>
</tr>
<tr>
<td>cww</td>
<td>application/prs.cww</td>
</tr>
<tr>
<td>dae</td>
<td>model/vnd.collada+xml</td>
</tr>
<tr>
<td>daf</td>
<td>application/vnd.mobius.daf</td>
</tr>
<tr>
<td>dart</td>
<td>application/vnd.dart</td>
</tr>
<tr>
<td>davmount</td>
<td>application/davmount+xml</td>
</tr>
<tr>
<td>dbk</td>
<td>application/docbook+xml</td>
</tr>
<tr>
<td>dcurl</td>
<td>text/vnd.curl.dcurl</td>
</tr>
<tr>
<td>dd2</td>
<td>application/vnd.oma.dd2+xml</td>
</tr>
<tr>
<td>ddd</td>
<td>application/vnd.fujixerox.ddd</td>
</tr>
<tr>
<td>deb/udeb</td>
<td>application/x-debian-package</td>
</tr>
<tr>
<td>der/crt</td>
<td>application/x-x509-ca-cert</td>
</tr>
<tr>
<td>dfac</td>
<td>application/vnd.dreamfactory</td>
</tr>
<tr>
<td>dgc</td>
<td>application/x-dgc-compressed</td>
</tr>
<tr>
<td>dir/dcr/dxr/cst/cct/cxt/w3d/fgd/swa</td>
<td>application/x-director</td>
</tr>
<tr>
<td>dis</td>
<td>application/vnd.mobius.dis</td>
</tr>
<tr>
<td>djvu/djv</td>
<td>image/vnd.djvu</td>
</tr>
<tr>
<td>dmg</td>
<td>application/x-apple-diskimage</td>
</tr>
<tr>
<td>dna</td>
<td>application/vnd.dna</td>
</tr>
<tr>
<td>doc/dot</td>
<td>application/msword</td>
</tr>
<tr>
<td>docm</td>
<td>application/vnd.ms-word.document.macroenabled.12</td>
</tr>
<tr>
<td>docx</td>
<td>application/vnd.openxmlformats-officedocument.wordprocessingml.document</td>
</tr>
<tr>
<td>dotm</td>
<td>application/vnd.ms-word.template.macroenabled.12</td>
</tr>
<tr>
<td>dotx</td>
<td>application/vnd.openxmlformats-officedocument.wordprocessingml.template</td>
</tr>
<tr>
<td>dp</td>
<td>application/vnd.osgi.dp</td>
</tr>
<tr>
<td>dpg</td>
<td>application/vnd.dpgraph</td>
</tr>
<tr>
<td>dra</td>
<td>audio/vnd.dra</td>
</tr>
<tr>
<td>dsc</td>
<td>text/prs.lines.tag</td>
</tr>
<tr>
<td>dssc</td>
<td>application/dssc+der</td>
</tr>
<tr>
<td>dtb</td>
<td>application/x-dtbook+xml</td>
</tr>
<tr>
<td>dtd</td>
<td>application/xml-dtd</td>
</tr>
<tr>
<td>dts</td>
<td>audio/vnd.dts</td>
</tr>
<tr>
<td>dtshd</td>
<td>audio/vnd.dts.hd</td>
</tr>
<tr>
<td>dvb</td>
<td>video/vnd.dvb.file</td>
</tr>
<tr>
<td>dvi</td>
<td>application/x-dvi</td>
</tr>
<tr>
<td>dwf</td>
<td>model/vnd.dwf</td>
</tr>
<tr>
<td>dwg</td>
<td>image/vnd.dwg</td>
</tr>
<tr>
<td>dxf</td>
<td>image/vnd.dxf</td>
</tr>
<tr>
<td>dxp</td>
<td>application/vnd.spotfire.dxp</td>
</tr>
<tr>
<td>ecelp4800</td>
<td>audio/vnd.nuera.ecelp4800</td>
</tr>
<tr>
<td>ecelp7470</td>
<td>audio/vnd.nuera.ecelp7470</td>
</tr>
<tr>
<td>ecelp9600</td>
<td>audio/vnd.nuera.ecelp9600</td>
</tr>
<tr>
<td>ecma</td>
<td>application/ecmascript</td>
</tr>
<tr>
<td>edm</td>
<td>application/vnd.novadigm.edm</td>
</tr>
<tr>
<td>edx</td>
<td>application/vnd.novadigm.edx</td>
</tr>
<tr>
<td>efif</td>
<td>application/vnd.picsel</td>
</tr>
<tr>
<td>ei6</td>
<td>application/vnd.pg.osasli</td>
</tr>
<tr>
<td>eml/mime</td>
<td>message/rfc822</td>
</tr>
<tr>
<td>emma</td>
<td>application/emma+xml</td>
</tr>
<tr>
<td>eol</td>
<td>audio/vnd.digital-winds</td>
</tr>
<tr>
<td>eot</td>
<td>application/vnd.ms-fontobject</td>
</tr>
<tr>
<td>epub</td>
<td>application/epub+zip</td>
</tr>
<tr>
<td>es3/et3</td>
<td>application/vnd.eszigno3+xml</td>
</tr>
<tr>
<td>esa</td>
<td>application/vnd.osgi.subsystem</td>
</tr>
<tr>
<td>esf</td>
<td>application/vnd.epson.esf</td>
</tr>
<tr>
<td>etx</td>
<td>text/x-setext</td>
</tr>
<tr>
<td>eva</td>
<td>application/x-eva</td>
</tr>
<tr>
<td>evy</td>
<td>application/x-envoy</td>
</tr>
<tr>
<td>exe/dll/com/bat/msi</td>
<td>application/x-msdownload</td>
</tr>
<tr>
<td>exi</td>
<td>application/exi</td>
</tr>
<tr>
<td>ext</td>
<td>application/vnd.novadigm.ext</td>
</tr>
<tr>
<td>ez</td>
<td>application/andrew-inset</td>
</tr>
<tr>
<td>ez2</td>
<td>application/vnd.ezpix-album</td>
</tr>
<tr>
<td>ez3</td>
<td>application/vnd.ezpix-package</td>
</tr>
<tr>
<td>f/for/f77/f90</td>
<td>text/x-fortran</td>
</tr>
<tr>
<td>f4v</td>
<td>video/x-f4v</td>
</tr>
<tr>
<td>fbs</td>
<td>image/vnd.fastbidsheet</td>
</tr>
<tr>
<td>fcdt</td>
<td>application/vnd.adobe.formscentral.fcdt</td>
</tr>
<tr>
<td>fcs</td>
<td>application/vnd.isac.fcs</td>
</tr>
<tr>
<td>fdf</td>
<td>application/vnd.fdf</td>
</tr>
<tr>
<td>fe_launch</td>
<td>application/vnd.denovo.fcselayout-link</td>
</tr>
<tr>
<td>fg5</td>
<td>application/vnd.fujitsu.oasysgp</td>
</tr>
<tr>
<td>fh/fhc/fh4/fh5/fh7</td>
<td>image/x-freehand</td>
</tr>
<tr>
<td>fig</td>
<td>application/x-xfig</td>
</tr>
<tr>
<td>flac</td>
<td>audio/x-flac</td>
</tr>
<tr>
<td>fli</td>
<td>video/x-fli</td>
</tr>
<tr>
<td>flo</td>
<td>application/vnd.micrografx.flo</td>
</tr>
<tr>
<td>flv</td>
<td>video/x-flv</td>
</tr>
<tr>
<td>flw</td>
<td>application/vnd.kde.kivio</td>
</tr>
<tr>
<td>flx</td>
<td>text/vnd.fmi.flexstor</td>
</tr>
<tr>
<td>fly</td>
<td>text/vnd.fly</td>
</tr>
<tr>
<td>fm/frame/maker/book</td>
<td>application/vnd.framemaker</td>
</tr>
<tr>
<td>fnc</td>
<td>application/vnd.frogans.fnc</td>
</tr>
<tr>
<td>fpx</td>
<td>image/vnd.fpx</td>
</tr>
<tr>
<td>fsc</td>
<td>application/vnd.fsc.weblaunch</td>
</tr>
<tr>
<td>fst</td>
<td>image/vnd.fst</td>
</tr>
<tr>
<td>ftc</td>
<td>application/vnd.fluxtime.clip</td>
</tr>
<tr>
<td>fti</td>
<td>application/vnd.anser-web-funds-transfer-initiation</td>
</tr>
<tr>
<td>fvt</td>
<td>video/vnd.fvt</td>
</tr>
<tr>
<td>fxp/fxpl</td>
<td>application/vnd.adobe.fxp</td>
</tr>
<tr>
<td>fzs</td>
<td>application/vnd.fuzzysheet</td>
</tr>
<tr>
<td>g2w</td>
<td>application/vnd.geoplan</td>
</tr>
<tr>
<td>g3</td>
<td>image/g3fax</td>
</tr>
<tr>
<td>g3w</td>
<td>application/vnd.geospace</td>
</tr>
<tr>
<td>gac</td>
<td>application/vnd.groove-account</td>
</tr>
<tr>
<td>gam</td>
<td>application/x-tads</td>
</tr>
<tr>
<td>gbr</td>
<td>application/rpki-ghostbusters</td>
</tr>
<tr>
<td>gca</td>
<td>application/x-gca-compressed</td>
</tr>
<tr>
<td>gdl</td>
<td>model/vnd.gdl</td>
</tr>
<tr>
<td>geo</td>
<td>application/vnd.dynageo</td>
</tr>
<tr>
<td>gex/gre</td>
<td>application/vnd.geometry-explorer</td>
</tr>
<tr>
<td>ggb</td>
<td>application/vnd.geogebra.file</td>
</tr>
<tr>
<td>ggt</td>
<td>application/vnd.geogebra.tool</td>
</tr>
<tr>
<td>ghf</td>
<td>application/vnd.groove-help</td>
</tr>
<tr>
<td>gif</td>
<td>image/gif</td>
</tr>
<tr>
<td>gim</td>
<td>application/vnd.groove-identity-message</td>
</tr>
<tr>
<td>gml</td>
<td>application/gml+xml</td>
</tr>
<tr>
<td>gmx</td>
<td>application/vnd.gmx</td>
</tr>
<tr>
<td>gnumeric</td>
<td>application/x-gnumeric</td>
</tr>
<tr>
<td>gph</td>
<td>application/vnd.flographit</td>
</tr>
<tr>
<td>gpx</td>
<td>application/gpx+xml</td>
</tr>
<tr>
<td>gqf/gqs</td>
<td>application/vnd.grafeq</td>
</tr>
<tr>
<td>gram</td>
<td>application/srgs</td>
</tr>
<tr>
<td>gramps</td>
<td>application/x-gramps-xml</td>
</tr>
<tr>
<td>grv</td>
<td>application/vnd.groove-injector</td>
</tr>
<tr>
<td>grxml</td>
<td>application/srgs+xml</td>
</tr>
<tr>
<td>gsf</td>
<td>application/x-font-ghostscript</td>
</tr>
<tr>
<td>gtar</td>
<td>application/x-gtar</td>
</tr>
<tr>
<td>gtm</td>
<td>application/vnd.groove-tool-message</td>
</tr>
<tr>
<td>gtw</td>
<td>model/vnd.gtw</td>
</tr>
<tr>
<td>gv</td>
<td>text/vnd.graphviz</td>
</tr>
<tr>
<td>gxf</td>
<td>application/gxf</td>
</tr>
<tr>
<td>gxt</td>
<td>application/vnd.geonext</td>
</tr>
<tr>
<td>h261</td>
<td>video/h261</td>
</tr>
<tr>
<td>h263</td>
<td>video/h263</td>
</tr>
<tr>
<td>h264</td>
<td>video/h264</td>
</tr>
<tr>
<td>hal</td>
<td>application/vnd.hal+xml</td>
</tr>
<tr>
<td>hbci</td>
<td>application/vnd.hbci</td>
</tr>
<tr>
<td>hdf</td>
<td>application/x-hdf</td>
</tr>
<tr>
<td>hlp</td>
<td>application/winhlp</td>
</tr>
<tr>
<td>hpgl</td>
<td>application/vnd.hp-hpgl</td>
</tr>
<tr>
<td>hpid</td>
<td>application/vnd.hp-hpid</td>
</tr>
<tr>
<td>hps</td>
<td>application/vnd.hp-hps</td>
</tr>
<tr>
<td>hqx</td>
<td>application/mac-binhex40</td>
</tr>
<tr>
<td>htke</td>
<td>application/vnd.kenameaapp</td>
</tr>
<tr>
<td>html/htm</td>
<td>text/html</td>
</tr>
<tr>
<td>hvd</td>
<td>application/vnd.yamaha.hv-dic</td>
</tr>
<tr>
<td>hvp</td>
<td>application/vnd.yamaha.hv-voice</td>
</tr>
<tr>
<td>hvs</td>
<td>application/vnd.yamaha.hv-script</td>
</tr>
<tr>
<td>i2g</td>
<td>application/vnd.intergeo</td>
</tr>
<tr>
<td>icc/icm</td>
<td>application/vnd.iccprofile</td>
</tr>
<tr>
<td>ice</td>
<td>x-conference/x-cooltalk</td>
</tr>
<tr>
<td>ico</td>
<td>image/x-icon</td>
</tr>
<tr>
<td>ics/ifb</td>
<td>text/calendar</td>
</tr>
<tr>
<td>ief</td>
<td>image/ief</td>
</tr>
<tr>
<td>ifm</td>
<td>application/vnd.shana.informed.formdata</td>
</tr>
<tr>
<td>igl</td>
<td>application/vnd.igloader</td>
</tr>
<tr>
<td>igm</td>
<td>application/vnd.insors.igm</td>
</tr>
<tr>
<td>igs/iges</td>
<td>model/iges</td>
</tr>
<tr>
<td>igx</td>
<td>application/vnd.micrografx.igx</td>
</tr>
<tr>
<td>iif</td>
<td>application/vnd.shana.informed.interchange</td>
</tr>
<tr>
<td>imp</td>
<td>application/vnd.accpac.simply.imp</td>
</tr>
<tr>
<td>ims</td>
<td>application/vnd.ms-ims</td>
</tr>
<tr>
<td>ink/inkml</td>
<td>application/inkml+xml</td>
</tr>
<tr>
<td>install</td>
<td>application/x-install-instructions</td>
</tr>
<tr>
<td>iota</td>
<td>application/vnd.astraea-software.iota</td>
</tr>
<tr>
<td>ipfix</td>
<td>application/ipfix</td>
</tr>
<tr>
<td>ipk</td>
<td>application/vnd.shana.informed.package</td>
</tr>
<tr>
<td>irm</td>
<td>application/vnd.ibm.rights-management</td>
</tr>
<tr>
<td>irp</td>
<td>application/vnd.irepository.package+xml</td>
</tr>
<tr>
<td>iso</td>
<td>application/x-iso9660-image</td>
</tr>
<tr>
<td>itp</td>
<td>application/vnd.shana.informed.formtemplate</td>
</tr>
<tr>
<td>ivp</td>
<td>application/vnd.immervision-ivp</td>
</tr>
<tr>
<td>ivu</td>
<td>application/vnd.immervision-ivu</td>
</tr>
<tr>
<td>jad</td>
<td>text/vnd.sun.j2me.app-descriptor</td>
</tr>
<tr>
<td>jam</td>
<td>application/vnd.jam</td>
</tr>
<tr>
<td>jar</td>
<td>application/java-archive</td>
</tr>
<tr>
<td>java</td>
<td>text/x-java-source</td>
</tr>
<tr>
<td>jisp</td>
<td>application/vnd.jisp</td>
</tr>
<tr>
<td>jlt</td>
<td>application/vnd.hp-jlyt</td>
</tr>
<tr>
<td>jnlp</td>
<td>application/x-java-jnlp-file</td>
</tr>
<tr>
<td>joda</td>
<td>application/vnd.joost.joda-archive</td>
</tr>
<tr>
<td>jpeg/jpg/jpe</td>
<td>image/jpeg</td>
</tr>
<tr>
<td>jpgv</td>
<td>video/jpeg</td>
</tr>
<tr>
<td>jpm/jpgm</td>
<td>video/jpm</td>
</tr>
<tr>
<td>js</td>
<td>application/javascript</td>
</tr>
<tr>
<td>json</td>
<td>application/json</td>
</tr>
<tr>
<td>jsonml</td>
<td>application/jsonml+json</td>
</tr>
<tr>
<td>karbon</td>
<td>application/vnd.kde.karbon</td>
</tr>
<tr>
<td>kfo</td>
<td>application/vnd.kde.kformula</td>
</tr>
<tr>
<td>kia</td>
<td>application/vnd.kidspiration</td>
</tr>
<tr>
<td>kml</td>
<td>application/vnd.google-earth.kml+xml</td>
</tr>
<tr>
<td>kmz</td>
<td>application/vnd.google-earth.kmz</td>
</tr>
<tr>
<td>kne/knp</td>
<td>application/vnd.kinar</td>
</tr>
<tr>
<td>kon</td>
<td>application/vnd.kde.kontour</td>
</tr>
<tr>
<td>kpr/kpt</td>
<td>application/vnd.kde.kpresenter</td>
</tr>
<tr>
<td>kpxx</td>
<td>application/vnd.ds-keypoint</td>
</tr>
<tr>
<td>ksp</td>
<td>application/vnd.kde.kspread</td>
</tr>
<tr>
<td>ktx</td>
<td>image/ktx</td>
</tr>
<tr>
<td>ktz/ktr</td>
<td>application/vnd.kahootz</td>
</tr>
<tr>
<td>kwd/kwt</td>
<td>application/vnd.kde.kword</td>
</tr>
<tr>
<td>lasxml</td>
<td>application/vnd.las.las+xml</td>
</tr>
<tr>
<td>latex</td>
<td>application/x-latex</td>
</tr>
<tr>
<td>lbd</td>
<td>application/vnd.llamagraphics.life-balance.desktop</td>
</tr>
<tr>
<td>lbe</td>
<td>application/vnd.llamagraphics.life-balance.exchange+xml</td>
</tr>
<tr>
<td>les</td>
<td>application/vnd.hhe.lesson-player</td>
</tr>
<tr>
<td>link66</td>
<td>application/vnd.route66.link66+xml</td>
</tr>
<tr>
<td>lnk</td>
<td>application/x-ms-shortcut</td>
</tr>
<tr>
<td>lostxml</td>
<td>application/lost+xml</td>
</tr>
<tr>
<td>lrm</td>
<td>application/vnd.ms-lrm</td>
</tr>
<tr>
<td>ltf</td>
<td>application/vnd.frogans.ltf</td>
</tr>
<tr>
<td>lvp</td>
<td>audio/vnd.lucent.voice</td>
</tr>
<tr>
<td>lwp</td>
<td>application/vnd.lotus-wordpro</td>
</tr>
<tr>
<td>lzh/lha</td>
<td>application/x-lzh-compressed</td>
</tr>
<tr>
<td>m21/mp21</td>
<td>application/mp21</td>
</tr>
<tr>
<td>m3u</td>
<td>audio/x-mpegurl</td>
</tr>
<tr>
<td>m3u8</td>
<td>application/vnd.apple.mpegurl</td>
</tr>
<tr>
<td>m4a/mp4a</td>
<td>audio/mp4</td>
</tr>
<tr>
<td>m4v</td>
<td>video/x-m4v</td>
</tr>
<tr>
<td>ma/nb/mb</td>
<td>application/mathematica</td>
</tr>
<tr>
<td>mads</td>
<td>application/mads+xml</td>
</tr>
<tr>
<td>mag</td>
<td>application/vnd.ecowin.chart</td>
</tr>
<tr>
<td>mathml</td>
<td>application/mathml+xml</td>
</tr>
<tr>
<td>mbk</td>
<td>application/vnd.mobius.mbk</td>
</tr>
<tr>
<td>mbox</td>
<td>application/mbox</td>
</tr>
<tr>
<td>mc1</td>
<td>application/vnd.medcalcdata</td>
</tr>
<tr>
<td>mcd</td>
<td>application/vnd.mcd</td>
</tr>
<tr>
<td>mcurl</td>
<td>text/vnd.curl.mcurl</td>
</tr>
<tr>
<td>mdb</td>
<td>application/x-msaccess</td>
</tr>
<tr>
<td>mdi</td>
<td>image/vnd.ms-modi</td>
</tr>
<tr>
<td>meta4</td>
<td>application/metalink4+xml</td>
</tr>
<tr>
<td>metalink</td>
<td>application/metalink+xml</td>
</tr>
<tr>
<td>mets</td>
<td>application/mets+xml</td>
</tr>
<tr>
<td>mfm</td>
<td>application/vnd.mfmp</td>
</tr>
<tr>
<td>mft</td>
<td>application/rpki-manifest</td>
</tr>
<tr>
<td>mgp</td>
<td>application/vnd.osgeo.mapguide.package</td>
</tr>
<tr>
<td>mgz</td>
<td>application/vnd.proteus.magazine</td>
</tr>
<tr>
<td>mid/midi/kar/rmi</td>
<td>audio/midi</td>
</tr>
<tr>
<td>mie</td>
<td>application/x-mie</td>
</tr>
<tr>
<td>mif</td>
<td>application/vnd.mif</td>
</tr>
<tr>
<td>mj2/mjp2</td>
<td>video/mj2</td>
</tr>
<tr>
<td>mka</td>
<td>audio/x-matroska</td>
</tr>
<tr>
<td>mkv/mk3d/mks</td>
<td>video/x-matroska</td>
</tr>
<tr>
<td>mlp</td>
<td>application/vnd.dolby.mlp</td>
</tr>
<tr>
<td>mmd</td>
<td>application/vnd.chipnuts.karaoke-mmd</td>
</tr>
<tr>
<td>mmf</td>
<td>application/vnd.smaf</td>
</tr>
<tr>
<td>mmr</td>
<td>image/vnd.fujixerox.edmics-mmr</td>
</tr>
<tr>
<td>mng</td>
<td>video/x-mng</td>
</tr>
<tr>
<td>mny</td>
<td>application/x-msmoney</td>
</tr>
<tr>
<td>mods</td>
<td>application/mods+xml</td>
</tr>
<tr>
<td>movie</td>
<td>video/x-sgi-movie</td>
</tr>
<tr>
<td>mp4/mp4v/mpg4</td>
<td>video/mp4</td>
</tr>
<tr>
<td>mp4s</td>
<td>application/mp4</td>
</tr>
<tr>
<td>mpc</td>
<td>application/vnd.mophun.certificate</td>
</tr>
<tr>
<td>mpeg/mpg/mpe/m1v/m2v</td>
<td>video/mpeg</td>
</tr>
<tr>
<td>mpga/mp2/mp2a/mp3/m2a/m3a</td>
<td>audio/mpeg</td>
</tr>
<tr>
<td>mpkg</td>
<td>application/vnd.apple.installer+xml</td>
</tr>
<tr>
<td>mpm</td>
<td>application/vnd.blueice.multipass</td>
</tr>
<tr>
<td>mpn</td>
<td>application/vnd.mophun.application</td>
</tr>
<tr>
<td>mpp/mpt</td>
<td>application/vnd.ms-project</td>
</tr>
<tr>
<td>mpy</td>
<td>application/vnd.ibm.minipay</td>
</tr>
<tr>
<td>mqy</td>
<td>application/vnd.mobius.mqy</td>
</tr>
<tr>
<td>mrc</td>
<td>application/marc</td>
</tr>
<tr>
<td>mrcx</td>
<td>application/marcxml+xml</td>
</tr>
<tr>
<td>mscml</td>
<td>application/mediaservercontrol+xml</td>
</tr>
<tr>
<td>mseed</td>
<td>application/vnd.fdsn.mseed</td>
</tr>
<tr>
<td>mseq</td>
<td>application/vnd.mseq</td>
</tr>
<tr>
<td>msf</td>
<td>application/vnd.epson.msf</td>
</tr>
<tr>
<td>msh/mesh/silo</td>
<td>model/mesh</td>
</tr>
<tr>
<td>msl</td>
<td>application/vnd.mobius.msl</td>
</tr>
<tr>
<td>msty</td>
<td>application/vnd.muvee.style</td>
</tr>
<tr>
<td>mts</td>
<td>model/vnd.mts</td>
</tr>
<tr>
<td>mus</td>
<td>application/vnd.musician</td>
</tr>
<tr>
<td>musicxml</td>
<td>application/vnd.recordare.musicxml+xml</td>
</tr>
<tr>
<td>mvb/m13/m14</td>
<td>application/x-msmediaview</td>
</tr>
<tr>
<td>mwf</td>
<td>application/vnd.mfer</td>
</tr>
<tr>
<td>mxf</td>
<td>application/mxf</td>
</tr>
<tr>
<td>mxl</td>
<td>application/vnd.recordare.musicxml</td>
</tr>
<tr>
<td>mxml/xhvml/xvml/xvm</td>
<td>application/xv+xml</td>
</tr>
<tr>
<td>mxs</td>
<td>application/vnd.triscape.mxs</td>
</tr>
<tr>
<td>mxu/m4u</td>
<td>video/vnd.mpegurl</td>
</tr>
<tr>
<td>n-gage</td>
<td>application/vnd.nokia.n-gage.symbian.install</td>
</tr>
<tr>
<td>n3</td>
<td>text/n3</td>
</tr>
<tr>
<td>nbp</td>
<td>application/vnd.wolfram.player</td>
</tr>
<tr>
<td>nc/cdf</td>
<td>application/x-netcdf</td>
</tr>
<tr>
<td>ncx</td>
<td>application/x-dtbncx+xml</td>
</tr>
<tr>
<td>nfo</td>
<td>text/x-nfo</td>
</tr>
<tr>
<td>ngdat</td>
<td>application/vnd.nokia.n-gage.data</td>
</tr>
<tr>
<td>nlu</td>
<td>application/vnd.neurolanguage.nlu</td>
</tr>
<tr>
<td>nml</td>
<td>application/vnd.enliven</td>
</tr>
<tr>
<td>nnd</td>
<td>application/vnd.noblenet-directory</td>
</tr>
<tr>
<td>nns</td>
<td>application/vnd.noblenet-sealer</td>
</tr>
<tr>
<td>nnw</td>
<td>application/vnd.noblenet-web</td>
</tr>
<tr>
<td>npx</td>
<td>image/vnd.net-fpx</td>
</tr>
<tr>
<td>nsc</td>
<td>application/x-conference</td>
</tr>
<tr>
<td>nsf</td>
<td>application/vnd.lotus-notes</td>
</tr>
<tr>
<td>ntf/nitf</td>
<td>application/vnd.nitf</td>
</tr>
<tr>
<td>nzb</td>
<td>application/x-nzb</td>
</tr>
<tr>
<td>oa2</td>
<td>application/vnd.fujitsu.oasys2</td>
</tr>
<tr>
<td>oa3</td>
<td>application/vnd.fujitsu.oasys3</td>
</tr>
<tr>
<td>oas</td>
<td>application/vnd.fujitsu.oasys</td>
</tr>
<tr>
<td>obd</td>
<td>application/x-msbinder</td>
</tr>
<tr>
<td>obj</td>
<td>application/x-tgif</td>
</tr>
<tr>
<td>oda</td>
<td>application/oda</td>
</tr>
<tr>
<td>odb</td>
<td>application/vnd.oasis.opendocument.database</td>
</tr>
<tr>
<td>odc</td>
<td>application/vnd.oasis.opendocument.chart</td>
</tr>
<tr>
<td>odf</td>
<td>application/vnd.oasis.opendocument.formula</td>
</tr>
<tr>
<td>odft</td>
<td>application/vnd.oasis.opendocument.formula-template</td>
</tr>
<tr>
<td>odg</td>
<td>application/vnd.oasis.opendocument.graphics</td>
</tr>
<tr>
<td>odi</td>
<td>application/vnd.oasis.opendocument.image</td>
</tr>
<tr>
<td>odm</td>
<td>application/vnd.oasis.opendocument.text-master</td>
</tr>
<tr>
<td>odp</td>
<td>application/vnd.oasis.opendocument.presentation</td>
</tr>
<tr>
<td>ods</td>
<td>application/vnd.oasis.opendocument.spreadsheet</td>
</tr>
<tr>
<td>odt</td>
<td>application/vnd.oasis.opendocument.text</td>
</tr>
<tr>
<td>oga/ogg/spx</td>
<td>audio/ogg</td>
</tr>
<tr>
<td>ogv</td>
<td>video/ogg</td>
</tr>
<tr>
<td>ogx</td>
<td>application/ogg</td>
</tr>
<tr>
<td>omdoc</td>
<td>application/omdoc+xml</td>
</tr>
<tr>
<td>onetoc/onetoc2/onetmp/onepkg</td>
<td>application/onenote</td>
</tr>
<tr>
<td>opf</td>
<td>application/oebps-package+xml</td>
</tr>
<tr>
<td>opml</td>
<td>text/x-opml</td>
</tr>
<tr>
<td>org</td>
<td>application/vnd.lotus-organizer</td>
</tr>
<tr>
<td>osf</td>
<td>application/vnd.yamaha.openscoreformat</td>
</tr>
<tr>
<td>osfpvg</td>
<td>application/vnd.yamaha.openscoreformat.osfpvg+xml</td>
</tr>
<tr>
<td>otc</td>
<td>application/vnd.oasis.opendocument.chart-template</td>
</tr>
<tr>
<td>otf</td>
<td>font/otf</td>
</tr>
<tr>
<td>otg</td>
<td>application/vnd.oasis.opendocument.graphics-template</td>
</tr>
<tr>
<td>oth</td>
<td>application/vnd.oasis.opendocument.text-web</td>
</tr>
<tr>
<td>oti</td>
<td>application/vnd.oasis.opendocument.image-template</td>
</tr>
<tr>
<td>otp</td>
<td>application/vnd.oasis.opendocument.presentation-template</td>
</tr>
<tr>
<td>ots</td>
<td>application/vnd.oasis.opendocument.spreadsheet-template</td>
</tr>
<tr>
<td>ott</td>
<td>application/vnd.oasis.opendocument.text-template</td>
</tr>
<tr>
<td>oxps</td>
<td>application/oxps</td>
</tr>
<tr>
<td>oxt</td>
<td>application/vnd.openofficeorg.extension</td>
</tr>
<tr>
<td>p/pas</td>
<td>text/x-pascal</td>
</tr>
<tr>
<td>p10</td>
<td>application/pkcs10</td>
</tr>
<tr>
<td>p12/pfx</td>
<td>application/x-pkcs12</td>
</tr>
<tr>
<td>p7b/spc</td>
<td>application/x-pkcs7-certificates</td>
</tr>
<tr>
<td>p7m/p7c</td>
<td>application/pkcs7-mime</td>
</tr>
<tr>
<td>p7r</td>
<td>application/x-pkcs7-certreqresp</td>
</tr>
<tr>
<td>p7s</td>
<td>application/pkcs7-signature</td>
</tr>
<tr>
<td>p8</td>
<td>application/pkcs8</td>
</tr>
<tr>
<td>paw</td>
<td>application/vnd.pawaafile</td>
</tr>
<tr>
<td>pbd</td>
<td>application/vnd.powerbuilder6</td>
</tr>
<tr>
<td>pbm</td>
<td>image/x-portable-bitmap</td>
</tr>
<tr>
<td>pcap/cap/dmp</td>
<td>application/vnd.tcpdump.pcap</td>
</tr>
<tr>
<td>pcf</td>
<td>application/x-font-pcf</td>
</tr>
<tr>
<td>pcl</td>
<td>application/vnd.hp-pcl</td>
</tr>
<tr>
<td>pclxl</td>
<td>application/vnd.hp-pclxl</td>
</tr>
<tr>
<td>pcurl</td>
<td>application/vnd.curl.pcurl</td>
</tr>
<tr>
<td>pcx</td>
<td>image/x-pcx</td>
</tr>
<tr>
<td>pdb/pqa/oprc</td>
<td>application/vnd.palm</td>
</tr>
<tr>
<td>pdf</td>
<td>application/pdf</td>
</tr>
<tr>
<td>pfa/pfb/pfm/afm</td>
<td>application/x-font-type1</td>
</tr>
<tr>
<td>pfr</td>
<td>application/font-tdpfr</td>
</tr>
<tr>
<td>pgm</td>
<td>image/x-portable-graymap</td>
</tr>
<tr>
<td>pgn</td>
<td>application/x-chess-pgn</td>
</tr>
<tr>
<td>pgp</td>
<td>application/pgp-encrypted</td>
</tr>
<tr>
<td>pic/pct</td>
<td>image/x-pict</td>
</tr>
<tr>
<td>pki</td>
<td>application/pkixcmp</td>
</tr>
<tr>
<td>pkipath</td>
<td>application/pkix-pkipath</td>
</tr>
<tr>
<td>plb</td>
<td>application/vnd.3gpp.pic-bw-large</td>
</tr>
<tr>
<td>plc</td>
<td>application/vnd.mobius.plc</td>
</tr>
<tr>
<td>plf</td>
<td>application/vnd.pocketlearn</td>
</tr>
<tr>
<td>pls</td>
<td>application/pls+xml</td>
</tr>
<tr>
<td>pml</td>
<td>application/vnd.ctc-posml</td>
</tr>
<tr>
<td>png</td>
<td>image/png</td>
</tr>
<tr>
<td>pnm</td>
<td>image/x-portable-anymap</td>
</tr>
<tr>
<td>portpkg</td>
<td>application/vnd.macports.portpkg</td>
</tr>
<tr>
<td>potm</td>
<td>application/vnd.ms-powerpoint.template.macroenabled.12</td>
</tr>
<tr>
<td>potx</td>
<td>application/vnd.openxmlformats-officedocument.presentationml.template</td>
</tr>
<tr>
<td>ppam</td>
<td>application/vnd.ms-powerpoint.addin.macroenabled.12</td>
</tr>
<tr>
<td>ppd</td>
<td>application/vnd.cups-ppd</td>
</tr>
<tr>
<td>ppm</td>
<td>image/x-portable-pixmap</td>
</tr>
<tr>
<td>ppsm</td>
<td>application/vnd.ms-powerpoint.slideshow.macroenabled.12</td>
</tr>
<tr>
<td>ppsx</td>
<td>application/vnd.openxmlformats-officedocument.presentationml.slideshow</td>
</tr>
<tr>
<td>ppt/pps/pot</td>
<td>application/vnd.ms-powerpoint</td>
</tr>
<tr>
<td>pptm</td>
<td>application/vnd.ms-powerpoint.presentation.macroenabled.12</td>
</tr>
<tr>
<td>pptx</td>
<td>application/vnd.openxmlformats-officedocument.presentationml.presentation</td>
</tr>
<tr>
<td>prc/mobi</td>
<td>application/x-mobipocket-ebook</td>
</tr>
<tr>
<td>pre</td>
<td>application/vnd.lotus-freelance</td>
</tr>
<tr>
<td>prf</td>
<td>application/pics-rules</td>
</tr>
<tr>
<td>psb</td>
<td>application/vnd.3gpp.pic-bw-small</td>
</tr>
<tr>
<td>psd</td>
<td>image/vnd.adobe.photoshop</td>
</tr>
<tr>
<td>psf</td>
<td>application/x-font-linux-psf</td>
</tr>
<tr>
<td>pskcxml</td>
<td>application/pskc+xml</td>
</tr>
<tr>
<td>ptid</td>
<td>application/vnd.pvi.ptid1</td>
</tr>
<tr>
<td>pub</td>
<td>application/x-mspublisher</td>
</tr>
<tr>
<td>pvb</td>
<td>application/vnd.3gpp.pic-bw-var</td>
</tr>
<tr>
<td>pwn</td>
<td>application/vnd.3m.post-it-notes</td>
</tr>
<tr>
<td>pya</td>
<td>audio/vnd.ms-playready.media.pya</td>
</tr>
<tr>
<td>pyv</td>
<td>video/vnd.ms-playready.media.pyv</td>
</tr>
<tr>
<td>qam</td>
<td>application/vnd.epson.quickanime</td>
</tr>
<tr>
<td>qbo</td>
<td>application/vnd.intu.qbo</td>
</tr>
<tr>
<td>qfx</td>
<td>application/vnd.intu.qfx</td>
</tr>
<tr>
<td>qps</td>
<td>application/vnd.publishare-delta-tree</td>
</tr>
<tr>
<td>qt/mov</td>
<td>video/quicktime</td>
</tr>
<tr>
<td>qxd/qxt/qwd/qwt/qxl/qxb</td>
<td>application/vnd.quark.quarkxpress</td>
</tr>
<tr>
<td>ram/ra</td>
<td>audio/x-pn-realaudio</td>
</tr>
<tr>
<td>rar</td>
<td>application/x-rar-compressed</td>
</tr>
<tr>
<td>ras</td>
<td>image/x-cmu-raster</td>
</tr>
<tr>
<td>rcprofile</td>
<td>application/vnd.ipunplugged.rcprofile</td>
</tr>
<tr>
<td>rdf</td>
<td>application/rdf+xml</td>
</tr>
<tr>
<td>rdz</td>
<td>application/vnd.data-vision.rdz</td>
</tr>
<tr>
<td>rep</td>
<td>application/vnd.businessobjects</td>
</tr>
<tr>
<td>res</td>
<td>application/x-dtbresource+xml</td>
</tr>
<tr>
<td>rgb</td>
<td>image/x-rgb</td>
</tr>
<tr>
<td>rif</td>
<td>application/reginfo+xml</td>
</tr>
<tr>
<td>rip</td>
<td>audio/vnd.rip</td>
</tr>
<tr>
<td>ris</td>
<td>application/x-research-info-systems</td>
</tr>
<tr>
<td>rl</td>
<td>application/resource-lists+xml</td>
</tr>
<tr>
<td>rlc</td>
<td>image/vnd.fujixerox.edmics-rlc</td>
</tr>
<tr>
<td>rld</td>
<td>application/resource-lists-diff+xml</td>
</tr>
<tr>
<td>rm</td>
<td>application/vnd.rn-realmedia</td>
</tr>
<tr>
<td>rmp</td>
<td>audio/x-pn-realaudio-plugin</td>
</tr>
<tr>
<td>rms</td>
<td>application/vnd.jcp.javame.midlet-rms</td>
</tr>
<tr>
<td>rmvb</td>
<td>application/vnd.rn-realmedia-vbr</td>
</tr>
<tr>
<td>rnc</td>
<td>application/relax-ng-compact-syntax</td>
</tr>
<tr>
<td>roa</td>
<td>application/rpki-roa</td>
</tr>
<tr>
<td>rp9</td>
<td>application/vnd.cloanto.rp9</td>
</tr>
<tr>
<td>rpss</td>
<td>application/vnd.nokia.radio-presets</td>
</tr>
<tr>
<td>rpst</td>
<td>application/vnd.nokia.radio-preset</td>
</tr>
<tr>
<td>rq</td>
<td>application/sparql-query</td>
</tr>
<tr>
<td>rs</td>
<td>application/rls-services+xml</td>
</tr>
<tr>
<td>rsd</td>
<td>application/rsd+xml</td>
</tr>
<tr>
<td>rss</td>
<td>application/rss+xml</td>
</tr>
<tr>
<td>rtf</td>
<td>application/rtf</td>
</tr>
<tr>
<td>rtx</td>
<td>text/richtext</td>
</tr>
<tr>
<td>s/asm</td>
<td>text/x-asm</td>
</tr>
<tr>
<td>s3m</td>
<td>audio/s3m</td>
</tr>
<tr>
<td>saf</td>
<td>application/vnd.yamaha.smaf-audio</td>
</tr>
<tr>
<td>sbml</td>
<td>application/sbml+xml</td>
</tr>
<tr>
<td>sc</td>
<td>application/vnd.ibm.secure-container</td>
</tr>
<tr>
<td>scd</td>
<td>application/x-msschedule</td>
</tr>
<tr>
<td>scm</td>
<td>application/vnd.lotus-screencam</td>
</tr>
<tr>
<td>scq</td>
<td>application/scvp-cv-request</td>
</tr>
<tr>
<td>scs</td>
<td>application/scvp-cv-response</td>
</tr>
<tr>
<td>scurl</td>
<td>text/vnd.curl.scurl</td>
</tr>
<tr>
<td>sda</td>
<td>application/vnd.stardivision.draw</td>
</tr>
<tr>
<td>sdc</td>
<td>application/vnd.stardivision.calc</td>
</tr>
<tr>
<td>sdd</td>
<td>application/vnd.stardivision.impress</td>
</tr>
<tr>
<td>sdkm/sdkd</td>
<td>application/vnd.solent.sdkm+xml</td>
</tr>
<tr>
<td>sdp</td>
<td>application/sdp</td>
</tr>
<tr>
<td>sdw/vor</td>
<td>application/vnd.stardivision.writer</td>
</tr>
<tr>
<td>see</td>
<td>application/vnd.seemail</td>
</tr>
<tr>
<td>seed/dataless</td>
<td>application/vnd.fdsn.seed</td>
</tr>
<tr>
<td>sema</td>
<td>application/vnd.sema</td>
</tr>
<tr>
<td>semd</td>
<td>application/vnd.semd</td>
</tr>
<tr>
<td>semf</td>
<td>application/vnd.semf</td>
</tr>
<tr>
<td>ser</td>
<td>application/java-serialized-object</td>
</tr>
<tr>
<td>setpay</td>
<td>application/set-payment-initiation</td>
</tr>
<tr>
<td>setreg</td>
<td>application/set-registration-initiation</td>
</tr>
<tr>
<td>sfd-hdstx</td>
<td>application/vnd.hydrostatix.sof-data</td>
</tr>
<tr>
<td>sfs</td>
<td>application/vnd.spotfire.sfs</td>
</tr>
<tr>
<td>sfv</td>
<td>text/x-sfv</td>
</tr>
<tr>
<td>sgi</td>
<td>image/sgi</td>
</tr>
<tr>
<td>sgl</td>
<td>application/vnd.stardivision.writer-global</td>
</tr>
<tr>
<td>sgml/sgm</td>
<td>text/sgml</td>
</tr>
<tr>
<td>sh</td>
<td>application/x-sh</td>
</tr>
<tr>
<td>shar</td>
<td>application/x-shar</td>
</tr>
<tr>
<td>shf</td>
<td>application/shf+xml</td>
</tr>
<tr>
<td>sid</td>
<td>image/x-mrsid-image</td>
</tr>
<tr>
<td>sil</td>
<td>audio/silk</td>
</tr>
<tr>
<td>sis/sisx</td>
<td>application/vnd.symbian.install</td>
</tr>
<tr>
<td>sit</td>
<td>application/x-stuffit</td>
</tr>
<tr>
<td>sitx</td>
<td>application/x-stuffitx</td>
</tr>
<tr>
<td>skp/skd/skt/skm</td>
<td>application/vnd.koan</td>
</tr>
<tr>
<td>sldm</td>
<td>application/vnd.ms-powerpoint.slide.macroenabled.12</td>
</tr>
<tr>
<td>sldx</td>
<td>application/vnd.openxmlformats-officedocument.presentationml.slide</td>
</tr>
<tr>
<td>slt</td>
<td>application/vnd.epson.salt</td>
</tr>
<tr>
<td>sm</td>
<td>application/vnd.stepmania.stepchart</td>
</tr>
<tr>
<td>smf</td>
<td>application/vnd.stardivision.math</td>
</tr>
<tr>
<td>smi/smil</td>
<td>application/smil+xml</td>
</tr>
<tr>
<td>smv</td>
<td>video/x-smv</td>
</tr>
<tr>
<td>smzip</td>
<td>application/vnd.stepmania.package</td>
</tr>
<tr>
<td>snf</td>
<td>application/x-font-snf</td>
</tr>
<tr>
<td>spf</td>
<td>application/vnd.yamaha.smaf-phrase</td>
</tr>
<tr>
<td>spl</td>
<td>application/x-futuresplash</td>
</tr>
<tr>
<td>spot</td>
<td>text/vnd.in3d.spot</td>
</tr>
<tr>
<td>spp</td>
<td>application/scvp-vp-response</td>
</tr>
<tr>
<td>spq</td>
<td>application/scvp-vp-request</td>
</tr>
<tr>
<td>sql</td>
<td>application/x-sql</td>
</tr>
<tr>
<td>src</td>
<td>application/x-wais-source</td>
</tr>
<tr>
<td>srt</td>
<td>application/x-subrip</td>
</tr>
<tr>
<td>sru</td>
<td>application/sru+xml</td>
</tr>
<tr>
<td>srx</td>
<td>application/sparql-results+xml</td>
</tr>
<tr>
<td>ssdl</td>
<td>application/ssdl+xml</td>
</tr>
<tr>
<td>sse</td>
<td>application/vnd.kodak-descriptor</td>
</tr>
<tr>
<td>ssf</td>
<td>application/vnd.epson.ssf</td>
</tr>
<tr>
<td>ssml</td>
<td>application/ssml+xml</td>
</tr>
<tr>
<td>st</td>
<td>application/vnd.sailingtracker.track</td>
</tr>
<tr>
<td>stc</td>
<td>application/vnd.sun.xml.calc.template</td>
</tr>
<tr>
<td>std</td>
<td>application/vnd.sun.xml.draw.template</td>
</tr>
<tr>
<td>stf</td>
<td>application/vnd.wt.stf</td>
</tr>
<tr>
<td>sti</td>
<td>application/vnd.sun.xml.impress.template</td>
</tr>
<tr>
<td>stk</td>
<td>application/hyperstudio</td>
</tr>
<tr>
<td>stl</td>
<td>application/vnd.ms-pki.stl</td>
</tr>
<tr>
<td>str</td>
<td>application/vnd.pg.format</td>
</tr>
<tr>
<td>stw</td>
<td>application/vnd.sun.xml.writer.template</td>
</tr>
<tr>
<td>sub</td>
<td>text/vnd.dvb.subtitle</td>
</tr>
<tr>
<td>sub</td>
<td>image/vnd.dvb.subtitle</td>
</tr>
<tr>
<td>sus/susp</td>
<td>application/vnd.sus-calendar</td>
</tr>
<tr>
<td>sv4cpio</td>
<td>application/x-sv4cpio</td>
</tr>
<tr>
<td>sv4crc</td>
<td>application/x-sv4crc</td>
</tr>
<tr>
<td>svc</td>
<td>application/vnd.dvb.service</td>
</tr>
<tr>
<td>svd</td>
<td>application/vnd.svd</td>
</tr>
<tr>
<td>svg/svgz</td>
<td>image/svg+xml</td>
</tr>
<tr>
<td>swf</td>
<td>application/x-shockwave-flash</td>
</tr>
<tr>
<td>swi</td>
<td>application/vnd.aristanetworks.swi</td>
</tr>
<tr>
<td>sxc</td>
<td>application/vnd.sun.xml.calc</td>
</tr>
<tr>
<td>sxd</td>
<td>application/vnd.sun.xml.draw</td>
</tr>
<tr>
<td>sxg</td>
<td>application/vnd.sun.xml.writer.global</td>
</tr>
<tr>
<td>sxi</td>
<td>application/vnd.sun.xml.impress</td>
</tr>
<tr>
<td>sxm</td>
<td>application/vnd.sun.xml.math</td>
</tr>
<tr>
<td>sxw</td>
<td>application/vnd.sun.xml.writer</td>
</tr>
<tr>
<td>t/tr/roff/man/me/ms</td>
<td>text/troff</td>
</tr>
<tr>
<td>t3</td>
<td>application/x-t3vm-image</td>
</tr>
<tr>
<td>taglet</td>
<td>application/vnd.mynfc</td>
</tr>
<tr>
<td>tao</td>
<td>application/vnd.tao.intent-module-archive</td>
</tr>
<tr>
<td>tar</td>
<td>application/x-tar</td>
</tr>
<tr>
<td>tcap</td>
<td>application/vnd.3gpp2.tcap</td>
</tr>
<tr>
<td>tcl</td>
<td>application/x-tcl</td>
</tr>
<tr>
<td>teacher</td>
<td>application/vnd.smart.teacher</td>
</tr>
<tr>
<td>tei/teicorpus</td>
<td>application/tei+xml</td>
</tr>
<tr>
<td>tex</td>
<td>application/x-tex</td>
</tr>
<tr>
<td>texinfo/texi</td>
<td>application/x-texinfo</td>
</tr>
<tr>
<td>tfi</td>
<td>application/thraud+xml</td>
</tr>
<tr>
<td>tfm</td>
<td>application/x-tex-tfm</td>
</tr>
<tr>
<td>tga</td>
<td>image/x-tga</td>
</tr>
<tr>
<td>thmx</td>
<td>application/vnd.ms-officetheme</td>
</tr>
<tr>
<td>tiff/tif</td>
<td>image/tiff</td>
</tr>
<tr>
<td>tmo</td>
<td>application/vnd.tmobile-livetv</td>
</tr>
<tr>
<td>torrent</td>
<td>application/x-bittorrent</td>
</tr>
<tr>
<td>tpl</td>
<td>application/vnd.groove-tool-template</td>
</tr>
<tr>
<td>tpt</td>
<td>application/vnd.trid.tpt</td>
</tr>
<tr>
<td>tra</td>
<td>application/vnd.trueapp</td>
</tr>
<tr>
<td>trm</td>
<td>application/x-msterminal</td>
</tr>
<tr>
<td>tsd</td>
<td>application/timestamped-data</td>
</tr>
<tr>
<td>tsv</td>
<td>text/tab-separated-values</td>
</tr>
<tr>
<td>ttc</td>
<td>font/collection</td>
</tr>
<tr>
<td>ttf</td>
<td>font/ttf</td>
</tr>
<tr>
<td>ttl</td>
<td>text/turtle</td>
</tr>
<tr>
<td>twd/twds</td>
<td>application/vnd.simtech-mindmapper</td>
</tr>
<tr>
<td>txd</td>
<td>application/vnd.genomatix.tuxedo</td>
</tr>
<tr>
<td>txf</td>
<td>application/vnd.mobius.txf</td>
</tr>
<tr>
<td>txt/text/conf/def/list/log/in</td>
<td>text/plain</td>
</tr>
<tr>
<td>ufd/ufdl</td>
<td>application/vnd.ufdl</td>
</tr>
<tr>
<td>ulx</td>
<td>application/x-glulx</td>
</tr>
<tr>
<td>umj</td>
<td>application/vnd.umajin</td>
</tr>
<tr>
<td>unityweb</td>
<td>application/vnd.unity</td>
</tr>
<tr>
<td>uoml</td>
<td>application/vnd.uoml+xml</td>
</tr>
<tr>
<td>uri/uris/urls</td>
<td>text/uri-list</td>
</tr>
<tr>
<td>ustar</td>
<td>application/x-ustar</td>
</tr>
<tr>
<td>utz</td>
<td>application/vnd.uiq.theme</td>
</tr>
<tr>
<td>uu</td>
<td>text/x-uuencode</td>
</tr>
<tr>
<td>uva/uvva</td>
<td>audio/vnd.dece.audio</td>
</tr>
<tr>
<td>uvf/uvvf/uvd/uvvd</td>
<td>application/vnd.dece.data</td>
</tr>
<tr>
<td>uvh/uvvh</td>
<td>video/vnd.dece.hd</td>
</tr>
<tr>
<td>uvi/uvvi/uvg/uvvg</td>
<td>image/vnd.dece.graphic</td>
</tr>
<tr>
<td>uvm/uvvm</td>
<td>video/vnd.dece.mobile</td>
</tr>
<tr>
<td>uvp/uvvp</td>
<td>video/vnd.dece.pd</td>
</tr>
<tr>
<td>uvs/uvvs</td>
<td>video/vnd.dece.sd</td>
</tr>
<tr>
<td>uvt/uvvt</td>
<td>application/vnd.dece.ttml+xml</td>
</tr>
<tr>
<td>uvu/uvvu</td>
<td>video/vnd.uvvu.mp4</td>
</tr>
<tr>
<td>uvv/uvvv</td>
<td>video/vnd.dece.video</td>
</tr>
<tr>
<td>uvx/uvvx</td>
<td>application/vnd.dece.unspecified</td>
</tr>
<tr>
<td>uvz/uvvz</td>
<td>application/vnd.dece.zip</td>
</tr>
<tr>
<td>vcard</td>
<td>text/vcard</td>
</tr>
<tr>
<td>vcd</td>
<td>application/x-cdlink</td>
</tr>
<tr>
<td>vcf</td>
<td>text/x-vcard</td>
</tr>
<tr>
<td>vcg</td>
<td>application/vnd.groove-vcard</td>
</tr>
<tr>
<td>vcs</td>
<td>text/x-vcalendar</td>
</tr>
<tr>
<td>vcx</td>
<td>application/vnd.vcx</td>
</tr>
<tr>
<td>vis</td>
<td>application/vnd.visionary</td>
</tr>
<tr>
<td>viv</td>
<td>video/vnd.vivo</td>
</tr>
<tr>
<td>vob</td>
<td>video/x-ms-vob</td>
</tr>
<tr>
<td>vsd/vst/vss/vsw</td>
<td>application/vnd.visio</td>
</tr>
<tr>
<td>vsf</td>
<td>application/vnd.vsf</td>
</tr>
<tr>
<td>vtu</td>
<td>model/vnd.vtu</td>
</tr>
<tr>
<td>vxml</td>
<td>application/voicexml+xml</td>
</tr>
<tr>
<td>wad</td>
<td>application/x-doom</td>
</tr>
<tr>
<td>wav</td>
<td>audio/x-wav</td>
</tr>
<tr>
<td>wax</td>
<td>audio/x-ms-wax</td>
</tr>
<tr>
<td>wbmp</td>
<td>image/vnd.wap.wbmp</td>
</tr>
<tr>
<td>wbs</td>
<td>application/vnd.criticaltools.wbs+xml</td>
</tr>
<tr>
<td>wbxml</td>
<td>application/vnd.wap.wbxml</td>
</tr>
<tr>
<td>wdp</td>
<td>image/vnd.ms-photo</td>
</tr>
<tr>
<td>weba</td>
<td>audio/webm</td>
</tr>
<tr>
<td>webm</td>
<td>video/webm</td>
</tr>
<tr>
<td>webp</td>
<td>image/webp</td>
</tr>
<tr>
<td>wg</td>
<td>application/vnd.pmi.widget</td>
</tr>
<tr>
<td>wgt</td>
<td>application/widget</td>
</tr>
<tr>
<td>wm</td>
<td>video/x-ms-wm</td>
</tr>
<tr>
<td>wma</td>
<td>audio/x-ms-wma</td>
</tr>
<tr>
<td>wmd</td>
<td>application/x-ms-wmd</td>
</tr>
<tr>
<td>wmf/wmz/emf/emz</td>
<td>application/x-msmetafile</td>
</tr>
<tr>
<td>wml</td>
<td>text/vnd.wap.wml</td>
</tr>
<tr>
<td>wmlc</td>
<td>application/vnd.wap.wmlc</td>
</tr>
<tr>
<td>wmls</td>
<td>text/vnd.wap.wmlscript</td>
</tr>
<tr>
<td>wmlsc</td>
<td>application/vnd.wap.wmlscriptc</td>
</tr>
<tr>
<td>wmv</td>
<td>video/x-ms-wmv</td>
</tr>
<tr>
<td>wmx</td>
<td>video/x-ms-wmx</td>
</tr>
<tr>
<td>wmz</td>
<td>application/x-ms-wmz</td>
</tr>
<tr>
<td>woff</td>
<td>font/woff</td>
</tr>
<tr>
<td>woff2</td>
<td>font/woff2</td>
</tr>
<tr>
<td>wpd</td>
<td>application/vnd.wordperfect</td>
</tr>
<tr>
<td>wpl</td>
<td>application/vnd.ms-wpl</td>
</tr>
<tr>
<td>wps/wks/wcm/wdb</td>
<td>application/vnd.ms-works</td>
</tr>
<tr>
<td>wqd</td>
<td>application/vnd.wqd</td>
</tr>
<tr>
<td>wri</td>
<td>application/x-mswrite</td>
</tr>
<tr>
<td>wrl/vrml</td>
<td>model/vrml</td>
</tr>
<tr>
<td>wsdl</td>
<td>application/wsdl+xml</td>
</tr>
<tr>
<td>wspolicy</td>
<td>application/wspolicy+xml</td>
</tr>
<tr>
<td>wtb</td>
<td>application/vnd.webturbo</td>
</tr>
<tr>
<td>wvx</td>
<td>video/x-ms-wvx</td>
</tr>
<tr>
<td>x3d/x3dz</td>
<td>model/x3d+xml</td>
</tr>
<tr>
<td>x3db/x3dbz</td>
<td>model/x3d+binary</td>
</tr>
<tr>
<td>x3dv/x3dvz</td>
<td>model/x3d+vrml</td>
</tr>
<tr>
<td>xaml</td>
<td>application/xaml+xml</td>
</tr>
<tr>
<td>xap</td>
<td>application/x-silverlight-app</td>
</tr>
<tr>
<td>xar</td>
<td>application/vnd.xara</td>
</tr>
<tr>
<td>xbap</td>
<td>application/x-ms-xbap</td>
</tr>
<tr>
<td>xbd</td>
<td>application/vnd.fujixerox.docuworks.binder</td>
</tr>
<tr>
<td>xbm</td>
<td>image/x-xbitmap</td>
</tr>
<tr>
<td>xdf</td>
<td>application/xcap-diff+xml</td>
</tr>
<tr>
<td>xdm</td>
<td>application/vnd.syncml.dm+xml</td>
</tr>
<tr>
<td>xdp</td>
<td>application/vnd.adobe.xdp+xml</td>
</tr>
<tr>
<td>xdssc</td>
<td>application/dssc+xml</td>
</tr>
<tr>
<td>xdw</td>
<td>application/vnd.fujixerox.docuworks</td>
</tr>
<tr>
<td>xenc</td>
<td>application/xenc+xml</td>
</tr>
<tr>
<td>xer</td>
<td>application/patch-ops-error+xml</td>
</tr>
<tr>
<td>xfdf</td>
<td>application/vnd.adobe.xfdf</td>
</tr>
<tr>
<td>xfdl</td>
<td>application/vnd.xfdl</td>
</tr>
<tr>
<td>xhtml/xht</td>
<td>application/xhtml+xml</td>
</tr>
<tr>
<td>xif</td>
<td>image/vnd.xiff</td>
</tr>
<tr>
<td>xlam</td>
<td>application/vnd.ms-excel.addin.macroenabled.12</td>
</tr>
<tr>
<td>xlf</td>
<td>application/x-xliff+xml</td>
</tr>
<tr>
<td>xls/xlm/xla/xlc/xlt/xlw</td>
<td>application/vnd.ms-excel</td>
</tr>
<tr>
<td>xlsb</td>
<td>application/vnd.ms-excel.sheet.binary.macroenabled.12</td>
</tr>
<tr>
<td>xlsm</td>
<td>application/vnd.ms-excel.sheet.macroenabled.12</td>
</tr>
<tr>
<td>xlsx</td>
<td>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</td>
</tr>
<tr>
<td>xltm</td>
<td>application/vnd.ms-excel.template.macroenabled.12</td>
</tr>
<tr>
<td>xltx</td>
<td>application/vnd.openxmlformats-officedocument.spreadsheetml.template</td>
</tr>
<tr>
<td>xm</td>
<td>audio/xm</td>
</tr>
<tr>
<td>xml/xsl</td>
<td>application/xml</td>
</tr>
<tr>
<td>xo</td>
<td>application/vnd.olpc-sugar</td>
</tr>
<tr>
<td>xop</td>
<td>application/xop+xml</td>
</tr>
<tr>
<td>xpi</td>
<td>application/x-xpinstall</td>
</tr>
<tr>
<td>xpl</td>
<td>application/xproc+xml</td>
</tr>
<tr>
<td>xpm</td>
<td>image/x-xpixmap</td>
</tr>
<tr>
<td>xpr</td>
<td>application/vnd.is-xpr</td>
</tr>
<tr>
<td>xps</td>
<td>application/vnd.ms-xpsdocument</td>
</tr>
<tr>
<td>xpw/xpx</td>
<td>application/vnd.intercon.formnet</td>
</tr>
<tr>
<td>xslt</td>
<td>application/xslt+xml</td>
</tr>
<tr>
<td>xsm</td>
<td>application/vnd.syncml+xml</td>
</tr>
<tr>
<td>xspf</td>
<td>application/xspf+xml</td>
</tr>
<tr>
<td>xul</td>
<td>application/vnd.mozilla.xul+xml</td>
</tr>
<tr>
<td>xwd</td>
<td>image/x-xwindowdump</td>
</tr>
<tr>
<td>xyz</td>
<td>chemical/x-xyz</td>
</tr>
<tr>
<td>xz</td>
<td>application/x-xz</td>
</tr>
<tr>
<td>yang</td>
<td>application/yang</td>
</tr>
<tr>
<td>yin</td>
<td>application/yin+xml</td>
</tr>
<tr>
<td>z1/z2/z3/z4/z5/z6/z7/z8</td>
<td>application/x-zmachine</td>
</tr>
<tr>
<td>zaz</td>
<td>application/vnd.zzazz.deck+xml</td>
</tr>
<tr>
<td>zip</td>
<td>application/zip</td>
</tr>
<tr>
<td>zir/zirz</td>
<td>application/vnd.zul</td>
</tr>
<tr>
<td>zmm</td>
<td>application/vnd.handheld-entertainment+xml</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>文件Content-type类型对照表</tag>
        <tag>content-type</tag>
        <tag>Mime-Type</tag>
        <tag>文件扩展</tag>
        <tag>扩展名</tag>
        <tag>后缀</tag>
        <tag>后缀名</tag>
        <tag>文件后缀</tag>
      </tags>
  </entry>
</search>
